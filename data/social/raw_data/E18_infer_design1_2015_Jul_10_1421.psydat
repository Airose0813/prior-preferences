ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E18_infer_design1_2015_Jul_10_1421
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x1eI\xaf&(\xfeM@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_10_1421
p67
sVparticipant
p68
VE18
p69
sVglasses
p70
Vn
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F0.80013046076237515
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F37.915940617545857
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P12'
tbsg70
Vn
sa(dp96
g64
g65
sg20
F14.784000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F0.9399999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'\r\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p103
sg21
F1.3999999999999999
sg70
Vn
sa(dp104
g64
g65
sg20
F5.617
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F0.87999999999999967
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x08\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p110
sg21
F1.2
sg70
Vn
sa(dp111
g64
g65
sg20
F6.0510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F0.83999999999999897
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'%\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p117
sg21
F1.8999999999999999
sg70
Vn
sa(dp118
g64
g65
sg20
F6.4509999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0.73999999999999977
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'&\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V50-polo.png
p124
sg21
F1.1000000000000001
sg70
Vn
sa(dp125
g64
g65
sg20
F5.9009999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F1.3999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\x0f\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p131
sg21
F1.3999999999999999
sg70
Vn
sa(dp132
g64
g65
sg20
F7.9340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0.79999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x10\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V22-daim.png
p138
sg21
F2
sg70
Vn
sa(dp139
g64
g65
sg20
F13.951000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F0.99999999999999911
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x18\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p145
sg21
F1.8999999999999999
sg70
Vn
sa(dp146
g64
g65
sg20
F4.9509999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F0.69999999999999885
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\n\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p152
sg21
F2
sg70
Vn
sa(dp153
g64
g65
sg20
F7.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F1.4199999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x1f\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p159
sg21
F1.8
sg70
Vn
sa(dp160
g64
g65
sg20
F3.851
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F1.0799999999999992
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'$\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V48-twix.png
p166
sg21
F1.8999999999999999
sg70
Vn
sa(dp167
g64
g65
sg20
F8.1010000000000009
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F1.52
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x1b\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p173
sg21
F1.6000000000000001
sg70
Vn
sa(dp174
g64
g65
sg20
F4.4509999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0.59999999999999942
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S' \x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p180
sg21
F1.2
sg70
Vn
sa(dp181
g64
g65
sg20
F4.601
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F1.2399999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x17\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p187
sg21
F1.6000000000000001
sg70
Vn
sa(dp188
g64
g65
sg20
F9.7669999999999995
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0.83999999999999941
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\x14\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p194
sg21
F1.3999999999999999
sg70
Vn
sa(dp195
g64
g65
sg20
F3.351
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F1.2599999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x1d\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V40-sardines.png
p201
sg21
F1.6000000000000001
sg70
Vn
sa(dp202
g64
g65
sg20
F12.6
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F0.83999999999999986
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\x11\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p208
sg21
F1
sg70
Vn
sa(dp209
g64
g65
sg20
F6.851
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F1.5800000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'#\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p215
sg21
F1
sg70
Vn
sa(dp216
g64
g65
sg20
F5.9340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F0.77999999999999958
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x1e\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p222
sg21
F1.3
sg70
Vn
sa(dp223
g64
g65
sg20
F3.4340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0.79999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\x19\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p229
sg21
F1.3999999999999999
sg70
Vn
sa(dp230
g64
g65
sg20
F4.734
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F1.3999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x1a\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V35-raisins.png
p236
sg21
F1.3999999999999999
sg70
Vn
sa(dp237
g64
g65
sg20
F3.4670000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F1.2
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x0b\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p243
sg21
F1.2
sg70
Vn
sa(dp244
g64
g65
sg20
F4.2510000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F0.67999999999999905
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\x15\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V29-beans.png
p250
sg21
F1.8
sg70
Vn
sa(dp251
g64
g65
sg20
F4.7009999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F1.0999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'\x01\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p257
sg21
F1.3
sg70
Vn
sa(dp258
g64
g65
sg20
F3.7669999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F1.3399999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\x0c\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V18-mms.png
p264
sg21
F1.8
sg70
Vn
sa(dp265
g64
g65
sg20
F7.7670000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F0.85999999999999899
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\t\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p271
sg21
F1.8999999999999999
sg70
Vn
sa(dp272
g64
g65
sg20
F7.3010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F0.87999999999999967
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x1c\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p278
sg21
F1.3
sg70
Vn
sa(dp279
g64
g65
sg20
F4.5510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F0.71999999999999975
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\x0e\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p285
sg21
F1
sg70
Vn
sa(dp286
g64
g65
sg20
F5.0010000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0.85999999999999988
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'!\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V44-crunch.png
p292
sg21
F1.1000000000000001
sg70
Vn
sa(dp293
g64
g65
sg20
F4.617
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0.69999999999999907
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x16\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p299
sg21
F1.8
sg70
Vn
sa(dp300
g64
g65
sg20
F2.5169999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F0.85999999999999965
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\x12\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p306
sg21
F1.3
sg70
Vn
sa(dp307
g64
g65
sg20
F6.0170000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F0.89999999999999925
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'"\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p313
sg21
F1.8
sg70
Vn
sa(dp314
g64
g65
sg20
F4.2839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F0.81999999999999917
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'\x13\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p320
sg21
F1.7
sg70
Vn
sa(dp321
g64
g65
sg20
F4.101
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F1.2999999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'\x00\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p327
sg21
F1.8999999999999999
sg70
Vn
sa(dp328
g64
g65
sg20
F4.3840000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F0.43999999999999861
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\x05\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p334
sg21
F1.8999999999999999
sg70
Vn
sa(dp335
g64
g65
sg20
F5.6840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F0.97999999999999932
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x04\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p341
sg21
F1.8
sg70
Vn
sa(dp342
g64
g65
sg20
F4.6509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F0.91999999999999993
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x02\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p348
sg21
F1.1000000000000001
sg70
Vn
sa(dp349
g64
g65
sg20
F6.5170000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F1.3600000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x06\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V7-olives.png
p355
sg21
F1
sg70
Vn
sa(dp356
g64
g65
sg20
F4.1669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0.31999999999999873
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x07\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p362
sg21
F1.7
sg70
Vn
sa(dp363
g64
g65
sg20
F3.8839999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0.87999999999999989
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S"'\x00\x00\x00"
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V51-mars.png
p369
sg21
F1.1000000000000001
sg70
Vn
sa(dp370
g64
g65
sg20
F7.9669999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0.83999999999999941
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x03\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V4-corn.png
p376
sg21
F1.6000000000000001
sg70
Vn
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F4.9167331894914241
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vn
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p381
sg26
F5.799999999999998
sg28
F4
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'left'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F7.2164474074343161
sg27
F7.6840000000000002
sg70
Vn
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p390
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'right'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F3.9666749154966965
sg27
F2.5339999999999998
sg70
Vn
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'5-pineapple.png'
p399
sg26
F5.1000000000000005
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'right'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F8.1165611044471007
sg27
F7.234
sg70
Vn
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'7-olives.png'
p408
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'left'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F2.6833504011901823
sg27
F3.4340000000000002
sg70
Vn
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'31-hobnobs.png'
p417
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'right'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F3.1167119211950194
sg27
F3.5169999999999999
sg70
Vn
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'44-crunch.png'
p426
sg26
F3.6000000000000005
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'left'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F6.9504015317725134
sg27
F7.3840000000000003
sg70
Vn
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'4-corn.png'
p435
sg26
F4.7000000000000011
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'right'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F15.216410629815073
sg27
F2.9009999999999998
sg70
Vn
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p444
sg26
F4.8000000000000007
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'right'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F3.2672016622345836
sg27
F12.516999999999999
sg70
Vn
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p453
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'left'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F2.6500130574804643
sg27
F2.9670000000000001
sg70
Vn
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'50-polo.png'
p462
sg26
F4.4000000000000012
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'right'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F4.4334601638529421
sg27
F4.2839999999999998
sg70
Vn
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p471
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'right'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F3.0833221194861835
sg27
F3.0169999999999999
sg70
Vn
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'29-beans.png'
p480
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'right'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F2.0333957887633005
sg27
F2.3010000000000002
sg70
Vn
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p489
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'left'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F4.4500240622564888
sg27
F3.351
sg70
Vn
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p498
sg26
F5.4999999999999991
sg28
F4
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'left'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F2.6667782349486515
sg27
F2.9510000000000001
sg70
Vn
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'38-maltesers.png'
p507
sg26
F5.4999999999999982
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'left'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F2.5996510972854594
sg27
F4.6840000000000002
sg70
Vn
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p516
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'right'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F2.4832359629235725
sg27
F2.101
sg70
Vn
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p525
sg26
F3.7000000000000006
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'right'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F2.9833728098783467
sg27
F5.8010000000000002
sg70
Vn
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p534
sg26
F4.4000000000000012
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'right'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F3.7000234920615185
sg27
F2.9670000000000001
sg70
Vn
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'49-yorkie.png'
p543
sg26
F5.4999999999999991
sg28
F4
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'right'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F1.516748356694734
sg27
F3.2509999999999999
sg70
Vn
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p552
sg26
F4.1000000000000014
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F6.0832842014751805
sg27
F2.0009999999999999
sg70
Vn
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'22-daim.png'
p561
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'right'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F1.9838386597202771
sg27
F1.6339999999999999
sg70
Vn
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p570
sg26
F4.9000000000000004
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'right'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F2.8667498392060224
sg27
F2.1339999999999999
sg70
Vn
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p579
sg26
F5.5999999999999996
sg28
F3
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'left'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F3.5333741213289613
sg27
F7.4509999999999996
sg70
Vn
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'48-twix.png'
p588
sg26
F5.4000000000000004
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'left'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F1.8167040524931508
sg27
F2.484
sg70
Vn
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p597
sg26
F4.0999999999999996
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'right'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F16.683068724540135
sg27
F5.0839999999999996
sg70
Vn
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p606
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'left'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F2.1167067894330103
sg27
F1.6839999999999999
sg70
Vn
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'25-kitkat.png'
p615
sg26
F5.2999999999999998
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'left'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F5.7999836353847058
sg27
F8.7840000000000007
sg70
Vn
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'46-pistachios.png'
p624
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'left'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F1.8000218384931941
sg27
F1.6839999999999999
sg70
Vn
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p633
sg26
F5.4999999999999991
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'right'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F2.8500422514971433
sg27
F1.851
sg70
Vn
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p642
sg26
F5.4000000000000004
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'right'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F3.3834237853679952
sg27
F2.2669999999999999
sg70
Vn
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p651
sg26
F4.4000000000000012
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'right'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F1.9832673236833216
sg27
F2.3839999999999999
sg70
Vn
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'18-mms.png'
p660
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'left'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F2.2333688185099163
sg27
F2.351
sg70
Vn
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p669
sg26
F5.2000000000000002
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'left'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F2.2000691077137162
sg27
F2.8170000000000002
sg70
Vn
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'40-sardines.png'
p678
sg26
F5.0000000000000018
sg28
F3
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'left'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F2.3334706554524018
sg27
F3.3340000000000001
sg70
Vn
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p687
sg26
F4.9000000000000021
sg28
F3
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'right'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F2.7166743453017261
sg27
F3.0179999999999998
sg70
Vn
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'35-raisins.png'
p696
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'left'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F1.6334118112608849
sg27
F1.4670000000000001
sg70
Vn
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'51-mars.png'
p705
sg26
F4.2000000000000011
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'left'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F17.016427906743047
sg27
F4.5170000000000003
sg70
Vn
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p714
sg26
F5.1000000000000005
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'left'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F1.9833728098801657
sg27
F4.0339999999999998
sg70
Vn
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p723
sg26
F5.3999999999999995
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'left'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F2.5667297112995584
sg27
F3.6179999999999999
sg70
Vn
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p732
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'left'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F2.3665605342503113
sg27
F2.101
sg70
Vn
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F408.32239431993912
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F12.266626619926683
sg66
g67
sg68
g69
sg70
Vn
sa(dp743
g64
g65
sg82
S'15-walnut_whip.png'
p744
sg83
S'28-maple_pecan.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'28-maple_pecan.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\n\x0e)%\x0b\xa4x'
tRp754
sa(dp755
g64
g65
sg82
S'12-topic.png'
p756
sg83
S'12-topic.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'39-mackerel.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\n\x0e*\x0e\x0b\xb00'
tRp765
sa(dp766
g64
g65
sg82
S'53-cheestrings.png'
p767
sg83
S'53-cheestrings.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'47-picnic.png'
p772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\n\x0e*\x19\x0c\xd9\x10'
tRp776
sa(dp777
g64
g65
sg82
g744
sg83
S'15-walnut_whip.png'
p778
sg56
g57
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p781
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p782
sS'practice_loop.thisIndex'
p783
g60
(g99
S'\x03\x00\x00\x00'
tRp784
sg34
g753
(S'\x07\xdf\x07\n\x0e*$\x00\xea`'
tRp785
sa(dp786
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p787
sg83
S'9-yu_mango_pieces.png'
p788
sg56
g57
sS'practice_loop.thisN'
p789
I4
sS'practice_loop.thisTrialN'
p790
I4
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p791
I0
sg84
S'9-yu_mango_pieces.png'
p792
sg33
g787
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p793
sS'practice_loop.thisIndex'
p794
g60
(g99
S'\x04\x00\x00\x00'
tRp795
sg34
g753
(S'\x07\xdf\x07\n\x0e*+\x0c\xe4\xc8'
tRp796
sa(dp797
g64
g65
sg82
S'11-snickers.png'
p798
sg83
S'54-frubes_yogurt.png'
p799
sg56
g57
sS'practice_loop.thisN'
p800
I5
sS'practice_loop.thisTrialN'
p801
I5
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p802
I0
sg84
S'54-frubes_yogurt.png'
p803
sg33
g798
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p804
sS'practice_loop.thisIndex'
p805
g60
(g99
S'\x05\x00\x00\x00'
tRp806
sg34
g753
(S'\x07\xdf\x07\n\x0e+\x02\x04\x8f\xf8'
tRp807
sa(dp808
g64
g65
sg82
S'32-hovis_crackers.png'
p809
sg83
S'32-hovis_crackers.png'
p810
sg56
g57
sS'practice_loop.thisN'
p811
I6
sS'practice_loop.thisTrialN'
p812
I6
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p813
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p814
sg33
g809
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p815
sS'practice_loop.thisIndex'
p816
g60
(g99
S'\x06\x00\x00\x00'
tRp817
sg34
g753
(S'\x07\xdf\x07\n\x0e+\x0e\x08\x8fh'
tRp818
sa(dp819
g64
g65
sg82
g787
sg83
S'37-nakd_cashew_cookie.png'
p820
sg56
g57
sS'practice_loop.thisN'
p821
I7
sS'practice_loop.thisTrialN'
p822
I7
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p823
I0
sg84
g792
sg33
g792
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p824
sS'practice_loop.thisIndex'
p825
g60
(g99
S'\x07\x00\x00\x00'
tRp826
sg34
g753
(S'\x07\xdf\x07\n\x0e+\x17\x08\xd1\xd0'
tRp827
sa(dp828
g64
g65
sg82
g809
sg83
S'24-food_doctor_apple_walnut_bar.png'
p829
sg56
g57
sS'practice_loop.thisN'
p830
I8
sS'practice_loop.thisTrialN'
p831
I8
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p832
I0
sg84
g814
sg33
g809
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p833
sS'practice_loop.thisIndex'
p834
g60
(g99
S'\x08\x00\x00\x00'
tRp835
sg34
g753
(S'\x07\xdf\x07\n\x0e+#\r\xc3p'
tRp836
sa(dp837
g64
g65
sg82
S'52-aero_mousse.png'
p838
sg83
S'52-aero_mousse.png'
p839
sg56
g57
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p842
I0
sg84
S'14-discos_salt_vinegar.png'
p843
sg33
g838
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\n\x0e+-\ty\xc8'
tRp847
sa(dp848
g64
g65
sg82
g767
sg83
S'47-picnic.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\n\x0e+5\x04E\xc0'
tRp856
sa(dp857
g64
g65
sg82
g838
sg83
S'14-discos_salt_vinegar.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g843
sg33
g843
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\n\x0e,\x01\r]\xe0'
tRp865
sa(dp866
g64
g65
sg82
g756
sg83
S'39-mackerel.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\n\x0e,\t\x03\xe4\x18'
tRp874
sa(dp875
g64
g65
sg82
g798
sg83
S'11-snickers.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g803
sg33
g798
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\n\x0e,\x11\x02\x07\x88'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F238.66077435989973
sg66
g67
sg68
g69
sg70
Vn
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vn
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'3-ellas_strawberries_apples.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'left'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'3-ellas_strawberries_apples.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'13-mccoys_steak_crisps.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'13-mccoys_steak_crisps.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vn
sS'block_loop.thisTrialN'
p912
I0
sg39
F3.2665205635348684
sg34
g753
(S'\x07\xdf\x07\n\x0e13\x0e\x1dH'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'45-chewy_nougat_redo.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'right'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'45-chewy_nougat_redo.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'41-peanuts_redo.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg909
S'41-peanuts_redo.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vn
sS'block_loop.thisTrialN'
p929
I0
sg39
F8.5664588683648617
sg34
g753
(S'\x07\xdf\x07\n\x0e2\x00\x03k\x00'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'50-polo.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'right'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'48-twix.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'48-twix.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p943
I0
sg909
S'50-polo.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vn
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.3499028386613645
sg34
g753
(S'\x07\xdf\x07\n\x0e2\r\x0cc\xe0'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'30-spaghetti_hoops.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'right'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'19-caramello_redo.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'19-caramello_redo.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p960
I0
sg909
S'30-spaghetti_hoops.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vn
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.2999628232428222
sg34
g753
(S'\x07\xdf\x07\n\x0e2\x14\x03,\x80'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'6-sour_patch_kids.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'right'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'6-sour_patch_kids.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'38-maltesers.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
S'38-maltesers.png'
p977
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p978
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vn
sS'block_loop.thisTrialN'
p980
I0
sg39
F2.0995453259893111
sg34
g753
(S'\x07\xdf\x07\n\x0e2\x1a\x08AH'
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p984
sS'block_loop.thisIndex'
p985
g889
sg38
S'left'
p986
sg59
g63
sS'trial_loop.thisN'
p987
I5
sg33
S'36-fig_rolls.png'
p988
sg64
g65
sS'trial_loop.thisIndex'
p989
g60
(g99
S'\x05\x00\x00\x00'
tRp990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p991
I0
sg904
S'36-fig_rolls.png'
p992
sS'block_loop.thisRepN'
p993
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p994
I0
sg909
S'34-hula_hoops_bbq_beef_redo.png'
p995
sg55
g11
sS'block_loop.thisTrial'
p996
Nsg70
Vn
sS'block_loop.thisTrialN'
p997
I0
sg39
F4.7498297966012615
sg34
g753
(S'\x07\xdf\x07\n\x0e2!\n=\x18'
tRp998
sa(dp999
S'trial_loop.thisTrialN'
p1000
I6
sg895
S'17-jacobs_mini_cheddars_redo.png'
p1001
sS'block_loop.thisIndex'
p1002
g889
sg38
S'left'
p1003
sg59
g63
sS'trial_loop.thisN'
p1004
I6
sg33
S'17-jacobs_mini_cheddars_redo.png'
p1005
sg64
g65
sS'trial_loop.thisIndex'
p1006
g60
(g99
S'\x06\x00\x00\x00'
tRp1007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1008
I0
sg904
S'8-liquorice_catherine_wheels.png'
p1009
sS'block_loop.thisRepN'
p1010
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1011
I0
sg909
S'8-liquorice_catherine_wheels.png'
p1012
sg55
g11
sS'block_loop.thisTrial'
p1013
Nsg70
Vn
sS'block_loop.thisTrialN'
p1014
I0
sg39
F4.0497968963099993
sg34
g753
(S'\x07\xdf\x07\n\x0e2+\x06\xe5\xa0'
tRp1015
sa(dp1016
S'trial_loop.thisTrialN'
p1017
I7
sg895
S'48-twix.png'
p1018
sS'block_loop.thisIndex'
p1019
g889
sg38
S'left'
p1020
sg59
g63
sS'trial_loop.thisN'
p1021
I7
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1022
g60
(g99
S'\x07\x00\x00\x00'
tRp1023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1024
I0
sg904
S'50-polo.png'
p1025
sS'block_loop.thisRepN'
p1026
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1027
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1028
Nsg70
Vn
sS'block_loop.thisTrialN'
p1029
I0
sg39
F1.4166430985787883
sg34
g753
(S'\x07\xdf\x07\n\x0e24\x08\x1a8'
tRp1030
sa(dp1031
S'trial_loop.thisTrialN'
p1032
I8
sg895
S'25-kitkat.png'
p1033
sS'block_loop.thisIndex'
p1034
g889
sg38
S'left'
p1035
sg59
g63
sS'trial_loop.thisN'
p1036
I8
sg33
S'31-hobnobs.png'
p1037
sg64
g65
sS'trial_loop.thisIndex'
p1038
g60
(g99
S'\x08\x00\x00\x00'
tRp1039
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1040
I0
sg904
S'31-hobnobs.png'
p1041
sS'block_loop.thisRepN'
p1042
I0
sg907
g1037
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1043
I0
sg909
S'25-kitkat.png'
p1044
sg55
g11
sS'block_loop.thisTrial'
p1045
Nsg70
Vn
sS'block_loop.thisTrialN'
p1046
I0
sg39
F2.3498546571318002
sg34
g753
(S'\x07\xdf\x07\n\x0e2:\x0f\x17H'
tRp1047
sa(dp1048
S'trial_loop.thisTrialN'
p1049
I9
sg895
S'20-fruit_pastilles.png'
p1050
sS'block_loop.thisIndex'
p1051
g889
sg38
S'left'
p1052
sg59
g63
sS'trial_loop.thisN'
p1053
I9
sg33
S'2-steamed_puddings.png'
p1054
sg64
g65
sS'trial_loop.thisIndex'
p1055
g60
(g99
S'\t\x00\x00\x00'
tRp1056
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1057
I0
sg904
S'2-steamed_puddings.png'
p1058
sS'block_loop.thisRepN'
p1059
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1060
I0
sg909
S'20-fruit_pastilles.png'
p1061
sg55
g11
sS'block_loop.thisTrial'
p1062
Nsg70
Vn
sS'block_loop.thisTrialN'
p1063
I0
sg39
F2.716631295530533
sg34
g753
(S'\x07\xdf\x07\n\x0e3\x06\x05\x9d\x80'
tRp1064
sa(dp1065
S'trial_loop.thisTrialN'
p1066
I10
sg895
S'13-mccoys_steak_crisps.png'
p1067
sS'block_loop.thisIndex'
p1068
g889
sg38
S'right'
p1069
sg59
g63
sS'trial_loop.thisN'
p1070
I10
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1071
g60
(g99
S'\n\x00\x00\x00'
tRp1072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1073
I0
sg904
S'3-ellas_strawberries_apples.png'
p1074
sS'block_loop.thisRepN'
p1075
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1076
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1077
Nsg70
Vn
sS'block_loop.thisTrialN'
p1078
I0
sg39
F1.3332283223026025
sg34
g753
(S'\x07\xdf\x07\n\x0e3\x0e\x01\xd8\xa8'
tRp1079
sa(dp1080
S'trial_loop.thisTrialN'
p1081
I11
sg895
S'2-steamed_puddings.png'
p1082
sS'block_loop.thisIndex'
p1083
g889
sg38
S'left'
p1084
sg59
g63
sS'trial_loop.thisN'
p1085
I11
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p1086
g60
(g99
S'\x0b\x00\x00\x00'
tRp1087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1088
I0
sg904
S'20-fruit_pastilles.png'
p1089
sS'block_loop.thisRepN'
p1090
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1091
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p1092
Nsg70
Vn
sS'block_loop.thisTrialN'
p1093
I0
sg39
F1.8165706267136557
sg34
g753
(S'\x07\xdf\x07\n\x0e3\x14\x07jp'
tRp1094
sa(dp1095
S'trial_loop.thisTrialN'
p1096
I12
sg895
S'18-mms.png'
p1097
sS'block_loop.thisIndex'
p1098
g889
sg38
S'left'
p1099
sg59
g63
sS'trial_loop.thisN'
p1100
I12
sg33
S'18-mms.png'
p1101
sg64
g65
sS'trial_loop.thisIndex'
p1102
g60
(g99
S'\x0c\x00\x00\x00'
tRp1103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1104
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1105
sS'block_loop.thisRepN'
p1106
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1107
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p1108
sg55
g11
sS'block_loop.thisTrial'
p1109
Nsg70
Vn
sS'block_loop.thisTrialN'
p1110
I0
sg39
F1.6000117460316687
sg34
g753
(S'\x07\xdf\x07\n\x0e3\x1b\x05\x1c\x98'
tRp1111
sa(dp1112
S'trial_loop.thisTrialN'
p1113
I13
sg895
g1033
sS'block_loop.thisIndex'
p1114
g889
sg38
S'right'
p1115
sg59
g63
sS'trial_loop.thisN'
p1116
I13
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p1117
g60
(g99
S'\r\x00\x00\x00'
tRp1118
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1119
I0
sg904
g1041
sS'block_loop.thisRepN'
p1120
I0
sg907
g1037
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1121
I0
sg909
g1044
sg55
g11
sS'block_loop.thisTrial'
p1122
Nsg70
Vn
sS'block_loop.thisTrialN'
p1123
I0
sg39
F2.1498468454483373
sg34
g753
(S'\x07\xdf\x07\n\x0e3!\x0e\xb9\x88'
tRp1124
sa(dp1125
S'trial_loop.thisTrialN'
p1126
I14
sg895
g1067
sS'block_loop.thisIndex'
p1127
g889
sg38
S'right'
p1128
sg59
g63
sS'trial_loop.thisN'
p1129
I14
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1130
g60
(g99
S'\x0e\x00\x00\x00'
tRp1131
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1132
I0
sg904
g1074
sS'block_loop.thisRepN'
p1133
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1134
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1135
Nsg70
Vn
sS'block_loop.thisTrialN'
p1136
I0
sg39
F1.6999445199653564
sg34
g753
(S'\x07\xdf\x07\n\x0e3)\x02a`'
tRp1137
sa(dp1138
S'trial_loop.thisTrialN'
p1139
I15
sg895
S'10-bounty_redo.png'
p1140
sS'block_loop.thisIndex'
p1141
g889
sg38
S'left'
p1142
sg59
g63
sS'trial_loop.thisN'
p1143
I15
sg33
S'10-bounty_redo.png'
p1144
sg64
g65
sS'trial_loop.thisIndex'
p1145
g60
(g99
S'\x0f\x00\x00\x00'
tRp1146
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1147
I0
sg904
S'4-corn.png'
p1148
sS'block_loop.thisRepN'
p1149
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1150
I0
sg909
S'4-corn.png'
p1151
sg55
g11
sS'block_loop.thisTrial'
p1152
Nsg70
Vn
sS'block_loop.thisTrialN'
p1153
I0
sg39
F1.4996886731787527
sg34
g753
(S'\x07\xdf\x07\n\x0e3/\rm\x80'
tRp1154
sa(dp1155
S'trial_loop.thisTrialN'
p1156
I16
sg895
g1097
sS'block_loop.thisIndex'
p1157
g889
sg38
S'left'
p1158
sg59
g63
sS'trial_loop.thisN'
p1159
I16
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p1160
g60
(g99
S'\x10\x00\x00\x00'
tRp1161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1162
I0
sg904
g1105
sS'block_loop.thisRepN'
p1163
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1164
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p1165
Nsg70
Vn
sS'block_loop.thisTrialN'
p1166
I0
sg39
F3.7665008917865634
sg34
g753
(S'\x07\xdf\x07\n\x0e36\x06Y\x00'
tRp1167
sa(dp1168
S'trial_loop.thisTrialN'
p1169
I17
sg895
S'36-fig_rolls.png'
p1170
sS'block_loop.thisIndex'
p1171
g889
sg38
S'left'
p1172
sg59
g63
sS'trial_loop.thisN'
p1173
I17
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1174
g60
(g99
S'\x11\x00\x00\x00'
tRp1175
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1176
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1177
sS'block_loop.thisRepN'
p1178
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1179
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1180
Nsg70
Vn
sS'block_loop.thisTrialN'
p1181
I0
sg39
F2.7667355272933492
sg34
g753
(S'\x07\xdf\x07\n\x0e4\x03\x03G\xd8'
tRp1182
sa(dp1183
S'trial_loop.thisTrialN'
p1184
I18
sg895
S'41-peanuts_redo.png'
p1185
sS'block_loop.thisIndex'
p1186
g889
sg38
S'right'
p1187
sg59
g63
sS'trial_loop.thisN'
p1188
I18
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p1189
g60
(g99
S'\x12\x00\x00\x00'
tRp1190
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1191
I0
sg904
S'45-chewy_nougat_redo.png'
p1192
sS'block_loop.thisRepN'
p1193
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1194
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1195
Nsg70
Vn
sS'block_loop.thisTrialN'
p1196
I0
sg39
F1.4166448091636994
sg34
g753
(S'\x07\xdf\x07\n\x0e4\x0b\x00:\x98'
tRp1197
sa(dp1198
S'trial_loop.thisTrialN'
p1199
I19
sg895
g1097
sS'block_loop.thisIndex'
p1200
g889
sg38
S'left'
p1201
sg59
g63
sS'trial_loop.thisN'
p1202
I19
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p1203
g60
(g99
S'\x13\x00\x00\x00'
tRp1204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1205
I0
sg904
g1105
sS'block_loop.thisRepN'
p1206
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1207
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p1208
Nsg70
Vn
sS'block_loop.thisTrialN'
p1209
I0
sg39
F1.4499031807790743
sg34
g753
(S'\x07\xdf\x07\n\x0e4\x11\x077\xa8'
tRp1210
sa(dp1211
S'trial_loop.thisTrialN'
p1212
I20
sg895
S'22-daim.png'
p1213
sS'block_loop.thisIndex'
p1214
g889
sg38
S'right'
p1215
sg59
g63
sS'trial_loop.thisN'
p1216
I20
sg33
S'22-daim.png'
p1217
sg64
g65
sS'trial_loop.thisIndex'
p1218
g60
(g99
S'\x14\x00\x00\x00'
tRp1219
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1220
I0
sg904
S'7-olives.png'
p1221
sS'block_loop.thisRepN'
p1222
I0
sg907
g1217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1223
I0
sg909
S'7-olives.png'
p1224
sg55
g11
sS'block_loop.thisTrial'
p1225
Nsg70
Vn
sS'block_loop.thisTrialN'
p1226
I0
sg39
F3.283210760277143
sg34
g753
(S'\x07\xdf\x07\n\x0e4\x17\x0es8'
tRp1227
sa(dp1228
S'trial_loop.thisTrialN'
p1229
I21
sg895
S'21-nakd_banana_crunch.png'
p1230
sS'block_loop.thisIndex'
p1231
g889
sg38
S'left'
p1232
sg59
g63
sS'trial_loop.thisN'
p1233
I21
sg33
S'1-treacle_cookies.png'
p1234
sg64
g65
sS'trial_loop.thisIndex'
p1235
g60
(g99
S'\x15\x00\x00\x00'
tRp1236
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1237
I0
sg904
S'1-treacle_cookies.png'
p1238
sS'block_loop.thisRepN'
p1239
I0
sg907
g1234
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1240
I0
sg909
S'21-nakd_banana_crunch.png'
p1241
sg55
g11
sS'block_loop.thisTrial'
p1242
Nsg70
Vn
sS'block_loop.thisTrialN'
p1243
I0
sg39
F3.116495817041141
sg34
g753
(S'\x07\xdf\x07\n\x0e4 \x03\xffp'
tRp1244
sa(dp1245
S'trial_loop.thisTrialN'
p1246
I22
sg895
S'19-caramello_redo.png'
p1247
sS'block_loop.thisIndex'
p1248
g889
sg38
S'left'
p1249
sg59
g63
sS'trial_loop.thisN'
p1250
I22
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1251
g60
(g99
S'\x16\x00\x00\x00'
tRp1252
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1253
I0
sg904
S'30-spaghetti_hoops.png'
p1254
sS'block_loop.thisRepN'
p1255
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1256
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1257
Nsg70
Vn
sS'block_loop.thisTrialN'
p1258
I0
sg39
F3.1999485113337869
sg34
g753
(S'\x07\xdf\x07\n\x0e4(\x06l\x88'
tRp1259
sa(dp1260
S'trial_loop.thisTrialN'
p1261
I23
sg895
g967
sS'block_loop.thisIndex'
p1262
g889
sg38
S'right'
p1263
sg59
g63
sS'trial_loop.thisN'
p1264
I23
sg33
g977
sg64
g65
sS'trial_loop.thisIndex'
p1265
g60
(g99
S'\x17\x00\x00\x00'
tRp1266
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1267
I0
sg904
g975
sS'block_loop.thisRepN'
p1268
I0
sg907
g977
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1269
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p1270
Nsg70
Vn
sS'block_loop.thisTrialN'
p1271
I0
sg39
F1.3163220214119065
sg34
g753
(S'\x07\xdf\x07\n\x0e40\n\nP'
tRp1272
sa(dp1273
S'trial_loop.thisTrialN'
p1274
I24
sg895
S'8-liquorice_catherine_wheels.png'
p1275
sS'block_loop.thisIndex'
p1276
g889
sg38
S'right'
p1277
sg59
g63
sS'trial_loop.thisN'
p1278
I24
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1279
g60
(g99
S'\x18\x00\x00\x00'
tRp1280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1281
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1282
sS'block_loop.thisRepN'
p1283
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1284
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1285
Nsg70
Vn
sS'block_loop.thisTrialN'
p1286
I0
sg39
F3.5998321344013675
sg34
g753
(S'\x07\xdf\x07\n\x0e47\x00\x1bX'
tRp1287
sa(dp1288
S'trial_loop.thisTrialN'
p1289
I25
sg895
S'29-beans.png'
p1290
sS'block_loop.thisIndex'
p1291
g889
sg38
S'left'
p1292
sg59
g63
sS'trial_loop.thisN'
p1293
I25
sg33
S'46-pistachios.png'
p1294
sg64
g65
sS'trial_loop.thisIndex'
p1295
g60
(g99
S'\x19\x00\x00\x00'
tRp1296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1297
I0
sg904
S'46-pistachios.png'
p1298
sS'block_loop.thisRepN'
p1299
I0
sg907
g1294
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1300
I0
sg909
S'29-beans.png'
p1301
sg55
g11
sS'block_loop.thisTrial'
p1302
Nsg70
Vn
sS'block_loop.thisTrialN'
p1303
I0
sg39
F4.5331480387540068
sg34
g753
(S'\x07\xdf\x07\n\x0e5\x03\t\xac\x90'
tRp1304
sa(dp1305
S'trial_loop.thisTrialN'
p1306
I26
sg895
S'7-olives.png'
p1307
sS'block_loop.thisIndex'
p1308
g889
sg38
S'right'
p1309
sg59
g63
sS'trial_loop.thisN'
p1310
I26
sg33
g1217
sg64
g65
sS'trial_loop.thisIndex'
p1311
g60
(g99
S'\x1a\x00\x00\x00'
tRp1312
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1313
I0
sg904
S'22-daim.png'
p1314
sS'block_loop.thisRepN'
p1315
I0
sg907
g1217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1316
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p1317
Nsg70
Vn
sS'block_loop.thisTrialN'
p1318
I0
sg39
F5.0665041989195743
sg34
g753
(S'\x07\xdf\x07\n\x0e5\r\x02\xfd\xa0'
tRp1319
sa(dp1320
S'trial_loop.thisTrialN'
p1321
I27
sg895
S'16-skips_prawn.png'
p1322
sS'block_loop.thisIndex'
p1323
g889
sg38
S'right'
p1324
sg59
g63
sS'trial_loop.thisN'
p1325
I27
sg33
S'42-mrkipling_lemon_slices.png'
p1326
sg64
g65
sS'trial_loop.thisIndex'
p1327
g60
(g99
S'\x1b\x00\x00\x00'
tRp1328
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1329
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1330
sS'block_loop.thisRepN'
p1331
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1332
I0
sg909
S'16-skips_prawn.png'
p1333
sg55
g11
sS'block_loop.thisTrial'
p1334
Nsg70
Vn
sS'block_loop.thisTrialN'
p1335
I0
sg39
F1.8831657718401402
sg34
g753
(S'\x07\xdf\x07\n\x0e5\x17\x04\xa7h'
tRp1336
sa(dp1337
S'trial_loop.thisTrialN'
p1338
I28
sg895
g1001
sS'block_loop.thisIndex'
p1339
g889
sg38
S'left'
p1340
sg59
g63
sS'trial_loop.thisN'
p1341
I28
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1342
g60
(g99
S'\x1c\x00\x00\x00'
tRp1343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1344
I0
sg904
g1009
sS'block_loop.thisRepN'
p1345
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1346
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1347
Nsg70
Vn
sS'block_loop.thisTrialN'
p1348
I0
sg39
F1.7832689202332404
sg34
g753
(S'\x07\xdf\x07\n\x0e5\x1e\x03K\xc0'
tRp1349
sa(dp1350
S'trial_loop.thisTrialN'
p1351
I29
sg895
g933
sS'block_loop.thisIndex'
p1352
g889
sg38
S'right'
p1353
sg59
g63
sS'trial_loop.thisN'
p1354
I29
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p1355
g60
(g99
S'\x1d\x00\x00\x00'
tRp1356
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1357
I0
sg904
g941
sS'block_loop.thisRepN'
p1358
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1359
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1360
Nsg70
Vn
sS'block_loop.thisTrialN'
p1361
I0
sg39
F1.1832226773658476
sg34
g753
(S'\x07\xdf\x07\n\x0e5%\x00\x80\xe8'
tRp1362
sa(dp1363
S'trial_loop.thisTrialN'
p1364
I30
sg895
g984
sS'block_loop.thisIndex'
p1365
g889
sg38
S'right'
p1366
sg59
g63
sS'trial_loop.thisN'
p1367
I30
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1368
g60
(g99
S'\x1e\x00\x00\x00'
tRp1369
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1370
I0
sg904
g992
sS'block_loop.thisRepN'
p1371
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1372
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1373
Nsg70
Vn
sS'block_loop.thisTrialN'
p1374
I0
sg39
F2.1498790615041798
sg34
g753
(S'\x07\xdf\x07\n\x0e5+\x03\xef\xd0'
tRp1375
sa(dp1376
S'trial_loop.thisTrialN'
p1377
I31
sg895
S'5-pineapple.png'
p1378
sS'block_loop.thisIndex'
p1379
g889
sg38
S'left'
p1380
sg59
g63
sS'trial_loop.thisN'
p1381
I31
sg33
S'40-sardines.png'
p1382
sg64
g65
sS'trial_loop.thisIndex'
p1383
g60
(g99
S'\x1f\x00\x00\x00'
tRp1384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1385
I0
sg904
S'40-sardines.png'
p1386
sS'block_loop.thisRepN'
p1387
I0
sg907
S'5-pineapple.png'
p1388
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1389
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p1390
Nsg70
Vn
sS'block_loop.thisTrialN'
p1391
I0
sg39
F1.7669872686710733
sg34
g753
(S'\x07\xdf\x07\n\x0e52\x06\x9fP'
tRp1392
sa(dp1393
S'trial_loop.thisTrialN'
p1394
I32
sg895
g1213
sS'block_loop.thisIndex'
p1395
g889
sg38
S'left'
p1396
sg59
g63
sS'trial_loop.thisN'
p1397
I32
sg33
g1217
sg64
g65
sS'trial_loop.thisIndex'
p1398
g60
(g99
S' \x00\x00\x00'
tRp1399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1400
I0
sg904
g1221
sS'block_loop.thisRepN'
p1401
I0
sg907
g1217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1402
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p1403
Nsg70
Vn
sS'block_loop.thisTrialN'
p1404
I0
sg39
F3.5831570478439971
sg34
g753
(S'\x07\xdf\x07\n\x0e59\x03\x95\xf8'
tRp1405
sa(dp1406
S'trial_loop.thisTrialN'
p1407
I33
sg895
S'1-treacle_cookies.png'
p1408
sS'block_loop.thisIndex'
p1409
g889
sg38
S'left'
p1410
sg59
g63
sS'trial_loop.thisN'
p1411
I33
sg33
g1234
sg64
g65
sS'trial_loop.thisIndex'
p1412
g60
(g99
S'!\x00\x00\x00'
tRp1413
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1414
I0
sg904
S'21-nakd_banana_crunch.png'
p1415
sS'block_loop.thisRepN'
p1416
I0
sg907
g1234
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1417
I0
sg909
g1241
sg55
g11
sS'block_loop.thisTrial'
p1418
Nsg70
Vn
sS'block_loop.thisTrialN'
p1419
I0
sg39
F1.6832081373759138
sg34
g753
(S'\x07\xdf\x07\n\x0e6\x05\x0c\xec\x98'
tRp1420
sa(dp1421
S'trial_loop.thisTrialN'
p1422
I34
sg895
g1185
sS'block_loop.thisIndex'
p1423
g889
sg38
S'left'
p1424
sg59
g63
sS'trial_loop.thisN'
p1425
I34
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1426
g60
(g99
S'"\x00\x00\x00'
tRp1427
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1428
I0
sg904
g1192
sS'block_loop.thisRepN'
p1429
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1430
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1431
Nsg70
Vn
sS'block_loop.thisTrialN'
p1432
I0
sg39
F8.8829915770693333
sg34
g753
(S'\x07\xdf\x07\n\x0e6\x0c\x08\xb2\x90'
tRp1433
sa(dp1434
S'trial_loop.thisTrialN'
p1435
I35
sg895
S'46-pistachios.png'
p1436
sS'block_loop.thisIndex'
p1437
g889
sg38
S'right'
p1438
sg59
g63
sS'trial_loop.thisN'
p1439
I35
sg33
g1294
sg64
g65
sS'trial_loop.thisIndex'
p1440
g60
(g99
S'#\x00\x00\x00'
tRp1441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1442
I0
sg904
S'29-beans.png'
p1443
sS'block_loop.thisRepN'
p1444
I0
sg907
g1294
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1445
I0
sg909
g1301
sg55
g11
sS'block_loop.thisTrial'
p1446
Nsg70
Vn
sS'block_loop.thisTrialN'
p1447
I0
sg39
F2.1499936708278256
sg34
g753
(S'\x07\xdf\x07\n\x0e6\x1a\x07f\x88'
tRp1448
sa(dp1449
S'trial_loop.thisTrialN'
p1450
I36
sg895
g1170
sS'block_loop.thisIndex'
p1451
g889
sg38
S'left'
p1452
sg59
g63
sS'trial_loop.thisN'
p1453
I36
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1454
g60
(g99
S'$\x00\x00\x00'
tRp1455
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1456
I0
sg904
g1177
sS'block_loop.thisRepN'
p1457
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1458
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1459
Nsg70
Vn
sS'block_loop.thisTrialN'
p1460
I0
sg39
F1.5332566610268259
sg34
g753
(S'\x07\xdf\x07\n\x0e6!\n\x16\x08'
tRp1461
sa(dp1462
S'trial_loop.thisTrialN'
p1463
I37
sg895
g1322
sS'block_loop.thisIndex'
p1464
g889
sg38
S'right'
p1465
sg59
g63
sS'trial_loop.thisN'
p1466
I37
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p1467
g60
(g99
S'%\x00\x00\x00'
tRp1468
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1469
I0
sg904
g1330
sS'block_loop.thisRepN'
p1470
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1471
I0
sg909
g1333
sg55
g11
sS'block_loop.thisTrial'
p1472
Nsg70
Vn
sS'block_loop.thisTrialN'
p1473
I0
sg39
F1.1997897118453693
sg34
g753
(S'\x07\xdf\x07\n\x0e6(\x03~\x88'
tRp1474
sa(dp1475
S'trial_loop.thisTrialN'
p1476
I38
sg895
g1082
sS'block_loop.thisIndex'
p1477
g889
sg38
S'left'
p1478
sg59
g63
sS'trial_loop.thisN'
p1479
I38
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p1480
g60
(g99
S'&\x00\x00\x00'
tRp1481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1482
I0
sg904
g1089
sS'block_loop.thisRepN'
p1483
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1484
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p1485
Nsg70
Vn
sS'block_loop.thisTrialN'
p1486
I0
sg39
F1.3165378404628427
sg34
g753
(S'\x07\xdf\x07\n\x0e6.\x07(\x08'
tRp1487
sa(dp1488
S'trial_loop.thisTrialN'
p1489
I39
sg895
g1322
sS'block_loop.thisIndex'
p1490
g889
sg38
S'right'
p1491
sg59
g63
sS'trial_loop.thisN'
p1492
I39
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p1493
g60
(g99
S"'\x00\x00\x00"
tRp1494
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1495
I0
sg904
g1330
sS'block_loop.thisRepN'
p1496
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1497
I0
sg909
g1333
sg55
g11
sS'block_loop.thisTrial'
p1498
Nsg70
Vn
sS'block_loop.thisTrialN'
p1499
I0
sg39
F1.0998908645524352
sg34
g753
(S'\x07\xdf\x07\n\x0e64\x0c{P'
tRp1500
sa(dp1501
S'trial_loop.thisTrialN'
p1502
I40
sg895
g950
sS'block_loop.thisIndex'
p1503
g889
sg38
S'right'
p1504
sg59
g63
sS'trial_loop.thisN'
p1505
I40
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1506
g60
(g99
S'(\x00\x00\x00'
tRp1507
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1508
I0
sg904
g958
sS'block_loop.thisRepN'
p1509
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1510
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1511
Nsg70
Vn
sS'block_loop.thisTrialN'
p1512
I0
sg39
F3.1999214270435914
sg34
g753
(S'\x07\xdf\x07\n\x0e6:\x0e{\x08'
tRp1513
sa(dp1514
S'trial_loop.thisTrialN'
p1515
I41
sg895
g1067
sS'block_loop.thisIndex'
p1516
g889
sg38
S'right'
p1517
sg59
g63
sS'trial_loop.thisN'
p1518
I41
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1519
g60
(g99
S')\x00\x00\x00'
tRp1520
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1521
I0
sg904
g1074
sS'block_loop.thisRepN'
p1522
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1523
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1524
Nsg70
Vn
sS'block_loop.thisTrialN'
p1525
I0
sg39
F1.6332484502090665
sg34
g753
(S'\x07\xdf\x07\n\x0e7\x07\x02\xd6\x90'
tRp1526
sa(dp1527
S'trial_loop.thisTrialN'
p1528
I42
sg895
g1082
sS'block_loop.thisIndex'
p1529
g889
sg38
S'left'
p1530
sg59
g63
sS'trial_loop.thisN'
p1531
I42
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p1532
g60
(g99
S'*\x00\x00\x00'
tRp1533
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1534
I0
sg904
g1089
sS'block_loop.thisRepN'
p1535
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1536
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p1537
Nsg70
Vn
sS'block_loop.thisTrialN'
p1538
I0
sg39
F1.1998718200193252
sg34
g753
(S'\x07\xdf\x07\n\x0e7\r\x0c\xec\x98'
tRp1539
sa(dp1540
S'trial_loop.thisTrialN'
p1541
I43
sg895
g1408
sS'block_loop.thisIndex'
p1542
g889
sg38
S'left'
p1543
sg59
g63
sS'trial_loop.thisN'
p1544
I43
sg33
g1234
sg64
g65
sS'trial_loop.thisIndex'
p1545
g60
(g99
S'+\x00\x00\x00'
tRp1546
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1547
I0
sg904
g1415
sS'block_loop.thisRepN'
p1548
I0
sg907
g1234
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1549
I0
sg909
g1241
sg55
g11
sS'block_loop.thisTrial'
p1550
Nsg70
Vn
sS'block_loop.thisTrialN'
p1551
I0
sg39
F1.3998308799709775
sg34
g753
(S'\x07\xdf\x07\n\x0e7\x14\x01S\xd8'
tRp1552
sa(dp1553
S'trial_loop.thisTrialN'
p1554
I44
sg895
S'33-ambrosia_rice.png'
p1555
sS'block_loop.thisIndex'
p1556
g889
sg38
S'right'
p1557
sg59
g63
sS'trial_loop.thisN'
p1558
I44
sg33
S'23-crunchie_redo.png'
p1559
sg64
g65
sS'trial_loop.thisIndex'
p1560
g60
(g99
S',\x00\x00\x00'
tRp1561
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1562
I0
sg904
S'23-crunchie_redo.png'
p1563
sS'block_loop.thisRepN'
p1564
I0
sg907
g1559
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1565
I0
sg909
S'33-ambrosia_rice.png'
p1566
sg55
g11
sS'block_loop.thisTrial'
p1567
Nsg70
Vn
sS'block_loop.thisTrialN'
p1568
I0
sg39
F1.3500185883785889
sg34
g753
(S'\x07\xdf\x07\n\x0e7\x1a\x07\xd7\xd0'
tRp1569
sa(dp1570
S'trial_loop.thisTrialN'
p1571
I45
sg895
S'49-yorkie.png'
p1572
sS'block_loop.thisIndex'
p1573
g889
sg38
S'right'
p1574
sg59
g63
sS'trial_loop.thisN'
p1575
I45
sg33
S'49-yorkie.png'
p1576
sg64
g65
sS'trial_loop.thisIndex'
p1577
g60
(g99
S'-\x00\x00\x00'
tRp1578
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1579
I0
sg904
S'35-raisins.png'
p1580
sS'block_loop.thisRepN'
p1581
I0
sg907
g1576
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1582
I0
sg909
S'35-raisins.png'
p1583
sg55
g11
sS'block_loop.thisTrial'
p1584
Nsg70
Vn
sS'block_loop.thisTrialN'
p1585
I0
sg39
F6.9498142302581982
sg34
g753
(S'\x07\xdf\x07\n\x0e7 \r\xa8\x18'
tRp1586
sa(dp1587
S'trial_loop.thisTrialN'
p1588
I46
sg895
S'44-crunch.png'
p1589
sS'block_loop.thisIndex'
p1590
g889
sg38
S'left'
p1591
sg59
g63
sS'trial_loop.thisN'
p1592
I46
sg33
S'44-crunch.png'
p1593
sg64
g65
sS'trial_loop.thisIndex'
p1594
g60
(g99
S'.\x00\x00\x00'
tRp1595
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1596
I0
sg904
S'26-walkers_smoky_bacon.png'
p1597
sS'block_loop.thisRepN'
p1598
I0
sg907
g1593
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1599
I0
sg909
S'26-walkers_smoky_bacon.png'
p1600
sg55
g11
sS'block_loop.thisTrial'
p1601
Nsg70
Vn
sS'block_loop.thisTrialN'
p1602
I0
sg39
F1.6498425689824217
sg34
g753
(S'\x07\xdf\x07\n\x0e7,\rY\xf8'
tRp1603
sa(dp1604
S'trial_loop.thisTrialN'
p1605
I47
sg895
g1572
sS'block_loop.thisIndex'
p1606
g889
sg38
S'left'
p1607
sg59
g63
sS'trial_loop.thisN'
p1608
I47
sg33
g1583
sg64
g65
sS'trial_loop.thisIndex'
p1609
g60
(g99
S'/\x00\x00\x00'
tRp1610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1611
I0
sg904
g1580
sS'block_loop.thisRepN'
p1612
I0
sg907
g1576
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1613
I0
sg909
g1583
sg55
g11
sS'block_loop.thisTrial'
p1614
Nsg70
Vn
sS'block_loop.thisTrialN'
p1615
I0
sg39
F2.4665035717043793
sg34
g753
(S'\x07\xdf\x07\n\x0e73\x08\xaa\xc0'
tRp1616
sa(dp1617
S'trial_loop.thisTrialN'
p1618
I48
sg895
S'27-hartleys_raspberries_jelly.png'
p1619
sS'block_loop.thisIndex'
p1620
g889
sg38
S'right'
p1621
sg59
g63
sS'trial_loop.thisN'
p1622
I48
sg33
S'51-mars.png'
p1623
sg64
g65
sS'trial_loop.thisIndex'
p1624
g60
(g99
S'0\x00\x00\x00'
tRp1625
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1626
I0
sg904
S'51-mars.png'
p1627
sS'block_loop.thisRepN'
p1628
I0
sg907
g1623
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1629
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p1630
sg55
g11
sS'block_loop.thisTrial'
p1631
Nsg70
Vn
sS'block_loop.thisTrialN'
p1632
I0
sg39
F1.5331999265617924
sg34
g753
(S'\x07\xdf\x07\n\x0e7;\x01\x19@'
tRp1633
sa(dp1634
S'trial_loop.thisTrialN'
p1635
I49
sg895
g1033
sS'block_loop.thisIndex'
p1636
g889
sg38
S'left'
p1637
sg59
g63
sS'trial_loop.thisN'
p1638
I49
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p1639
g60
(g99
S'1\x00\x00\x00'
tRp1640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1641
I0
sg904
g1041
sS'block_loop.thisRepN'
p1642
I0
sg907
g1037
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1643
I0
sg909
g1044
sg55
g11
sS'block_loop.thisTrial'
p1644
Nsg70
Vn
sS'block_loop.thisTrialN'
p1645
I0
sg39
F2.2831879524528631
sg34
g753
(S'\x07\xdf\x07\n\x0e8\x05\t\xc0\x18'
tRp1646
sa(dp1647
S'trial_loop.thisTrialN'
p1648
I50
sg895
S'43-mrporky_pork_crackles_redo.png'
p1649
sS'block_loop.thisIndex'
p1650
g889
sg38
S'right'
p1651
sg59
g63
sS'trial_loop.thisN'
p1652
I50
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p1653
g60
(g99
S'2\x00\x00\x00'
tRp1654
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1655
I0
sg904
S'18-mms.png'
p1656
sS'block_loop.thisRepN'
p1657
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1658
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p1659
Nsg70
Vn
sS'block_loop.thisTrialN'
p1660
I0
sg39
F1.1337496521773573
sg34
g753
(S'\x07\xdf\x07\n\x0e8\x0c\x0e\x96`'
tRp1661
sa(dp1662
S'trial_loop.thisTrialN'
p1663
I51
sg895
g1290
sS'block_loop.thisIndex'
p1664
g889
sg38
S'left'
p1665
sg59
g63
sS'trial_loop.thisN'
p1666
I51
sg33
g1294
sg64
g65
sS'trial_loop.thisIndex'
p1667
g60
(g99
S'3\x00\x00\x00'
tRp1668
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1669
I0
sg904
g1298
sS'block_loop.thisRepN'
p1670
I0
sg907
g1294
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1671
I0
sg909
g1301
sg55
g11
sS'block_loop.thisTrial'
p1672
Nsg70
Vn
sS'block_loop.thisTrialN'
p1673
I0
sg39
F2.1999117337145435
sg34
g753
(S'\x07\xdf\x07\n\x0e8\x13\x01\xcc\xf0'
tRp1674
sa(dp1675
S'trial_loop.thisTrialN'
p1676
I52
sg895
g1213
sS'block_loop.thisIndex'
p1677
g889
sg38
S'left'
p1678
sg59
g63
sS'trial_loop.thisN'
p1679
I52
sg33
g1217
sg64
g65
sS'trial_loop.thisIndex'
p1680
g60
(g99
S'4\x00\x00\x00'
tRp1681
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1682
I0
sg904
g1221
sS'block_loop.thisRepN'
p1683
I0
sg907
g1217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1684
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p1685
Nsg70
Vn
sS'block_loop.thisTrialN'
p1686
I0
sg39
F2.4165344763059693
sg34
g753
(S'\x07\xdf\x07\n\x0e8\x1a\x05n\xa0'
tRp1687
sa(dp1688
S'trial_loop.thisTrialN'
p1689
I53
sg895
g1067
sS'block_loop.thisIndex'
p1690
g889
sg38
S'right'
p1691
sg59
g63
sS'trial_loop.thisN'
p1692
I53
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p1693
g60
(g99
S'5\x00\x00\x00'
tRp1694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1695
I0
sg904
g1074
sS'block_loop.thisRepN'
p1696
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1697
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1698
Nsg70
Vn
sS'block_loop.thisTrialN'
p1699
I0
sg39
F0.9833462957831216
sg34
g753
(S'\x07\xdf\x07\n\x0e8!\x0c)H'
tRp1700
sa(dp1701
S'trial_loop.thisTrialN'
p1702
I54
sg895
g1247
sS'block_loop.thisIndex'
p1703
g889
sg38
S'left'
p1704
sg59
g63
sS'trial_loop.thisN'
p1705
I54
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p1706
g60
(g99
S'6\x00\x00\x00'
tRp1707
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1708
I0
sg904
g1254
sS'block_loop.thisRepN'
p1709
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1710
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1711
Nsg70
Vn
sS'block_loop.thisTrialN'
p1712
I0
sg39
F1.4832222782279132
sg34
g753
(S"\x07\xdf\x07\n\x0e8'\x0c\x7f8"
tRp1713
sa(dp1714
S'trial_loop.thisTrialN'
p1715
I55
sg895
g1322
sS'block_loop.thisIndex'
p1716
g889
sg38
S'right'
p1717
sg59
g63
sS'trial_loop.thisN'
p1718
I55
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p1719
g60
(g99
S'7\x00\x00\x00'
tRp1720
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1721
I0
sg904
g1330
sS'block_loop.thisRepN'
p1722
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1723
I0
sg909
g1333
sg55
g11
sS'block_loop.thisTrial'
p1724
Nsg70
Vn
sS'block_loop.thisTrialN'
p1725
I0
sg39
F1.0832163481936732
sg34
g753
(S'\x07\xdf\x07\n\x0e8.\x050 '
tRp1726
sa(dp1727
S'trial_loop.thisTrialN'
p1728
I56
sg895
g1033
sS'block_loop.thisIndex'
p1729
g889
sg38
S'right'
p1730
sg59
g63
sS'trial_loop.thisN'
p1731
I56
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p1732
g60
(g99
S'8\x00\x00\x00'
tRp1733
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1734
I0
sg904
g1041
sS'block_loop.thisRepN'
p1735
I0
sg907
g1037
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1736
I0
sg909
g1044
sg55
g11
sS'block_loop.thisTrial'
p1737
Nsg70
Vn
sS'block_loop.thisTrialN'
p1738
I0
sg39
F8.8163690625551681
sg34
g753
(S'\x07\xdf\x07\n\x0e84\x06\xf1X'
tRp1739
sa(dp1740
S'trial_loop.thisTrialN'
p1741
I57
sg895
g1050
sS'block_loop.thisIndex'
p1742
g889
sg38
S'right'
p1743
sg59
g63
sS'trial_loop.thisN'
p1744
I57
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p1745
g60
(g99
S'9\x00\x00\x00'
tRp1746
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1747
I0
sg904
g1058
sS'block_loop.thisRepN'
p1748
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1749
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p1750
Nsg70
Vn
sS'block_loop.thisTrialN'
p1751
I0
sg39
F1.0499046632903628
sg34
g753
(S'\x07\xdf\x07\n\x0e9\x06\x04t\xa0'
tRp1752
sa(dp1753
S'trial_loop.thisTrialN'
p1754
I58
sg895
g933
sS'block_loop.thisIndex'
p1755
g889
sg38
S'right'
p1756
sg59
g63
sS'trial_loop.thisN'
p1757
I58
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1758
g60
(g99
S':\x00\x00\x00'
tRp1759
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1760
I0
sg904
g941
sS'block_loop.thisRepN'
p1761
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1762
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1763
Nsg70
Vn
sS'block_loop.thisTrialN'
p1764
I0
sg39
F1.383356217185792
sg34
g753
(S'\x07\xdf\x07\n\x0e9\x0c\x05\xbc\xc0'
tRp1765
sa(dp1766
S'trial_loop.thisTrialN'
p1767
I59
sg895
S'35-raisins.png'
p1768
sS'block_loop.thisIndex'
p1769
g889
sg38
S'left'
p1770
sg59
g63
sS'trial_loop.thisN'
p1771
I59
sg33
g1576
sg64
g65
sS'trial_loop.thisIndex'
p1772
g60
(g99
S';\x00\x00\x00'
tRp1773
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1774
I0
sg904
S'49-yorkie.png'
p1775
sS'block_loop.thisRepN'
p1776
I0
sg907
g1576
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1777
I0
sg909
g1583
sg55
g11
sS'block_loop.thisTrial'
p1778
Nsg70
Vn
sS'block_loop.thisTrialN'
p1779
I0
sg39
F3.1503326521378767
sg34
g753
(S'\x07\xdf\x07\n\x0e9\x12\x0c@\xb8'
tRp1780
sa(dp1781
S'trial_loop.thisTrialN'
p1782
I60
sg895
g1050
sS'block_loop.thisIndex'
p1783
g889
sg38
S'right'
p1784
sg59
g63
sS'trial_loop.thisN'
p1785
I60
sg33
g1061
sg64
g65
sS'trial_loop.thisIndex'
p1786
g60
(g99
S'<\x00\x00\x00'
tRp1787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1788
I0
sg904
g1058
sS'block_loop.thisRepN'
p1789
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1790
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p1791
Nsg70
Vn
sS'block_loop.thisTrialN'
p1792
I0
sg39
F1.1665741049073404
sg34
g753
(S'\x07\xdf\x07\n\x0e9\x1a\x0e\xecP'
tRp1793
sa(dp1794
S'trial_loop.thisTrialN'
p1795
I61
sg895
g1649
sS'block_loop.thisIndex'
p1796
g889
sg38
S'right'
p1797
sg59
g63
sS'trial_loop.thisN'
p1798
I61
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p1799
g60
(g99
S'=\x00\x00\x00'
tRp1800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1801
I0
sg904
g1656
sS'block_loop.thisRepN'
p1802
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1803
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p1804
Nsg70
Vn
sS'block_loop.thisTrialN'
p1805
I0
sg39
F1.1332330549266771
sg34
g753
(S'\x07\xdf\x07\n\x0e9!\x02\xd6\x90'
tRp1806
sa(dp1807
S'trial_loop.thisTrialN'
p1808
I62
sg895
g1247
sS'block_loop.thisIndex'
p1809
g889
sg38
S'left'
p1810
sg59
g63
sS'trial_loop.thisN'
p1811
I62
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1812
g60
(g99
S'>\x00\x00\x00'
tRp1813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1814
I0
sg904
g1254
sS'block_loop.thisRepN'
p1815
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1816
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1817
Nsg70
Vn
sS'block_loop.thisTrialN'
p1818
I0
sg39
F1.7999750824528746
sg34
g753
(S"\x07\xdf\x07\n\x0e9'\x05O`"
tRp1819
sa(dp1820
S'trial_loop.thisTrialN'
p1821
I63
sg895
S'23-crunchie_redo.png'
p1822
sS'block_loop.thisIndex'
p1823
g889
sg38
S'left'
p1824
sg59
g63
sS'trial_loop.thisN'
p1825
I63
sg33
g1559
sg64
g65
sS'trial_loop.thisIndex'
p1826
g60
(g99
S'?\x00\x00\x00'
tRp1827
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1828
I0
sg904
S'33-ambrosia_rice.png'
p1829
sS'block_loop.thisRepN'
p1830
I0
sg907
g1559
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1831
I0
sg909
g1566
sg55
g11
sS'block_loop.thisTrial'
p1832
Nsg70
Vn
sS'block_loop.thisTrialN'
p1833
I0
sg39
F1.3666705820105562
sg34
g753
(S'\x07\xdf\x07\n\x0e9.\x02\xc3\x08'
tRp1834
sa(dp1835
S'trial_loop.thisTrialN'
p1836
I64
sg895
S'51-mars.png'
p1837
sS'block_loop.thisIndex'
p1838
g889
sg38
S'left'
p1839
sg59
g63
sS'trial_loop.thisN'
p1840
I64
sg33
g1630
sg64
g65
sS'trial_loop.thisIndex'
p1841
g60
(g99
S'@\x00\x00\x00'
tRp1842
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1843
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p1844
sS'block_loop.thisRepN'
p1845
I0
sg907
g1623
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1846
I0
sg909
g1630
sg55
g11
sS'block_loop.thisTrial'
p1847
Nsg70
Vn
sS'block_loop.thisTrialN'
p1848
I0
sg39
F1.0337182344010216
sg34
g753
(S'\x07\xdf\x07\n\x0e94\x08\xcd\xe8'
tRp1849
sa(dp1850
S'trial_loop.thisTrialN'
p1851
I65
sg895
g896
sS'block_loop.thisIndex'
p1852
g889
sg38
S'left'
p1853
sg59
g63
sS'trial_loop.thisN'
p1854
I65
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1855
g60
(g99
S'A\x00\x00\x00'
tRp1856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1857
I0
sg904
g905
sS'block_loop.thisRepN'
p1858
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1859
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1860
Nsg70
Vn
sS'block_loop.thisTrialN'
p1861
I0
sg39
F0.96660136026184773
sg34
g753
(S'\x07\xdf\x07\n\x0e9:\t\xdbp'
tRp1862
sa(dp1863
S'trial_loop.thisTrialN'
p1864
I66
sg895
g1185
sS'block_loop.thisIndex'
p1865
g889
sg38
S'left'
p1866
sg59
g63
sS'trial_loop.thisN'
p1867
I66
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1868
g60
(g99
S'B\x00\x00\x00'
tRp1869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1870
I0
sg904
g1192
sS'block_loop.thisRepN'
p1871
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1872
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1873
Nsg70
Vn
sS'block_loop.thisTrialN'
p1874
I0
sg39
F2.066536700072902
sg34
g753
(S'\x07\xdf\x07\n\x0e:\x04\t\xf2\xe0'
tRp1875
sa(dp1876
S'trial_loop.thisTrialN'
p1877
I67
sg895
g1140
sS'block_loop.thisIndex'
p1878
g889
sg38
S'left'
p1879
sg59
g63
sS'trial_loop.thisN'
p1880
I67
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p1881
g60
(g99
S'C\x00\x00\x00'
tRp1882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1883
I0
sg904
g1148
sS'block_loop.thisRepN'
p1884
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1885
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p1886
Nsg70
Vn
sS'block_loop.thisTrialN'
p1887
I0
sg39
F1.3832170894493174
sg34
g753
(S'\x07\xdf\x07\n\x0e:\x0b\x0bq\xb0'
tRp1888
sa(dp1889
S'trial_loop.thisTrialN'
p1890
I68
sg895
g1275
sS'block_loop.thisIndex'
p1891
g889
sg38
S'right'
p1892
sg59
g63
sS'trial_loop.thisN'
p1893
I68
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p1894
g60
(g99
S'D\x00\x00\x00'
tRp1895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1896
I0
sg904
g1282
sS'block_loop.thisRepN'
p1897
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1898
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1899
Nsg70
Vn
sS'block_loop.thisTrialN'
p1900
I0
sg39
F3.066513607147499
sg34
g753
(S'\x07\xdf\x07\n\x0e:\x12\x02t\xe8'
tRp1901
sa(dp1902
S'trial_loop.thisTrialN'
p1903
I69
sg895
g1768
sS'block_loop.thisIndex'
p1904
g889
sg38
S'left'
p1905
sg59
g63
sS'trial_loop.thisN'
p1906
I69
sg33
g1576
sg64
g65
sS'trial_loop.thisIndex'
p1907
g60
(g99
S'E\x00\x00\x00'
tRp1908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1909
I0
sg904
g1775
sS'block_loop.thisRepN'
p1910
I0
sg907
g1576
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1911
I0
sg909
g1583
sg55
g11
sS'block_loop.thisTrial'
p1912
Nsg70
Vn
sS'block_loop.thisTrialN'
p1913
I0
sg39
F8.5998039097175933
sg34
g753
(S'\x07\xdf\x07\n\x0e:\x1a\x03\xef\xd0'
tRp1914
sa(dp1915
S'trial_loop.thisTrialN'
p1916
I70
sg895
g1837
sS'block_loop.thisIndex'
p1917
g889
sg38
S'left'
p1918
sg59
g63
sS'trial_loop.thisN'
p1919
I70
sg33
g1623
sg64
g65
sS'trial_loop.thisIndex'
p1920
g60
(g99
S'F\x00\x00\x00'
tRp1921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1922
I0
sg904
g1844
sS'block_loop.thisRepN'
p1923
I0
sg907
g1623
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1924
I0
sg909
g1630
sg55
g11
sS'block_loop.thisTrial'
p1925
Nsg70
Vn
sS'block_loop.thisTrialN'
p1926
I0
sg39
F1.016552779590711
sg34
g753
(S"\x07\xdf\x07\n\x0e:'\r\x9c`"
tRp1927
sa(dp1928
S'trial_loop.thisTrialN'
p1929
I71
sg895
g1033
sS'block_loop.thisIndex'
p1930
g889
sg38
S'left'
p1931
sg59
g63
sS'trial_loop.thisN'
p1932
I71
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p1933
g60
(g99
S'G\x00\x00\x00'
tRp1934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1935
I0
sg904
g1041
sS'block_loop.thisRepN'
p1936
I0
sg907
g1037
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1937
I0
sg909
g1044
sg55
g11
sS'block_loop.thisTrial'
p1938
Nsg70
Vn
sS'block_loop.thisTrialN'
p1939
I0
sg39
F10.566319740632025
sg34
g753
(S'\x07\xdf\x07\n\x0e:-\x0ekh'
tRp1940
sa(dp1941
S'trial_loop.thisTrialN'
p1942
I72
sg895
g916
sS'block_loop.thisIndex'
p1943
g889
sg38
S'left'
p1944
sg59
g63
sS'trial_loop.thisN'
p1945
I72
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1946
g60
(g99
S'H\x00\x00\x00'
tRp1947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1948
I0
sg904
g924
sS'block_loop.thisRepN'
p1949
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1950
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1951
Nsg70
Vn
sS'block_loop.thisTrialN'
p1952
I0
sg39
F1.3332274670101469
sg34
g753
(S'\x07\xdf\x07\n\x0e;\x01\x08P\xe8'
tRp1953
sa(dp1954
S'trial_loop.thisTrialN'
p1955
I73
sg895
g1378
sS'block_loop.thisIndex'
p1956
g889
sg38
S'left'
p1957
sg59
g63
sS'trial_loop.thisN'
p1958
I73
sg33
g1388
sg64
g65
sS'trial_loop.thisIndex'
p1959
g60
(g99
S'I\x00\x00\x00'
tRp1960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1961
I0
sg904
g1386
sS'block_loop.thisRepN'
p1962
I0
sg907
g1388
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1963
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p1964
Nsg70
Vn
sS'block_loop.thisTrialN'
p1965
I0
sg39
F1.333709282327618
sg34
g753
(S'\x07\xdf\x07\n\x0e;\x07\r\xe2\xb0'
tRp1966
sa(dp1967
S'trial_loop.thisTrialN'
p1968
I74
sg895
S'31-hobnobs.png'
p1969
sS'block_loop.thisIndex'
p1970
g889
sg38
S'left'
p1971
sg59
g63
sS'trial_loop.thisN'
p1972
I74
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p1973
g60
(g99
S'J\x00\x00\x00'
tRp1974
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1975
I0
sg904
S'25-kitkat.png'
p1976
sS'block_loop.thisRepN'
p1977
I0
sg907
g1037
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1978
I0
sg909
g1044
sg55
g11
sS'block_loop.thisTrial'
p1979
Nsg70
Vn
sS'block_loop.thisTrialN'
p1980
I0
sg39
F1.6665564288414316
sg34
g753
(S'\x07\xdf\x07\n\x0e;\x0e\x0428'
tRp1981
sa(dp1982
S'trial_loop.thisTrialN'
p1983
I75
sg895
g967
sS'block_loop.thisIndex'
p1984
g889
sg38
S'right'
p1985
sg59
g63
sS'trial_loop.thisN'
p1986
I75
sg33
g977
sg64
g65
sS'trial_loop.thisIndex'
p1987
g60
(g99
S'K\x00\x00\x00'
tRp1988
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1989
I0
sg904
g975
sS'block_loop.thisRepN'
p1990
I0
sg907
g977
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1991
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p1992
Nsg70
Vn
sS'block_loop.thisTrialN'
p1993
I0
sg39
F0.85010582831091597
sg34
g753
(S'\x07\xdf\x07\n\x0e;\x14\x0e\xff\xd8'
tRp1994
sa(dp1995
S'trial_loop.thisTrialN'
p1996
I76
sg895
g1649
sS'block_loop.thisIndex'
p1997
g889
sg38
S'right'
p1998
sg59
g63
sS'trial_loop.thisN'
p1999
I76
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p2000
g60
(g99
S'L\x00\x00\x00'
tRp2001
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2002
I0
sg904
g1656
sS'block_loop.thisRepN'
p2003
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2004
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p2005
Nsg70
Vn
sS'block_loop.thisTrialN'
p2006
I0
sg39
F0.99989479890064104
sg34
g753
(S'\x07\xdf\x07\n\x0e;\x1a\r/\x00'
tRp2007
sa(dp2008
S'trial_loop.thisTrialN'
p2009
I77
sg895
g1589
sS'block_loop.thisIndex'
p2010
g889
sg38
S'left'
p2011
sg59
g63
sS'trial_loop.thisN'
p2012
I77
sg33
g1593
sg64
g65
sS'trial_loop.thisIndex'
p2013
g60
(g99
S'M\x00\x00\x00'
tRp2014
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2015
I0
sg904
g1597
sS'block_loop.thisRepN'
p2016
I0
sg907
g1593
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2017
I0
sg909
g1600
sg55
g11
sS'block_loop.thisTrial'
p2018
Nsg70
Vn
sS'block_loop.thisTrialN'
p2019
I0
sg39
F1.3833399666109472
sg34
g753
(S'\x07\xdf\x07\n\x0e; \r\xbf\x88'
tRp2020
sa(dp2021
S'trial_loop.thisTrialN'
p2022
I78
sg895
g1082
sS'block_loop.thisIndex'
p2023
g889
sg38
S'left'
p2024
sg59
g63
sS'trial_loop.thisN'
p2025
I78
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p2026
g60
(g99
S'N\x00\x00\x00'
tRp2027
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2028
I0
sg904
g1089
sS'block_loop.thisRepN'
p2029
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2030
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p2031
Nsg70
Vn
sS'block_loop.thisTrialN'
p2032
I0
sg39
F1.0499531299174123
sg34
g753
(S"\x07\xdf\x07\n\x0e;'\x04\xc6\xa8"
tRp2033
sa(dp2034
S'trial_loop.thisTrialN'
p2035
I79
sg895
g1436
sS'block_loop.thisIndex'
p2036
g889
sg38
S'left'
p2037
sg59
g63
sS'trial_loop.thisN'
p2038
I79
sg33
g1294
sg64
g65
sS'trial_loop.thisIndex'
p2039
g60
(g99
S'O\x00\x00\x00'
tRp2040
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2041
I0
sg904
g1443
sS'block_loop.thisRepN'
p2042
I0
sg907
g1294
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2043
I0
sg909
g1301
sg55
g11
sS'block_loop.thisTrial'
p2044
Nsg70
Vn
sS'block_loop.thisTrialN'
p2045
I0
sg39
F1.4332469106811914
sg34
g753
(S'\x07\xdf\x07\n\x0e;-\x06\x0e\xc8'
tRp2046
sa(dp2047
S'trial_loop.thisTrialN'
p2048
I80
sg895
g1213
sS'block_loop.thisIndex'
p2049
g889
sg38
S'left'
p2050
sg59
g63
sS'trial_loop.thisN'
p2051
I80
sg33
g1217
sg64
g65
sS'trial_loop.thisIndex'
p2052
g60
(g99
S'P\x00\x00\x00'
tRp2053
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2054
I0
sg904
g1221
sS'block_loop.thisRepN'
p2055
I0
sg907
g1217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2056
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p2057
Nsg70
Vn
sS'block_loop.thisTrialN'
p2058
I0
sg39
F1.3165589377022116
sg34
g753
(S'\x07\xdf\x07\n\x0e;3\rJX'
tRp2059
sa(dp2060
S'trial_loop.thisTrialN'
p2061
I81
sg895
g916
sS'block_loop.thisIndex'
p2062
g889
sg38
S'left'
p2063
sg59
g63
sS'trial_loop.thisN'
p2064
I81
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2065
g60
(g99
S'Q\x00\x00\x00'
tRp2066
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2067
I0
sg904
g924
sS'block_loop.thisRepN'
p2068
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2069
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2070
Nsg70
Vn
sS'block_loop.thisTrialN'
p2071
I0
sg39
F1.316576043569512
sg34
g753
(S'\x07\xdf\x07\n\x0e;:\x03[`'
tRp2072
sa(dp2073
S'trial_loop.thisTrialN'
p2074
I82
sg895
S'38-maltesers.png'
p2075
sS'block_loop.thisIndex'
p2076
g889
sg38
S'left'
p2077
sg59
g63
sS'trial_loop.thisN'
p2078
I82
sg33
g977
sg64
g65
sS'trial_loop.thisIndex'
p2079
g60
(g99
S'R\x00\x00\x00'
tRp2080
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2081
I0
sg904
S'6-sour_patch_kids.png'
p2082
sS'block_loop.thisRepN'
p2083
I0
sg907
g977
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2084
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p2085
Nsg70
Vn
sS'block_loop.thisTrialN'
p2086
I0
sg39
F1.2164388544988469
sg34
g753
(S'\x07\xdf\x07\n\x0f\x00\x04\x08\xae\xa8'
tRp2087
sa(dp2088
S'trial_loop.thisTrialN'
p2089
I83
sg895
g1018
sS'block_loop.thisIndex'
p2090
g889
sg38
S'left'
p2091
sg59
g63
sS'trial_loop.thisN'
p2092
I83
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2093
g60
(g99
S'S\x00\x00\x00'
tRp2094
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2095
I0
sg904
g1025
sS'block_loop.thisRepN'
p2096
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2097
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2098
Nsg70
Vn
sS'block_loop.thisTrialN'
p2099
I0
sg39
F1.2500570195625187
sg34
g753
(S'\x07\xdf\x07\n\x0f\x00\n\x0cX('
tRp2100
sa(dp2101
S'trial_loop.thisTrialN'
p2102
I84
sg895
g896
sS'block_loop.thisIndex'
p2103
g889
sg38
S'left'
p2104
sg59
g63
sS'trial_loop.thisN'
p2105
I84
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2106
g60
(g99
S'T\x00\x00\x00'
tRp2107
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2108
I0
sg904
g905
sS'block_loop.thisRepN'
p2109
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2110
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2111
Nsg70
Vn
sS'block_loop.thisTrialN'
p2112
I0
sg39
F1.000006557249435
sg34
g753
(S'\x07\xdf\x07\n\x0f\x00\x11\x01w\x00'
tRp2113
sa(dp2114
S'trial_loop.thisTrialN'
p2115
I85
sg895
g1436
sS'block_loop.thisIndex'
p2116
g889
sg38
S'left'
p2117
sg59
g63
sS'trial_loop.thisN'
p2118
I85
sg33
g1294
sg64
g65
sS'trial_loop.thisIndex'
p2119
g60
(g99
S'U\x00\x00\x00'
tRp2120
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2121
I0
sg904
g1443
sS'block_loop.thisRepN'
p2122
I0
sg907
g1294
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2123
I0
sg909
g1301
sg55
g11
sS'block_loop.thisTrial'
p2124
Nsg70
Vn
sS'block_loop.thisTrialN'
p2125
I0
sg39
F0.86656623620729079
sg34
g753
(S'\x07\xdf\x07\n\x0f\x00\x17\x02\x07\x88'
tRp2126
sa(dp2127
S'trial_loop.thisTrialN'
p2128
I86
sg895
g1589
sS'block_loop.thisIndex'
p2129
g889
sg38
S'left'
p2130
sg59
g63
sS'trial_loop.thisN'
p2131
I86
sg33
g1593
sg64
g65
sS'trial_loop.thisIndex'
p2132
g60
(g99
S'V\x00\x00\x00'
tRp2133
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2134
I0
sg904
g1597
sS'block_loop.thisRepN'
p2135
I0
sg907
g1593
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2136
I0
sg909
g1600
sg55
g11
sS'block_loop.thisTrial'
p2137
Nsg70
Vn
sS'block_loop.thisTrialN'
p2138
I0
sg39
F0.99989565419673454
sg34
g753
(S'\x07\xdf\x07\n\x0f\x00\x1d\x00u0'
tRp2139
sa(dp2140
S'trial_loop.thisTrialN'
p2141
I87
sg895
S'42-mrkipling_lemon_slices.png'
p2142
sS'block_loop.thisIndex'
p2143
g889
sg38
S'left'
p2144
sg59
g63
sS'trial_loop.thisN'
p2145
I87
sg33
g1333
sg64
g65
sS'trial_loop.thisIndex'
p2146
g60
(g99
S'W\x00\x00\x00'
tRp2147
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2148
I0
sg904
S'16-skips_prawn.png'
p2149
sS'block_loop.thisRepN'
p2150
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2151
I0
sg909
g1333
sg55
g11
sS'block_loop.thisTrial'
p2152
Nsg70
Vn
sS'block_loop.thisTrialN'
p2153
I0
sg39
F0.96640407256563776
sg34
g753
(S'\x07\xdf\x07\n\x0f\x00#\x01\x05\xb8'
tRp2154
sa(dp2155
S'trial_loop.thisTrialN'
p2156
I88
sg895
g1555
sS'block_loop.thisIndex'
p2157
g889
sg38
S'right'
p2158
sg59
g63
sS'trial_loop.thisN'
p2159
I88
sg33
g1559
sg64
g65
sS'trial_loop.thisIndex'
p2160
g60
(g99
S'X\x00\x00\x00'
tRp2161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2162
I0
sg904
g1563
sS'block_loop.thisRepN'
p2163
I0
sg907
g1559
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2164
I0
sg909
g1566
sg55
g11
sS'block_loop.thisTrial'
p2165
Nsg70
Vn
sS'block_loop.thisTrialN'
p2166
I0
sg39
F0.99989593929421972
sg34
g753
(S'\x07\xdf\x07\n\x0f\x00)\x00\xe2\x90'
tRp2167
sa(dp2168
S'trial_loop.thisTrialN'
p2169
I89
sg895
g1837
sS'block_loop.thisIndex'
p2170
g889
sg38
S'left'
p2171
sg59
g63
sS'trial_loop.thisN'
p2172
I89
sg33
g1623
sg64
g65
sS'trial_loop.thisIndex'
p2173
g60
(g99
S'Y\x00\x00\x00'
tRp2174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2175
I0
sg904
g1844
sS'block_loop.thisRepN'
p2176
I0
sg907
g1623
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2177
I0
sg909
g1630
sg55
g11
sS'block_loop.thisTrial'
p2178
Nsg70
Vn
sS'block_loop.thisTrialN'
p2179
I0
sg39
F0.98333660245407373
sg34
g753
(S'\x07\xdf\x07\n\x0f\x00/\x01s\x18'
tRp2180
sa(dp2181
S'trial_loop.thisTrialN'
p2182
I90
sg895
g1408
sS'block_loop.thisIndex'
p2183
g889
sg38
S'right'
p2184
sg59
g63
sS'trial_loop.thisN'
p2185
I90
sg33
g1234
sg64
g65
sS'trial_loop.thisIndex'
p2186
g60
(g99
S'Z\x00\x00\x00'
tRp2187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2188
I0
sg904
g1415
sS'block_loop.thisRepN'
p2189
I0
sg907
g1234
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2190
I0
sg909
g1241
sg55
g11
sS'block_loop.thisTrial'
p2191
Nsg70
Vn
sS'block_loop.thisTrialN'
p2192
I0
sg39
F0.93319131660246057
sg34
g753
(S'\x07\xdf\x07\n\x0f\x005\x01\xc5 '
tRp2193
sa(dp2194
S'trial_loop.thisTrialN'
p2195
I91
sg895
g2075
sS'block_loop.thisIndex'
p2196
g889
sg38
S'left'
p2197
sg59
g63
sS'trial_loop.thisN'
p2198
I91
sg33
g977
sg64
g65
sS'trial_loop.thisIndex'
p2199
g60
(g99
S'[\x00\x00\x00'
tRp2200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2201
I0
sg904
g2082
sS'block_loop.thisRepN'
p2202
I0
sg907
g977
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2203
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p2204
Nsg70
Vn
sS'block_loop.thisTrialN'
p2205
I0
sg39
F1.2662967617434333
sg34
g753
(S'\x07\xdf\x07\n\x0f\x00;\x01(\xe0'
tRp2206
sa(dp2207
S'trial_loop.thisTrialN'
p2208
I92
sg895
g1408
sS'block_loop.thisIndex'
p2209
g889
sg38
S'left'
p2210
sg59
g63
sS'trial_loop.thisN'
p2211
I92
sg33
g1234
sg64
g65
sS'trial_loop.thisIndex'
p2212
g60
(g99
S'\\\x00\x00\x00'
tRp2213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2214
I0
sg904
g1415
sS'block_loop.thisRepN'
p2215
I0
sg907
g1234
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2216
I0
sg909
g1241
sg55
g11
sS'block_loop.thisTrial'
p2217
Nsg70
Vn
sS'block_loop.thisTrialN'
p2218
I0
sg39
F1.5999681260655052
sg34
g753
(S'\x07\xdf\x07\n\x0f\x01\x05\x05\xc4\x90'
tRp2219
sa(dp2220
S'trial_loop.thisTrialN'
p2221
I93
sg895
g1307
sS'block_loop.thisIndex'
p2222
g889
sg38
S'right'
p2223
sg59
g63
sS'trial_loop.thisN'
p2224
I93
sg33
g1224
sg64
g65
sS'trial_loop.thisIndex'
p2225
g60
(g99
S']\x00\x00\x00'
tRp2226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2227
I0
sg904
g1314
sS'block_loop.thisRepN'
p2228
I0
sg907
g1217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2229
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p2230
Nsg70
Vn
sS'block_loop.thisTrialN'
p2231
I0
sg39
F1.333334378690779
sg34
g753
(S'\x07\xdf\x07\n\x0f\x01\x0c\x00\x1f@'
tRp2232
sa(dp2233
S'trial_loop.thisTrialN'
p2234
I94
sg895
g896
sS'block_loop.thisIndex'
p2235
g889
sg38
S'left'
p2236
sg59
g63
sS'trial_loop.thisN'
p2237
I94
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p2238
g60
(g99
S'^\x00\x00\x00'
tRp2239
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2240
I0
sg904
g905
sS'block_loop.thisRepN'
p2241
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2242
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2243
Nsg70
Vn
sS'block_loop.thisTrialN'
p2244
I0
sg39
F0.9999121898690646
sg34
g753
(S'\x07\xdf\x07\n\x0f\x01\x12\x05\xb1\x08'
tRp2245
sa(dp2246
S'trial_loop.thisTrialN'
p2247
I95
sg895
S'26-walkers_smoky_bacon.png'
p2248
sS'block_loop.thisIndex'
p2249
g889
sg38
S'right'
p2250
sg59
g63
sS'trial_loop.thisN'
p2251
I95
sg33
g1593
sg64
g65
sS'trial_loop.thisIndex'
p2252
g60
(g99
S'_\x00\x00\x00'
tRp2253
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2254
I0
sg904
S'44-crunch.png'
p2255
sS'block_loop.thisRepN'
p2256
I0
sg907
g1593
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2257
I0
sg909
g1600
sg55
g11
sS'block_loop.thisTrial'
p2258
Nsg70
Vn
sS'block_loop.thisTrialN'
p2259
I0
sg39
F1.2166096280961938
sg34
g753
(S'\x07\xdf\x07\n\x0f\x01\x18\x06A\x90'
tRp2260
sa(dp2261
S'trial_loop.thisTrialN'
p2262
I96
sg895
g967
sS'block_loop.thisIndex'
p2263
g889
sg38
S'right'
p2264
sg59
g63
sS'trial_loop.thisN'
p2265
I96
sg33
g977
sg64
g65
sS'trial_loop.thisIndex'
p2266
g60
(g99
S'`\x00\x00\x00'
tRp2267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2268
I0
sg904
g975
sS'block_loop.thisRepN'
p2269
I0
sg907
g977
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2270
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p2271
Nsg70
Vn
sS'block_loop.thisTrialN'
p2272
I0
sg39
F0.99974683313485002
sg34
g753
(S'\x07\xdf\x07\n\x0f\x01\x1e\n)\x90'
tRp2273
sa(dp2274
S'trial_loop.thisTrialN'
p2275
I97
sg895
g1230
sS'block_loop.thisIndex'
p2276
g889
sg38
S'right'
p2277
sg59
g63
sS'trial_loop.thisN'
p2278
I97
sg33
g1241
sg64
g65
sS'trial_loop.thisIndex'
p2279
g60
(g99
S'a\x00\x00\x00'
tRp2280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2281
I0
sg904
g1238
sS'block_loop.thisRepN'
p2282
I0
sg907
g1234
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2283
I0
sg909
g1241
sg55
g11
sS'block_loop.thisTrial'
p2284
Nsg70
Vn
sS'block_loop.thisTrialN'
p2285
I0
sg39
F1.5999008429789683
sg34
g753
(S'\x07\xdf\x07\n\x0f\x01$\n\xba\x18'
tRp2286
sa(dp2287
S'trial_loop.thisTrialN'
p2288
I98
sg895
g933
sS'block_loop.thisIndex'
p2289
g889
sg38
S'right'
p2290
sg59
g63
sS'trial_loop.thisN'
p2291
I98
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2292
g60
(g99
S'b\x00\x00\x00'
tRp2293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2294
I0
sg904
g941
sS'block_loop.thisRepN'
p2295
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2296
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2297
Nsg70
Vn
sS'block_loop.thisTrialN'
p2298
I0
sg39
F1.2170677802969294
sg34
g753
(S'\x07\xdf\x07\n\x0f\x01+\x05\x14\xc8'
tRp2299
sa(dp2300
S'trial_loop.thisTrialN'
p2301
I99
sg895
g1290
sS'block_loop.thisIndex'
p2302
g889
sg38
S'right'
p2303
sg59
g63
sS'trial_loop.thisN'
p2304
I99
sg33
g1294
sg64
g65
sS'trial_loop.thisIndex'
p2305
g60
(g99
S'c\x00\x00\x00'
tRp2306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2307
I0
sg904
g1298
sS'block_loop.thisRepN'
p2308
I0
sg907
g1294
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2309
I0
sg909
g1301
sg55
g11
sS'block_loop.thisTrial'
p2310
Nsg70
Vn
sS'block_loop.thisTrialN'
p2311
I0
sg39
F0.76657245133901597
sg34
g753
(S'\x07\xdf\x07\n\x0f\x011\x08\xbeH'
tRp2312
sa(dp2313
S'trial_loop.thisTrialN'
p2314
I100
sg895
g2142
sS'block_loop.thisIndex'
p2315
g889
sg38
S'left'
p2316
sg59
g63
sS'trial_loop.thisN'
p2317
I100
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p2318
g60
(g99
S'd\x00\x00\x00'
tRp2319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2320
I0
sg904
g2149
sS'block_loop.thisRepN'
p2321
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2322
I0
sg909
g1333
sg55
g11
sS'block_loop.thisTrial'
p2323
Nsg70
Vn
sS'block_loop.thisTrialN'
p2324
I0
sg39
F1.0665406914413325
sg34
g753
(S'\x07\xdf\x07\n\x0f\x017\x05\xbc\xc0'
tRp2325
sa(dp2326
S'trial_loop.thisTrialN'
p2327
I101
sg895
S'40-sardines.png'
p2328
sS'block_loop.thisIndex'
p2329
g889
sg38
S'right'
p2330
sg59
g63
sS'trial_loop.thisN'
p2331
I101
sg33
g1382
sg64
g65
sS'trial_loop.thisIndex'
p2332
g60
(g99
S'e\x00\x00\x00'
tRp2333
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2334
I0
sg904
S'5-pineapple.png'
p2335
sS'block_loop.thisRepN'
p2336
I0
sg907
g1388
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2337
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p2338
Nsg70
Vn
sS'block_loop.thisTrialN'
p2339
I0
sg39
F1.099893715530925
sg34
g753
(S'\x07\xdf\x07\n\x0f\x02\x01\x07C`'
tRp2340
sa(dp2341
S'trial_loop.thisTrialN'
p2342
I102
sg895
g1067
sS'block_loop.thisIndex'
p2343
g889
sg38
S'right'
p2344
sg59
g63
sS'trial_loop.thisN'
p2345
I102
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2346
g60
(g99
S'f\x00\x00\x00'
tRp2347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2348
I0
sg904
g1074
sS'block_loop.thisRepN'
p2349
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2350
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2351
Nsg70
Vn
sS'block_loop.thisTrialN'
p2352
I0
sg39
F0.86654342838301091
sg34
g753
(S'\x07\xdf\x07\n\x0f\x02\x07\tC\x18'
tRp2353
sa(dp2354
S'trial_loop.thisTrialN'
p2355
I103
sg895
g1768
sS'block_loop.thisIndex'
p2356
g889
sg38
S'left'
p2357
sg59
g63
sS'trial_loop.thisN'
p2358
I103
sg33
g1576
sg64
g65
sS'trial_loop.thisIndex'
p2359
g60
(g99
S'g\x00\x00\x00'
tRp2360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2361
I0
sg904
g1775
sS'block_loop.thisRepN'
p2362
I0
sg907
g1576
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2363
I0
sg909
g1583
sg55
g11
sS'block_loop.thisTrial'
p2364
Nsg70
Vn
sS'block_loop.thisTrialN'
p2365
I0
sg39
F2.5999718323328125
sg34
g753
(S'\x07\xdf\x07\n\x0f\x02\r\x07\xebX'
tRp2366
sa(dp2367
S'trial_loop.thisTrialN'
p2368
I104
sg895
g1837
sS'block_loop.thisIndex'
p2369
g889
sg38
S'left'
p2370
sg59
g63
sS'trial_loop.thisN'
p2371
I104
sg33
g1623
sg64
g65
sS'trial_loop.thisIndex'
p2372
g60
(g99
S'h\x00\x00\x00'
tRp2373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2374
I0
sg904
g1844
sS'block_loop.thisRepN'
p2375
I0
sg907
g1623
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2376
I0
sg909
g1630
sg55
g11
sS'block_loop.thisTrial'
p2377
Nsg70
Vn
sS'block_loop.thisTrialN'
p2378
I0
sg39
F1.149940072435129
sg34
g753
(S'\x07\xdf\x07\n\x0f\x02\x15\x02>8'
tRp2379
sa(dp2380
S'trial_loop.thisTrialN'
p2381
I105
sg895
g1822
sS'block_loop.thisIndex'
p2382
g889
sg38
S'left'
p2383
sg59
g63
sS'trial_loop.thisN'
p2384
I105
sg33
g1559
sg64
g65
sS'trial_loop.thisIndex'
p2385
g60
(g99
S'i\x00\x00\x00'
tRp2386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2387
I0
sg904
g1829
sS'block_loop.thisRepN'
p2388
I0
sg907
g1559
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2389
I0
sg909
g1566
sg55
g11
sS'block_loop.thisTrial'
p2390
Nsg70
Vn
sS'block_loop.thisTrialN'
p2391
I0
sg39
F1.0165619027175126
sg34
g753
(S'\x07\xdf\x07\n\x0f\x02\x1b\x04\xf5\x88'
tRp2392
sa(dp2393
S'trial_loop.thisTrialN'
p2394
I106
sg895
g2328
sS'block_loop.thisIndex'
p2395
g889
sg38
S'right'
p2396
sg59
g63
sS'trial_loop.thisN'
p2397
I106
sg33
g1382
sg64
g65
sS'trial_loop.thisIndex'
p2398
g60
(g99
S'j\x00\x00\x00'
tRp2399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2400
I0
sg904
g2335
sS'block_loop.thisRepN'
p2401
I0
sg907
g1388
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2402
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p2403
Nsg70
Vn
sS'block_loop.thisTrialN'
p2404
I0
sg39
F1.3332003827126755
sg34
g753
(S'\x07\xdf\x07\n\x0f\x02!\x05\xc4\x90'
tRp2405
sa(dp2406
S'trial_loop.thisTrialN'
p2407
I107
sg895
g1050
sS'block_loop.thisIndex'
p2408
g889
sg38
S'right'
p2409
sg59
g63
sS'trial_loop.thisN'
p2410
I107
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p2411
g60
(g99
S'k\x00\x00\x00'
tRp2412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2413
I0
sg904
g1058
sS'block_loop.thisRepN'
p2414
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2415
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p2416
Nsg70
Vn
sS'block_loop.thisTrialN'
p2417
I0
sg39
F0.98319804491256946
sg34
g753
(S"\x07\xdf\x07\n\x0f\x02'\x0bVX"
tRp2418
sa(dp2419
S'trial_loop.thisTrialN'
p2420
I108
sg895
g1322
sS'block_loop.thisIndex'
p2421
g889
sg38
S'right'
p2422
sg59
g63
sS'trial_loop.thisN'
p2423
I108
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p2424
g60
(g99
S'l\x00\x00\x00'
tRp2425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2426
I0
sg904
g1330
sS'block_loop.thisRepN'
p2427
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2428
I0
sg909
g1333
sg55
g11
sS'block_loop.thisTrial'
p2429
Nsg70
Vn
sS'block_loop.thisTrialN'
p2430
I0
sg39
F1.1332501607939776
sg34
g753
(S'\x07\xdf\x07\n\x0f\x02-\x0b\xa8`'
tRp2431
sa(dp2432
S'trial_loop.thisTrialN'
p2433
I109
sg895
g1018
sS'block_loop.thisIndex'
p2434
g889
sg38
S'left'
p2435
sg59
g63
sS'trial_loop.thisN'
p2436
I109
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2437
g60
(g99
S'm\x00\x00\x00'
tRp2438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2439
I0
sg904
g1025
sS'block_loop.thisRepN'
p2440
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2441
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2442
Nsg70
Vn
sS'block_loop.thisTrialN'
p2443
I0
sg39
F0.94987923256121576
sg34
g753
(S'\x07\xdf\x07\n\x0f\x023\x0e!0'
tRp2444
sa(dp2445
S'trial_loop.thisTrialN'
p2446
I110
sg895
g1555
sS'block_loop.thisIndex'
p2447
g889
sg38
S'right'
p2448
sg59
g63
sS'trial_loop.thisN'
p2449
I110
sg33
g1566
sg64
g65
sS'trial_loop.thisIndex'
p2450
g60
(g99
S'n\x00\x00\x00'
tRp2451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2452
I0
sg904
g1563
sS'block_loop.thisRepN'
p2453
I0
sg907
g1559
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2454
I0
sg909
g1566
sg55
g11
sS'block_loop.thisTrial'
p2455
Nsg70
Vn
sS'block_loop.thisTrialN'
p2456
I0
sg39
F1.0165878466214053
sg34
g753
(S'\x07\xdf\x07\n\x0f\x029\r\xfe\x08'
tRp2457
sa(dp2458
S'trial_loop.thisTrialN'
p2459
I111
sg895
g1230
sS'block_loop.thisIndex'
p2460
g889
sg38
S'right'
p2461
sg59
g63
sS'trial_loop.thisN'
p2462
I111
sg33
g1241
sg64
g65
sS'trial_loop.thisIndex'
p2463
g60
(g99
S'o\x00\x00\x00'
tRp2464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2465
I0
sg904
g1238
sS'block_loop.thisRepN'
p2466
I0
sg907
g1234
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2467
I0
sg909
g1241
sg55
g11
sS'block_loop.thisTrial'
p2468
Nsg70
Vn
sS'block_loop.thisTrialN'
p2469
I0
sg39
F1.1665649817769008
sg34
g753
(S'\x07\xdf\x07\n\x0f\x03\x03\x0e\xc9('
tRp2470
sa(dp2471
S'trial_loop.thisTrialN'
p2472
I112
sg895
S'4-corn.png'
p2473
sS'block_loop.thisIndex'
p2474
g889
sg38
S'right'
p2475
sg59
g63
sS'trial_loop.thisN'
p2476
I112
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p2477
g60
(g99
S'p\x00\x00\x00'
tRp2478
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2479
I0
sg904
S'10-bounty_redo.png'
p2480
sS'block_loop.thisRepN'
p2481
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2482
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p2483
Nsg70
Vn
sS'block_loop.thisTrialN'
p2484
I0
sg39
F1.233213725292444
sg34
g753
(S'\x07\xdf\x07\n\x0f\x03\n\x02|\xb8'
tRp2485
sa(dp2486
S'trial_loop.thisTrialN'
p2487
I113
sg895
g950
sS'block_loop.thisIndex'
p2488
g889
sg38
S'right'
p2489
sg59
g63
sS'trial_loop.thisN'
p2490
I113
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2491
g60
(g99
S'q\x00\x00\x00'
tRp2492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2493
I0
sg904
g958
sS'block_loop.thisRepN'
p2494
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2495
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2496
Nsg70
Vn
sS'block_loop.thisTrialN'
p2497
I0
sg39
F1.2666651081308373
sg34
g753
(S'\x07\xdf\x07\n\x0f\x03\x10\x06\x9fP'
tRp2498
sa(dp2499
S'trial_loop.thisTrialN'
p2500
I114
sg895
g2473
sS'block_loop.thisIndex'
p2501
g889
sg38
S'right'
p2502
sg59
g63
sS'trial_loop.thisN'
p2503
I114
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p2504
g60
(g99
S'r\x00\x00\x00'
tRp2505
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2506
I0
sg904
g2480
sS'block_loop.thisRepN'
p2507
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2508
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p2509
Nsg70
Vn
sS'block_loop.thisTrialN'
p2510
I0
sg39
F1.1833424184515025
sg34
g753
(S'\x07\xdf\x07\n\x0f\x03\x16\x0b;\x00'
tRp2511
sa(dp2512
S'trial_loop.thisTrialN'
p2513
I115
sg895
g1436
sS'block_loop.thisIndex'
p2514
g889
sg38
S'left'
p2515
sg59
g63
sS'trial_loop.thisN'
p2516
I115
sg33
g1294
sg64
g65
sS'trial_loop.thisIndex'
p2517
g60
(g99
S's\x00\x00\x00'
tRp2518
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2519
I0
sg904
g1443
sS'block_loop.thisRepN'
p2520
I0
sg907
g1294
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2521
I0
sg909
g1301
sg55
g11
sS'block_loop.thisTrial'
p2522
Nsg70
Vn
sS'block_loop.thisTrialN'
p2523
I0
sg39
F1.1833352910070971
sg34
g753
(S'\x07\xdf\x07\n\x0f\x03\x1c\x0ekh'
tRp2524
sa(dp2525
S'trial_loop.thisTrialN'
p2526
I116
sg895
g1247
sS'block_loop.thisIndex'
p2527
g889
sg38
S'left'
p2528
sg59
g63
sS'trial_loop.thisN'
p2529
I116
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2530
g60
(g99
S't\x00\x00\x00'
tRp2531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2532
I0
sg904
g1254
sS'block_loop.thisRepN'
p2533
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2534
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2535
Nsg70
Vn
sS'block_loop.thisTrialN'
p2536
I0
sg39
F1.5165234145133581
sg34
g753
(S'\x07\xdf\x07\n\x0f\x03#\x02\x98\x10'
tRp2537
sa(dp2538
S'trial_loop.thisTrialN'
p2539
I117
sg895
g1001
sS'block_loop.thisIndex'
p2540
g889
sg38
S'left'
p2541
sg59
g63
sS'trial_loop.thisN'
p2542
I117
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2543
g60
(g99
S'u\x00\x00\x00'
tRp2544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2545
I0
sg904
g1009
sS'block_loop.thisRepN'
p2546
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2547
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2548
Nsg70
Vn
sS'block_loop.thisTrialN'
p2549
I0
sg39
F1.666640817795269
sg34
g753
(S'\x07\xdf\x07\n\x0f\x03)\n\xc5\xd0'
tRp2550
sa(dp2551
S'trial_loop.thisTrialN'
p2552
I118
sg895
g1969
sS'block_loop.thisIndex'
p2553
g889
sg38
S'left'
p2554
sg59
g63
sS'trial_loop.thisN'
p2555
I118
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p2556
g60
(g99
S'v\x00\x00\x00'
tRp2557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2558
I0
sg904
g1976
sS'block_loop.thisRepN'
p2559
I0
sg907
g1037
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2560
I0
sg909
g1044
sg55
g11
sS'block_loop.thisTrial'
p2561
Nsg70
Vn
sS'block_loop.thisTrialN'
p2562
I0
sg39
F2.4499567791717709
sg34
g753
(S'\x07\xdf\x07\n\x0f\x030\x06Q0'
tRp2563
sa(dp2564
S'trial_loop.thisTrialN'
p2565
I119
sg895
g1572
sS'block_loop.thisIndex'
p2566
g889
sg38
S'right'
p2567
sg59
g63
sS'trial_loop.thisN'
p2568
I119
sg33
g1576
sg64
g65
sS'trial_loop.thisIndex'
p2569
g60
(g99
S'w\x00\x00\x00'
tRp2570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2571
I0
sg904
g1580
sS'block_loop.thisRepN'
p2572
I0
sg907
g1576
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2573
I0
sg909
g1583
sg55
g11
sS'block_loop.thisTrial'
p2574
Nsg70
Vn
sS'block_loop.thisTrialN'
p2575
I0
sg39
F2.9498455910179473
sg34
g753
(S'\x07\xdf\x07\n\x0f\x037\r\xc3p'
tRp2576
sa(dp2577
S'trial_loop.thisTrialN'
p2578
I120
sg895
g2142
sS'block_loop.thisIndex'
p2579
g889
sg38
S'left'
p2580
sg59
g63
sS'trial_loop.thisN'
p2581
I120
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p2582
g60
(g99
S'x\x00\x00\x00'
tRp2583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2584
I0
sg904
g2149
sS'block_loop.thisRepN'
p2585
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2586
I0
sg909
g1333
sg55
g11
sS'block_loop.thisTrial'
p2587
Nsg70
Vn
sS'block_loop.thisTrialN'
p2588
I0
sg39
F1.78317455285287
sg34
g753
(S'\x07\xdf\x07\n\x0f\x04\x03\rV\x10'
tRp2589
sa(dp2590
S'trial_loop.thisTrialN'
p2591
I121
sg895
g1822
sS'block_loop.thisIndex'
p2592
g889
sg38
S'left'
p2593
sg59
g63
sS'trial_loop.thisN'
p2594
I121
sg33
g1559
sg64
g65
sS'trial_loop.thisIndex'
p2595
g60
(g99
S'y\x00\x00\x00'
tRp2596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2597
I0
sg904
g1829
sS'block_loop.thisRepN'
p2598
I0
sg907
g1559
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2599
I0
sg909
g1566
sg55
g11
sS'block_loop.thisTrial'
p2600
Nsg70
Vn
sS'block_loop.thisTrialN'
p2601
I0
sg39
F1.1166483443776087
sg34
g753
(S'\x07\xdf\x07\n\x0f\x04\n\n\x8b8'
tRp2602
sa(dp2603
S'trial_loop.thisTrialN'
p2604
I122
sg895
g2328
sS'block_loop.thisIndex'
p2605
g889
sg38
S'left'
p2606
sg59
g63
sS'trial_loop.thisN'
p2607
I122
sg33
g1382
sg64
g65
sS'trial_loop.thisIndex'
p2608
g60
(g99
S'z\x00\x00\x00'
tRp2609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2610
I0
sg904
g2335
sS'block_loop.thisRepN'
p2611
I0
sg907
g1388
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2612
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p2613
Nsg70
Vn
sS'block_loop.thisTrialN'
p2614
I0
sg39
F1.6997235691524111
sg34
g753
(S'\x07\xdf\x07\n\x0f\x04\x10\x0c\xc5\x88'
tRp2615
sa(dp2616
S'trial_loop.thisTrialN'
p2617
I123
sg895
g1001
sS'block_loop.thisIndex'
p2618
g889
sg38
S'left'
p2619
sg59
g63
sS'trial_loop.thisN'
p2620
I123
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2621
g60
(g99
S'{\x00\x00\x00'
tRp2622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2623
I0
sg904
g1009
sS'block_loop.thisRepN'
p2624
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2625
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2626
Nsg70
Vn
sS'block_loop.thisTrialN'
p2627
I0
sg39
F1.383354506600881
sg34
g753
(S'\x07\xdf\x07\n\x0f\x04\x17\x08\xca\x00'
tRp2628
sa(dp2629
S'trial_loop.thisTrialN'
p2630
I124
sg895
g1555
sS'block_loop.thisIndex'
p2631
g889
sg38
S'right'
p2632
sg59
g63
sS'trial_loop.thisN'
p2633
I124
sg33
g1559
sg64
g65
sS'trial_loop.thisIndex'
p2634
g60
(g99
S'|\x00\x00\x00'
tRp2635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2636
I0
sg904
g1563
sS'block_loop.thisRepN'
p2637
I0
sg907
g1559
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2638
I0
sg909
g1566
sg55
g11
sS'block_loop.thisTrial'
p2639
Nsg70
Vn
sS'block_loop.thisTrialN'
p2640
I0
sg39
F0.96656372734651086
sg34
g753
(S'\x07\xdf\x07\n\x0f\x04\x1d\x0f\x13`'
tRp2641
sa(dp2642
S'trial_loop.thisTrialN'
p2643
I125
sg895
g916
sS'block_loop.thisIndex'
p2644
g889
sg38
S'left'
p2645
sg59
g63
sS'trial_loop.thisN'
p2646
I125
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2647
g60
(g99
S'}\x00\x00\x00'
tRp2648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2649
I0
sg904
g924
sS'block_loop.thisRepN'
p2650
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2651
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vn
sS'block_loop.thisTrialN'
p2653
I0
sg39
F2.5832251862229896
sg34
g753
(S'\x07\xdf\x07\n\x0f\x04#\x0f*\xd0'
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g2075
sS'block_loop.thisIndex'
p2657
g889
sg38
S'left'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g977
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g2082
sS'block_loop.thisRepN'
p2663
I0
sg907
g977
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2664
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vn
sS'block_loop.thisTrialN'
p2666
I0
sg39
F1.3496354169037659
sg34
g753
(S'\x07\xdf\x07\n\x0f\x04+\tC\x18'
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g950
sS'block_loop.thisIndex'
p2670
g889
sg38
S'right'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g958
sS'block_loop.thisRepN'
p2676
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2677
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vn
sS'block_loop.thisTrialN'
p2679
I0
sg39
F1.6832146946289868
sg34
g753
(S'\x07\xdf\x07\n\x0f\x041\x0f\x0fx'
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g1768
sS'block_loop.thisIndex'
p2683
g889
sg38
S'right'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g1576
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g1775
sS'block_loop.thisRepN'
p2689
I0
sg907
g1576
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2690
I0
sg909
g1583
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vn
sS'block_loop.thisTrialN'
p2692
I0
sg39
F2.2665952591669338
sg34
g753
(S'\x07\xdf\x07\n\x0f\x048\n\xd9X'
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g1555
sS'block_loop.thisIndex'
p2696
g889
sg38
S'right'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g1559
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g1563
sS'block_loop.thisRepN'
p2702
I0
sg907
g1559
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2703
I0
sg909
g1566
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vn
sS'block_loop.thisTrialN'
p2705
I0
sg39
F1.0165693152630411
sg34
g753
(S'\x07\xdf\x07\n\x0f\x05\x04\x00.\xe0'
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g967
sS'block_loop.thisIndex'
p2709
g889
sg38
S'right'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g975
sS'block_loop.thisRepN'
p2715
I0
sg907
g977
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2716
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vn
sS'block_loop.thisTrialN'
p2718
I0
sg39
F1.2163122710662719
sg34
g753
(S'\x07\xdf\x07\n\x0f\x05\n\x00\xfa\x00'
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g1969
sS'block_loop.thisIndex'
p2722
g889
sg38
S'left'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g1976
sS'block_loop.thisRepN'
p2728
I0
sg907
g1037
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg909
g1044
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vn
sS'block_loop.thisTrialN'
p2731
I0
sg39
F1.6832603102775465
sg34
g753
(S'\x07\xdf\x07\n\x0f\x05\x10\x04\xa3\x80'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g1275
sS'block_loop.thisIndex'
p2735
g889
sg38
S'right'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g1282
sS'block_loop.thisRepN'
p2741
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vn
sS'block_loop.thisTrialN'
p2744
I0
sg39
F1.7166486864953185
sg34
g753
(S'\x07\xdf\x07\n\x0f\x05\x17\x00m`'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g2142
sS'block_loop.thisIndex'
p2748
g889
sg38
S'left'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g2149
sS'block_loop.thisRepN'
p2754
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg909
g1333
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vn
sS'block_loop.thisTrialN'
p2757
I0
sg39
F1.0831738686174504
sg34
g753
(S'\x07\xdf\x07\n\x0f\x05\x1d\x0b\xf2\x98'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g1290
sS'block_loop.thisIndex'
p2761
g889
sg38
S'right'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1301
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g1298
sS'block_loop.thisRepN'
p2767
I0
sg907
g1294
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg909
g1301
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vn
sS'block_loop.thisTrialN'
p2770
I0
sg39
F0.98317096061873599
sg34
g753
(S'\x07\xdf\x07\n\x0f\x05#\r\xb3\xd0'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g1097
sS'block_loop.thisIndex'
p2774
g889
sg38
S'left'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g1105
sS'block_loop.thisRepN'
p2780
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vn
sS'block_loop.thisTrialN'
p2783
I0
sg39
F1.2165671485199709
sg34
g753
(S'\x07\xdf\x07\n\x0f\x05)\r\xcb@'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1018
sS'block_loop.thisIndex'
p2787
g889
sg38
S'left'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1025
sS'block_loop.thisRepN'
p2793
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vn
sS'block_loop.thisTrialN'
p2796
I0
sg39
F1.0499431514945172
sg34
g753
(S'\x07\xdf\x07\n\x0f\x050\x02q\x00'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g2328
sS'block_loop.thisIndex'
p2800
g889
sg38
S'left'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g1388
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g2335
sS'block_loop.thisRepN'
p2806
I0
sg907
g1388
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vn
sS'block_loop.thisTrialN'
p2809
I0
sg39
F1.5832551214953128
sg34
g753
(S'\x07\xdf\x07\n\x0f\x056\x03\xb9 '
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g1185
sS'block_loop.thisIndex'
p2813
g889
sg38
S'right'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g1192
sS'block_loop.thisRepN'
p2819
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vn
sS'block_loop.thisTrialN'
p2822
I0
sg39
F1.2999944691036944
sg34
g753
(S'\x07\xdf\x07\n\x0f\x06\x00\r\x17\x90'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1649
sS'block_loop.thisIndex'
p2826
g889
sg38
S'right'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1656
sS'block_loop.thisRepN'
p2832
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vn
sS'block_loop.thisTrialN'
p2835
I0
sg39
F0.93319388248346513
sg34
g753
(S'\x07\xdf\x07\n\x0f\x06\x07\x02\xee\x00'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g2473
sS'block_loop.thisIndex'
p2839
g889
sg38
S'right'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g2480
sS'block_loop.thisRepN'
p2845
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vn
sS'block_loop.thisTrialN'
p2848
I0
sg39
F1.266546222337638
sg34
g753
(S'\x07\xdf\x07\n\x0f\x06\r\x02\x8cX'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1082
sS'block_loop.thisIndex'
p2852
g889
sg38
S'left'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1089
sS'block_loop.thisRepN'
p2858
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vn
sS'block_loop.thisTrialN'
p2861
I0
sg39
F1.4664836148585891
sg34
g753
(S'\x07\xdf\x07\n\x0f\x06\x13\x06\xe9\x88'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g1097
sS'block_loop.thisIndex'
p2865
g889
sg38
S'left'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g1105
sS'block_loop.thisRepN'
p2871
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vn
sS'block_loop.thisTrialN'
p2874
I0
sg39
F1.0999185190412391
sg34
g753
(S'\x07\xdf\x07\n\x0f\x06\x19\x0e\xa2\x18'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g2473
sS'block_loop.thisIndex'
p2878
g889
sg38
S'right'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g2480
sS'block_loop.thisRepN'
p2884
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vn
sS'block_loop.thisTrialN'
p2887
I0
sg39
F1.1333351199464232
sg34
g753
(S'\x07\xdf\x07\n\x0f\x06 \x01[\xa8'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1822
sS'block_loop.thisIndex'
p2891
g889
sg38
S'left'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g1559
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1829
sS'block_loop.thisRepN'
p2897
I0
sg907
g1559
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g1566
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vn
sS'block_loop.thisTrialN'
p2900
I0
sg39
F0.93334926079842262
sg34
g753
(S'\x07\xdf\x07\n\x0f\x06&\x04\x12\xf8'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g896
sS'block_loop.thisIndex'
p2904
g889
sg38
S'left'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g905
sS'block_loop.thisRepN'
p2910
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vn
sS'block_loop.thisTrialN'
p2913
I0
sg39
F0.99991076438163873
sg34
g753
(S'\x07\xdf\x07\n\x0f\x06,\x03r\xd0'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1170
sS'block_loop.thisIndex'
p2917
g889
sg38
S'left'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1177
sS'block_loop.thisRepN'
p2923
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vn
sS'block_loop.thisTrialN'
p2926
I0
sg39
F1.5499089397562784
sg34
g753
(S'\x07\xdf\x07\n\x0f\x062\x04\x03X'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g1018
sS'block_loop.thisIndex'
p2930
g889
sg38
S'left'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g1025
sS'block_loop.thisRepN'
p2936
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vn
sS'block_loop.thisTrialN'
p2939
I0
sg39
F1.4166257076140027
sg34
g753
(S'\x07\xdf\x07\n\x0f\x068\x0c\xec\x98'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1378
sS'block_loop.thisIndex'
p2943
g889
sg38
S'left'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1382
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1386
sS'block_loop.thisRepN'
p2949
I0
sg907
g1388
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vn
sS'block_loop.thisTrialN'
p2952
I0
sg39
F1.7500159654773597
sg34
g753
(S'\x07\xdf\x07\n\x0f\x07\x03\x04h\xe8'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1140
sS'block_loop.thisIndex'
p2956
g889
sg38
S'left'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1148
sS'block_loop.thisRepN'
p2962
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vn
sS'block_loop.thisTrialN'
p2965
I0
sg39
F1.1332416078585084
sg34
g753
(S'\x07\xdf\x07\n\x0f\x07\n\x01$\xf8'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g2248
sS'block_loop.thisIndex'
p2969
g889
sg38
S'right'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g1593
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g2255
sS'block_loop.thisRepN'
p2975
I0
sg907
g1593
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g1600
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vn
sS'block_loop.thisTrialN'
p2978
I0
sg39
F1.466554034021101
sg34
g753
(S'\x07\xdf\x07\n\x0f\x07\x10\x03\x9d\xc8'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1378
sS'block_loop.thisIndex'
p2982
g889
sg38
S'right'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1388
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1386
sS'block_loop.thisRepN'
p2988
I0
sg907
g1388
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vn
sS'block_loop.thisTrialN'
p2991
I0
sg39
F2.5832859120600915
sg34
g753
(S'\x07\xdf\x07\n\x0f\x07\x16\x0bVX'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g2075
sS'block_loop.thisIndex'
p2995
g889
sg38
S'left'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g977
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g2082
sS'block_loop.thisRepN'
p3001
I0
sg907
g977
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vn
sS'block_loop.thisTrialN'
p3004
I0
sg39
F1.1496370134518656
sg34
g753
(S'\x07\xdf\x07\n\x0f\x07\x1e\x05n\xa0'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1822
sS'block_loop.thisIndex'
p3008
g889
sg38
S'left'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g1566
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1829
sS'block_loop.thisRepN'
p3014
I0
sg907
g1559
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g1566
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vn
sS'block_loop.thisTrialN'
p3017
I0
sg39
F0.8667130615831411
sg34
g753
(S'\x07\xdf\x07\n\x0f\x07$\x08`\x88'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1307
sS'block_loop.thisIndex'
p3021
g889
sg38
S'right'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1217
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1314
sS'block_loop.thisRepN'
p3027
I0
sg907
g1217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vn
sS'block_loop.thisTrialN'
p3030
I0
sg39
F2.1666564981787815
sg34
g753
(S'\x07\xdf\x07\n\x0f\x07*\x06\xce0'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1247
sS'block_loop.thisIndex'
p3034
g889
sg38
S'left'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1254
sS'block_loop.thisRepN'
p3040
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vn
sS'block_loop.thisTrialN'
p3043
I0
sg39
F1.0832628191383264
sg34
g753
(S'\x07\xdf\x07\n\x0f\x071\t\xb8H'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g2248
sS'block_loop.thisIndex'
p3047
g889
sg38
S'right'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1593
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g2255
sS'block_loop.thisRepN'
p3053
I0
sg907
g1593
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g1600
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vn
sS'block_loop.thisTrialN'
p3056
I0
sg39
F1.499873416567425
sg34
g753
(S'\x07\xdf\x07\n\x0f\x077\x0by\x80'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g984
sS'block_loop.thisIndex'
p3060
g889
sg38
S'right'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g992
sS'block_loop.thisRepN'
p3066
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vn
sS'block_loop.thisTrialN'
p3069
I0
sg39
F0.96667862177127972
sg34
g753
(S'\x07\xdf\x07\n\x0f\x08\x02\x04h\xe8'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1275
sS'block_loop.thisIndex'
p3073
g889
sg38
S'right'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1282
sS'block_loop.thisRepN'
p3079
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vn
sS'block_loop.thisTrialN'
p3082
I0
sg39
F1.3500143119090353
sg34
g753
(S'\x07\xdf\x07\n\x0f\x08\x08\x04\x80X'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1213
sS'block_loop.thisIndex'
p3086
g889
sg38
S'left'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g1217
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1221
sS'block_loop.thisRepN'
p3092
I0
sg907
g1217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vn
sS'block_loop.thisTrialN'
p3095
I0
sg39
F1.2998484990166617
sg34
g753
(S'\x07\xdf\x07\n\x0f\x08\x0e\nL\xb8'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1619
sS'block_loop.thisIndex'
p3099
g889
sg38
S'right'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1623
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1627
sS'block_loop.thisRepN'
p3105
I0
sg907
g1623
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g1630
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vn
sS'block_loop.thisTrialN'
p3108
I0
sg39
F1.1832460553850979
sg34
g753
(S'\x07\xdf\x07\n\x0f\x08\x15\x00#('
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1378
sS'block_loop.thisIndex'
p3112
g889
sg38
S'left'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1388
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1386
sS'block_loop.thisRepN'
p3118
I0
sg907
g1388
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vn
sS'block_loop.thisTrialN'
p3121
I0
sg39
F1.4332095628669776
sg34
g753
(S'\x07\xdf\x07\n\x0f\x08\x1b\x03\x8e('
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1307
sS'block_loop.thisIndex'
p3125
g889
sg38
S'right'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1217
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1314
sS'block_loop.thisRepN'
p3131
I0
sg907
g1217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vn
sS'block_loop.thisTrialN'
p3134
I0
sg39
F1.8665719381606323
sg34
g753
(S'\x07\xdf\x07\n\x0f\x08!\n\x8f '
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1170
sS'block_loop.thisIndex'
p3138
g889
sg38
S'left'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1177
sS'block_loop.thisRepN'
p3144
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vn
sS'block_loop.thisTrialN'
p3147
I0
sg39
F0.91666362562318682
sg34
g753
(S'\x07\xdf\x07\n\x0f\x08(\x08\xf4\xf8'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g1619
sS'block_loop.thisIndex'
p3151
g889
sg38
S'right'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1630
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g1627
sS'block_loop.thisRepN'
p3157
I0
sg907
g1623
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g1630
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vn
sS'block_loop.thisTrialN'
p3160
I0
sg39
F0.93325888479012065
sg34
g753
(S'\x07\xdf\x07\n\x0f\x08.\x08T\xd0'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1969
sS'block_loop.thisIndex'
p3164
g889
sg38
S'left'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1976
sS'block_loop.thisRepN'
p3170
I0
sg907
g1037
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g1044
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vn
sS'block_loop.thisTrialN'
p3173
I0
sg39
F1.3331656007794663
sg34
g753
(S'\x07\xdf\x07\n\x0f\x084\x07\xb4\xa8'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1768
sS'block_loop.thisIndex'
p3177
g889
sg38
S'right'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1576
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1775
sS'block_loop.thisRepN'
p3183
I0
sg907
g1576
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g1583
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vn
sS'block_loop.thisTrialN'
p3186
I0
sg39
F3.8664718688269204
sg34
g753
(S'\x07\xdf\x07\n\x0f\x08:\rFp'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g1649
sS'block_loop.thisIndex'
p3190
g889
sg38
S'right'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g1656
sS'block_loop.thisRepN'
p3196
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vn
sS'block_loop.thisTrialN'
p3199
I0
sg39
F1.0665643545617058
sg34
g753
(S'\x07\xdf\x07\n\x0f\t\x07\x0b\xdf\x10'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1589
sS'block_loop.thisIndex'
p3203
g889
sg38
S'left'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1593
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1597
sS'block_loop.thisRepN'
p3209
I0
sg907
g1593
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g1600
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vn
sS'block_loop.thisTrialN'
p3212
I0
sg39
F1.1166432126192376
sg34
g753
(S'\x07\xdf\x07\n\x0f\t\r\ra\xc8'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1230
sS'block_loop.thisIndex'
p3216
g889
sg38
S'right'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1234
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1238
sS'block_loop.thisRepN'
p3222
I0
sg907
g1234
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g1241
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vn
sS'block_loop.thisTrialN'
p3225
I0
sg39
F1.4832211378379725
sg34
g753
(S'\x07\xdf\x07\n\x0f\t\x14\x00]\xc0'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1050
sS'block_loop.thisIndex'
p3229
g889
sg38
S'right'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1058
sS'block_loop.thisRepN'
p3235
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vn
sS'block_loop.thisTrialN'
p3238
I0
sg39
F1.2332641876091657
sg34
g753
(S'\x07\xdf\x07\n\x0f\t\x1a\x08P\xe8'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1619
sS'block_loop.thisIndex'
p3242
g889
sg38
S'right'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1630
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1627
sS'block_loop.thisRepN'
p3248
I0
sg907
g1623
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g1630
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vn
sS'block_loop.thisTrialN'
p3251
I0
sg39
F0.88322963375321706
sg34
g753
(S'\x07\xdf\x07\n\x0f\t \x0cs\x80'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1170
sS'block_loop.thisIndex'
p3255
g889
sg38
S'left'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1177
sS'block_loop.thisRepN'
p3261
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vn
sS'block_loop.thisTrialN'
p3264
I0
sg39
F1.1665264935727464
sg34
g753
(S'\x07\xdf\x07\n\x0f\t&\x0b\x1b\xc0'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1589
sS'block_loop.thisIndex'
p3268
g889
sg38
S'left'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1593
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1597
sS'block_loop.thisRepN'
p3274
I0
sg907
g1593
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g1600
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vn
sS'block_loop.thisTrialN'
p3277
I0
sg39
F1.0666761129104998
sg34
g753
(S'\x07\xdf\x07\n\x0f\t,\x0e\r\xa8'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g1969
sS'block_loop.thisIndex'
p3281
g889
sg38
S'left'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g1976
sS'block_loop.thisRepN'
p3287
I0
sg907
g1037
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g1044
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vn
sS'block_loop.thisTrialN'
p3290
I0
sg39
F1.6332561478484422
sg34
g753
(S'\x07\xdf\x07\n\x0f\t3\x00R\x08'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g916
sS'block_loop.thisIndex'
p3294
g889
sg38
S'left'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g924
sS'block_loop.thisRepN'
p3300
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vn
sS'block_loop.thisTrialN'
p3303
I0
sg39
F1.0166722355788806
sg34
g753
(S'\x07\xdf\x07\n\x0f\t9\n\xa6\x90'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1275
sS'block_loop.thisIndex'
p3307
g889
sg38
S'right'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1282
sS'block_loop.thisRepN'
p3313
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vn
sS'block_loop.thisTrialN'
p3316
I0
sg39
F1.7165962284962006
sg34
g753
(S'\x07\xdf\x07\n\x0f\n\x03\x0b7\x18'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g950
sS'block_loop.thisIndex'
p3320
g889
sg38
S'right'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g958
sS'block_loop.thisRepN'
p3326
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vn
sS'block_loop.thisTrialN'
p3329
I0
sg39
F1.0166673889143567
sg34
g753
(S'\x07\xdf\x07\n\x0f\n\n\x07z\x10'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g2328
sS'block_loop.thisIndex'
p3333
g889
sg38
S'right'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1388
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g2335
sS'block_loop.thisRepN'
p3339
I0
sg907
g1388
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vn
sS'block_loop.thisTrialN'
p3342
I0
sg39
F1.0500292510369036
sg34
g753
(S'\x07\xdf\x07\n\x0f\n\x10\x08I\x18'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g2248
sS'block_loop.thisIndex'
p3346
g889
sg38
S'right'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1593
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g2255
sS'block_loop.thisRepN'
p3352
I0
sg907
g1593
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g1600
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vn
sS'block_loop.thisTrialN'
p3355
I0
sg39
F0.96668289823719533
sg34
g753
(S'\x07\xdf\x07\n\x0f\n\x16\t\x918'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g1230
sS'block_loop.thisIndex'
p3359
g889
sg38
S'right'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1241
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g1238
sS'block_loop.thisRepN'
p3365
I0
sg907
g1234
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g1241
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vn
sS'block_loop.thisTrialN'
p3368
I0
sg39
F1.0331611532528768
sg34
g753
(S'\x07\xdf\x07\n\x0f\n\x1c\tj('
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g2248
sS'block_loop.thisIndex'
p3372
g889
sg38
S'right'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1593
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g2255
sS'block_loop.thisRepN'
p3378
I0
sg907
g1593
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g1600
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vn
sS'block_loop.thisTrialN'
p3381
I0
sg39
F0.84987119280049228
sg34
g753
(S'\x07\xdf\x07\n\x0f\n"\ns\xc8'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g2075
sS'block_loop.thisIndex'
p3385
g889
sg38
S'left'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g977
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g2082
sS'block_loop.thisRepN'
p3391
I0
sg907
g977
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vn
sS'block_loop.thisTrialN'
p3394
I0
sg39
F1.08295947505394
sg34
g753
(S'\x07\xdf\x07\n\x0f\n(\x08\xe1p'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g1619
sS'block_loop.thisIndex'
p3398
g889
sg38
S'right'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1630
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g1627
sS'block_loop.thisRepN'
p3404
I0
sg907
g1623
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g1630
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vn
sS'block_loop.thisTrialN'
p3407
I0
sg39
F0.86657450404527481
sg34
g753
(S'\x07\xdf\x07\n\x0f\n.\n\xa2\xa8'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g2473
sS'block_loop.thisIndex'
p3411
g889
sg38
S'right'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g2480
sS'block_loop.thisRepN'
p3417
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vn
sS'block_loop.thisTrialN'
p3420
I0
sg39
F1.1666482303407975
sg34
g753
(S'\x07\xdf\x07\n\x0f\n4\t\x10P'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g933
sS'block_loop.thisIndex'
p3424
g889
sg38
S'right'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g941
sS'block_loop.thisRepN'
p3430
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vn
sS'block_loop.thisTrialN'
p3433
I0
sg39
F0.96657313557443558
sg34
g753
(S'\x07\xdf\x07\n\x0f\n:\x0c\x028'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g1185
sS'block_loop.thisIndex'
p3437
g889
sg38
S'right'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g1192
sS'block_loop.thisRepN'
p3443
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vn
sS'block_loop.thisTrialN'
p3446
I0
sg39
F1.083316417531023
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0b\x04\x0c\x19\xa8'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g984
sS'block_loop.thisIndex'
p3450
g889
sg38
S'right'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g992
sS'block_loop.thisRepN'
p3456
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vn
sS'block_loop.thisTrialN'
p3459
I0
sg39
F1.0498584774395567
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0b\n\r\xde\xc8'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1572
sS'block_loop.thisIndex'
p3463
g889
sg38
S'left'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1583
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1580
sS'block_loop.thisRepN'
p3469
I0
sg907
g1576
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g1583
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vn
sS'block_loop.thisTrialN'
p3472
I0
sg39
F1.4333968721330166
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0b\x10\x0f&\xe8'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g1307
sS'block_loop.thisIndex'
p3476
g889
sg38
S'right'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1217
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g1314
sS'block_loop.thisRepN'
p3482
I0
sg907
g1217
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vn
sS'block_loop.thisTrialN'
p3485
I0
sg39
F1.1832930965283595
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0b\x17\x06\xe1\xb8'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1837
sS'block_loop.thisIndex'
p3489
g889
sg38
S'left'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1623
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1844
sS'block_loop.thisRepN'
p3495
I0
sg907
g1623
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g1630
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vn
sS'block_loop.thisTrialN'
p3498
I0
sg39
F0.8499370504032413
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0b\x1d\nP\xa0'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g1140
sS'block_loop.thisIndex'
p3502
g889
sg38
S'left'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g1148
sS'block_loop.thisRepN'
p3508
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vn
sS'block_loop.thisTrialN'
p3511
I0
sg39
F0.93322638363679289
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0b#\x08\x7f\xc8'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g2142
sS'block_loop.thisIndex'
p3515
g889
sg38
S'left'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g2149
sS'block_loop.thisRepN'
p3521
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g1333
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vn
sS'block_loop.thisTrialN'
p3524
I0
sg39
F1.3331299635538016
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0b)\x08\x1e '
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1290
sS'block_loop.thisIndex'
p3528
g889
sg38
S'right'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g1294
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1298
sS'block_loop.thisRepN'
p3534
I0
sg907
g1294
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g1301
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vn
sS'block_loop.thisTrialN'
p3537
I0
sg39
F2.8666392212471692
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0b/\r\xac\x00'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g1140
sS'block_loop.thisIndex'
p3541
g889
sg38
S'left'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g1148
sS'block_loop.thisRepN'
p3547
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vn
sS'block_loop.thisTrialN'
p3550
I0
sg39
F0.84999349976715166
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0b7\x0c\r\xf0'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1436
sS'block_loop.thisIndex'
p3554
g889
sg38
S'left'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g1294
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1443
sS'block_loop.thisRepN'
p3560
I0
sg907
g1294
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g1301
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vn
sS'block_loop.thisTrialN'
p3563
I0
sg39
F0.93325403812559671
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0c\x01\n=\x18'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1001
sS'block_loop.thisIndex'
p3567
g889
sg38
S'left'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1009
sS'block_loop.thisRepN'
p3573
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vn
sS'block_loop.thisTrialN'
p3576
I0
sg39
F1.3832900744891958
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0c\x07\t\xdbp'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1572
sS'block_loop.thisIndex'
p3580
g889
sg38
S'right'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1576
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1580
sS'block_loop.thisRepN'
p3586
I0
sg907
g1576
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g1583
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vn
sS'block_loop.thisTrialN'
p3589
I0
sg39
F2.9998577361875505
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0c\x0e\x00\xe2\x90'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g1408
sS'block_loop.thisIndex'
p3593
g889
sg38
S'left'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g1234
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1415
sS'block_loop.thisRepN'
p3599
I0
sg907
g1234
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g1241
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vn
sS'block_loop.thisTrialN'
p3602
I0
sg39
F1.0666915081892512
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0c\x16\x01g`'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g984
sS'block_loop.thisIndex'
p3606
g889
sg38
S'right'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g992
sS'block_loop.thisRepN'
p3612
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vn
sS'block_loop.thisTrialN'
p3615
I0
sg39
F0.91662998407991836
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0c\x1c\x02\xea\x18'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F77.681484435939637
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vn
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vn
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'50-polo.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'right'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'48-twix.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'48-twix.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'50-polo.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vn
sS'block_loop.thisTrialN'
p3650
I0
sg39
F1.7831808250048198
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0e7\x00\xfd\xe8'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'38-maltesers.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'left'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'38-maltesers.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'6-sour_patch_kids.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
S'6-sour_patch_kids.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vn
sS'block_loop.thisTrialN'
p3667
I0
sg39
F1.0329236667676014
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0f\x01\r:\xb8'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'18-mms.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'left'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'18-mms.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3681
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vn
sS'block_loop.thisTrialN'
p3684
I0
sg39
F1.0500871258955158
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0f\x07\x0eH@'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'27-hartleys_raspberries_jelly.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'right'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'51-mars.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'51-mars.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3698
I1
sg3647
S'27-hartleys_raspberries_jelly.png'
p3699
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vn
sS'block_loop.thisTrialN'
p3701
I0
sg39
F0.96657456106186146
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0f\x0e\x00N '
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'26-walkers_smoky_bacon.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'right'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'44-crunch.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'44-crunch.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3715
I1
sg3647
S'26-walkers_smoky_bacon.png'
p3716
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vn
sS'block_loop.thisTrialN'
p3718
I0
sg39
F1.1164299594493059
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0f\x14\x00e\x90'
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
S'29-beans.png'
p3722
sS'block_loop.thisIndex'
p3723
g3627
sg38
S'right'
p3724
sg59
g63
sS'trial_loop.thisN'
p3725
I5
sg33
S'46-pistachios.png'
p3726
sg64
g65
sS'trial_loop.thisIndex'
p3727
g60
(g99
S'\x05\x00\x00\x00'
tRp3728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3729
I0
sg3642
S'46-pistachios.png'
p3730
sS'block_loop.thisRepN'
p3731
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3732
I1
sg3647
S'29-beans.png'
p3733
sg55
g11
sS'block_loop.thisTrial'
p3734
Nsg70
Vn
sS'block_loop.thisTrialN'
p3735
I0
sg39
F0.81669093799791881
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0f\x1a\x02\x9f\xe0'
tRp3736
sa(dp3737
S'trial_loop.thisTrialN'
p3738
I6
sg3633
S'43-mrporky_pork_crackles_redo.png'
p3739
sS'block_loop.thisIndex'
p3740
g3627
sg38
S'right'
p3741
sg59
g63
sS'trial_loop.thisN'
p3742
I6
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p3743
g60
(g99
S'\x06\x00\x00\x00'
tRp3744
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3745
I0
sg3642
S'18-mms.png'
p3746
sS'block_loop.thisRepN'
p3747
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3748
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p3749
Nsg70
Vn
sS'block_loop.thisTrialN'
p3750
I0
sg39
F0.88329606154729845
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0f \x00U\xf0'
tRp3751
sa(dp3752
S'trial_loop.thisTrialN'
p3753
I7
sg3633
g3634
sS'block_loop.thisIndex'
p3754
g3627
sg38
S'right'
p3755
sg59
g63
sS'trial_loop.thisN'
p3756
I7
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3757
g60
(g99
S'\x07\x00\x00\x00'
tRp3758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3759
I0
sg3642
g3643
sS'block_loop.thisRepN'
p3760
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3761
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3762
Nsg70
Vn
sS'block_loop.thisTrialN'
p3763
I0
sg39
F1.1498847634611593
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0f%\x0e@p'
tRp3764
sa(dp3765
S'trial_loop.thisTrialN'
p3766
I8
sg3633
g3705
sS'block_loop.thisIndex'
p3767
g3627
sg38
S'right'
p3768
sg59
g63
sS'trial_loop.thisN'
p3769
I8
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p3770
g60
(g99
S'\x08\x00\x00\x00'
tRp3771
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3772
I0
sg3642
g3713
sS'block_loop.thisRepN'
p3773
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3774
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p3775
Nsg70
Vn
sS'block_loop.thisTrialN'
p3776
I0
sg39
F1.5832491344408481
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0f,\x01\xf4\x00'
tRp3777
sa(dp3778
S'trial_loop.thisTrialN'
p3779
I9
sg3633
S'48-twix.png'
p3780
sS'block_loop.thisIndex'
p3781
g3627
sg38
S'left'
p3782
sg59
g63
sS'trial_loop.thisN'
p3783
I9
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3784
g60
(g99
S'\t\x00\x00\x00'
tRp3785
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3786
I0
sg3642
S'50-polo.png'
p3787
sS'block_loop.thisRepN'
p3788
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3789
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3790
Nsg70
Vn
sS'block_loop.thisTrialN'
p3791
I0
sg39
F1.0499206287640845
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0f2\x0bRp'
tRp3792
sa(dp3793
S'trial_loop.thisTrialN'
p3794
I10
sg3633
S'41-peanuts_redo.png'
p3795
sS'block_loop.thisIndex'
p3796
g3627
sg38
S'right'
p3797
sg59
g63
sS'trial_loop.thisN'
p3798
I10
sg33
S'45-chewy_nougat_redo.png'
p3799
sg64
g65
sS'trial_loop.thisIndex'
p3800
g60
(g99
S'\n\x00\x00\x00'
tRp3801
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3802
I0
sg3642
S'45-chewy_nougat_redo.png'
p3803
sS'block_loop.thisRepN'
p3804
I1
sg3645
g3799
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3805
I1
sg3647
S'41-peanuts_redo.png'
p3806
sg55
g11
sS'block_loop.thisTrial'
p3807
Nsg70
Vn
sS'block_loop.thisTrialN'
p3808
I0
sg39
F0.91702370417624479
sg34
g753
(S'\x07\xdf\x07\n\x0f\x0f8\x0c\x9a\x90'
tRp3809
sa(dp3810
S'trial_loop.thisTrialN'
p3811
I11
sg3633
S'40-sardines.png'
p3812
sS'block_loop.thisIndex'
p3813
g3627
sg38
S'right'
p3814
sg59
g63
sS'trial_loop.thisN'
p3815
I11
sg33
S'5-pineapple.png'
p3816
sg64
g65
sS'trial_loop.thisIndex'
p3817
g60
(g99
S'\x0b\x00\x00\x00'
tRp3818
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3819
I0
sg3642
S'5-pineapple.png'
p3820
sS'block_loop.thisRepN'
p3821
I1
sg3645
g3816
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3822
I1
sg3647
S'40-sardines.png'
p3823
sg55
g11
sS'block_loop.thisTrial'
p3824
Nsg70
Vn
sS'block_loop.thisTrialN'
p3825
I0
sg39
F0.66656612216684152
sg34
g753
(S'\x07\xdf\x07\n\x0f\x10\x02\x0b\xbf\xd0'
tRp3826
sa(dp3827
S'trial_loop.thisTrialN'
p3828
I12
sg3633
S'3-ellas_strawberries_apples.png'
p3829
sS'block_loop.thisIndex'
p3830
g3627
sg38
S'left'
p3831
sg59
g63
sS'trial_loop.thisN'
p3832
I12
sg33
S'3-ellas_strawberries_apples.png'
p3833
sg64
g65
sS'trial_loop.thisIndex'
p3834
g60
(g99
S'\x0c\x00\x00\x00'
tRp3835
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3836
I0
sg3642
S'13-mccoys_steak_crisps.png'
p3837
sS'block_loop.thisRepN'
p3838
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3839
I1
sg3647
S'13-mccoys_steak_crisps.png'
p3840
sg55
g11
sS'block_loop.thisTrial'
p3841
Nsg70
Vn
sS'block_loop.thisTrialN'
p3842
I0
sg39
F0.86658847384023829
sg34
g753
(S'\x07\xdf\x07\n\x0f\x10\x08\x07O\x18'
tRp3843
sa(dp3844
S'trial_loop.thisTrialN'
p3845
I13
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p3846
sS'block_loop.thisIndex'
p3847
g3627
sg38
S'left'
p3848
sg59
g63
sS'trial_loop.thisN'
p3849
I13
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3850
sg64
g65
sS'trial_loop.thisIndex'
p3851
g60
(g99
S'\r\x00\x00\x00'
tRp3852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3853
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p3854
sS'block_loop.thisRepN'
p3855
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3856
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p3857
sg55
g11
sS'block_loop.thisTrial'
p3858
Nsg70
Vn
sS'block_loop.thisTrialN'
p3859
I0
sg39
F1.3498347002823721
sg34
g753
(S'\x07\xdf\x07\n\x0f\x10\x0e\x05\xbc\xc0'
tRp3860
sa(dp3861
S'trial_loop.thisTrialN'
p3862
I14
sg3633
S'25-kitkat.png'
p3863
sS'block_loop.thisIndex'
p3864
g3627
sg38
S'right'
p3865
sg59
g63
sS'trial_loop.thisN'
p3866
I14
sg33
S'31-hobnobs.png'
p3867
sg64
g65
sS'trial_loop.thisIndex'
p3868
g60
(g99
S'\x0e\x00\x00\x00'
tRp3869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3870
I0
sg3642
S'31-hobnobs.png'
p3871
sS'block_loop.thisRepN'
p3872
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3873
I1
sg3647
S'25-kitkat.png'
p3874
sg55
g11
sS'block_loop.thisTrial'
p3875
Nsg70
Vn
sS'block_loop.thisTrialN'
p3876
I0
sg39
F1.433366366669361
sg34
g753
(S'\x07\xdf\x07\n\x0f\x10\x14\x0b\x89 '
tRp3877
sa(dp3878
S'trial_loop.thisTrialN'
p3879
I15
sg3633
S'46-pistachios.png'
p3880
sS'block_loop.thisIndex'
p3881
g3627
sg38
S'left'
p3882
sg59
g63
sS'trial_loop.thisN'
p3883
I15
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p3884
g60
(g99
S'\x0f\x00\x00\x00'
tRp3885
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3886
I0
sg3642
S'29-beans.png'
p3887
sS'block_loop.thisRepN'
p3888
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3889
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p3890
Nsg70
Vn
sS'block_loop.thisTrialN'
p3891
I0
sg39
F0.86669110905495472
sg34
g753
(S'\x07\xdf\x07\n\x0f\x10\x1b\x03G\xd8'
tRp3892
sa(dp3893
S'trial_loop.thisTrialN'
p3894
I16
sg3633
S'22-daim.png'
p3895
sS'block_loop.thisIndex'
p3896
g3627
sg38
S'left'
p3897
sg59
g63
sS'trial_loop.thisN'
p3898
I16
sg33
S'7-olives.png'
p3899
sg64
g65
sS'trial_loop.thisIndex'
p3900
g60
(g99
S'\x10\x00\x00\x00'
tRp3901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3902
I0
sg3642
S'7-olives.png'
p3903
sS'block_loop.thisRepN'
p3904
I1
sg3645
S'22-daim.png'
p3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3906
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p3907
Nsg70
Vn
sS'block_loop.thisTrialN'
p3908
I0
sg39
F0.96657113988840138
sg34
g753
(S'\x07\xdf\x07\n\x0f\x10!\x01\xf0\x18'
tRp3909
sa(dp3910
S'trial_loop.thisTrialN'
p3911
I17
sg3633
g3880
sS'block_loop.thisIndex'
p3912
g3627
sg38
S'left'
p3913
sg59
g63
sS'trial_loop.thisN'
p3914
I17
sg33
g3733
sg64
g65
sS'trial_loop.thisIndex'
p3915
g60
(g99
S'\x11\x00\x00\x00'
tRp3916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3917
I0
sg3642
g3887
sS'block_loop.thisRepN'
p3918
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3919
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p3920
Nsg70
Vn
sS'block_loop.thisTrialN'
p3921
I0
sg39
F1.0166303261976282
sg34
g753
(S"\x07\xdf\x07\n\x0f\x10'\x01\xcc\xf0"
tRp3922
sa(dp3923
S'trial_loop.thisTrialN'
p3924
I18
sg3633
S'31-hobnobs.png'
p3925
sS'block_loop.thisIndex'
p3926
g3627
sg38
S'left'
p3927
sg59
g63
sS'trial_loop.thisN'
p3928
I18
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p3929
g60
(g99
S'\x12\x00\x00\x00'
tRp3930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3931
I0
sg3642
S'25-kitkat.png'
p3932
sS'block_loop.thisRepN'
p3933
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3934
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p3935
Nsg70
Vn
sS'block_loop.thisTrialN'
p3936
I0
sg39
F0.86653373505396303
sg34
g753
(S'\x07\xdf\x07\n\x0f\x10-\x02\x98\x10'
tRp3937
sa(dp3938
S'trial_loop.thisTrialN'
p3939
I19
sg3633
S'13-mccoys_steak_crisps.png'
p3940
sS'block_loop.thisIndex'
p3941
g3627
sg38
S'right'
p3942
sg59
g63
sS'trial_loop.thisN'
p3943
I19
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p3944
g60
(g99
S'\x13\x00\x00\x00'
tRp3945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3946
I0
sg3642
S'3-ellas_strawberries_apples.png'
p3947
sS'block_loop.thisRepN'
p3948
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3949
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p3950
Nsg70
Vn
sS'block_loop.thisTrialN'
p3951
I0
sg39
F0.93325261263453285
sg34
g753
(S'\x07\xdf\x07\n\x0f\x103\x01\x05\xb8'
tRp3952
sa(dp3953
S'trial_loop.thisTrialN'
p3954
I20
sg3633
S'2-steamed_puddings.png'
p3955
sS'block_loop.thisIndex'
p3956
g3627
sg38
S'left'
p3957
sg59
g63
sS'trial_loop.thisN'
p3958
I20
sg33
S'2-steamed_puddings.png'
p3959
sg64
g65
sS'trial_loop.thisIndex'
p3960
g60
(g99
S'\x14\x00\x00\x00'
tRp3961
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3962
I0
sg3642
S'20-fruit_pastilles.png'
p3963
sS'block_loop.thisRepN'
p3964
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3965
I1
sg3647
S'20-fruit_pastilles.png'
p3966
sg55
g11
sS'block_loop.thisTrial'
p3967
Nsg70
Vn
sS'block_loop.thisTrialN'
p3968
I0
sg39
F0.84992194021833711
sg34
g753
(S'\x07\xdf\x07\n\x0f\x109\x00\xa4\x10'
tRp3969
sa(dp3970
S'trial_loop.thisTrialN'
p3971
I21
sg3633
S'10-bounty_redo.png'
p3972
sS'block_loop.thisIndex'
p3973
g3627
sg38
S'left'
p3974
sg59
g63
sS'trial_loop.thisN'
p3975
I21
sg33
S'10-bounty_redo.png'
p3976
sg64
g65
sS'trial_loop.thisIndex'
p3977
g60
(g99
S'\x15\x00\x00\x00'
tRp3978
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3979
I0
sg3642
S'4-corn.png'
p3980
sS'block_loop.thisRepN'
p3981
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3982
I1
sg3647
S'4-corn.png'
p3983
sg55
g11
sS'block_loop.thisTrial'
p3984
Nsg70
Vn
sS'block_loop.thisTrialN'
p3985
I0
sg39
F1.4666161853456288
sg34
g753
(S'\x07\xdf\x07\n\x0f\x11\x02\x0e\x15x'
tRp3986
sa(dp3987
S'trial_loop.thisTrialN'
p3988
I22
sg3633
g3671
sS'block_loop.thisIndex'
p3989
g3627
sg38
S'left'
p3990
sg59
g63
sS'trial_loop.thisN'
p3991
I22
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p3992
g60
(g99
S'\x16\x00\x00\x00'
tRp3993
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3994
I0
sg3642
g3679
sS'block_loop.thisRepN'
p3995
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3996
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p3997
Nsg70
Vn
sS'block_loop.thisTrialN'
p3998
I0
sg39
F0.99990249654365471
sg34
g753
(S'\x07\xdf\x07\n\x0f\x11\t\x06\x8b\xc8'
tRp3999
sa(dp4000
S'trial_loop.thisTrialN'
p4001
I23
sg3633
S'20-fruit_pastilles.png'
p4002
sS'block_loop.thisIndex'
p4003
g3627
sg38
S'right'
p4004
sg59
g63
sS'trial_loop.thisN'
p4005
I23
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p4006
g60
(g99
S'\x17\x00\x00\x00'
tRp4007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4008
I0
sg3642
S'2-steamed_puddings.png'
p4009
sS'block_loop.thisRepN'
p4010
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4011
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p4012
Nsg70
Vn
sS'block_loop.thisTrialN'
p4013
I0
sg39
F0.96649558896751842
sg34
g753
(S'\x07\xdf\x07\n\x0f\x11\x0f\x06\xdd\xd0'
tRp4014
sa(dp4015
S'trial_loop.thisTrialN'
p4016
I24
sg3633
g3863
sS'block_loop.thisIndex'
p4017
g3627
sg38
S'right'
p4018
sg59
g63
sS'trial_loop.thisN'
p4019
I24
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p4020
g60
(g99
S'\x18\x00\x00\x00'
tRp4021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4022
I0
sg3642
g3871
sS'block_loop.thisRepN'
p4023
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4024
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p4025
Nsg70
Vn
sS'block_loop.thisTrialN'
p4026
I0
sg39
F1.2665239847083285
sg34
g753
(S'\x07\xdf\x07\n\x0f\x11\x15\x06\xf5@'
tRp4027
sa(dp4028
S'trial_loop.thisTrialN'
p4029
I25
sg3633
S'49-yorkie.png'
p4030
sS'block_loop.thisIndex'
p4031
g3627
sg38
S'right'
p4032
sg59
g63
sS'trial_loop.thisN'
p4033
I25
sg33
S'49-yorkie.png'
p4034
sg64
g65
sS'trial_loop.thisIndex'
p4035
g60
(g99
S'\x19\x00\x00\x00'
tRp4036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4037
I0
sg3642
S'35-raisins.png'
p4038
sS'block_loop.thisRepN'
p4039
I1
sg3645
g4034
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4040
I1
sg3647
S'35-raisins.png'
p4041
sg55
g11
sS'block_loop.thisTrial'
p4042
Nsg70
Vn
sS'block_loop.thisTrialN'
p4043
I0
sg39
F2.3665491303399904
sg34
g753
(S'\x07\xdf\x07\n\x0f\x11\x1b\x0b\x94\xd8'
tRp4044
sa(dp4045
S'trial_loop.thisTrialN'
p4046
I26
sg3633
S'4-corn.png'
p4047
sS'block_loop.thisIndex'
p4048
g3627
sg38
S'right'
p4049
sg59
g63
sS'trial_loop.thisN'
p4050
I26
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p4051
g60
(g99
S'\x1a\x00\x00\x00'
tRp4052
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4053
I0
sg3642
S'10-bounty_redo.png'
p4054
sS'block_loop.thisRepN'
p4055
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4056
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p4057
Nsg70
Vn
sS'block_loop.thisTrialN'
p4058
I0
sg39
F1.0666381948976777
sg34
g753
(S'\x07\xdf\x07\n\x0f\x11#\x02U\xa8'
tRp4059
sa(dp4060
S'trial_loop.thisTrialN'
p4061
I27
sg3633
S'23-crunchie_redo.png'
p4062
sS'block_loop.thisIndex'
p4063
g3627
sg38
S'left'
p4064
sg59
g63
sS'trial_loop.thisN'
p4065
I27
sg33
S'23-crunchie_redo.png'
p4066
sg64
g65
sS'trial_loop.thisIndex'
p4067
g60
(g99
S'\x1b\x00\x00\x00'
tRp4068
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4069
I0
sg3642
S'33-ambrosia_rice.png'
p4070
sS'block_loop.thisRepN'
p4071
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4072
I1
sg3647
S'33-ambrosia_rice.png'
p4073
sg55
g11
sS'block_loop.thisTrial'
p4074
Nsg70
Vn
sS'block_loop.thisTrialN'
p4075
I0
sg39
F0.89993921714631142
sg34
g753
(S'\x07\xdf\x07\n\x0f\x11)\x03\xdcH'
tRp4076
sa(dp4077
S'trial_loop.thisTrialN'
p4078
I28
sg3633
S'6-sour_patch_kids.png'
p4079
sS'block_loop.thisIndex'
p4080
g3627
sg38
S'right'
p4081
sg59
g63
sS'trial_loop.thisN'
p4082
I28
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4083
g60
(g99
S'\x1c\x00\x00\x00'
tRp4084
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4085
I0
sg3642
S'38-maltesers.png'
p4086
sS'block_loop.thisRepN'
p4087
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4088
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4089
Nsg70
Vn
sS'block_loop.thisTrialN'
p4090
I0
sg39
F1.4828867180913221
sg34
g753
(S'\x07\xdf\x07\n\x0f\x11/\x02\xc3\x08'
tRp4091
sa(dp4092
S'trial_loop.thisTrialN'
p4093
I29
sg3633
S'5-pineapple.png'
p4094
sS'block_loop.thisIndex'
p4095
g3627
sg38
S'left'
p4096
sg59
g63
sS'trial_loop.thisN'
p4097
I29
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p4098
g60
(g99
S'\x1d\x00\x00\x00'
tRp4099
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4100
I0
sg3642
S'40-sardines.png'
p4101
sS'block_loop.thisRepN'
p4102
I1
sg3645
g3816
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4103
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p4104
Nsg70
Vn
sS'block_loop.thisTrialN'
p4105
I0
sg39
F1.3165526655502617
sg34
g753
(S'\x07\xdf\x07\n\x0f\x115\n\xb2H'
tRp4106
sa(dp4107
S'trial_loop.thisTrialN'
p4108
I30
sg3633
S'44-crunch.png'
p4109
sS'block_loop.thisIndex'
p4110
g3627
sg38
S'left'
p4111
sg59
g63
sS'trial_loop.thisN'
p4112
I30
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4113
g60
(g99
S'\x1e\x00\x00\x00'
tRp4114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4115
I0
sg3642
S'26-walkers_smoky_bacon.png'
p4116
sS'block_loop.thisRepN'
p4117
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4118
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4119
Nsg70
Vn
sS'block_loop.thisTrialN'
p4120
I0
sg39
F0.84991566806274932
sg34
g753
(S'\x07\xdf\x07\n\x0f\x12\x00\x00\xc78'
tRp4121
sa(dp4122
S'trial_loop.thisTrialN'
p4123
I31
sg3633
g3634
sS'block_loop.thisIndex'
p4124
g3627
sg38
S'right'
p4125
sg59
g63
sS'trial_loop.thisN'
p4126
I31
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4127
g60
(g99
S'\x1f\x00\x00\x00'
tRp4128
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4129
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4130
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4131
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4132
Nsg70
Vn
sS'block_loop.thisTrialN'
p4133
I0
sg39
F0.99999857450893614
sg34
g753
(S'\x07\xdf\x07\n\x0f\x12\x05\x0e8\xa0'
tRp4134
sa(dp4135
S'trial_loop.thisTrialN'
p4136
I32
sg3633
g3925
sS'block_loop.thisIndex'
p4137
g3627
sg38
S'left'
p4138
sg59
g63
sS'trial_loop.thisN'
p4139
I32
sg33
g3874
sg64
g65
sS'trial_loop.thisIndex'
p4140
g60
(g99
S' \x00\x00\x00'
tRp4141
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4142
I0
sg3642
g3932
sS'block_loop.thisRepN'
p4143
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4144
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p4145
Nsg70
Vn
sS'block_loop.thisTrialN'
p4146
I0
sg39
F1.0665640694605827
sg34
g753
(S'\x07\xdf\x07\n\x0f\x12\x0b\x0e\xc9('
tRp4147
sa(dp4148
S'trial_loop.thisTrialN'
p4149
I33
sg3633
g4079
sS'block_loop.thisIndex'
p4150
g3627
sg38
S'right'
p4151
sg59
g63
sS'trial_loop.thisN'
p4152
I33
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4153
g60
(g99
S'!\x00\x00\x00'
tRp4154
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4155
I0
sg3642
g4086
sS'block_loop.thisRepN'
p4156
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4157
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4158
Nsg70
Vn
sS'block_loop.thisTrialN'
p4159
I0
sg39
F1.0330779046926182
sg34
g753
(S'\x07\xdf\x07\n\x0f\x12\x12\x01\r\x88'
tRp4160
sa(dp4161
S'trial_loop.thisTrialN'
p4162
I34
sg3633
S'19-caramello_redo.png'
p4163
sS'block_loop.thisIndex'
p4164
g3627
sg38
S'left'
p4165
sg59
g63
sS'trial_loop.thisN'
p4166
I34
sg33
S'19-caramello_redo.png'
p4167
sg64
g65
sS'trial_loop.thisIndex'
p4168
g60
(g99
S'"\x00\x00\x00'
tRp4169
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4170
I0
sg3642
S'30-spaghetti_hoops.png'
p4171
sS'block_loop.thisRepN'
p4172
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4173
I1
sg3647
S'30-spaghetti_hoops.png'
p4174
sg55
g11
sS'block_loop.thisTrial'
p4175
Nsg70
Vn
sS'block_loop.thisTrialN'
p4176
I0
sg39
F0.99990335183974821
sg34
g753
(S'\x07\xdf\x07\n\x0f\x12\x18\x02\x17('
tRp4177
sa(dp4178
S'trial_loop.thisTrialN'
p4179
I35
sg3633
g3829
sS'block_loop.thisIndex'
p4180
g3627
sg38
S'left'
p4181
sg59
g63
sS'trial_loop.thisN'
p4182
I35
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p4183
g60
(g99
S'#\x00\x00\x00'
tRp4184
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4185
I0
sg3642
g3837
sS'block_loop.thisRepN'
p4186
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4187
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p4188
Nsg70
Vn
sS'block_loop.thisTrialN'
p4189
I0
sg39
F0.88323704629510758
sg34
g753
(S'\x07\xdf\x07\n\x0f\x12\x1e\x02\xa7\xb0'
tRp4190
sa(dp4191
S'trial_loop.thisTrialN'
p4192
I36
sg3633
S'33-ambrosia_rice.png'
p4193
sS'block_loop.thisIndex'
p4194
g3627
sg38
S'right'
p4195
sg59
g63
sS'trial_loop.thisN'
p4196
I36
sg33
g4066
sg64
g65
sS'trial_loop.thisIndex'
p4197
g60
(g99
S'$\x00\x00\x00'
tRp4198
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4199
I0
sg3642
S'23-crunchie_redo.png'
p4200
sS'block_loop.thisRepN'
p4201
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4202
I1
sg3647
g4073
sg55
g11
sS'block_loop.thisTrial'
p4203
Nsg70
Vn
sS'block_loop.thisTrialN'
p4204
I0
sg39
F0.95003375558007974
sg34
g753
(S'\x07\xdf\x07\n\x0f\x12$\x01S\xd8'
tRp4205
sa(dp4206
S'trial_loop.thisTrialN'
p4207
I37
sg3633
S'8-liquorice_catherine_wheels.png'
p4208
sS'block_loop.thisIndex'
p4209
g3627
sg38
S'right'
p4210
sg59
g63
sS'trial_loop.thisN'
p4211
I37
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p4212
g60
(g99
S'%\x00\x00\x00'
tRp4213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4214
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p4215
sS'block_loop.thisRepN'
p4216
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4217
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p4218
Nsg70
Vn
sS'block_loop.thisTrialN'
p4219
I0
sg39
F1.1165502707262931
sg34
g753
(S'\x07\xdf\x07\n\x0f\x12*\x01,\xc8'
tRp4220
sa(dp4221
S'trial_loop.thisTrialN'
p4222
I38
sg3633
S'36-fig_rolls.png'
p4223
sS'block_loop.thisIndex'
p4224
g3627
sg38
S'left'
p4225
sg59
g63
sS'trial_loop.thisN'
p4226
I38
sg33
S'36-fig_rolls.png'
p4227
sg64
g65
sS'trial_loop.thisIndex'
p4228
g60
(g99
S'&\x00\x00\x00'
tRp4229
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4230
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p4231
sS'block_loop.thisRepN'
p4232
I1
sg3645
g4227
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4233
I1
sg3647
S'34-hula_hoops_bbq_beef_redo.png'
p4234
sg55
g11
sS'block_loop.thisTrial'
p4235
Nsg70
Vn
sS'block_loop.thisTrialN'
p4236
I0
sg39
F1.1499129881449335
sg34
g753
(S'\x07\xdf\x07\n\x0f\x120\x03k\x00'
tRp4237
sa(dp4238
S'trial_loop.thisTrialN'
p4239
I39
sg3633
g3722
sS'block_loop.thisIndex'
p4240
g3627
sg38
S'right'
p4241
sg59
g63
sS'trial_loop.thisN'
p4242
I39
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4243
g60
(g99
S"'\x00\x00\x00"
tRp4244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4245
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4246
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4247
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4248
Nsg70
Vn
sS'block_loop.thisTrialN'
p4249
I0
sg39
F0.93326715262446669
sg34
g753
(S'\x07\xdf\x07\n\x0f\x126\x06\x1eh'
tRp4250
sa(dp4251
S'trial_loop.thisTrialN'
p4252
I40
sg3633
S'35-raisins.png'
p4253
sS'block_loop.thisIndex'
p4254
g3627
sg38
S'right'
p4255
sg59
g63
sS'trial_loop.thisN'
p4256
I40
sg33
g4041
sg64
g65
sS'trial_loop.thisIndex'
p4257
g60
(g99
S'(\x00\x00\x00'
tRp4258
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4259
I0
sg3642
S'49-yorkie.png'
p4260
sS'block_loop.thisRepN'
p4261
I1
sg3645
g4034
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4262
I1
sg3647
g4041
sg55
g11
sS'block_loop.thisTrial'
p4263
Nsg70
Vn
sS'block_loop.thisTrialN'
p4264
I0
sg39
F2.266462403578771
sg34
g753
(S'\x07\xdf\x07\n\x0f\x13\x00\x05\xbc\xc0'
tRp4265
sa(dp4266
S'trial_loop.thisTrialN'
p4267
I41
sg3633
g3955
sS'block_loop.thisIndex'
p4268
g3627
sg38
S'left'
p4269
sg59
g63
sS'trial_loop.thisN'
p4270
I41
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p4271
g60
(g99
S')\x00\x00\x00'
tRp4272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4273
I0
sg3642
g3963
sS'block_loop.thisRepN'
p4274
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4275
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p4276
Nsg70
Vn
sS'block_loop.thisTrialN'
p4277
I0
sg39
F0.90037940818365314
sg34
g753
(S'\x07\xdf\x07\n\x0f\x13\x07\nT\x88'
tRp4278
sa(dp4279
S'trial_loop.thisTrialN'
p4280
I42
sg3633
S'51-mars.png'
p4281
sS'block_loop.thisIndex'
p4282
g3627
sg38
S'left'
p4283
sg59
g63
sS'trial_loop.thisN'
p4284
I42
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4285
g60
(g99
S'*\x00\x00\x00'
tRp4286
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4287
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p4288
sS'block_loop.thisRepN'
p4289
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4290
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4291
Nsg70
Vn
sS'block_loop.thisTrialN'
p4292
I0
sg39
F0.78324155084192171
sg34
g753
(S'\x07\xdf\x07\n\x0f\x13\r\t;H'
tRp4293
sa(dp4294
S'trial_loop.thisTrialN'
p4295
I43
sg3633
g3846
sS'block_loop.thisIndex'
p4296
g3627
sg38
S'left'
p4297
sg59
g63
sS'trial_loop.thisN'
p4298
I43
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p4299
g60
(g99
S'+\x00\x00\x00'
tRp4300
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4301
I0
sg3642
g3854
sS'block_loop.thisRepN'
p4302
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4303
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p4304
Nsg70
Vn
sS'block_loop.thisTrialN'
p4305
I0
sg39
F1.1332875086118293
sg34
g753
(S'\x07\xdf\x07\n\x0f\x13\x13\x06x@'
tRp4306
sa(dp4307
S'trial_loop.thisTrialN'
p4308
I44
sg3633
g3795
sS'block_loop.thisIndex'
p4309
g3627
sg38
S'right'
p4310
sg59
g63
sS'trial_loop.thisN'
p4311
I44
sg33
g3799
sg64
g65
sS'trial_loop.thisIndex'
p4312
g60
(g99
S',\x00\x00\x00'
tRp4313
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4314
I0
sg3642
g3803
sS'block_loop.thisRepN'
p4315
I1
sg3645
g3799
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4316
I1
sg3647
g3806
sg55
g11
sS'block_loop.thisTrial'
p4317
Nsg70
Vn
sS'block_loop.thisTrialN'
p4318
I0
sg39
F1.1332190851317137
sg34
g753
(S'\x07\xdf\x07\n\x0f\x13\x19\x08\xf1\x10'
tRp4319
sa(dp4320
S'trial_loop.thisTrialN'
p4321
I45
sg3633
g4208
sS'block_loop.thisIndex'
p4322
g3627
sg38
S'right'
p4323
sg59
g63
sS'trial_loop.thisN'
p4324
I45
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p4325
g60
(g99
S'-\x00\x00\x00'
tRp4326
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4327
I0
sg3642
g4215
sS'block_loop.thisRepN'
p4328
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4329
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p4330
Nsg70
Vn
sS'block_loop.thisTrialN'
p4331
I0
sg39
F1.1165636703262862
sg34
g753
(S'\x07\xdf\x07\n\x0f\x13\x1f\x0bi\xe0'
tRp4332
sa(dp4333
S'trial_loop.thisTrialN'
p4334
I46
sg3633
g4062
sS'block_loop.thisIndex'
p4335
g3627
sg38
S'left'
p4336
sg59
g63
sS'trial_loop.thisN'
p4337
I46
sg33
g4066
sg64
g65
sS'trial_loop.thisIndex'
p4338
g60
(g99
S'.\x00\x00\x00'
tRp4339
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4340
I0
sg3642
g4070
sS'block_loop.thisRepN'
p4341
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4342
I1
sg3647
g4073
sg55
g11
sS'block_loop.thisTrial'
p4343
Nsg70
Vn
sS'block_loop.thisTrialN'
p4344
I0
sg39
F0.73335028714791406
sg34
g753
(S'\x07\xdf\x07\n\x0f\x13%\r\xe2\xb0'
tRp4345
sa(dp4346
S'trial_loop.thisTrialN'
p4347
I47
sg3633
g3812
sS'block_loop.thisIndex'
p4348
g3627
sg38
S'right'
p4349
sg59
g63
sS'trial_loop.thisN'
p4350
I47
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p4351
g60
(g99
S'/\x00\x00\x00'
tRp4352
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4353
I0
sg3642
g3820
sS'block_loop.thisRepN'
p4354
I1
sg3645
g3816
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4355
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p4356
Nsg70
Vn
sS'block_loop.thisTrialN'
p4357
I0
sg39
F0.96658339909481583
sg34
g753
(S'\x07\xdf\x07\n\x0f\x13+\n)\x90'
tRp4358
sa(dp4359
S'trial_loop.thisTrialN'
p4360
I48
sg3633
S'21-nakd_banana_crunch.png'
p4361
sS'block_loop.thisIndex'
p4362
g3627
sg38
S'right'
p4363
sg59
g63
sS'trial_loop.thisN'
p4364
I48
sg33
S'1-treacle_cookies.png'
p4365
sg64
g65
sS'trial_loop.thisIndex'
p4366
g60
(g99
S'0\x00\x00\x00'
tRp4367
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4368
I0
sg3642
S'1-treacle_cookies.png'
p4369
sS'block_loop.thisRepN'
p4370
I1
sg3645
g4365
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4371
I1
sg3647
S'21-nakd_banana_crunch.png'
p4372
sg55
g11
sS'block_loop.thisTrial'
p4373
Nsg70
Vn
sS'block_loop.thisTrialN'
p4374
I0
sg39
F1.0332409806433134
sg34
g753
(S'\x07\xdf\x07\n\x0f\x131\nA\x00'
tRp4375
sa(dp4376
S'trial_loop.thisTrialN'
p4377
I49
sg3633
g4079
sS'block_loop.thisIndex'
p4378
g3627
sg38
S'right'
p4379
sg59
g63
sS'trial_loop.thisN'
p4380
I49
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p4381
g60
(g99
S'1\x00\x00\x00'
tRp4382
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4383
I0
sg3642
g4086
sS'block_loop.thisRepN'
p4384
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4385
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4386
Nsg70
Vn
sS'block_loop.thisTrialN'
p4387
I0
sg39
F0.88298673040480935
sg34
g753
(S'\x07\xdf\x07\n\x0f\x137\x0bJ\xa0'
tRp4388
sa(dp4389
S'trial_loop.thisTrialN'
p4390
I50
sg3633
S'42-mrkipling_lemon_slices.png'
p4391
sS'block_loop.thisIndex'
p4392
g3627
sg38
S'left'
p4393
sg59
g63
sS'trial_loop.thisN'
p4394
I50
sg33
S'16-skips_prawn.png'
p4395
sg64
g65
sS'trial_loop.thisIndex'
p4396
g60
(g99
S'2\x00\x00\x00'
tRp4397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4398
I0
sg3642
S'16-skips_prawn.png'
p4399
sS'block_loop.thisRepN'
p4400
I1
sg3645
S'42-mrkipling_lemon_slices.png'
p4401
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4402
I1
sg3647
g4395
sg55
g11
sS'block_loop.thisTrial'
p4403
Nsg70
Vn
sS'block_loop.thisTrialN'
p4404
I0
sg39
F1.1499395022401586
sg34
g753
(S'\x07\xdf\x07\n\x0f\x14\x01\t\xf6\xc8'
tRp4405
sa(dp4406
S'trial_loop.thisTrialN'
p4407
I51
sg3633
g3972
sS'block_loop.thisIndex'
p4408
g3627
sg38
S'left'
p4409
sg59
g63
sS'trial_loop.thisN'
p4410
I51
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p4411
g60
(g99
S'3\x00\x00\x00'
tRp4412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4413
I0
sg3642
g3980
sS'block_loop.thisRepN'
p4414
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4415
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p4416
Nsg70
Vn
sS'block_loop.thisTrialN'
p4417
I0
sg39
F0.88369320280980901
sg34
g753
(S'\x07\xdf\x07\n\x0f\x14\x07\x0c\xaa0'
tRp4418
sa(dp4419
S'trial_loop.thisTrialN'
p4420
I52
sg3633
g3795
sS'block_loop.thisIndex'
p4421
g3627
sg38
S'right'
p4422
sg59
g63
sS'trial_loop.thisN'
p4423
I52
sg33
g3799
sg64
g65
sS'trial_loop.thisIndex'
p4424
g60
(g99
S'4\x00\x00\x00'
tRp4425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4426
I0
sg3642
g3803
sS'block_loop.thisRepN'
p4427
I1
sg3645
g3799
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4428
I1
sg3647
g3806
sg55
g11
sS'block_loop.thisTrial'
p4429
Nsg70
Vn
sS'block_loop.thisTrialN'
p4430
I0
sg39
F1.0999082555208588
sg34
g753
(S'\x07\xdf\x07\n\x0f\x14\r\x0b\x90\xf0'
tRp4431
sa(dp4432
S'trial_loop.thisTrialN'
p4433
I53
sg3633
g4208
sS'block_loop.thisIndex'
p4434
g3627
sg38
S'right'
p4435
sg59
g63
sS'trial_loop.thisN'
p4436
I53
sg33
g3857
sg64
g65
sS'trial_loop.thisIndex'
p4437
g60
(g99
S'5\x00\x00\x00'
tRp4438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4439
I0
sg3642
g4215
sS'block_loop.thisRepN'
p4440
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4441
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p4442
Nsg70
Vn
sS'block_loop.thisTrialN'
p4443
I0
sg39
F1.1831913166024606
sg34
g753
(S'\x07\xdf\x07\n\x0f\x14\x13\r\x90\xa8'
tRp4444
sa(dp4445
S'trial_loop.thisTrialN'
p4446
I54
sg3633
S'7-olives.png'
p4447
sS'block_loop.thisIndex'
p4448
g3627
sg38
S'right'
p4449
sg59
g63
sS'trial_loop.thisN'
p4450
I54
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p4451
g60
(g99
S'6\x00\x00\x00'
tRp4452
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4453
I0
sg3642
S'22-daim.png'
p4454
sS'block_loop.thisRepN'
p4455
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4456
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p4457
Nsg70
Vn
sS'block_loop.thisTrialN'
p4458
I0
sg39
F1.3499173786512983
sg34
g753
(S'\x07\xdf\x07\n\x0f\x14\x1a\x01~\xd0'
tRp4459
sa(dp4460
S'trial_loop.thisTrialN'
p4461
I55
sg3633
g3940
sS'block_loop.thisIndex'
p4462
g3627
sg38
S'right'
p4463
sg59
g63
sS'trial_loop.thisN'
p4464
I55
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p4465
g60
(g99
S'7\x00\x00\x00'
tRp4466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4467
I0
sg3642
g3947
sS'block_loop.thisRepN'
p4468
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4469
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p4470
Nsg70
Vn
sS'block_loop.thisTrialN'
p4471
I0
sg39
F0.99990933889057487
sg34
g753
(S'\x07\xdf\x07\n\x0f\x14 \x07\x89\xb0'
tRp4472
sa(dp4473
S'trial_loop.thisTrialN'
p4474
I56
sg3633
g3688
sS'block_loop.thisIndex'
p4475
g3627
sg38
S'right'
p4476
sg59
g63
sS'trial_loop.thisN'
p4477
I56
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4478
g60
(g99
S'8\x00\x00\x00'
tRp4479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4480
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4481
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4482
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4483
Nsg70
Vn
sS'block_loop.thisTrialN'
p4484
I0
sg39
F0.75005587917621597
sg34
g753
(S'\x07\xdf\x07\n\x0f\x14&\x07\xdf\xa0'
tRp4485
sa(dp4486
S'trial_loop.thisTrialN'
p4487
I57
sg3633
S'30-spaghetti_hoops.png'
p4488
sS'block_loop.thisIndex'
p4489
g3627
sg38
S'right'
p4490
sg59
g63
sS'trial_loop.thisN'
p4491
I57
sg33
g4174
sg64
g65
sS'trial_loop.thisIndex'
p4492
g60
(g99
S'9\x00\x00\x00'
tRp4493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4494
I0
sg3642
S'19-caramello_redo.png'
p4495
sS'block_loop.thisRepN'
p4496
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4497
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p4498
Nsg70
Vn
sS'block_loop.thisTrialN'
p4499
I0
sg39
F1.0165867062278267
sg34
g753
(S'\x07\xdf\x07\n\x0f\x14,\x04\x9f\x98'
tRp4500
sa(dp4501
S'trial_loop.thisTrialN'
p4502
I58
sg3633
g3671
sS'block_loop.thisIndex'
p4503
g3627
sg38
S'left'
p4504
sg59
g63
sS'trial_loop.thisN'
p4505
I58
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4506
g60
(g99
S':\x00\x00\x00'
tRp4507
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4508
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4509
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4510
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4511
Nsg70
Vn
sS'block_loop.thisTrialN'
p4512
I0
sg39
F1.249858591480006
sg34
g753
(S'\x07\xdf\x07\n\x0f\x142\x05n\xa0'
tRp4513
sa(dp4514
S'trial_loop.thisTrialN'
p4515
I59
sg3633
g3940
sS'block_loop.thisIndex'
p4516
g3627
sg38
S'right'
p4517
sg59
g63
sS'trial_loop.thisN'
p4518
I59
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p4519
g60
(g99
S';\x00\x00\x00'
tRp4520
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4521
I0
sg3642
g3947
sS'block_loop.thisRepN'
p4522
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4523
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p4524
Nsg70
Vn
sS'block_loop.thisTrialN'
p4525
I0
sg39
F0.84989998768287478
sg34
g753
(S'\x07\xdf\x07\n\x0f\x148\t\xcf\xb8'
tRp4526
sa(dp4527
S'trial_loop.thisTrialN'
p4528
I60
sg3633
g3722
sS'block_loop.thisIndex'
p4529
g3627
sg38
S'right'
p4530
sg59
g63
sS'trial_loop.thisN'
p4531
I60
sg33
g3733
sg64
g65
sS'trial_loop.thisIndex'
p4532
g60
(g99
S'<\x00\x00\x00'
tRp4533
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4534
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4535
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4536
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4537
Nsg70
Vn
sS'block_loop.thisTrialN'
p4538
I0
sg39
F0.81630463044348289
sg34
g753
(S'\x07\xdf\x07\n\x0f\x15\x02\x07\xfe\xe0'
tRp4539
sa(dp4540
S'trial_loop.thisTrialN'
p4541
I61
sg3633
g4447
sS'block_loop.thisIndex'
p4542
g3627
sg38
S'right'
p4543
sg59
g63
sS'trial_loop.thisN'
p4544
I61
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p4545
g60
(g99
S'=\x00\x00\x00'
tRp4546
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4547
I0
sg3642
g4454
sS'block_loop.thisRepN'
p4548
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4549
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p4550
Nsg70
Vn
sS'block_loop.thisTrialN'
p4551
I0
sg39
F0.9000843319336127
sg34
g753
(S'\x07\xdf\x07\n\x0f\x15\x08\x05\xb4\xf0'
tRp4552
sa(dp4553
S'trial_loop.thisTrialN'
p4554
I62
sg3633
g4030
sS'block_loop.thisIndex'
p4555
g3627
sg38
S'right'
p4556
sg59
g63
sS'trial_loop.thisN'
p4557
I62
sg33
g4034
sg64
g65
sS'trial_loop.thisIndex'
p4558
g60
(g99
S'>\x00\x00\x00'
tRp4559
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4560
I0
sg3642
g4038
sS'block_loop.thisRepN'
p4561
I1
sg3645
g4034
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4562
I1
sg3647
g4041
sg55
g11
sS'block_loop.thisTrial'
p4563
Nsg70
Vn
sS'block_loop.thisTrialN'
p4564
I0
sg39
F2.4665275199222378
sg34
g753
(S'\x07\xdf\x07\n\x0f\x15\x0e\x04\x9b\xb0'
tRp4565
sa(dp4566
S'trial_loop.thisTrialN'
p4567
I63
sg3633
S'16-skips_prawn.png'
p4568
sS'block_loop.thisIndex'
p4569
g3627
sg38
S'right'
p4570
sg59
g63
sS'trial_loop.thisN'
p4571
I63
sg33
g4395
sg64
g65
sS'trial_loop.thisIndex'
p4572
g60
(g99
S'?\x00\x00\x00'
tRp4573
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4574
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p4575
sS'block_loop.thisRepN'
p4576
I1
sg3645
g4401
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4577
I1
sg3647
g4395
sg55
g11
sS'block_loop.thisTrial'
p4578
Nsg70
Vn
sS'block_loop.thisTrialN'
p4579
I0
sg39
F1.0498285421672335
sg34
g753
(S'\x07\xdf\x07\n\x0f\x15\x15\x0cLp'
tRp4580
sa(dp4581
S'trial_loop.thisTrialN'
p4582
I64
sg3633
g3780
sS'block_loop.thisIndex'
p4583
g3627
sg38
S'left'
p4584
sg59
g63
sS'trial_loop.thisN'
p4585
I64
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4586
g60
(g99
S'@\x00\x00\x00'
tRp4587
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4588
I0
sg3642
g3787
sS'block_loop.thisRepN'
p4589
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4590
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4591
Nsg70
Vn
sS'block_loop.thisTrialN'
p4592
I0
sg39
F0.84990397905494319
sg34
g753
(S'\x07\xdf\x07\n\x0f\x15\x1b\r\x94\x90'
tRp4593
sa(dp4594
S'trial_loop.thisTrialN'
p4595
I65
sg3633
g3688
sS'block_loop.thisIndex'
p4596
g3627
sg38
S'right'
p4597
sg59
g63
sS'trial_loop.thisN'
p4598
I65
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4599
g60
(g99
S'A\x00\x00\x00'
tRp4600
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4601
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4602
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4603
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4604
Nsg70
Vn
sS'block_loop.thisTrialN'
p4605
I0
sg39
F1.1665689731489692
sg34
g753
(S'\x07\xdf\x07\n\x0f\x15!\x0b\xc3\xb8'
tRp4606
sa(dp4607
S'trial_loop.thisTrialN'
p4608
I66
sg3633
g3863
sS'block_loop.thisIndex'
p4609
g3627
sg38
S'right'
p4610
sg59
g63
sS'trial_loop.thisN'
p4611
I66
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p4612
g60
(g99
S'B\x00\x00\x00'
tRp4613
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4614
I0
sg3642
g3871
sS'block_loop.thisRepN'
p4615
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4616
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p4617
Nsg70
Vn
sS'block_loop.thisTrialN'
p4618
I0
sg39
F1.1333624893377419
sg34
g753
(S"\x07\xdf\x07\n\x0f\x15'\x0e\xb5\xa0"
tRp4619
sa(dp4620
S'trial_loop.thisTrialN'
p4621
I67
sg3633
g4568
sS'block_loop.thisIndex'
p4622
g3627
sg38
S'right'
p4623
sg59
g63
sS'trial_loop.thisN'
p4624
I67
sg33
g4401
sg64
g65
sS'trial_loop.thisIndex'
p4625
g60
(g99
S'C\x00\x00\x00'
tRp4626
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4627
I0
sg3642
g4575
sS'block_loop.thisRepN'
p4628
I1
sg3645
g4401
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4629
I1
sg3647
g4395
sg55
g11
sS'block_loop.thisTrial'
p4630
Nsg70
Vn
sS'block_loop.thisTrialN'
p4631
I0
sg39
F1.3165233004765469
sg34
g753
(S'\x07\xdf\x07\n\x0f\x15.\x02*\xb0'
tRp4632
sa(dp4633
S'trial_loop.thisTrialN'
p4634
I68
sg3633
g4109
sS'block_loop.thisIndex'
p4635
g3627
sg38
S'left'
p4636
sg59
g63
sS'trial_loop.thisN'
p4637
I68
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4638
g60
(g99
S'D\x00\x00\x00'
tRp4639
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4640
I0
sg3642
g4116
sS'block_loop.thisRepN'
p4641
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4642
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4643
Nsg70
Vn
sS'block_loop.thisTrialN'
p4644
I0
sg39
F1.3332474238559371
sg34
g753
(S'\x07\xdf\x07\n\x0f\x154\x07}\xf8'
tRp4645
sa(dp4646
S'trial_loop.thisTrialN'
p4647
I69
sg3633
g4030
sS'block_loop.thisIndex'
p4648
g3627
sg38
S'right'
p4649
sg59
g63
sS'trial_loop.thisN'
p4650
I69
sg33
g4034
sg64
g65
sS'trial_loop.thisIndex'
p4651
g60
(g99
S'E\x00\x00\x00'
tRp4652
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4653
I0
sg3642
g4038
sS'block_loop.thisRepN'
p4654
I1
sg3645
g4034
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4655
I1
sg3647
g4041
sg55
g11
sS'block_loop.thisTrial'
p4656
Nsg70
Vn
sS'block_loop.thisTrialN'
p4657
I0
sg39
F1.1498970226675738
sg34
g753
(S'\x07\xdf\x07\n\x0f\x15:\r\x0f\xc0'
tRp4658
sa(dp4659
S'trial_loop.thisTrialN'
p4660
I70
sg3633
g3829
sS'block_loop.thisIndex'
p4661
g3627
sg38
S'left'
p4662
sg59
g63
sS'trial_loop.thisN'
p4663
I70
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p4664
g60
(g99
S'F\x00\x00\x00'
tRp4665
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4666
I0
sg3642
g3837
sS'block_loop.thisRepN'
p4667
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4668
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p4669
Nsg70
Vn
sS'block_loop.thisTrialN'
p4670
I0
sg39
F0.86658134639219497
sg34
g753
(S'\x07\xdf\x07\n\x0f\x16\x05\x00\x80\xe8'
tRp4671
sa(dp4672
S'trial_loop.thisTrialN'
p4673
I71
sg3633
g4062
sS'block_loop.thisIndex'
p4674
g3627
sg38
S'left'
p4675
sg59
g63
sS'trial_loop.thisN'
p4676
I71
sg33
g4073
sg64
g65
sS'trial_loop.thisIndex'
p4677
g60
(g99
S'G\x00\x00\x00'
tRp4678
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4679
I0
sg3642
g4070
sS'block_loop.thisRepN'
p4680
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4681
I1
sg3647
g4073
sg55
g11
sS'block_loop.thisTrial'
p4682
Nsg70
Vn
sS'block_loop.thisTrialN'
p4683
I0
sg39
F0.99974540764378617
sg34
g753
(S'\x07\xdf\x07\n\x0f\x16\n\x0e0\xd0'
tRp4684
sa(dp4685
S'trial_loop.thisTrialN'
p4686
I72
sg3633
g4391
sS'block_loop.thisIndex'
p4687
g3627
sg38
S'left'
p4688
sg59
g63
sS'trial_loop.thisN'
p4689
I72
sg33
g4401
sg64
g65
sS'trial_loop.thisIndex'
p4690
g60
(g99
S'H\x00\x00\x00'
tRp4691
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4692
I0
sg3642
g4399
sS'block_loop.thisRepN'
p4693
I1
sg3645
g4401
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4694
I1
sg3647
g4395
sg55
g11
sS'block_loop.thisTrial'
p4695
Nsg70
Vn
sS'block_loop.thisTrialN'
p4696
I0
sg39
F0.99981012485295651
sg34
g753
(S'\x07\xdf\x07\n\x0f\x16\x10\x0e\xc1X'
tRp4697
sa(dp4698
S'trial_loop.thisTrialN'
p4699
I73
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p4700
sS'block_loop.thisIndex'
p4701
g3627
sg38
S'right'
p4702
sg59
g63
sS'trial_loop.thisN'
p4703
I73
sg33
g4227
sg64
g65
sS'trial_loop.thisIndex'
p4704
g60
(g99
S'I\x00\x00\x00'
tRp4705
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4706
I0
sg3642
S'36-fig_rolls.png'
p4707
sS'block_loop.thisRepN'
p4708
I1
sg3645
g4227
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4709
I1
sg3647
g4234
sg55
g11
sS'block_loop.thisTrial'
p4710
Nsg70
Vn
sS'block_loop.thisTrialN'
p4711
I0
sg39
F1.0498772938954062
sg34
g753
(S'\x07\xdf\x07\n\x0f\x16\x17\x00\x13\x88'
tRp4712
sa(dp4713
S'trial_loop.thisTrialN'
p4714
I74
sg3633
g4361
sS'block_loop.thisIndex'
p4715
g3627
sg38
S'right'
p4716
sg59
g63
sS'trial_loop.thisN'
p4717
I74
sg33
g4365
sg64
g65
sS'trial_loop.thisIndex'
p4718
g60
(g99
S'J\x00\x00\x00'
tRp4719
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4720
I0
sg3642
g4369
sS'block_loop.thisRepN'
p4721
I1
sg3645
g4365
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4722
I1
sg3647
g4372
sg55
g11
sS'block_loop.thisTrial'
p4723
Nsg70
Vn
sS'block_loop.thisTrialN'
p4724
I0
sg39
F1.0333219484236906
sg34
g753
(S'\x07\xdf\x07\n\x0f\x16\x1d\x01[\xa8'
tRp4725
sa(dp4726
S'trial_loop.thisTrialN'
p4727
I75
sg3633
g4109
sS'block_loop.thisIndex'
p4728
g3627
sg38
S'left'
p4729
sg59
g63
sS'trial_loop.thisN'
p4730
I75
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4731
g60
(g99
S'K\x00\x00\x00'
tRp4732
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4733
I0
sg3642
g4116
sS'block_loop.thisRepN'
p4734
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4735
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4736
Nsg70
Vn
sS'block_loop.thisTrialN'
p4737
I0
sg39
F1.1165479899464117
sg34
g753
(S'\x07\xdf\x07\n\x0f\x16#\x02eH'
tRp4738
sa(dp4739
S'trial_loop.thisTrialN'
p4740
I76
sg3633
g4062
sS'block_loop.thisIndex'
p4741
g3627
sg38
S'left'
p4742
sg59
g63
sS'trial_loop.thisN'
p4743
I76
sg33
g4066
sg64
g65
sS'trial_loop.thisIndex'
p4744
g60
(g99
S'L\x00\x00\x00'
tRp4745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4746
I0
sg3642
g4070
sS'block_loop.thisRepN'
p4747
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4748
I1
sg3647
g4073
sg55
g11
sS'block_loop.thisTrial'
p4749
Nsg70
Vn
sS'block_loop.thisTrialN'
p4750
I0
sg39
F0.78335074330607313
sg34
g753
(S'\x07\xdf\x07\n\x0f\x16)\x04\xa3\x80'
tRp4751
sa(dp4752
S'trial_loop.thisTrialN'
p4753
I77
sg3633
g4002
sS'block_loop.thisIndex'
p4754
g3627
sg38
S'right'
p4755
sg59
g63
sS'trial_loop.thisN'
p4756
I77
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p4757
g60
(g99
S'M\x00\x00\x00'
tRp4758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4759
I0
sg3642
g4009
sS'block_loop.thisRepN'
p4760
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4761
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p4762
Nsg70
Vn
sS'block_loop.thisTrialN'
p4763
I0
sg39
F1.0999148127702938
sg34
g753
(S'\x07\xdf\x07\n\x0f\x16/\x01\xdc\x90'
tRp4764
sa(dp4765
S'trial_loop.thisTrialN'
p4766
I78
sg3633
S'45-chewy_nougat_redo.png'
p4767
sS'block_loop.thisIndex'
p4768
g3627
sg38
S'left'
p4769
sg59
g63
sS'trial_loop.thisN'
p4770
I78
sg33
g3799
sg64
g65
sS'trial_loop.thisIndex'
p4771
g60
(g99
S'N\x00\x00\x00'
tRp4772
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4773
I0
sg3642
S'41-peanuts_redo.png'
p4774
sS'block_loop.thisRepN'
p4775
I1
sg3645
g3799
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4776
I1
sg3647
g3806
sg55
g11
sS'block_loop.thisTrial'
p4777
Nsg70
Vn
sS'block_loop.thisTrialN'
p4778
I0
sg39
F1.2998849915384199
sg34
g753
(S'\x07\xdf\x07\n\x0f\x165\x03\xdcH'
tRp4779
sa(dp4780
S'trial_loop.thisTrialN'
p4781
I79
sg3633
g4281
sS'block_loop.thisIndex'
p4782
g3627
sg38
S'left'
p4783
sg59
g63
sS'trial_loop.thisN'
p4784
I79
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4785
g60
(g99
S'O\x00\x00\x00'
tRp4786
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4787
I0
sg3642
g4288
sS'block_loop.thisRepN'
p4788
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4789
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4790
Nsg70
Vn
sS'block_loop.thisTrialN'
p4791
I0
sg39
F0.86659702677206951
sg34
g753
(S'\x07\xdf\x07\n\x0f\x16;\x08\xf4\xf8'
tRp4792
sa(dp4793
S'trial_loop.thisTrialN'
p4794
I80
sg3633
g4094
sS'block_loop.thisIndex'
p4795
g3627
sg38
S'left'
p4796
sg59
g63
sS'trial_loop.thisN'
p4797
I80
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p4798
g60
(g99
S'P\x00\x00\x00'
tRp4799
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4800
I0
sg3642
g4101
sS'block_loop.thisRepN'
p4801
I1
sg3645
g3816
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4802
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p4803
Nsg70
Vn
sS'block_loop.thisTrialN'
p4804
I0
sg39
F0.91669013972204993
sg34
g753
(S'\x07\xdf\x07\n\x0f\x17\x05\x07b\xa0'
tRp4805
sa(dp4806
S'trial_loop.thisTrialN'
p4807
I81
sg3633
g4253
sS'block_loop.thisIndex'
p4808
g3627
sg38
S'right'
p4809
sg59
g63
sS'trial_loop.thisN'
p4810
I81
sg33
g4034
sg64
g65
sS'trial_loop.thisIndex'
p4811
g60
(g99
S'Q\x00\x00\x00'
tRp4812
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4813
I0
sg3642
g4260
sS'block_loop.thisRepN'
p4814
I1
sg3645
g4034
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4815
I1
sg3647
g4041
sg55
g11
sS'block_loop.thisTrial'
p4816
Nsg70
Vn
sS'block_loop.thisTrialN'
p4817
I0
sg39
F1.1834179693760234
sg34
g753
(S'\x07\xdf\x07\n\x0f\x17\x0b\x06\x83\xf8'
tRp4818
sa(dp4819
S'trial_loop.thisTrialN'
p4820
I82
sg3633
g3780
sS'block_loop.thisIndex'
p4821
g3627
sg38
S'left'
p4822
sg59
g63
sS'trial_loop.thisN'
p4823
I82
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p4824
g60
(g99
S'R\x00\x00\x00'
tRp4825
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4826
I0
sg3642
g3787
sS'block_loop.thisRepN'
p4827
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4828
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4829
Nsg70
Vn
sS'block_loop.thisTrialN'
p4830
I0
sg39
F0.88330946114001563
sg34
g753
(S'\x07\xdf\x07\n\x0f\x17\x11\t\xf2\xe0'
tRp4831
sa(dp4832
S'trial_loop.thisTrialN'
p4833
I83
sg3633
g4447
sS'block_loop.thisIndex'
p4834
g3627
sg38
S'right'
p4835
sg59
g63
sS'trial_loop.thisN'
p4836
I83
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p4837
g60
(g99
S'S\x00\x00\x00'
tRp4838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4839
I0
sg3642
g4454
sS'block_loop.thisRepN'
p4840
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4841
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p4842
Nsg70
Vn
sS'block_loop.thisTrialN'
p4843
I0
sg39
F1.0665386957552982
sg34
g753
(S'\x07\xdf\x07\n\x0f\x17\x17\x08\x9b '
tRp4844
sa(dp4845
S'trial_loop.thisTrialN'
p4846
I84
sg3633
g4094
sS'block_loop.thisIndex'
p4847
g3627
sg38
S'left'
p4848
sg59
g63
sS'trial_loop.thisN'
p4849
I84
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p4850
g60
(g99
S'T\x00\x00\x00'
tRp4851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4852
I0
sg3642
g4101
sS'block_loop.thisRepN'
p4853
I1
sg3645
g3816
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4854
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p4855
Nsg70
Vn
sS'block_loop.thisTrialN'
p4856
I0
sg39
F0.7999220542551484
sg34
g753
(S'\x07\xdf\x07\n\x0f\x17\x1d\n!\xc0'
tRp4857
sa(dp4858
S'trial_loop.thisTrialN'
p4859
I85
sg3633
g4488
sS'block_loop.thisIndex'
p4860
g3627
sg38
S'right'
p4861
sg59
g63
sS'trial_loop.thisN'
p4862
I85
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p4863
g60
(g99
S'U\x00\x00\x00'
tRp4864
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4865
I0
sg3642
g4495
sS'block_loop.thisRepN'
p4866
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4867
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p4868
Nsg70
Vn
sS'block_loop.thisTrialN'
p4869
I0
sg39
F0.94990147019416327
sg34
g753
(S'\x07\xdf\x07\n\x0f\x17#\x07\x99P'
tRp4870
sa(dp4871
S'trial_loop.thisTrialN'
p4872
I86
sg3633
g4700
sS'block_loop.thisIndex'
p4873
g3627
sg38
S'right'
p4874
sg59
g63
sS'trial_loop.thisN'
p4875
I86
sg33
g4227
sg64
g65
sS'trial_loop.thisIndex'
p4876
g60
(g99
S'V\x00\x00\x00'
tRp4877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4878
I0
sg3642
g4707
sS'block_loop.thisRepN'
p4879
I1
sg3645
g4227
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4880
I1
sg3647
g4234
sg55
g11
sS'block_loop.thisTrial'
p4881
Nsg70
Vn
sS'block_loop.thisTrialN'
p4882
I0
sg39
F0.84993533981105429
sg34
g753
(S'\x07\xdf\x07\n\x0f\x17)\x07r@'
tRp4883
sa(dp4884
S'trial_loop.thisTrialN'
p4885
I87
sg3633
g3671
sS'block_loop.thisIndex'
p4886
g3627
sg38
S'left'
p4887
sg59
g63
sS'trial_loop.thisN'
p4888
I87
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4889
g60
(g99
S'W\x00\x00\x00'
tRp4890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4891
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4892
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4893
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4894
Nsg70
Vn
sS'block_loop.thisTrialN'
p4895
I0
sg39
F1.0169889792559843
sg34
g753
(S'\x07\xdf\x07\n\x0f\x17/\x05\xa5P'
tRp4896
sa(dp4897
S'trial_loop.thisTrialN'
p4898
I88
sg3633
g3895
sS'block_loop.thisIndex'
p4899
g3627
sg38
S'left'
p4900
sg59
g63
sS'trial_loop.thisN'
p4901
I88
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p4902
g60
(g99
S'X\x00\x00\x00'
tRp4903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4904
I0
sg3642
g3903
sS'block_loop.thisRepN'
p4905
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4906
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p4907
Nsg70
Vn
sS'block_loop.thisTrialN'
p4908
I0
sg39
F0.88324502903196844
sg34
g753
(S'\x07\xdf\x07\n\x0f\x175\x06pp'
tRp4909
sa(dp4910
S'trial_loop.thisTrialN'
p4911
I89
sg3633
g3671
sS'block_loop.thisIndex'
p4912
g3627
sg38
S'left'
p4913
sg59
g63
sS'trial_loop.thisN'
p4914
I89
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4915
g60
(g99
S'Y\x00\x00\x00'
tRp4916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4917
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4918
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4919
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4920
Nsg70
Vn
sS'block_loop.thisTrialN'
p4921
I0
sg39
F0.81659314944045036
sg34
g753
(S'\x07\xdf\x07\n\x0f\x17;\x05\x1c\x98'
tRp4922
sa(dp4923
S'trial_loop.thisTrialN'
p4924
I90
sg3633
g3880
sS'block_loop.thisIndex'
p4925
g3627
sg38
S'left'
p4926
sg59
g63
sS'trial_loop.thisN'
p4927
I90
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4928
g60
(g99
S'Z\x00\x00\x00'
tRp4929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4930
I0
sg3642
g3887
sS'block_loop.thisRepN'
p4931
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4932
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4933
Nsg70
Vn
sS'block_loop.thisTrialN'
p4934
I0
sg39
F0.74994526121736271
sg34
g753
(S'\x07\xdf\x07\n\x0f\x18\x05\x02\xd2\xa8'
tRp4935
sa(dp4936
S'trial_loop.thisTrialN'
p4937
I91
sg3633
g3688
sS'block_loop.thisIndex'
p4938
g3627
sg38
S'right'
p4939
sg59
g63
sS'trial_loop.thisN'
p4940
I91
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4941
g60
(g99
S'[\x00\x00\x00'
tRp4942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4943
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4944
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4945
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4946
Nsg70
Vn
sS'block_loop.thisTrialN'
p4947
I0
sg39
F0.88318487339347485
sg34
g753
(S'\x07\xdf\x07\n\x0f\x18\n\x0e\xd4\xe0'
tRp4948
sa(dp4949
S'trial_loop.thisTrialN'
p4950
I92
sg3633
g4223
sS'block_loop.thisIndex'
p4951
g3627
sg38
S'left'
p4952
sg59
g63
sS'trial_loop.thisN'
p4953
I92
sg33
g4227
sg64
g65
sS'trial_loop.thisIndex'
p4954
g60
(g99
S'\\\x00\x00\x00'
tRp4955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4956
I0
sg3642
g4231
sS'block_loop.thisRepN'
p4957
I1
sg3645
g4227
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4958
I1
sg3647
g4234
sg55
g11
sS'block_loop.thisTrial'
p4959
Nsg70
Vn
sS'block_loop.thisTrialN'
p4960
I0
sg39
F0.78317882931878557
sg34
g753
(S'\x07\xdf\x07\n\x0f\x18\x10\r\x81\x08'
tRp4961
sa(dp4962
S'trial_loop.thisTrialN'
p4963
I93
sg3633
g3863
sS'block_loop.thisIndex'
p4964
g3627
sg38
S'right'
p4965
sg59
g63
sS'trial_loop.thisN'
p4966
I93
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p4967
g60
(g99
S']\x00\x00\x00'
tRp4968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4969
I0
sg3642
g3871
sS'block_loop.thisRepN'
p4970
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4971
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p4972
Nsg70
Vn
sS'block_loop.thisTrialN'
p4973
I0
sg39
F1.1170620213197253
sg34
g753
(S'\x07\xdf\x07\n\x0f\x18\x16\n\xbe\x00'
tRp4974
sa(dp4975
S'trial_loop.thisTrialN'
p4976
I94
sg3633
g4223
sS'block_loop.thisIndex'
p4977
g3627
sg38
S'left'
p4978
sg59
g63
sS'trial_loop.thisN'
p4979
I94
sg33
g4227
sg64
g65
sS'trial_loop.thisIndex'
p4980
g60
(g99
S'^\x00\x00\x00'
tRp4981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4982
I0
sg3642
g4231
sS'block_loop.thisRepN'
p4983
I1
sg3645
g4227
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4984
I1
sg3647
g4234
sg55
g11
sS'block_loop.thisTrial'
p4985
Nsg70
Vn
sS'block_loop.thisTrialN'
p4986
I0
sg39
F0.81669949092975003
sg34
g753
(S'\x07\xdf\x07\n\x0f\x18\x1c\x0c\xf8P'
tRp4987
sa(dp4988
S'trial_loop.thisTrialN'
p4989
I95
sg3633
g4447
sS'block_loop.thisIndex'
p4990
g3627
sg38
S'right'
p4991
sg59
g63
sS'trial_loop.thisN'
p4992
I95
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p4993
g60
(g99
S'_\x00\x00\x00'
tRp4994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4995
I0
sg3642
g4454
sS'block_loop.thisRepN'
p4996
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4997
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p4998
Nsg70
Vn
sS'block_loop.thisTrialN'
p4999
I0
sg39
F0.91656954334030161
sg34
g753
(S'\x07\xdf\x07\n\x0f\x18"\n\xae`'
tRp5000
sa(dp5001
S'trial_loop.thisTrialN'
p5002
I96
sg3633
g4253
sS'block_loop.thisIndex'
p5003
g3627
sg38
S'right'
p5004
sg59
g63
sS'trial_loop.thisN'
p5005
I96
sg33
g4034
sg64
g65
sS'trial_loop.thisIndex'
p5006
g60
(g99
S'`\x00\x00\x00'
tRp5007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5008
I0
sg3642
g4260
sS'block_loop.thisRepN'
p5009
I1
sg3645
g4034
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5010
I1
sg3647
g4041
sg55
g11
sS'block_loop.thisTrial'
p5011
Nsg70
Vn
sS'block_loop.thisTrialN'
p5012
I0
sg39
F1.2166019304531801
sg34
g753
(S'\x07\xdf\x07\n\x0f\x18(\t\xd3\xa0'
tRp5013
sa(dp5014
S'trial_loop.thisTrialN'
p5015
I97
sg3633
g3829
sS'block_loop.thisIndex'
p5016
g3627
sg38
S'left'
p5017
sg59
g63
sS'trial_loop.thisN'
p5018
I97
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p5019
g60
(g99
S'a\x00\x00\x00'
tRp5020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5021
I0
sg3642
g3837
sS'block_loop.thisRepN'
p5022
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5023
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p5024
Nsg70
Vn
sS'block_loop.thisTrialN'
p5025
I0
sg39
F0.78330256177650881
sg34
g753
(S'\x07\xdf\x07\n\x0f\x18.\r\xb7\xb8'
tRp5026
sa(dp5027
S'trial_loop.thisTrialN'
p5028
I98
sg3633
g4193
sS'block_loop.thisIndex'
p5029
g3627
sg38
S'right'
p5030
sg59
g63
sS'trial_loop.thisN'
p5031
I98
sg33
g4066
sg64
g65
sS'trial_loop.thisIndex'
p5032
g60
(g99
S'b\x00\x00\x00'
tRp5033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5034
I0
sg3642
g4200
sS'block_loop.thisRepN'
p5035
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5036
I1
sg3647
g4073
sg55
g11
sS'block_loop.thisTrial'
p5037
Nsg70
Vn
sS'block_loop.thisTrialN'
p5038
I0
sg39
F0.86658704834917444
sg34
g753
(S'\x07\xdf\x07\n\x0f\x184\n\xf4\xb0'
tRp5039
sa(dp5040
S'trial_loop.thisTrialN'
p5041
I99
sg3633
g3812
sS'block_loop.thisIndex'
p5042
g3627
sg38
S'right'
p5043
sg59
g63
sS'trial_loop.thisN'
p5044
I99
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p5045
g60
(g99
S'c\x00\x00\x00'
tRp5046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5047
I0
sg3642
g3820
sS'block_loop.thisRepN'
p5048
I1
sg3645
g3816
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5049
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p5050
Nsg70
Vn
sS'block_loop.thisTrialN'
p5051
I0
sg39
F0.81664446704962756
sg34
g753
(S'\x07\xdf\x07\n\x0f\x18:\tbX'
tRp5052
sa(dp5053
S'trial_loop.thisTrialN'
p5054
I100
sg3633
g4281
sS'block_loop.thisIndex'
p5055
g3627
sg38
S'left'
p5056
sg59
g63
sS'trial_loop.thisN'
p5057
I100
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5058
g60
(g99
S'd\x00\x00\x00'
tRp5059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5060
I0
sg3642
g4288
sS'block_loop.thisRepN'
p5061
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5062
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5063
Nsg70
Vn
sS'block_loop.thisTrialN'
p5064
I0
sg39
F0.84990483434739872
sg34
g753
(S'\x07\xdf\x07\n\x0f\x19\x04\x07\x18h'
tRp5065
sa(dp5066
S'trial_loop.thisTrialN'
p5067
I101
sg3633
g4094
sS'block_loop.thisIndex'
p5068
g3627
sg38
S'left'
p5069
sg59
g63
sS'trial_loop.thisN'
p5070
I101
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p5071
g60
(g99
S'e\x00\x00\x00'
tRp5072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5073
I0
sg3642
g4101
sS'block_loop.thisRepN'
p5074
I1
sg3645
g3816
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5075
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p5076
Nsg70
Vn
sS'block_loop.thisTrialN'
p5077
I0
sg39
F0.81658146042900626
sg34
g753
(S'\x07\xdf\x07\n\x0f\x19\n\x05G\x90'
tRp5078
sa(dp5079
S'trial_loop.thisTrialN'
p5080
I102
sg3633
g4109
sS'block_loop.thisIndex'
p5081
g3627
sg38
S'left'
p5082
sg59
g63
sS'trial_loop.thisN'
p5083
I102
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5084
g60
(g99
S'f\x00\x00\x00'
tRp5085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5086
I0
sg3642
g4116
sS'block_loop.thisRepN'
p5087
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5088
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5089
Nsg70
Vn
sS'block_loop.thisTrialN'
p5090
I0
sg39
F0.9665098438563291
sg34
g753
(S'\x07\xdf\x07\n\x0f\x19\x10\x02\xfd\xa0'
tRp5091
sa(dp5092
S'trial_loop.thisTrialN'
p5093
I103
sg3633
g4079
sS'block_loop.thisIndex'
p5094
g3627
sg38
S'right'
p5095
sg59
g63
sS'trial_loop.thisN'
p5096
I103
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5097
g60
(g99
S'g\x00\x00\x00'
tRp5098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5099
I0
sg3642
g4086
sS'block_loop.thisRepN'
p5100
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5101
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5102
Nsg70
Vn
sS'block_loop.thisTrialN'
p5103
I0
sg39
F0.96630856479532667
sg34
g753
(S'\x07\xdf\x07\n\x0f\x19\x16\x03\x15\x10'
tRp5104
sa(dp5105
S'trial_loop.thisTrialN'
p5106
I104
sg3633
g4700
sS'block_loop.thisIndex'
p5107
g3627
sg38
S'right'
p5108
sg59
g63
sS'trial_loop.thisN'
p5109
I104
sg33
g4227
sg64
g65
sS'trial_loop.thisIndex'
p5110
g60
(g99
S'h\x00\x00\x00'
tRp5111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5112
I0
sg3642
g4707
sS'block_loop.thisRepN'
p5113
I1
sg3645
g4227
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5114
I1
sg3647
g4234
sg55
g11
sS'block_loop.thisTrial'
p5115
Nsg70
Vn
sS'block_loop.thisTrialN'
p5116
I0
sg39
F0.8998730744497152
sg34
g753
(S'\x07\xdf\x07\n\x0f\x19\x1c\x02\xf1\xe8'
tRp5117
sa(dp5118
S'trial_loop.thisTrialN'
p5119
I105
sg3633
g4767
sS'block_loop.thisIndex'
p5120
g3627
sg38
S'left'
p5121
sg59
g63
sS'trial_loop.thisN'
p5122
I105
sg33
g3799
sg64
g65
sS'trial_loop.thisIndex'
p5123
g60
(g99
S'i\x00\x00\x00'
tRp5124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5125
I0
sg3642
g4774
sS'block_loop.thisRepN'
p5126
I1
sg3645
g3799
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5127
I1
sg3647
g3806
sg55
g11
sS'block_loop.thisTrial'
p5128
Nsg70
Vn
sS'block_loop.thisTrialN'
p5129
I0
sg39
F0.96702130935227615
sg34
g753
(S'\x07\xdf\x07\n\x0f\x19"\x02\x13@'
tRp5130
sa(dp5131
S'trial_loop.thisTrialN'
p5132
I106
sg3633
g4047
sS'block_loop.thisIndex'
p5133
g3627
sg38
S'right'
p5134
sg59
g63
sS'trial_loop.thisN'
p5135
I106
sg33
g3983
sg64
g65
sS'trial_loop.thisIndex'
p5136
g60
(g99
S'j\x00\x00\x00'
tRp5137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5138
I0
sg3642
g4054
sS'block_loop.thisRepN'
p5139
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5140
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5141
Nsg70
Vn
sS'block_loop.thisTrialN'
p5142
I0
sg39
F1.2998861319319985
sg34
g753
(S'\x07\xdf\x07\n\x0f\x19(\x01\xf0\x18'
tRp5143
sa(dp5144
S'trial_loop.thisTrialN'
p5145
I107
sg3633
g3880
sS'block_loop.thisIndex'
p5146
g3627
sg38
S'left'
p5147
sg59
g63
sS'trial_loop.thisN'
p5148
I107
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5149
g60
(g99
S'k\x00\x00\x00'
tRp5150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5151
I0
sg3642
g3887
sS'block_loop.thisRepN'
p5152
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5153
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5154
Nsg70
Vn
sS'block_loop.thisTrialN'
p5155
I0
sg39
F0.84998751271268702
sg34
g753
(S'\x07\xdf\x07\n\x0f\x19.\x07\x04\xe0'
tRp5156
sa(dp5157
S'trial_loop.thisTrialN'
p5158
I108
sg3633
S'1-treacle_cookies.png'
p5159
sS'block_loop.thisIndex'
p5160
g3627
sg38
S'left'
p5161
sg59
g63
sS'trial_loop.thisN'
p5162
I108
sg33
g4372
sg64
g65
sS'trial_loop.thisIndex'
p5163
g60
(g99
S'l\x00\x00\x00'
tRp5164
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5165
I0
sg3642
S'21-nakd_banana_crunch.png'
p5166
sS'block_loop.thisRepN'
p5167
I1
sg3645
g4365
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5168
I1
sg3647
g4372
sg55
g11
sS'block_loop.thisTrial'
p5169
Nsg70
Vn
sS'block_loop.thisTrialN'
p5170
I0
sg39
F0.94990945293102413
sg34
g753
(S'\x07\xdf\x07\n\x0f\x194\x05r\x88'
tRp5171
sa(dp5172
S'trial_loop.thisTrialN'
p5173
I109
sg3633
g4700
sS'block_loop.thisIndex'
p5174
g3627
sg38
S'right'
p5175
sg59
g63
sS'trial_loop.thisN'
p5176
I109
sg33
g4227
sg64
g65
sS'trial_loop.thisIndex'
p5177
g60
(g99
S'm\x00\x00\x00'
tRp5178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5179
I0
sg3642
g4707
sS'block_loop.thisRepN'
p5180
I1
sg3645
g4227
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5181
I1
sg3647
g4234
sg55
g11
sS'block_loop.thisTrial'
p5182
Nsg70
Vn
sS'block_loop.thisTrialN'
p5183
I0
sg39
F0.94986212669391534
sg34
g753
(S'\x07\xdf\x07\n\x0f\x19:\x05\x10\xe0'
tRp5184
sa(dp5185
S'trial_loop.thisTrialN'
p5186
I110
sg3633
g4253
sS'block_loop.thisIndex'
p5187
g3627
sg38
S'right'
p5188
sg59
g63
sS'trial_loop.thisN'
p5189
I110
sg33
g4034
sg64
g65
sS'trial_loop.thisIndex'
p5190
g60
(g99
S'n\x00\x00\x00'
tRp5191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5192
I0
sg3642
g4260
sS'block_loop.thisRepN'
p5193
I1
sg3645
g4034
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5194
I1
sg3647
g4041
sg55
g11
sS'block_loop.thisTrial'
p5195
Nsg70
Vn
sS'block_loop.thisTrialN'
p5196
I0
sg39
F1.1666698977751366
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1a\x04\x04\xe9\xd0'
tRp5197
sa(dp5198
S'trial_loop.thisTrialN'
p5199
I111
sg3633
g4767
sS'block_loop.thisIndex'
p5200
g3627
sg38
S'left'
p5201
sg59
g63
sS'trial_loop.thisN'
p5202
I111
sg33
g3799
sg64
g65
sS'trial_loop.thisIndex'
p5203
g60
(g99
S'o\x00\x00\x00'
tRp5204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5205
I0
sg3642
g4774
sS'block_loop.thisRepN'
p5206
I1
sg3645
g3799
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5207
I1
sg3647
g3806
sg55
g11
sS'block_loop.thisTrial'
p5208
Nsg70
Vn
sS'block_loop.thisTrialN'
p5209
I0
sg39
F0.79994087071099784
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1a\n\x07\xdb\xb8'
tRp5210
sa(dp5211
S'trial_loop.thisTrialN'
p5212
I112
sg3633
g3654
sS'block_loop.thisIndex'
p5213
g3627
sg38
S'left'
p5214
sg59
g63
sS'trial_loop.thisN'
p5215
I112
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p5216
g60
(g99
S'p\x00\x00\x00'
tRp5217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5218
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5219
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5220
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5221
Nsg70
Vn
sS'block_loop.thisTrialN'
p5222
I0
sg39
F1.0329849627996737
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1a\x10\x05W0'
tRp5223
sa(dp5224
S'trial_loop.thisTrialN'
p5225
I113
sg3633
g3739
sS'block_loop.thisIndex'
p5226
g3627
sg38
S'right'
p5227
sg59
g63
sS'trial_loop.thisN'
p5228
I113
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p5229
g60
(g99
S'q\x00\x00\x00'
tRp5230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5231
I0
sg3642
g3746
sS'block_loop.thisRepN'
p5232
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5233
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5234
Nsg70
Vn
sS'block_loop.thisTrialN'
p5235
I0
sg39
F1.0332335681014229
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1a\x16\x06`\xd0'
tRp5236
sa(dp5237
S'trial_loop.thisTrialN'
p5238
I114
sg3633
g4208
sS'block_loop.thisIndex'
p5239
g3627
sg38
S'right'
p5240
sg59
g63
sS'trial_loop.thisN'
p5241
I114
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p5242
g60
(g99
S'r\x00\x00\x00'
tRp5243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5244
I0
sg3642
g4215
sS'block_loop.thisRepN'
p5245
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5246
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5247
Nsg70
Vn
sS'block_loop.thisTrialN'
p5248
I0
sg39
F1.4666786217676417
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1a\x1c\x07nX'
tRp5249
sa(dp5250
S'trial_loop.thisTrialN'
p5251
I115
sg3633
g3654
sS'block_loop.thisIndex'
p5252
g3627
sg38
S'left'
p5253
sg59
g63
sS'trial_loop.thisN'
p5254
I115
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5255
g60
(g99
S's\x00\x00\x00'
tRp5256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5257
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5258
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5259
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5260
Nsg70
Vn
sS'block_loop.thisTrialN'
p5261
I0
sg39
F1.1497447804285912
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1a"\x0e\xe4\x80'
tRp5262
sa(dp5263
S'trial_loop.thisTrialN'
p5264
I116
sg3633
g3688
sS'block_loop.thisIndex'
p5265
g3627
sg38
S'right'
p5266
sg59
g63
sS'trial_loop.thisN'
p5267
I116
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5268
g60
(g99
S't\x00\x00\x00'
tRp5269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5270
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5271
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5272
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5273
Nsg70
Vn
sS'block_loop.thisTrialN'
p5274
I0
sg39
F0.69991458469303325
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1a)\x02\x98\x10'
tRp5275
sa(dp5276
S'trial_loop.thisTrialN'
p5277
I117
sg3633
g4391
sS'block_loop.thisIndex'
p5278
g3627
sg38
S'left'
p5279
sg59
g63
sS'trial_loop.thisN'
p5280
I117
sg33
g4401
sg64
g65
sS'trial_loop.thisIndex'
p5281
g60
(g99
S'u\x00\x00\x00'
tRp5282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5283
I0
sg3642
g4399
sS'block_loop.thisRepN'
p5284
I1
sg3645
g4401
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5285
I1
sg3647
g4395
sg55
g11
sS'block_loop.thisTrial'
p5286
Nsg70
Vn
sS'block_loop.thisTrialN'
p5287
I0
sg39
F0.9664667940887739
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1a.\r\xa8\x18'
tRp5288
sa(dp5289
S'trial_loop.thisTrialN'
p5290
I118
sg3633
g3812
sS'block_loop.thisIndex'
p5291
g3627
sg38
S'right'
p5292
sg59
g63
sS'trial_loop.thisN'
p5293
I118
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p5294
g60
(g99
S'v\x00\x00\x00'
tRp5295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5296
I0
sg3642
g3820
sS'block_loop.thisRepN'
p5297
I1
sg3645
g3816
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5298
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p5299
Nsg70
Vn
sS'block_loop.thisTrialN'
p5300
I0
sg39
F0.81657689886560547
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1a4\r\xbf\x88'
tRp5301
sa(dp5302
S'trial_loop.thisTrialN'
p5303
I119
sg3633
g3634
sS'block_loop.thisIndex'
p5304
g3627
sg38
S'right'
p5305
sg59
g63
sS'trial_loop.thisN'
p5306
I119
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5307
g60
(g99
S'w\x00\x00\x00'
tRp5308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5309
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5310
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5311
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5312
Nsg70
Vn
sS'block_loop.thisTrialN'
p5313
I0
sg39
F0.83321976936713327
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1a:\x0bu\x98'
tRp5314
sa(dp5315
S'trial_loop.thisTrialN'
p5316
I120
sg3633
g5159
sS'block_loop.thisIndex'
p5317
g3627
sg38
S'left'
p5318
sg59
g63
sS'trial_loop.thisN'
p5319
I120
sg33
g4365
sg64
g65
sS'trial_loop.thisIndex'
p5320
g60
(g99
S'x\x00\x00\x00'
tRp5321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5322
I0
sg3642
g5166
sS'block_loop.thisRepN'
p5323
I1
sg3645
g4365
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5324
I1
sg3647
g4372
sg55
g11
sS'block_loop.thisTrial'
p5325
Nsg70
Vn
sS'block_loop.thisTrialN'
p5326
I0
sg39
F1.0999071151309181
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1b\x04\tf@'
tRp5327
sa(dp5328
S'trial_loop.thisTrialN'
p5329
I121
sg3633
g4568
sS'block_loop.thisIndex'
p5330
g3627
sg38
S'right'
p5331
sg59
g63
sS'trial_loop.thisN'
p5332
I121
sg33
g4401
sg64
g65
sS'trial_loop.thisIndex'
p5333
g60
(g99
S'y\x00\x00\x00'
tRp5334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5335
I0
sg3642
g4575
sS'block_loop.thisRepN'
p5336
I1
sg3645
g4401
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5337
I1
sg3647
g4395
sg55
g11
sS'block_loop.thisTrial'
p5338
Nsg70
Vn
sS'block_loop.thisTrialN'
p5339
I0
sg39
F1.0998991323904193
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1b\n\x0be\xf8'
tRp5340
sa(dp5341
S'trial_loop.thisTrialN'
p5342
I122
sg3633
g4193
sS'block_loop.thisIndex'
p5343
g3627
sg38
S'right'
p5344
sg59
g63
sS'trial_loop.thisN'
p5345
I122
sg33
g4066
sg64
g65
sS'trial_loop.thisIndex'
p5346
g60
(g99
S'z\x00\x00\x00'
tRp5347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5348
I0
sg3642
g4200
sS'block_loop.thisRepN'
p5349
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5350
I1
sg3647
g4073
sg55
g11
sS'block_loop.thisTrial'
p5351
Nsg70
Vn
sS'block_loop.thisTrialN'
p5352
I0
sg39
F0.78331938254632405
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1b\x10\re\xb0'
tRp5353
sa(dp5354
S'trial_loop.thisTrialN'
p5355
I123
sg3633
g4767
sS'block_loop.thisIndex'
p5356
g3627
sg38
S'left'
p5357
sg59
g63
sS'trial_loop.thisN'
p5358
I123
sg33
g3799
sg64
g65
sS'trial_loop.thisIndex'
p5359
g60
(g99
S'{\x00\x00\x00'
tRp5360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5361
I0
sg3642
g4774
sS'block_loop.thisRepN'
p5362
I1
sg3645
g3799
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5363
I1
sg3647
g3806
sg55
g11
sS'block_loop.thisTrial'
p5364
Nsg70
Vn
sS'block_loop.thisTrialN'
p5365
I0
sg39
F0.93323493657226209
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1b\x16\n\xa2\xa8'
tRp5366
sa(dp5367
S'trial_loop.thisTrialN'
p5368
I124
sg3633
g3705
sS'block_loop.thisIndex'
p5369
g3627
sg38
S'right'
p5370
sg59
g63
sS'trial_loop.thisN'
p5371
I124
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p5372
g60
(g99
S'|\x00\x00\x00'
tRp5373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5374
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5375
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5376
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5377
Nsg70
Vn
sS'block_loop.thisTrialN'
p5378
I0
sg39
F1.0832154929012177
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1b\x1c\nA\x00'
tRp5379
sa(dp5380
S'trial_loop.thisTrialN'
p5381
I125
sg3633
g3925
sS'block_loop.thisIndex'
p5382
g3627
sg38
S'left'
p5383
sg59
g63
sS'trial_loop.thisN'
p5384
I125
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p5385
g60
(g99
S'}\x00\x00\x00'
tRp5386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5387
I0
sg3642
g3932
sS'block_loop.thisRepN'
p5388
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5389
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p5390
Nsg70
Vn
sS'block_loop.thisTrialN'
p5391
I0
sg39
F1.0664748338458594
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1b"\x0c\x028'
tRp5392
sa(dp5393
S'trial_loop.thisTrialN'
p5394
I126
sg3633
g3654
sS'block_loop.thisIndex'
p5395
g3627
sg38
S'left'
p5396
sg59
g63
sS'trial_loop.thisN'
p5397
I126
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p5398
g60
(g99
S'~\x00\x00\x00'
tRp5399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5400
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5401
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5402
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5403
Nsg70
Vn
sS'block_loop.thisTrialN'
p5404
I0
sg39
F1.0501147803843196
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1b(\r\x84\xf0'
tRp5405
sa(dp5406
S'trial_loop.thisTrialN'
p5407
I127
sg3633
g3895
sS'block_loop.thisIndex'
p5408
g3627
sg38
S'left'
p5409
sg59
g63
sS'trial_loop.thisN'
p5410
I127
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p5411
g60
(g99
S'\x7f\x00\x00\x00'
tRp5412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5413
I0
sg3642
g3903
sS'block_loop.thisRepN'
p5414
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5415
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p5416
Nsg70
Vn
sS'block_loop.thisTrialN'
p5417
I0
sg39
F0.86667884984854027
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1b.\x0e\xcd\x10'
tRp5418
sa(dp5419
S'trial_loop.thisTrialN'
p5420
I128
sg3633
g4163
sS'block_loop.thisIndex'
p5421
g3627
sg38
S'left'
p5422
sg59
g63
sS'trial_loop.thisN'
p5423
I128
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p5424
g60
(g99
S'\x80\x00\x00\x00'
tRp5425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5426
I0
sg3642
g4171
sS'block_loop.thisRepN'
p5427
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5428
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p5429
Nsg70
Vn
sS'block_loop.thisTrialN'
p5430
I0
sg39
F1.0165040278625384
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1b4\r:\xb8'
tRp5431
sa(dp5432
S'trial_loop.thisTrialN'
p5433
I129
sg3633
g3880
sS'block_loop.thisIndex'
p5434
g3627
sg38
S'left'
p5435
sg59
g63
sS'trial_loop.thisN'
p5436
I129
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5437
g60
(g99
S'\x81\x00\x00\x00'
tRp5438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5439
I0
sg3642
g3887
sS'block_loop.thisRepN'
p5440
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5441
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vn
sS'block_loop.thisTrialN'
p5443
I0
sg39
F0.81656777573516592
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1b:\x0e\t\xc0'
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g3955
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'left'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g3966
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g3963
sS'block_loop.thisRepN'
p5453
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5454
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vn
sS'block_loop.thisTrialN'
p5456
I0
sg39
F0.94990032980058459
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1c\x04\x0b\xbf\xd0'
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g3940
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'right'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g3947
sS'block_loop.thisRepN'
p5466
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5467
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vn
sS'block_loop.thisTrialN'
p5469
I0
sg39
F1.0166594061738579
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1c\n\x0b^('
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g3780
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'left'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g3787
sS'block_loop.thisRepN'
p5479
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5480
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vn
sS'block_loop.thisTrialN'
p5482
I0
sg39
F0.8332140674101538
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1c\x10\x0c-0'
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g3925
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'left'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g3932
sS'block_loop.thisRepN'
p5492
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5493
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vn
sS'block_loop.thisTrialN'
p5495
I0
sg39
F0.98323168645583792
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1c\x16\n\x1d\xd8'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g3940
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'right'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g3947
sS'block_loop.thisRepN'
p5505
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5506
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vn
sS'block_loop.thisTrialN'
p5508
I0
sg39
F0.79989725074483431
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1c\x1c\ns\xc8'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g4079
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'right'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g4086
sS'block_loop.thisRepN'
p5518
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5519
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vn
sS'block_loop.thisTrialN'
p5521
I0
sg39
F0.89966039147475385
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1c"\x07\xebX'
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g3972
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'left'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g3980
sS'block_loop.thisRepN'
p5531
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5532
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vn
sS'block_loop.thisTrialN'
p5534
I0
sg39
F0.81656378436673549
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1c(\x06\xd2\x18'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g3722
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'right'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g3730
sS'block_loop.thisRepN'
p5544
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5545
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vn
sS'block_loop.thisTrialN'
p5547
I0
sg39
F0.81680269633943681
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1c.\x04\x88('
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g4047
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'right'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g4054
sS'block_loop.thisRepN'
p5557
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5558
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vn
sS'block_loop.thisTrialN'
p5560
I0
sg39
F2.033227295953111
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1c4\x02>8'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g5159
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'left'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g4365
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g5166
sS'block_loop.thisRepN'
p5570
I1
sg3645
g4365
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5571
I1
sg3647
g4372
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vn
sS'block_loop.thisTrialN'
p5573
I0
sg39
F0.93338518312521046
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1c;\x03C\xf0'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g4062
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'left'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g4073
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g4070
sS'block_loop.thisRepN'
p5583
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3647
g4073
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vn
sS'block_loop.thisTrialN'
p5586
I0
sg39
F0.7498896671422699
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1d\x05\x02\xa3\xc8'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g3846
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'left'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g3854
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vn
sS'block_loop.thisTrialN'
p5599
I0
sg39
F1.0498222700152837
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1d\n\x0e\xa9\xe8'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g4047
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'right'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g4054
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vn
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.86665119535973645
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1d\x11\x00\xaf\xc8'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g3895
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'left'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g3903
sS'block_loop.thisRepN'
p5622
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vn
sS'block_loop.thisTrialN'
p5625
I0
sg39
F0.98312620026263176
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1d\x16\x0e_\xb0'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g3955
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'left'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g3963
sS'block_loop.thisRepN'
p5635
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vn
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.81660255767201306
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1d\x1c\x0e\xb1\xb8'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g3846
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'left'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g3854
sS'block_loop.thisRepN'
p5648
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vn
sS'block_loop.thisTrialN'
p5651
I0
sg39
F1.2665288313728524
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1d"\x0cg\xc8'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g4193
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g4066
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g4200
sS'block_loop.thisRepN'
p5661
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3647
g4073
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vn
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.78324896338381222
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1d)\x01\xc5 '
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g4094
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'left'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g4101
sS'block_loop.thisRepN'
p5674
I1
sg3645
g3816
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vn
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.88323219963058364
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1d.\x0eDX'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g3654
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'left'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5687
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vn
sS'block_loop.thisTrialN'
p5690
I0
sg39
F0.9329786336311372
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1d4\x0c\xec\x98'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g3925
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'left'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g3932
sS'block_loop.thisRepN'
p5700
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vn
sS'block_loop.thisTrialN'
p5703
I0
sg39
F1.1333197246640339
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1d:\x0cLp'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g3829
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'left'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g3833
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g3837
sS'block_loop.thisRepN'
p5713
I1
sg3645
g3833
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g3840
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vn
sS'block_loop.thisTrialN'
p5716
I0
sg39
F0.88322450199120794
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1e\x04\x0f\x03\xc0'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g3739
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'right'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g3746
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vn
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.89992923872341635
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1e\n\r\xac\x00'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g3895
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'left'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g3903
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vn
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.76651229570052237
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1e\x10\x0c\x92\xc0'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g4193
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'right'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g4073
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g4200
sS'block_loop.thisRepN'
p5752
I1
sg3645
g4066
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g4073
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vn
sS'block_loop.thisTrialN'
p5755
I0
sg39
F0.78330712333990959
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1e\x16\t\x95 '
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g4109
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'left'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g4116
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vn
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.89990586070052814
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1e\x1c\x06\xce0'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g4568
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g4401
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g4575
sS'block_loop.thisRepN'
p5778
I1
sg3645
g4401
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g4395
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vn
sS'block_loop.thisTrialN'
p5781
I0
sg39
F1.1831320162600605
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1e"\x05\xb4\xf0'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g3863
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'left'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g3874
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g3871
sS'block_loop.thisRepN'
p5791
I1
sg3645
g3867
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g3874
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vn
sS'block_loop.thisTrialN'
p5794
I0
sg39
F0.8499059747409774
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1e(\t#\xd8'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g4163
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'left'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g4171
sS'block_loop.thisRepN'
p5804
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vn
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.86659018442514935
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1e.\x07S\x00'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g4447
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'right'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g4454
sS'block_loop.thisRepN'
p5817
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vn
sS'block_loop.thisTrialN'
p5820
I0
sg39
F1.0165750172200205
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1e4\x05\xc0\xa8'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g4700
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'right'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g4227
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g4707
sS'block_loop.thisRepN'
p5830
I1
sg3645
g4227
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g4234
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vn
sS'block_loop.thisTrialN'
p5833
I0
sg39
F1.1165656660123204
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1e:\x06\x8f\xb0'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g3972
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'left'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g3980
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vn
sS'block_loop.thisTrialN'
p5846
I0
sg39
F1.1332247870886931
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1f\x04\x08\xca\x00'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g4030
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'left'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g4041
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g4038
sS'block_loop.thisRepN'
p5856
I1
sg3645
g4034
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g4041
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vn
sS'block_loop.thisTrialN'
p5859
I0
sg39
F1.5332960045234358
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1f\n\x0b\x81P'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g3634
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'right'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vn
sS'block_loop.thisTrialN'
p5872
I0
sg39
F0.93324662558006821
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1f\x11\x04\xabP'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g3812
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'right'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g3820
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3816
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vn
sS'block_loop.thisTrialN'
p5885
I0
sg39
F1.0000031360759749
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1f\x17\x04E\xc0'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g3739
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'right'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g3746
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vn
sS'block_loop.thisTrialN'
p5898
I0
sg39
F0.96660250064815045
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1f\x1d\x04\xda0'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g4488
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'right'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g4495
sS'block_loop.thisRepN'
p5908
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vn
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.98320089589105919
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1f#\x04\xb3 '
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g4391
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'left'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g4401
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g4399
sS'block_loop.thisRepN'
p5921
I1
sg3645
g4401
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g4395
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vn
sS'block_loop.thisTrialN'
p5924
I0
sg39
F1.0164797945471946
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1f)\x05\t\x10'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g4047
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'right'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g3983
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g4054
sS'block_loop.thisRepN'
p5934
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vn
sS'block_loop.thisTrialN'
p5937
I0
sg39
F0.91657353471237002
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1f/\x05\xd40'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g3846
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'left'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g3854
sS'block_loop.thisRepN'
p5947
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vn
sS'block_loop.thisTrialN'
p5950
I0
sg39
F1.3999822669175046
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1f5\x04\xf9p'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g4361
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'right'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g4365
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g4369
sS'block_loop.thisRepN'
p5960
I1
sg3645
g4365
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g4372
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vn
sS'block_loop.thisTrialN'
p5963
I0
sg39
F1.0166174967962434
sg34
g753
(S'\x07\xdf\x07\n\x0f\x1f;\x0b\xbb\xe8'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g4208
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'right'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g4215
sS'block_loop.thisRepN'
p5973
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vn
sS'block_loop.thisTrialN'
p5976
I0
sg39
F1.0498410864711332
sg34
g753
(S'\x07\xdf\x07\n\x0f \x05\x0cLp'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g3972
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'left'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3976
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g3980
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3976
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g3983
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vn
sS'block_loop.thisTrialN'
p5989
I0
sg39
F0.96659822418223484
sg34
g753
(S'\x07\xdf\x07\n\x0f \x0b\r\x94\x90'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g4030
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'left'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g4034
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g4038
sS'block_loop.thisRepN'
p5999
I1
sg3645
g4034
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g4041
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vn
sS'block_loop.thisTrialN'
p6002
I0
sg39
F1.8166966399512603
sg34
g753
(S'\x07\xdf\x07\n\x0f \x11\r\xac\x00'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g4361
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'right'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g4365
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g4369
sS'block_loop.thisRepN'
p6012
I1
sg3645
g4365
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g4372
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vn
sS'block_loop.thisTrialN'
p6015
I0
sg39
F0.93334355884144315
sg34
g753
(S'\x07\xdf\x07\n\x0f \x18\x0b^('
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g3780
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'left'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g3787
sS'block_loop.thisRepN'
p6025
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vn
sS'block_loop.thisTrialN'
p6028
I0
sg39
F0.94988208353970549
sg34
g753
(S'\x07\xdf\x07\n\x0f \x1e\n\xf8\x98'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g4002
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'right'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g4009
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vn
sS'block_loop.thisTrialN'
p6041
I0
sg39
F0.8666004479455296
sg34
g753
(S'\x07\xdf\x07\n\x0f $\n\x96\xf0'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g5159
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'left'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g4365
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g5166
sS'block_loop.thisRepN'
p6051
I1
sg3645
g4365
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g4372
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vn
sS'block_loop.thisTrialN'
p6054
I0
sg39
F1.08332297477682
sg34
g753
(S'\x07\xdf\x07\n\x0f *\t\x04\x98'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g3705
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'right'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g3713
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vn
sS'block_loop.thisTrialN'
p6067
I0
sg39
F0.98322683979131398
sg34
g753
(S'\x07\xdf\x07\n\x0f 0\n\xc5\xd0'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g4223
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'left'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g4227
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g4231
sS'block_loop.thisRepN'
p6077
I1
sg3645
g4227
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g4234
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vn
sS'block_loop.thisTrialN'
p6080
I0
sg39
F1.2666499979459331
sg34
g753
(S'\x07\xdf\x07\n\x0f 6\x0b\x1b\xc0'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g4361
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'right'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g4372
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g4369
sS'block_loop.thisRepN'
p6090
I1
sg3645
g4365
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g4372
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vn
sS'block_loop.thisTrialN'
p6093
I0
sg39
F1.0832499897333037
sg34
g753
(S'\x07\xdf\x07\n\x0f!\x01\x00u0'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g3795
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'right'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g3799
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g3803
sS'block_loop.thisRepN'
p6103
I1
sg3645
g3799
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g3806
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vn
sS'block_loop.thisTrialN'
p6106
I0
sg39
F1.1165288883930771
sg34
g753
(S'\x07\xdf\x07\n\x0f!\x07\x026h'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g4253
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'right'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g4034
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g4260
sS'block_loop.thisRepN'
p6116
I1
sg3645
g4034
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g4041
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vn
sS'block_loop.thisTrialN'
p6119
I0
sg39
F1.1332316294356133
sg34
g753
(S'\x07\xdf\x07\n\x0f!\r\x04t\xa0'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g4163
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'left'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g4171
sS'block_loop.thisRepN'
p6129
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vn
sS'block_loop.thisTrialN'
p6132
I0
sg39
F0.88333711563245743
sg34
g753
(S'\x07\xdf\x07\n\x0f!\x13\x07(\x08'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g4281
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'left'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g4288
sS'block_loop.thisRepN'
p6142
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vn
sS'block_loop.thisTrialN'
p6145
I0
sg39
F1.0000276544888038
sg34
g753
(S'\x07\xdf\x07\n\x0f!\x19\x05\xd40'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g3739
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'right'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g3746
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vn
sS'block_loop.thisTrialN'
p6158
I0
sg39
F1.0332332830039377
sg34
g753
(S'\x07\xdf\x07\n\x0f!\x1f\x06d\xb8'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g4002
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'right'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3966
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g4009
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vn
sS'block_loop.thisTrialN'
p6171
I0
sg39
F1.2498979349802539
sg34
g753
(S'\x07\xdf\x07\n\x0f!%\x073\xc0'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g3722
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'right'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3733
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g3730
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vn
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.86657706992627936
sg34
g753
(S'\x07\xdf\x07\n\x0f!+\x0b\x94\xd8'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g4767
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'left'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g3799
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g4774
sS'block_loop.thisRepN'
p6194
I1
sg3645
g3799
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g3806
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vn
sS'block_loop.thisTrialN'
p6197
I0
sg39
F0.93324548519012751
sg34
g753
(S'\x07\xdf\x07\n\x0f!1\t\xfe\x98'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g4488
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'right'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g4174
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g4495
sS'block_loop.thisRepN'
p6207
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vn
sS'block_loop.thisTrialN'
p6210
I0
sg39
F0.98324822213180596
sg34
g753
(S'\x07\xdf\x07\n\x0f!7\t\x9c\xf0'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g4391
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'left'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g4401
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g4399
sS'block_loop.thisRepN'
p6220
I1
sg3645
g4401
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g4395
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vn
sS'block_loop.thisTrialN'
p6223
I0
sg39
F0.88310875227398355
sg34
g753
(S'\x07\xdf\x07\n\x0f"\x01\t\xf2\xe0'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g3795
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'right'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3799
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g3803
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3799
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g3806
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vn
sS'block_loop.thisTrialN'
p6236
I0
sg39
F0.8499284974677721
sg34
g753
(S'\x07\xdf\x07\n\x0f"\x07\x08\x9b '
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g3705
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'right'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g3713
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vn
sS'block_loop.thisTrialN'
p6249
I0
sg39
F1.1666165844835632
sg34
g753
(S'\x07\xdf\x07\n\x0f"\r\x06\xce0'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g4002
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'right'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g4009
sS'block_loop.thisRepN'
p6259
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vn
sS'block_loop.thisTrialN'
p6262
I0
sg39
F1.0498536307786708
sg34
g753
(S'\x07\xdf\x07\n\x0f"\x13\t\xc0\x18'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g5159
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'left'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g4365
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g5166
sS'block_loop.thisRepN'
p6272
I1
sg3645
g4365
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g4372
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vn
sS'block_loop.thisTrialN'
p6275
I0
sg39
F1.3333169877223554
sg34
g753
(S'\x07\xdf\x07\n\x0f"\x19\x0b\x088'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g4223
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'left'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g4227
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g4231
sS'block_loop.thisRepN'
p6285
I1
sg3645
g4227
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g4234
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vn
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.81657319259466021
sg34
g753
(S'\x07\xdf\x07\n\x0f" \x01W\xc0'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g4163
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'left'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g4171
sS'block_loop.thisRepN'
p6298
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vn
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.88325757333586807
sg34
g753
(S'\x07\xdf\x07\n\x0f"%\x0eP\x10'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g4568
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'right'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g4401
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g4575
sS'block_loop.thisRepN'
p6311
I1
sg3645
g4401
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g4395
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vn
sS'block_loop.thisTrialN'
p6314
I0
sg39
F1.1330719746547402
sg34
g753
(S'\x07\xdf\x07\n\x0f"+\r6\xd0'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4281
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'left'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4288
sS'block_loop.thisRepN'
p6324
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vn
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.81659257924548001
sg34
g753
(S'\x07\xdf\x07\n\x0f"2\x00m`'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g4488
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'right'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g4495
sS'block_loop.thisRepN'
p6337
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vn
sS'block_loop.thisTrialN'
p6340
I0
sg39
F0.83326481482072268
sg34
g753
(S'\x07\xdf\x07\n\x0f"7\re\xb0'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g3955
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'left'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g3963
sS'block_loop.thisRepN'
p6350
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vn
sS'block_loop.thisTrialN'
p6353
I0
sg39
F0.96665581394336186
sg34
g753
(S'\x07\xdf\x07\n\x0f#\x01\x0bVX'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F379.90675334020489
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vn
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vn
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'26-walkers_smoky_bacon.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'right'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'44-crunch.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'44-crunch.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'26-walkers_smoky_bacon.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vn
sS'block_loop.thisTrialN'
p6388
I0
sg39
F1.5498331037342723
sg34
g753
(S'\x07\xdf\x07\n\x0f+\x05\tJ\xe8'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'27-hartleys_raspberries_jelly.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'right'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'51-mars.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'51-mars.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6385
S'27-hartleys_raspberries_jelly.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vn
sS'block_loop.thisTrialN'
p6405
I0
sg39
F0.83331670262487023
sg34
g753
(S'\x07\xdf\x07\n\x0f+\x0c\x02\xee\x00'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'46-pistachios.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'left'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'29-beans.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'29-beans.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
S'46-pistachios.png'
p6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6420
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vn
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.86659474598855013
sg34
g753
(S'\x07\xdf\x07\n\x0f+\x12\x00\xe2\x90'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'31-hobnobs.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'left'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'31-hobnobs.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'25-kitkat.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6436
I2
sg6385
S'25-kitkat.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vn
sS'block_loop.thisTrialN'
p6439
I0
sg39
F0.98323681821784703
sg34
g753
(S'\x07\xdf\x07\n\x0f+\x17\x0e\x92x'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'19-caramello_redo.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'left'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
S'19-caramello_redo.png'
p6447
sg64
g65
sS'trial_loop.thisIndex'
p6448
g60
(g99
S'\x04\x00\x00\x00'
tRp6449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6450
I0
sg6380
S'30-spaghetti_hoops.png'
p6451
sS'block_loop.thisRepN'
p6452
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6453
I2
sg6385
S'30-spaghetti_hoops.png'
p6454
sg55
g11
sS'block_loop.thisTrial'
p6455
Nsg70
Vn
sS'block_loop.thisTrialN'
p6456
I0
sg39
F0.89988390816870378
sg34
g753
(S'\x07\xdf\x07\n\x0f+\x1d\x0e\xe8h'
tRp6457
sa(dp6458
S'trial_loop.thisTrialN'
p6459
I5
sg6371
S'33-ambrosia_rice.png'
p6460
sS'block_loop.thisIndex'
p6461
g6365
sg38
S'right'
p6462
sg59
g63
sS'trial_loop.thisN'
p6463
I5
sg33
S'23-crunchie_redo.png'
p6464
sg64
g65
sS'trial_loop.thisIndex'
p6465
g60
(g99
S'\x05\x00\x00\x00'
tRp6466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6467
I0
sg6380
S'23-crunchie_redo.png'
p6468
sS'block_loop.thisRepN'
p6469
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6470
I2
sg6385
S'33-ambrosia_rice.png'
p6471
sg55
g11
sS'block_loop.thisTrial'
p6472
Nsg70
Vn
sS'block_loop.thisTrialN'
p6473
I0
sg39
F2.599967840964382
sg34
g753
(S'\x07\xdf\x07\n\x0f+#\r\xcf('
tRp6474
sa(dp6475
S'trial_loop.thisTrialN'
p6476
I6
sg6371
S'22-daim.png'
p6477
sS'block_loop.thisIndex'
p6478
g6365
sg38
S'left'
p6479
sg59
g63
sS'trial_loop.thisN'
p6480
I6
sg33
S'22-daim.png'
p6481
sg64
g65
sS'trial_loop.thisIndex'
p6482
g60
(g99
S'\x06\x00\x00\x00'
tRp6483
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6484
I0
sg6380
S'7-olives.png'
p6485
sS'block_loop.thisRepN'
p6486
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6487
I2
sg6385
S'7-olives.png'
p6488
sg55
g11
sS'block_loop.thisTrial'
p6489
Nsg70
Vn
sS'block_loop.thisTrialN'
p6490
I0
sg39
F0.76658442544794525
sg34
g753
(S'\x07\xdf\x07\n\x0f++\x08"\x08'
tRp6491
sa(dp6492
S'trial_loop.thisTrialN'
p6493
I7
sg6371
g6460
sS'block_loop.thisIndex'
p6494
g6365
sg38
S'right'
p6495
sg59
g63
sS'trial_loop.thisN'
p6496
I7
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p6497
g60
(g99
S'\x07\x00\x00\x00'
tRp6498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6499
I0
sg6380
g6468
sS'block_loop.thisRepN'
p6500
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6501
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p6502
Nsg70
Vn
sS'block_loop.thisTrialN'
p6503
I0
sg39
F0.75003506703433231
sg34
g753
(S'\x07\xdf\x07\n\x0f+1\x05 \x80'
tRp6504
sa(dp6505
S'trial_loop.thisTrialN'
p6506
I8
sg6371
S'41-peanuts_redo.png'
p6507
sS'block_loop.thisIndex'
p6508
g6365
sg38
S'right'
p6509
sg59
g63
sS'trial_loop.thisN'
p6510
I8
sg33
S'45-chewy_nougat_redo.png'
p6511
sg64
g65
sS'trial_loop.thisIndex'
p6512
g60
(g99
S'\x08\x00\x00\x00'
tRp6513
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6514
I0
sg6380
S'45-chewy_nougat_redo.png'
p6515
sS'block_loop.thisRepN'
p6516
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6517
I2
sg6385
S'41-peanuts_redo.png'
p6518
sg55
g11
sS'block_loop.thisTrial'
p6519
Nsg70
Vn
sS'block_loop.thisTrialN'
p6520
I0
sg39
F1.0166063779834076
sg34
g753
(S'\x07\xdf\x07\n\x0f+7\x01\xe4`'
tRp6521
sa(dp6522
S'trial_loop.thisTrialN'
p6523
I9
sg6371
S'10-bounty_redo.png'
p6524
sS'block_loop.thisIndex'
p6525
g6365
sg38
S'left'
p6526
sg59
g63
sS'trial_loop.thisN'
p6527
I9
sg33
S'10-bounty_redo.png'
p6528
sg64
g65
sS'trial_loop.thisIndex'
p6529
g60
(g99
S'\t\x00\x00\x00'
tRp6530
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6531
I0
sg6380
S'4-corn.png'
p6532
sS'block_loop.thisRepN'
p6533
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6534
I2
sg6385
S'4-corn.png'
p6535
sg55
g11
sS'block_loop.thisTrial'
p6536
Nsg70
Vn
sS'block_loop.thisTrialN'
p6537
I0
sg39
F1.016582429761911
sg34
g753
(S'\x07\xdf\x07\n\x0f,\x01\x02\xb3h'
tRp6538
sa(dp6539
S'trial_loop.thisTrialN'
p6540
I10
sg6371
S'20-fruit_pastilles.png'
p6541
sS'block_loop.thisIndex'
p6542
g6365
sg38
S'right'
p6543
sg59
g63
sS'trial_loop.thisN'
p6544
I10
sg33
S'2-steamed_puddings.png'
p6545
sg64
g65
sS'trial_loop.thisIndex'
p6546
g60
(g99
S'\n\x00\x00\x00'
tRp6547
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6548
I0
sg6380
S'2-steamed_puddings.png'
p6549
sS'block_loop.thisRepN'
p6550
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6551
I2
sg6385
S'20-fruit_pastilles.png'
p6552
sg55
g11
sS'block_loop.thisTrial'
p6553
Nsg70
Vn
sS'block_loop.thisTrialN'
p6554
I0
sg39
F1.0499092248537636
sg34
g753
(S'\x07\xdf\x07\n\x0f,\x07\x03~\x88'
tRp6555
sa(dp6556
S'trial_loop.thisTrialN'
p6557
I11
sg6371
S'29-beans.png'
p6558
sS'block_loop.thisIndex'
p6559
g6365
sg38
S'right'
p6560
sg59
g63
sS'trial_loop.thisN'
p6561
I11
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p6562
g60
(g99
S'\x0b\x00\x00\x00'
tRp6563
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6564
I0
sg6380
S'46-pistachios.png'
p6565
sS'block_loop.thisRepN'
p6566
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6567
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p6568
Nsg70
Vn
sS'block_loop.thisTrialN'
p6569
I0
sg39
F0.71668261313971016
sg34
g753
(S'\x07\xdf\x07\n\x0f,\r\x04\xc6\xa8'
tRp6570
sa(dp6571
S'trial_loop.thisTrialN'
p6572
I12
sg6371
S'3-ellas_strawberries_apples.png'
p6573
sS'block_loop.thisIndex'
p6574
g6365
sg38
S'left'
p6575
sg59
g63
sS'trial_loop.thisN'
p6576
I12
sg33
S'3-ellas_strawberries_apples.png'
p6577
sg64
g65
sS'trial_loop.thisIndex'
p6578
g60
(g99
S'\x0c\x00\x00\x00'
tRp6579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6580
I0
sg6380
S'13-mccoys_steak_crisps.png'
p6581
sS'block_loop.thisRepN'
p6582
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6583
I2
sg6385
S'13-mccoys_steak_crisps.png'
p6584
sg55
g11
sS'block_loop.thisTrial'
p6585
Nsg70
Vn
sS'block_loop.thisTrialN'
p6586
I0
sg39
F0.83325597679140628
sg34
g753
(S'\x07\xdf\x07\n\x0f,\x13\x00\xd2\xf0'
tRp6587
sa(dp6588
S'trial_loop.thisTrialN'
p6589
I13
sg6371
S'42-mrkipling_lemon_slices.png'
p6590
sS'block_loop.thisIndex'
p6591
g6365
sg38
S'left'
p6592
sg59
g63
sS'trial_loop.thisN'
p6593
I13
sg33
S'42-mrkipling_lemon_slices.png'
p6594
sg64
g65
sS'trial_loop.thisIndex'
p6595
g60
(g99
S'\r\x00\x00\x00'
tRp6596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6597
I0
sg6380
S'16-skips_prawn.png'
p6598
sS'block_loop.thisRepN'
p6599
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6600
I2
sg6385
S'16-skips_prawn.png'
p6601
sg55
g11
sS'block_loop.thisTrial'
p6602
Nsg70
Vn
sS'block_loop.thisTrialN'
p6603
I0
sg39
F0.81644946014057496
sg34
g753
(S'\x07\xdf\x07\n\x0f,\x18\x0e\t\xc0'
tRp6604
sa(dp6605
S'trial_loop.thisTrialN'
p6606
I14
sg6371
S'49-yorkie.png'
p6607
sS'block_loop.thisIndex'
p6608
g6365
sg38
S'left'
p6609
sg59
g63
sS'trial_loop.thisN'
p6610
I14
sg33
S'35-raisins.png'
p6611
sg64
g65
sS'trial_loop.thisIndex'
p6612
g60
(g99
S'\x0e\x00\x00\x00'
tRp6613
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6614
I0
sg6380
S'35-raisins.png'
p6615
sS'block_loop.thisRepN'
p6616
I2
sg6383
S'49-yorkie.png'
p6617
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6618
I2
sg6385
g6611
sg55
g11
sS'block_loop.thisTrial'
p6619
Nsg70
Vn
sS'block_loop.thisTrialN'
p6620
I0
sg39
F1.2832241598734981
sg34
g753
(S'\x07\xdf\x07\n\x0f,\x1e\x0b\xbf\xd0'
tRp6621
sa(dp6622
S'trial_loop.thisTrialN'
p6623
I15
sg6371
g6477
sS'block_loop.thisIndex'
p6624
g6365
sg38
S'left'
p6625
sg59
g63
sS'trial_loop.thisN'
p6626
I15
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p6627
g60
(g99
S'\x0f\x00\x00\x00'
tRp6628
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6629
I0
sg6380
g6485
sS'block_loop.thisRepN'
p6630
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6631
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p6632
Nsg70
Vn
sS'block_loop.thisTrialN'
p6633
I0
sg39
F0.80000102635312942
sg34
g753
(S'\x07\xdf\x07\n\x0f,%\x01W\xc0'
tRp6634
sa(dp6635
S'trial_loop.thisTrialN'
p6636
I16
sg6371
S'51-mars.png'
p6637
sS'block_loop.thisIndex'
p6638
g6365
sg38
S'left'
p6639
sg59
g63
sS'trial_loop.thisN'
p6640
I16
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p6641
g60
(g99
S'\x10\x00\x00\x00'
tRp6642
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6643
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6644
sS'block_loop.thisRepN'
p6645
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6646
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6647
Nsg70
Vn
sS'block_loop.thisTrialN'
p6648
I0
sg39
F0.94987695178133436
sg34
g753
(S'\x07\xdf\x07\n\x0f,*\x0e\x11\x90'
tRp6649
sa(dp6650
S'trial_loop.thisTrialN'
p6651
I17
sg6371
S'45-chewy_nougat_redo.png'
p6652
sS'block_loop.thisIndex'
p6653
g6365
sg38
S'left'
p6654
sg59
g63
sS'trial_loop.thisN'
p6655
I17
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p6656
g60
(g99
S'\x11\x00\x00\x00'
tRp6657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6658
I0
sg6380
S'41-peanuts_redo.png'
p6659
sS'block_loop.thisRepN'
p6660
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6661
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p6662
Nsg70
Vn
sS'block_loop.thisTrialN'
p6663
I0
sg39
F0.89990757128543919
sg34
g753
(S'\x07\xdf\x07\n\x0f,0\r\xeeh'
tRp6664
sa(dp6665
S'trial_loop.thisTrialN'
p6666
I18
sg6371
S'21-nakd_banana_crunch.png'
p6667
sS'block_loop.thisIndex'
p6668
g6365
sg38
S'right'
p6669
sg59
g63
sS'trial_loop.thisN'
p6670
I18
sg33
S'1-treacle_cookies.png'
p6671
sg64
g65
sS'trial_loop.thisIndex'
p6672
g60
(g99
S'\x12\x00\x00\x00'
tRp6673
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6674
I0
sg6380
S'1-treacle_cookies.png'
p6675
sS'block_loop.thisRepN'
p6676
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6677
I2
sg6385
S'21-nakd_banana_crunch.png'
p6678
sg55
g11
sS'block_loop.thisTrial'
p6679
Nsg70
Vn
sS'block_loop.thisTrialN'
p6680
I0
sg39
F0.98319633432402043
sg34
g753
(S'\x07\xdf\x07\n\x0f,6\x0c\xd5('
tRp6681
sa(dp6682
S'trial_loop.thisTrialN'
p6683
I19
sg6371
S'48-twix.png'
p6684
sS'block_loop.thisIndex'
p6685
g6365
sg38
S'left'
p6686
sg59
g63
sS'trial_loop.thisN'
p6687
I19
sg33
S'48-twix.png'
p6688
sg64
g65
sS'trial_loop.thisIndex'
p6689
g60
(g99
S'\x13\x00\x00\x00'
tRp6690
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6691
I0
sg6380
S'50-polo.png'
p6692
sS'block_loop.thisRepN'
p6693
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6694
I2
sg6385
S'50-polo.png'
p6695
sg55
g11
sS'block_loop.thisTrial'
p6696
Nsg70
Vn
sS'block_loop.thisTrialN'
p6697
I0
sg39
F1.1666356860368978
sg34
g753
(S"\x07\xdf\x07\n\x0f-\x00\r'0"
tRp6698
sa(dp6699
S'trial_loop.thisTrialN'
p6700
I20
sg6371
S'6-sour_patch_kids.png'
p6701
sS'block_loop.thisIndex'
p6702
g6365
sg38
S'right'
p6703
sg59
g63
sS'trial_loop.thisN'
p6704
I20
sg33
S'38-maltesers.png'
p6705
sg64
g65
sS'trial_loop.thisIndex'
p6706
g60
(g99
S'\x14\x00\x00\x00'
tRp6707
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6708
I0
sg6380
S'38-maltesers.png'
p6709
sS'block_loop.thisRepN'
p6710
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6711
I2
sg6385
S'6-sour_patch_kids.png'
p6712
sg55
g11
sS'block_loop.thisTrial'
p6713
Nsg70
Vn
sS'block_loop.thisTrialN'
p6714
I0
sg39
F1.3329534880031133
sg34
g753
(S'\x07\xdf\x07\n\x0f-\x07\x00\xd6\xd8'
tRp6715
sa(dp6716
S'trial_loop.thisTrialN'
p6717
I21
sg6371
g6558
sS'block_loop.thisIndex'
p6718
g6365
sg38
S'right'
p6719
sg59
g63
sS'trial_loop.thisN'
p6720
I21
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p6721
g60
(g99
S'\x15\x00\x00\x00'
tRp6722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6723
I0
sg6380
g6565
sS'block_loop.thisRepN'
p6724
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6725
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p6726
Nsg70
Vn
sS'block_loop.thisTrialN'
p6727
I0
sg39
F1.0837509066113853
sg34
g753
(S'\x07\xdf\x07\n\x0f-\r\x06h\xa0'
tRp6728
sa(dp6729
S'trial_loop.thisTrialN'
p6730
I22
sg6371
S'4-corn.png'
p6731
sS'block_loop.thisIndex'
p6732
g6365
sg38
S'right'
p6733
sg59
g63
sS'trial_loop.thisN'
p6734
I22
sg33
g6535
sg64
g65
sS'trial_loop.thisIndex'
p6735
g60
(g99
S'\x16\x00\x00\x00'
tRp6736
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6737
I0
sg6380
S'10-bounty_redo.png'
p6738
sS'block_loop.thisRepN'
p6739
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6740
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p6741
Nsg70
Vn
sS'block_loop.thisTrialN'
p6742
I0
sg39
F0.9999087686992425
sg34
g753
(S'\x07\xdf\x07\n\x0f-\x13\x08-\xc0'
tRp6743
sa(dp6744
S'trial_loop.thisTrialN'
p6745
I23
sg6371
S'44-crunch.png'
p6746
sS'block_loop.thisIndex'
p6747
g6365
sg38
S'left'
p6748
sg59
g63
sS'trial_loop.thisN'
p6749
I23
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p6750
g60
(g99
S'\x17\x00\x00\x00'
tRp6751
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6752
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6753
sS'block_loop.thisRepN'
p6754
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6755
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6756
Nsg70
Vn
sS'block_loop.thisTrialN'
p6757
I0
sg39
F1.3333446422147972
sg34
g753
(S'\x07\xdf\x07\n\x0f-\x19\x08\xbeH'
tRp6758
sa(dp6759
S'trial_loop.thisTrialN'
p6760
I24
sg6371
S'5-pineapple.png'
p6761
sS'block_loop.thisIndex'
p6762
g6365
sg38
S'left'
p6763
sg59
g63
sS'trial_loop.thisN'
p6764
I24
sg33
S'40-sardines.png'
p6765
sg64
g65
sS'trial_loop.thisIndex'
p6766
g60
(g99
S'\x18\x00\x00\x00'
tRp6767
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6768
I0
sg6380
S'40-sardines.png'
p6769
sS'block_loop.thisRepN'
p6770
I2
sg6383
S'5-pineapple.png'
p6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6772
I2
sg6385
g6765
sg55
g11
sS'block_loop.thisTrial'
p6773
Nsg70
Vn
sS'block_loop.thisTrialN'
p6774
I0
sg39
F0.94990147019052529
sg34
g753
(S'\x07\xdf\x07\n\x0f-\x1f\x0eP\x10'
tRp6775
sa(dp6776
S'trial_loop.thisTrialN'
p6777
I25
sg6371
g6443
sS'block_loop.thisIndex'
p6778
g6365
sg38
S'left'
p6779
sg59
g63
sS'trial_loop.thisN'
p6780
I25
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p6781
g60
(g99
S'\x19\x00\x00\x00'
tRp6782
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6783
I0
sg6380
g6451
sS'block_loop.thisRepN'
p6784
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6785
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p6786
Nsg70
Vn
sS'block_loop.thisTrialN'
p6787
I0
sg39
F1.4999512482718274
sg34
g753
(S'\x07\xdf\x07\n\x0f-%\x0e)\x00'
tRp6788
sa(dp6789
S'trial_loop.thisTrialN'
p6790
I26
sg6371
g6392
sS'block_loop.thisIndex'
p6791
g6365
sg38
S'right'
p6792
sg59
g63
sS'trial_loop.thisN'
p6793
I26
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6794
g60
(g99
S'\x1a\x00\x00\x00'
tRp6795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6796
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6797
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6798
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6799
Nsg70
Vn
sS'block_loop.thisTrialN'
p6800
I0
sg39
F0.73339989417218021
sg34
g753
(S'\x07\xdf\x07\n\x0f-,\x06\xd9\xe8'
tRp6801
sa(dp6802
S'trial_loop.thisTrialN'
p6803
I27
sg6371
g6443
sS'block_loop.thisIndex'
p6804
g6365
sg38
S'left'
p6805
sg59
g63
sS'trial_loop.thisN'
p6806
I27
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6807
g60
(g99
S'\x1b\x00\x00\x00'
tRp6808
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6809
I0
sg6380
g6451
sS'block_loop.thisRepN'
p6810
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6811
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p6812
Nsg70
Vn
sS'block_loop.thisTrialN'
p6813
I0
sg39
F0.76656617918706615
sg34
g753
(S'\x07\xdf\x07\n\x0f-2\x03_H'
tRp6814
sa(dp6815
S'trial_loop.thisTrialN'
p6816
I28
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p6817
sS'block_loop.thisIndex'
p6818
g6365
sg38
S'right'
p6819
sg59
g63
sS'trial_loop.thisN'
p6820
I28
sg33
S'36-fig_rolls.png'
p6821
sg64
g65
sS'trial_loop.thisIndex'
p6822
g60
(g99
S'\x1c\x00\x00\x00'
tRp6823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6824
I0
sg6380
S'36-fig_rolls.png'
p6825
sS'block_loop.thisRepN'
p6826
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6827
I2
sg6385
S'34-hula_hoops_bbq_beef_redo.png'
p6828
sg55
g11
sS'block_loop.thisTrial'
p6829
Nsg70
Vn
sS'block_loop.thisTrialN'
p6830
I0
sg39
F0.79989839113477501
sg34
g753
(S'\x07\xdf\x07\n\x0f-8\x00]\xc0'
tRp6831
sa(dp6832
S'trial_loop.thisTrialN'
p6833
I29
sg6371
S'23-crunchie_redo.png'
p6834
sS'block_loop.thisIndex'
p6835
g6365
sg38
S'left'
p6836
sg59
g63
sS'trial_loop.thisN'
p6837
I29
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p6838
g60
(g99
S'\x1d\x00\x00\x00'
tRp6839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6840
I0
sg6380
S'33-ambrosia_rice.png'
p6841
sS'block_loop.thisRepN'
p6842
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6843
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p6844
Nsg70
Vn
sS'block_loop.thisTrialN'
p6845
I0
sg39
F0.81655323574523209
sg34
g753
(S'\x07\xdf\x07\n\x0f.\x01\r\x17\x90'
tRp6846
sa(dp6847
S'trial_loop.thisTrialN'
p6848
I30
sg6371
g6637
sS'block_loop.thisIndex'
p6849
g6365
sg38
S'left'
p6850
sg59
g63
sS'trial_loop.thisN'
p6851
I30
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6852
g60
(g99
S'\x1e\x00\x00\x00'
tRp6853
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6854
I0
sg6380
g6644
sS'block_loop.thisRepN'
p6855
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6856
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6857
Nsg70
Vn
sS'block_loop.thisTrialN'
p6858
I0
sg39
F0.69986697335843928
sg34
g753
(S'\x07\xdf\x07\n\x0f.\x07\n\xcd\xa0'
tRp6859
sa(dp6860
S'trial_loop.thisTrialN'
p6861
I31
sg6371
g6652
sS'block_loop.thisIndex'
p6862
g6365
sg38
S'left'
p6863
sg59
g63
sS'trial_loop.thisN'
p6864
I31
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p6865
g60
(g99
S'\x1f\x00\x00\x00'
tRp6866
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6867
I0
sg6380
g6659
sS'block_loop.thisRepN'
p6868
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6869
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p6870
Nsg70
Vn
sS'block_loop.thisTrialN'
p6871
I0
sg39
F1.0165559156630479
sg34
g753
(S'\x07\xdf\x07\n\x0f.\r\x06\x9fP'
tRp6872
sa(dp6873
S'trial_loop.thisTrialN'
p6874
I32
sg6371
g6607
sS'block_loop.thisIndex'
p6875
g6365
sg38
S'right'
p6876
sg59
g63
sS'trial_loop.thisN'
p6877
I32
sg33
g6611
sg64
g65
sS'trial_loop.thisIndex'
p6878
g60
(g99
S' \x00\x00\x00'
tRp6879
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6880
I0
sg6380
g6615
sS'block_loop.thisRepN'
p6881
I2
sg6383
g6617
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6882
I2
sg6385
g6611
sg55
g11
sS'block_loop.thisTrial'
p6883
Nsg70
Vn
sS'block_loop.thisTrialN'
p6884
I0
sg39
F1.3166732619283721
sg34
g753
(S'\x07\xdf\x07\n\x0f.\x13\x07jp'
tRp6885
sa(dp6886
S'trial_loop.thisTrialN'
p6887
I33
sg6371
g6684
sS'block_loop.thisIndex'
p6888
g6365
sg38
S'left'
p6889
sg59
g63
sS'trial_loop.thisN'
p6890
I33
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p6891
g60
(g99
S'!\x00\x00\x00'
tRp6892
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6893
I0
sg6380
g6692
sS'block_loop.thisRepN'
p6894
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6895
I2
sg6385
g6695
sg55
g11
sS'block_loop.thisTrial'
p6896
Nsg70
Vn
sS'block_loop.thisTrialN'
p6897
I0
sg39
F0.99989622439170489
sg34
g753
(S'\x07\xdf\x07\n\x0f.\x19\x0c\xc1\xa0'
tRp6898
sa(dp6899
S'trial_loop.thisTrialN'
p6900
I34
sg6371
g6652
sS'block_loop.thisIndex'
p6901
g6365
sg38
S'left'
p6902
sg59
g63
sS'trial_loop.thisN'
p6903
I34
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p6904
g60
(g99
S'"\x00\x00\x00'
tRp6905
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6906
I0
sg6380
g6659
sS'block_loop.thisRepN'
p6907
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6908
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p6909
Nsg70
Vn
sS'block_loop.thisTrialN'
p6910
I0
sg39
F0.74989793498025392
sg34
g753
(S'\x07\xdf\x07\n\x0f.\x1f\rR('
tRp6911
sa(dp6912
S'trial_loop.thisTrialN'
p6913
I35
sg6371
S'2-steamed_puddings.png'
p6914
sS'block_loop.thisIndex'
p6915
g6365
sg38
S'left'
p6916
sg59
g63
sS'trial_loop.thisN'
p6917
I35
sg33
g6552
sg64
g65
sS'trial_loop.thisIndex'
p6918
g60
(g99
S'#\x00\x00\x00'
tRp6919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6920
I0
sg6380
S'20-fruit_pastilles.png'
p6921
sS'block_loop.thisRepN'
p6922
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6923
I2
sg6385
g6552
sg55
g11
sS'block_loop.thisTrial'
p6924
Nsg70
Vn
sS'block_loop.thisTrialN'
p6925
I0
sg39
F0.76655819644656731
sg34
g753
(S'\x07\xdf\x07\n\x0f.%\n\x12 '
tRp6926
sa(dp6927
S'trial_loop.thisTrialN'
p6928
I36
sg6371
S'8-liquorice_catherine_wheels.png'
p6929
sS'block_loop.thisIndex'
p6930
g6365
sg38
S'right'
p6931
sg59
g63
sS'trial_loop.thisN'
p6932
I36
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6933
sg64
g65
sS'trial_loop.thisIndex'
p6934
g60
(g99
S'$\x00\x00\x00'
tRp6935
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6936
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p6937
sS'block_loop.thisRepN'
p6938
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6939
I2
sg6385
S'8-liquorice_catherine_wheels.png'
p6940
sg55
g11
sS'block_loop.thisTrial'
p6941
Nsg70
Vn
sS'block_loop.thisTrialN'
p6942
I0
sg39
F0.91653989316546358
sg34
g753
(S'\x07\xdf\x07\n\x0f.+\x06\xd6\x00'
tRp6943
sa(dp6944
S'trial_loop.thisTrialN'
p6945
I37
sg6371
S'7-olives.png'
p6946
sS'block_loop.thisIndex'
p6947
g6365
sg38
S'right'
p6948
sg59
g63
sS'trial_loop.thisN'
p6949
I37
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p6950
g60
(g99
S'%\x00\x00\x00'
tRp6951
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6952
I0
sg6380
S'22-daim.png'
p6953
sS'block_loop.thisRepN'
p6954
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6955
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p6956
Nsg70
Vn
sS'block_loop.thisTrialN'
p6957
I0
sg39
F1.0165533497856813
sg34
g753
(S'\x07\xdf\x07\n\x0f.1\x065\xd8'
tRp6958
sa(dp6959
S'trial_loop.thisTrialN'
p6960
I38
sg6371
g6667
sS'block_loop.thisIndex'
p6961
g6365
sg38
S'right'
p6962
sg59
g63
sS'trial_loop.thisN'
p6963
I38
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p6964
g60
(g99
S'&\x00\x00\x00'
tRp6965
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6966
I0
sg6380
g6675
sS'block_loop.thisRepN'
p6967
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6968
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p6969
Nsg70
Vn
sS'block_loop.thisTrialN'
p6970
I0
sg39
F1.0000042764659156
sg34
g753
(S'\x07\xdf\x07\n\x0f.7\x07\x04\xe0'
tRp6971
sa(dp6972
S'trial_loop.thisTrialN'
p6973
I39
sg6371
g6507
sS'block_loop.thisIndex'
p6974
g6365
sg38
S'right'
p6975
sg59
g63
sS'trial_loop.thisN'
p6976
I39
sg33
g6518
sg64
g65
sS'trial_loop.thisIndex'
p6977
g60
(g99
S"'\x00\x00\x00"
tRp6978
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6979
I0
sg6380
g6515
sS'block_loop.thisRepN'
p6980
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6981
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p6982
Nsg70
Vn
sS'block_loop.thisTrialN'
p6983
I0
sg39
F0.83319211487832945
sg34
g753
(S'\x07\xdf\x07\n\x0f/\x01\x07Z\xd0'
tRp6984
sa(dp6985
S'trial_loop.thisTrialN'
p6986
I40
sg6371
g6372
sS'block_loop.thisIndex'
p6987
g6365
sg38
S'right'
p6988
sg59
g63
sS'trial_loop.thisN'
p6989
I40
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6990
g60
(g99
S'(\x00\x00\x00'
tRp6991
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6992
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6993
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6994
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6995
Nsg70
Vn
sS'block_loop.thisTrialN'
p6996
I0
sg39
F0.88334224739082856
sg34
g753
(S'\x07\xdf\x07\n\x0f/\x07\x05\x89\xf8'
tRp6997
sa(dp6998
S'trial_loop.thisTrialN'
p6999
I41
sg6371
S'1-treacle_cookies.png'
p7000
sS'block_loop.thisIndex'
p7001
g6365
sg38
S'left'
p7002
sg59
g63
sS'trial_loop.thisN'
p7003
I41
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p7004
g60
(g99
S')\x00\x00\x00'
tRp7005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7006
I0
sg6380
S'21-nakd_banana_crunch.png'
p7007
sS'block_loop.thisRepN'
p7008
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7009
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p7010
Nsg70
Vn
sS'block_loop.thisTrialN'
p7011
I0
sg39
F1.0332429763293476
sg34
g753
(S'\x07\xdf\x07\n\x0f/\r\x0428'
tRp7012
sa(dp7013
S'trial_loop.thisTrialN'
p7014
I42
sg6371
g6524
sS'block_loop.thisIndex'
p7015
g6365
sg38
S'left'
p7016
sg59
g63
sS'trial_loop.thisN'
p7017
I42
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p7018
g60
(g99
S'*\x00\x00\x00'
tRp7019
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7020
I0
sg6380
g6532
sS'block_loop.thisRepN'
p7021
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7022
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p7023
Nsg70
Vn
sS'block_loop.thisTrialN'
p7024
I0
sg39
F0.86660786048742011
sg34
g753
(S'\x07\xdf\x07\n\x0f/\x13\x05?\xc0'
tRp7025
sa(dp7026
S'trial_loop.thisTrialN'
p7027
I43
sg6371
g6541
sS'block_loop.thisIndex'
p7028
g6365
sg38
S'right'
p7029
sg59
g63
sS'trial_loop.thisN'
p7030
I43
sg33
g6545
sg64
g65
sS'trial_loop.thisIndex'
p7031
g60
(g99
S'+\x00\x00\x00'
tRp7032
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7033
I0
sg6380
g6549
sS'block_loop.thisRepN'
p7034
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7035
I2
sg6385
g6552
sg55
g11
sS'block_loop.thisTrial'
p7036
Nsg70
Vn
sS'block_loop.thisTrialN'
p7037
I0
sg39
F0.95001750500887283
sg34
g753
(S'\x07\xdf\x07\n\x0f/\x19\x03\xadh'
tRp7038
sa(dp7039
S'trial_loop.thisTrialN'
p7040
I44
sg6371
g6684
sS'block_loop.thisIndex'
p7041
g6365
sg38
S'left'
p7042
sg59
g63
sS'trial_loop.thisN'
p7043
I44
sg33
g6695
sg64
g65
sS'trial_loop.thisIndex'
p7044
g60
(g99
S',\x00\x00\x00'
tRp7045
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7046
I0
sg6380
g6692
sS'block_loop.thisRepN'
p7047
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7048
I2
sg6385
g6695
sg55
g11
sS'block_loop.thisTrial'
p7049
Nsg70
Vn
sS'block_loop.thisTrialN'
p7050
I0
sg39
F0.91675143575048423
sg34
g753
(S'\x07\xdf\x07\n\x0f/\x1f\x03G\xd8'
tRp7051
sa(dp7052
S'trial_loop.thisTrialN'
p7053
I45
sg6371
S'13-mccoys_steak_crisps.png'
p7054
sS'block_loop.thisIndex'
p7055
g6365
sg38
S'right'
p7056
sg59
g63
sS'trial_loop.thisN'
p7057
I45
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p7058
g60
(g99
S'-\x00\x00\x00'
tRp7059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7060
I0
sg6380
S'3-ellas_strawberries_apples.png'
p7061
sS'block_loop.thisRepN'
p7062
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7063
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p7064
Nsg70
Vn
sS'block_loop.thisTrialN'
p7065
I0
sg39
F0.99992102790201898
sg34
g753
(S'\x07\xdf\x07\n\x0f/%\x02\xab\x98'
tRp7066
sa(dp7067
S'trial_loop.thisTrialN'
p7068
I46
sg6371
g6372
sS'block_loop.thisIndex'
p7069
g6365
sg38
S'right'
p7070
sg59
g63
sS'trial_loop.thisN'
p7071
I46
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7072
g60
(g99
S'.\x00\x00\x00'
tRp7073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7074
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7075
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7076
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7077
Nsg70
Vn
sS'block_loop.thisTrialN'
p7078
I0
sg39
F0.8833365454338491
sg34
g753
(S'\x07\xdf\x07\n\x0f/+\x03< '
tRp7079
sa(dp7080
S'trial_loop.thisTrialN'
p7081
I47
sg6371
g6477
sS'block_loop.thisIndex'
p7082
g6365
sg38
S'left'
p7083
sg59
g63
sS'trial_loop.thisN'
p7084
I47
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p7085
g60
(g99
S'/\x00\x00\x00'
tRp7086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7087
I0
sg6380
g6485
sS'block_loop.thisRepN'
p7088
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7089
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p7090
Nsg70
Vn
sS'block_loop.thisTrialN'
p7091
I0
sg39
F0.983235107629298
sg34
g753
(S'\x07\xdf\x07\n\x0f/1\x01\xe4`'
tRp7092
sa(dp7093
S'trial_loop.thisTrialN'
p7094
I48
sg6371
S'38-maltesers.png'
p7095
sS'block_loop.thisIndex'
p7096
g6365
sg38
S'left'
p7097
sg59
g63
sS'trial_loop.thisN'
p7098
I48
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7099
g60
(g99
S'0\x00\x00\x00'
tRp7100
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7101
I0
sg6380
S'6-sour_patch_kids.png'
p7102
sS'block_loop.thisRepN'
p7103
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7104
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p7105
Nsg70
Vn
sS'block_loop.thisTrialN'
p7106
I0
sg39
F0.91631552117905812
sg34
g753
(S'\x07\xdf\x07\n\x0f/7\x01\xfb\xd0'
tRp7107
sa(dp7108
S'trial_loop.thisTrialN'
p7109
I49
sg6371
g6558
sS'block_loop.thisIndex'
p7110
g6365
sg38
S'right'
p7111
sg59
g63
sS'trial_loop.thisN'
p7112
I49
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p7113
g60
(g99
S'1\x00\x00\x00'
tRp7114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7115
I0
sg6380
g6565
sS'block_loop.thisRepN'
p7116
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7117
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p7118
Nsg70
Vn
sS'block_loop.thisTrialN'
p7119
I0
sg39
F0.69991658037542948
sg34
g753
(S'\x07\xdf\x07\n\x0f0\x01\x01[\xa8'
tRp7120
sa(dp7121
S'trial_loop.thisTrialN'
p7122
I50
sg6371
g6746
sS'block_loop.thisIndex'
p7123
g6365
sg38
S'left'
p7124
sg59
g63
sS'trial_loop.thisN'
p7125
I50
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7126
g60
(g99
S'2\x00\x00\x00'
tRp7127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7128
I0
sg6380
g6753
sS'block_loop.thisRepN'
p7129
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7130
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7131
Nsg70
Vn
sS'block_loop.thisTrialN'
p7132
I0
sg39
F0.84985266144576599
sg34
g753
(S'\x07\xdf\x07\n\x0f0\x06\x0co\x98'
tRp7133
sa(dp7134
S'trial_loop.thisTrialN'
p7135
I51
sg6371
S'30-spaghetti_hoops.png'
p7136
sS'block_loop.thisIndex'
p7137
g6365
sg38
S'right'
p7138
sg59
g63
sS'trial_loop.thisN'
p7139
I51
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p7140
g60
(g99
S'3\x00\x00\x00'
tRp7141
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7142
I0
sg6380
S'19-caramello_redo.png'
p7143
sS'block_loop.thisRepN'
p7144
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7145
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7146
Nsg70
Vn
sS'block_loop.thisTrialN'
p7147
I0
sg39
F0.86657051267320639
sg34
g753
(S'\x07\xdf\x07\n\x0f0\x0c\n\xd9X'
tRp7148
sa(dp7149
S'trial_loop.thisTrialN'
p7150
I52
sg6371
S'36-fig_rolls.png'
p7151
sS'block_loop.thisIndex'
p7152
g6365
sg38
S'left'
p7153
sg59
g63
sS'trial_loop.thisN'
p7154
I52
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p7155
g60
(g99
S'4\x00\x00\x00'
tRp7156
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7157
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p7158
sS'block_loop.thisRepN'
p7159
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7160
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p7161
Nsg70
Vn
sS'block_loop.thisTrialN'
p7162
I0
sg39
F0.89978412392883911
sg34
g753
(S'\x07\xdf\x07\n\x0f0\x12\tG\x00'
tRp7163
sa(dp7164
S'trial_loop.thisTrialN'
p7165
I53
sg6371
S'40-sardines.png'
p7166
sS'block_loop.thisIndex'
p7167
g6365
sg38
S'right'
p7168
sg59
g63
sS'trial_loop.thisN'
p7169
I53
sg33
g6771
sg64
g65
sS'trial_loop.thisIndex'
p7170
g60
(g99
S'5\x00\x00\x00'
tRp7171
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7172
I0
sg6380
S'5-pineapple.png'
p7173
sS'block_loop.thisRepN'
p7174
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7175
I2
sg6385
g6765
sg55
g11
sS'block_loop.thisTrial'
p7176
Nsg70
Vn
sS'block_loop.thisTrialN'
p7177
I0
sg39
F0.94987239021429559
sg34
g753
(S'\x07\xdf\x07\n\x0f0\x18\x08-\xc0'
tRp7178
sa(dp7179
S'trial_loop.thisTrialN'
p7180
I54
sg6371
S'16-skips_prawn.png'
p7181
sS'block_loop.thisIndex'
p7182
g6365
sg38
S'right'
p7183
sg59
g63
sS'trial_loop.thisN'
p7184
I54
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p7185
g60
(g99
S'6\x00\x00\x00'
tRp7186
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7187
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p7188
sS'block_loop.thisRepN'
p7189
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7190
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p7191
Nsg70
Vn
sS'block_loop.thisTrialN'
p7192
I0
sg39
F0.73312933633496868
sg34
g753
(S'\x07\xdf\x07\n\x0f0\x1e\x08\n\x98'
tRp7193
sa(dp7194
S'trial_loop.thisTrialN'
p7195
I55
sg6371
g6409
sS'block_loop.thisIndex'
p7196
g6365
sg38
S'left'
p7197
sg59
g63
sS'trial_loop.thisN'
p7198
I55
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7199
g60
(g99
S'7\x00\x00\x00'
tRp7200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7201
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7202
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7203
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p7204
Nsg70
Vn
sS'block_loop.thisTrialN'
p7205
I0
sg39
F0.8332645297232375
sg34
g753
(S'\x07\xdf\x07\n\x0f0$\x04Qx'
tRp7206
sa(dp7207
S'trial_loop.thisTrialN'
p7208
I56
sg6371
g6817
sS'block_loop.thisIndex'
p7209
g6365
sg38
S'right'
p7210
sg59
g63
sS'trial_loop.thisN'
p7211
I56
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p7212
g60
(g99
S'8\x00\x00\x00'
tRp7213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7214
I0
sg6380
g6825
sS'block_loop.thisRepN'
p7215
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7216
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p7217
Nsg70
Vn
sS'block_loop.thisTrialN'
p7218
I0
sg39
F0.66655158217690769
sg34
g753
(S'\x07\xdf\x07\n\x0f0*\x02F\x08'
tRp7219
sa(dp7220
S'trial_loop.thisTrialN'
p7221
I57
sg6371
g6460
sS'block_loop.thisIndex'
p7222
g6365
sg38
S'right'
p7223
sg59
g63
sS'trial_loop.thisN'
p7224
I57
sg33
g6471
sg64
g65
sS'trial_loop.thisIndex'
p7225
g60
(g99
S'9\x00\x00\x00'
tRp7226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7227
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7228
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7229
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7230
Nsg70
Vn
sS'block_loop.thisTrialN'
p7231
I0
sg39
F0.73309797557885759
sg34
g753
(S'\x07\xdf\x07\n\x0f0/\r\x17\x90'
tRp7232
sa(dp7233
S'trial_loop.thisTrialN'
p7234
I58
sg6371
g6637
sS'block_loop.thisIndex'
p7235
g6365
sg38
S'left'
p7236
sg59
g63
sS'trial_loop.thisN'
p7237
I58
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7238
g60
(g99
S':\x00\x00\x00'
tRp7239
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7240
I0
sg6380
g6644
sS'block_loop.thisRepN'
p7241
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7242
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7243
Nsg70
Vn
sS'block_loop.thisTrialN'
p7244
I0
sg39
F0.84991139159683371
sg34
g753
(S'\x07\xdf\x07\n\x0f05\tbX'
tRp7245
sa(dp7246
S'trial_loop.thisTrialN'
p7247
I59
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p7248
sS'block_loop.thisIndex'
p7249
g6365
sg38
S'left'
p7250
sg59
g63
sS'trial_loop.thisN'
p7251
I59
sg33
g6933
sg64
g65
sS'trial_loop.thisIndex'
p7252
g60
(g99
S';\x00\x00\x00'
tRp7253
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7254
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p7255
sS'block_loop.thisRepN'
p7256
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7257
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p7258
Nsg70
Vn
sS'block_loop.thisTrialN'
p7259
I0
sg39
F1.2832461124089605
sg34
g753
(S'\x07\xdf\x07\n\x0f0;\x07\x91\x80'
tRp7260
sa(dp7261
S'trial_loop.thisTrialN'
p7262
I60
sg6371
g6701
sS'block_loop.thisIndex'
p7263
g6365
sg38
S'right'
p7264
sg59
g63
sS'trial_loop.thisN'
p7265
I60
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7266
g60
(g99
S'<\x00\x00\x00'
tRp7267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7268
I0
sg6380
g6709
sS'block_loop.thisRepN'
p7269
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7270
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p7271
Nsg70
Vn
sS'block_loop.thisTrialN'
p7272
I0
sg39
F1.1829846206819639
sg34
g753
(S'\x07\xdf\x07\n\x0f1\x05\x0ck\xb0'
tRp7273
sa(dp7274
S'trial_loop.thisTrialN'
p7275
I61
sg6371
g7054
sS'block_loop.thisIndex'
p7276
g6365
sg38
S'right'
p7277
sg59
g63
sS'trial_loop.thisN'
p7278
I61
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p7279
g60
(g99
S'=\x00\x00\x00'
tRp7280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7281
I0
sg6380
g7061
sS'block_loop.thisRepN'
p7282
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7283
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p7284
Nsg70
Vn
sS'block_loop.thisTrialN'
p7285
I0
sg39
F0.84990882571582915
sg34
g753
(S'\x07\xdf\x07\n\x0f1\x0c\x00\x94p'
tRp7286
sa(dp7287
S'trial_loop.thisTrialN'
p7288
I62
sg6371
S'25-kitkat.png'
p7289
sS'block_loop.thisIndex'
p7290
g6365
sg38
S'left'
p7291
sg59
g63
sS'trial_loop.thisN'
p7292
I62
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p7293
g60
(g99
S'>\x00\x00\x00'
tRp7294
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7295
I0
sg6380
S'31-hobnobs.png'
p7296
sS'block_loop.thisRepN'
p7297
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7298
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7299
Nsg70
Vn
sS'block_loop.thisTrialN'
p7300
I0
sg39
F0.9498957682371838
sg34
g753
(S'\x07\xdf\x07\n\x0f1\x11\x0e\t\xc0'
tRp7301
sa(dp7302
S'trial_loop.thisTrialN'
p7303
I63
sg6371
g6684
sS'block_loop.thisIndex'
p7304
g6365
sg38
S'left'
p7305
sg59
g63
sS'trial_loop.thisN'
p7306
I63
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p7307
g60
(g99
S'?\x00\x00\x00'
tRp7308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7309
I0
sg6380
g6692
sS'block_loop.thisRepN'
p7310
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7311
I2
sg6385
g6695
sg55
g11
sS'block_loop.thisTrial'
p7312
Nsg70
Vn
sS'block_loop.thisTrialN'
p7313
I0
sg39
F0.99988396518529044
sg34
g753
(S'\x07\xdf\x07\n\x0f1\x17\r\xe2\xb0'
tRp7314
sa(dp7315
S'trial_loop.thisTrialN'
p7316
I64
sg6371
S'18-mms.png'
p7317
sS'block_loop.thisIndex'
p7318
g6365
sg38
S'left'
p7319
sg59
g63
sS'trial_loop.thisN'
p7320
I64
sg33
S'18-mms.png'
p7321
sg64
g65
sS'trial_loop.thisIndex'
p7322
g60
(g99
S'@\x00\x00\x00'
tRp7323
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7324
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p7325
sS'block_loop.thisRepN'
p7326
I2
sg6383
g7321
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7327
I2
sg6385
S'43-mrporky_pork_crackles_redo.png'
p7328
sg55
g11
sS'block_loop.thisTrial'
p7329
Nsg70
Vn
sS'block_loop.thisTrialN'
p7330
I0
sg39
F1.2165041418993496
sg34
g753
(S'\x07\xdf\x07\n\x0f1\x1d\x0e8\xa0'
tRp7331
sa(dp7332
S'trial_loop.thisTrialN'
p7333
I65
sg6371
g7166
sS'block_loop.thisIndex'
p7334
g6365
sg38
S'right'
p7335
sg59
g63
sS'trial_loop.thisN'
p7336
I65
sg33
g6771
sg64
g65
sS'trial_loop.thisIndex'
p7337
g60
(g99
S'A\x00\x00\x00'
tRp7338
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7339
I0
sg6380
g7173
sS'block_loop.thisRepN'
p7340
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7341
I2
sg6385
g6765
sg55
g11
sS'block_loop.thisTrial'
p7342
Nsg70
Vn
sS'block_loop.thisTrialN'
p7343
I0
sg39
F0.91668073149412521
sg34
g753
(S'\x07\xdf\x07\n\x0f1$\x02\xdax'
tRp7344
sa(dp7345
S'trial_loop.thisTrialN'
p7346
I66
sg6371
S'50-polo.png'
p7347
sS'block_loop.thisIndex'
p7348
g6365
sg38
S'right'
p7349
sg59
g63
sS'trial_loop.thisN'
p7350
I66
sg33
g6695
sg64
g65
sS'trial_loop.thisIndex'
p7351
g60
(g99
S'B\x00\x00\x00'
tRp7352
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7353
I0
sg6380
S'48-twix.png'
p7354
sS'block_loop.thisRepN'
p7355
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7356
I2
sg6385
g6695
sg55
g11
sS'block_loop.thisTrial'
p7357
Nsg70
Vn
sS'block_loop.thisTrialN'
p7358
I0
sg39
F0.94992570350586902
sg34
g753
(S'\x07\xdf\x07\n\x0f1*\x01\xff\xb8'
tRp7359
sa(dp7360
S'trial_loop.thisTrialN'
p7361
I67
sg6371
g6392
sS'block_loop.thisIndex'
p7362
g6365
sg38
S'right'
p7363
sg59
g63
sS'trial_loop.thisN'
p7364
I67
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7365
g60
(g99
S'C\x00\x00\x00'
tRp7366
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7367
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7368
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7369
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7370
Nsg70
Vn
sS'block_loop.thisTrialN'
p7371
I0
sg39
F0.98324194997621817
sg34
g753
(S'\x07\xdf\x07\n\x0f10\x01\xd8\xa8'
tRp7372
sa(dp7373
S'trial_loop.thisTrialN'
p7374
I68
sg6371
g7000
sS'block_loop.thisIndex'
p7375
g6365
sg38
S'left'
p7376
sg59
g63
sS'trial_loop.thisN'
p7377
I68
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p7378
g60
(g99
S'D\x00\x00\x00'
tRp7379
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7380
I0
sg6380
g7007
sS'block_loop.thisRepN'
p7381
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7382
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p7383
Nsg70
Vn
sS'block_loop.thisTrialN'
p7384
I0
sg39
F1.0165661791870662
sg34
g753
(S'\x07\xdf\x07\n\x0f16\x02.\x98'
tRp7385
sa(dp7386
S'trial_loop.thisTrialN'
p7387
I69
sg6371
g6590
sS'block_loop.thisIndex'
p7388
g6365
sg38
S'left'
p7389
sg59
g63
sS'trial_loop.thisN'
p7390
I69
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p7391
g60
(g99
S'E\x00\x00\x00'
tRp7392
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7393
I0
sg6380
g6598
sS'block_loop.thisRepN'
p7394
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7395
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p7396
Nsg70
Vn
sS'block_loop.thisTrialN'
p7397
I0
sg39
F1.0164709565142402
sg34
g753
(S'\x07\xdf\x07\n\x0f2\x00\x02\xbf '
tRp7398
sa(dp7399
S'trial_loop.thisTrialN'
p7400
I70
sg6371
g6409
sS'block_loop.thisIndex'
p7401
g6365
sg38
S'left'
p7402
sg59
g63
sS'trial_loop.thisN'
p7403
I70
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7404
g60
(g99
S'F\x00\x00\x00'
tRp7405
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7406
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7407
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7408
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p7409
Nsg70
Vn
sS'block_loop.thisTrialN'
p7410
I0
sg39
F1.1333442430768628
sg34
g753
(S'\x07\xdf\x07\n\x0f2\x06\x03\x8e('
tRp7411
sa(dp7412
S'trial_loop.thisTrialN'
p7413
I71
sg6371
g6443
sS'block_loop.thisIndex'
p7414
g6365
sg38
S'left'
p7415
sg59
g63
sS'trial_loop.thisN'
p7416
I71
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p7417
g60
(g99
S'G\x00\x00\x00'
tRp7418
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7419
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7420
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7421
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7422
Nsg70
Vn
sS'block_loop.thisTrialN'
p7423
I0
sg39
F0.99992102790201898
sg34
g753
(S'\x07\xdf\x07\n\x0f2\x0c\x06A\x90'
tRp7424
sa(dp7425
S'trial_loop.thisTrialN'
p7426
I72
sg6371
g6392
sS'block_loop.thisIndex'
p7427
g6365
sg38
S'right'
p7428
sg59
g63
sS'trial_loop.thisN'
p7429
I72
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p7430
g60
(g99
S'H\x00\x00\x00'
tRp7431
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7432
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7433
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7434
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7435
Nsg70
Vn
sS'block_loop.thisTrialN'
p7436
I0
sg39
F0.78335673036053777
sg34
g753
(S'\x07\xdf\x07\n\x0f2\x12\x06\x97\x80'
tRp7437
sa(dp7438
S'trial_loop.thisTrialN'
p7439
I73
sg6371
g7166
sS'block_loop.thisIndex'
p7440
g6365
sg38
S'right'
p7441
sg59
g63
sS'trial_loop.thisN'
p7442
I73
sg33
g6771
sg64
g65
sS'trial_loop.thisIndex'
p7443
g60
(g99
S'I\x00\x00\x00'
tRp7444
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7445
I0
sg6380
g7173
sS'block_loop.thisRepN'
p7446
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7447
I2
sg6385
g6765
sg55
g11
sS'block_loop.thisTrial'
p7448
Nsg70
Vn
sS'block_loop.thisTrialN'
p7449
I0
sg39
F0.81672714541855385
sg34
g753
(S'\x07\xdf\x07\n\x0f2\x18\x03\xd4x'
tRp7450
sa(dp7451
S'trial_loop.thisTrialN'
p7452
I74
sg6371
g6372
sS'block_loop.thisIndex'
p7453
g6365
sg38
S'right'
p7454
sg59
g63
sS'trial_loop.thisN'
p7455
I74
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p7456
g60
(g99
S'J\x00\x00\x00'
tRp7457
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7458
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7459
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7460
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7461
Nsg70
Vn
sS'block_loop.thisTrialN'
p7462
I0
sg39
F0.86655882366540027
sg34
g753
(S'\x07\xdf\x07\n\x0f2\x1e\x01\x8a\x88'
tRp7463
sa(dp7464
S'trial_loop.thisTrialN'
p7465
I75
sg6371
g6524
sS'block_loop.thisIndex'
p7466
g6365
sg38
S'left'
p7467
sg59
g63
sS'trial_loop.thisN'
p7468
I75
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p7469
g60
(g99
S'K\x00\x00\x00'
tRp7470
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7471
I0
sg6380
g6532
sS'block_loop.thisRepN'
p7472
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7473
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p7474
Nsg70
Vn
sS'block_loop.thisTrialN'
p7475
I0
sg39
F0.916325214508106
sg34
g753
(S'\x07\xdf\x07\n\x0f2#\x0f:p'
tRp7476
sa(dp7477
S'trial_loop.thisTrialN'
p7478
I76
sg6371
g6409
sS'block_loop.thisIndex'
p7479
g6365
sg38
S'left'
p7480
sg59
g63
sS'trial_loop.thisN'
p7481
I76
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p7482
g60
(g99
S'L\x00\x00\x00'
tRp7483
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7484
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7485
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7486
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p7487
Nsg70
Vn
sS'block_loop.thisTrialN'
p7488
I0
sg39
F0.81668295525741996
sg34
g753
(S'\x07\xdf\x07\n\x0f2)\x0e\x9aH'
tRp7489
sa(dp7490
S'trial_loop.thisTrialN'
p7491
I77
sg6371
g7095
sS'block_loop.thisIndex'
p7492
g6365
sg38
S'left'
p7493
sg59
g63
sS'trial_loop.thisN'
p7494
I77
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7495
g60
(g99
S'M\x00\x00\x00'
tRp7496
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7497
I0
sg6380
g7102
sS'block_loop.thisRepN'
p7498
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7499
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p7500
Nsg70
Vn
sS'block_loop.thisTrialN'
p7501
I0
sg39
F1.0996111835884221
sg34
g753
(S'\x07\xdf\x07\n\x0f2/\x0cPX'
tRp7502
sa(dp7503
S'trial_loop.thisTrialN'
p7504
I78
sg6371
g7136
sS'block_loop.thisIndex'
p7505
g6365
sg38
S'right'
p7506
sg59
g63
sS'trial_loop.thisN'
p7507
I78
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7508
g60
(g99
S'N\x00\x00\x00'
tRp7509
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7510
I0
sg6380
g7143
sS'block_loop.thisRepN'
p7511
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7512
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7513
Nsg70
Vn
sS'block_loop.thisTrialN'
p7514
I0
sg39
F0.96657912262890022
sg34
g753
(S'\x07\xdf\x07\n\x0f25\x0eP\x10'
tRp7515
sa(dp7516
S'trial_loop.thisTrialN'
p7517
I79
sg6371
g6507
sS'block_loop.thisIndex'
p7518
g6365
sg38
S'right'
p7519
sg59
g63
sS'trial_loop.thisN'
p7520
I79
sg33
g6518
sg64
g65
sS'trial_loop.thisIndex'
p7521
g60
(g99
S'O\x00\x00\x00'
tRp7522
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7523
I0
sg6380
g6515
sS'block_loop.thisRepN'
p7524
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7525
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p7526
Nsg70
Vn
sS'block_loop.thisTrialN'
p7527
I0
sg39
F1.0331511748299818
sg34
g753
(S'\x07\xdf\x07\n\x0f2;\x0e)\x00'
tRp7528
sa(dp7529
S'trial_loop.thisTrialN'
p7530
I80
sg6371
g6590
sS'block_loop.thisIndex'
p7531
g6365
sg38
S'left'
p7532
sg59
g63
sS'trial_loop.thisN'
p7533
I80
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p7534
g60
(g99
S'P\x00\x00\x00'
tRp7535
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7536
I0
sg6380
g6598
sS'block_loop.thisRepN'
p7537
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7538
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p7539
Nsg70
Vn
sS'block_loop.thisTrialN'
p7540
I0
sg39
F1.2164533944887808
sg34
g753
(S'\x07\xdf\x07\n\x0f3\x05\x0f6\x88'
tRp7541
sa(dp7542
S'trial_loop.thisTrialN'
p7543
I81
sg6371
g7347
sS'block_loop.thisIndex'
p7544
g6365
sg38
S'right'
p7545
sg59
g63
sS'trial_loop.thisN'
p7546
I81
sg33
g6695
sg64
g65
sS'trial_loop.thisIndex'
p7547
g60
(g99
S'Q\x00\x00\x00'
tRp7548
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7549
I0
sg6380
g7354
sS'block_loop.thisRepN'
p7550
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7551
I2
sg6385
g6695
sg55
g11
sS'block_loop.thisTrial'
p7552
Nsg70
Vn
sS'block_loop.thisTrialN'
p7553
I0
sg39
F0.91705078846644028
sg34
g753
(S'\x07\xdf\x07\n\x0f3\x0c\x03\xd8`'
tRp7554
sa(dp7555
S'trial_loop.thisTrialN'
p7556
I82
sg6371
g7181
sS'block_loop.thisIndex'
p7557
g6365
sg38
S'right'
p7558
sg59
g63
sS'trial_loop.thisN'
p7559
I82
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p7560
g60
(g99
S'R\x00\x00\x00'
tRp7561
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7562
I0
sg6380
g7188
sS'block_loop.thisRepN'
p7563
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7564
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p7565
Nsg70
Vn
sS'block_loop.thisTrialN'
p7566
I0
sg39
F0.8997692988414201
sg34
g753
(S'\x07\xdf\x07\n\x0f3\x12\x02\xfd\xa0'
tRp7567
sa(dp7568
S'trial_loop.thisTrialN'
p7569
I83
sg6371
g6652
sS'block_loop.thisIndex'
p7570
g6365
sg38
S'left'
p7571
sg59
g63
sS'trial_loop.thisN'
p7572
I83
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p7573
g60
(g99
S'S\x00\x00\x00'
tRp7574
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7575
I0
sg6380
g6659
sS'block_loop.thisRepN'
p7576
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7577
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p7578
Nsg70
Vn
sS'block_loop.thisTrialN'
p7579
I0
sg39
F1.0666153870697599
sg34
g753
(S'\x07\xdf\x07\n\x0f3\x18\x02\x1e\xf8'
tRp7580
sa(dp7581
S'trial_loop.thisTrialN'
p7582
I84
sg6371
g6426
sS'block_loop.thisIndex'
p7583
g6365
sg38
S'left'
p7584
sg59
g63
sS'trial_loop.thisN'
p7585
I84
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7586
g60
(g99
S'T\x00\x00\x00'
tRp7587
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7588
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7589
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7590
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7591
Nsg70
Vn
sS'block_loop.thisTrialN'
p7592
I0
sg39
F1.3665676616983546
sg34
g753
(S'\x07\xdf\x07\n\x0f3\x1e\x03\xa5\x98'
tRp7593
sa(dp7594
S'trial_loop.thisTrialN'
p7595
I85
sg6371
g7095
sS'block_loop.thisIndex'
p7596
g6365
sg38
S'left'
p7597
sg59
g63
sS'trial_loop.thisN'
p7598
I85
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p7599
g60
(g99
S'U\x00\x00\x00'
tRp7600
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7601
I0
sg6380
g7102
sS'block_loop.thisRepN'
p7602
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7603
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p7604
Nsg70
Vn
sS'block_loop.thisTrialN'
p7605
I0
sg39
F1.0664135378137871
sg34
g753
(S'\x07\xdf\x07\n\x0f3$\t\xb0x'
tRp7606
sa(dp7607
S'trial_loop.thisTrialN'
p7608
I86
sg6371
g6524
sS'block_loop.thisIndex'
p7609
g6365
sg38
S'left'
p7610
sg59
g63
sS'trial_loop.thisN'
p7611
I86
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p7612
g60
(g99
S'V\x00\x00\x00'
tRp7613
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7614
I0
sg6380
g6532
sS'block_loop.thisRepN'
p7615
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7616
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p7617
Nsg70
Vn
sS'block_loop.thisTrialN'
p7618
I0
sg39
F0.81648623775981832
sg34
g753
(S'\x07\xdf\x07\n\x0f3*\x0b7\x18'
tRp7619
sa(dp7620
S'trial_loop.thisTrialN'
p7621
I87
sg6371
g7181
sS'block_loop.thisIndex'
p7622
g6365
sg38
S'right'
p7623
sg59
g63
sS'trial_loop.thisN'
p7624
I87
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p7625
g60
(g99
S'W\x00\x00\x00'
tRp7626
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7627
I0
sg6380
g7188
sS'block_loop.thisRepN'
p7628
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7629
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p7630
Nsg70
Vn
sS'block_loop.thisTrialN'
p7631
I0
sg39
F1.4664964442599739
sg34
g753
(S'\x07\xdf\x07\n\x0f30\x08\xed('
tRp7632
sa(dp7633
S'trial_loop.thisTrialN'
p7634
I88
sg6371
g6701
sS'block_loop.thisIndex'
p7635
g6365
sg38
S'right'
p7636
sg59
g63
sS'trial_loop.thisN'
p7637
I88
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p7638
g60
(g99
S'X\x00\x00\x00'
tRp7639
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7640
I0
sg6380
g6709
sS'block_loop.thisRepN'
p7641
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7642
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p7643
Nsg70
Vn
sS'block_loop.thisTrialN'
p7644
I0
sg39
F0.86635868499433855
sg34
g753
(S'\x07\xdf\x07\n\x0f37\x01_\x90'
tRp7645
sa(dp7646
S'trial_loop.thisTrialN'
p7647
I89
sg6371
g6607
sS'block_loop.thisIndex'
p7648
g6365
sg38
S'right'
p7649
sg59
g63
sS'trial_loop.thisN'
p7650
I89
sg33
g6611
sg64
g65
sS'trial_loop.thisIndex'
p7651
g60
(g99
S'Y\x00\x00\x00'
tRp7652
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7653
I0
sg6380
g6615
sS'block_loop.thisRepN'
p7654
I2
sg6383
g6617
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7655
I2
sg6385
g6611
sg55
g11
sS'block_loop.thisTrial'
p7656
Nsg70
Vn
sS'block_loop.thisTrialN'
p7657
I0
sg39
F1.3498965665094147
sg34
g753
(S'\x07\xdf\x07\n\x0f4\x00\x0f\x0fx'
tRp7658
sa(dp7659
S'trial_loop.thisTrialN'
p7660
I90
sg6371
g6817
sS'block_loop.thisIndex'
p7661
g6365
sg38
S'right'
p7662
sg59
g63
sS'trial_loop.thisN'
p7663
I90
sg33
g6828
sg64
g65
sS'trial_loop.thisIndex'
p7664
g60
(g99
S'Z\x00\x00\x00'
tRp7665
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7666
I0
sg6380
g6825
sS'block_loop.thisRepN'
p7667
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7668
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p7669
Nsg70
Vn
sS'block_loop.thisTrialN'
p7670
I0
sg39
F0.79985847743955674
sg34
g753
(S'\x07\xdf\x07\n\x0f4\x07\x05\x99\x98'
tRp7671
sa(dp7672
S'trial_loop.thisTrialN'
p7673
I91
sg6371
g7248
sS'block_loop.thisIndex'
p7674
g6365
sg38
S'left'
p7675
sg59
g63
sS'trial_loop.thisN'
p7676
I91
sg33
g6933
sg64
g65
sS'trial_loop.thisIndex'
p7677
g60
(g99
S'[\x00\x00\x00'
tRp7678
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7679
I0
sg6380
g7255
sS'block_loop.thisRepN'
p7680
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7681
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p7682
Nsg70
Vn
sS'block_loop.thisTrialN'
p7683
I0
sg39
F1.2833433307641826
sg34
g753
(S'\x07\xdf\x07\n\x0f4\r\x03\x11('
tRp7684
sa(dp7685
S'trial_loop.thisTrialN'
p7686
I92
sg6371
g6477
sS'block_loop.thisIndex'
p7687
g6365
sg38
S'left'
p7688
sg59
g63
sS'trial_loop.thisN'
p7689
I92
sg33
g6488
sg64
g65
sS'trial_loop.thisIndex'
p7690
g60
(g99
S'\\\x00\x00\x00'
tRp7691
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7692
I0
sg6380
g6485
sS'block_loop.thisRepN'
p7693
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7694
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p7695
Nsg70
Vn
sS'block_loop.thisTrialN'
p7696
I0
sg39
F0.9998896671422699
sg34
g753
(S'\x07\xdf\x07\n\x0f4\x13\x07\xebX'
tRp7697
sa(dp7698
S'trial_loop.thisTrialN'
p7699
I93
sg6371
g7181
sS'block_loop.thisIndex'
p7700
g6365
sg38
S'right'
p7701
sg59
g63
sS'trial_loop.thisN'
p7702
I93
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p7703
g60
(g99
S']\x00\x00\x00'
tRp7704
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7705
I0
sg6380
g7188
sS'block_loop.thisRepN'
p7706
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7707
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p7708
Nsg70
Vn
sS'block_loop.thisTrialN'
p7709
I0
sg39
F1.0331112611347635
sg34
g753
(S'\x07\xdf\x07\n\x0f4\x19\x08\x7f\xc8'
tRp7710
sa(dp7711
S'trial_loop.thisTrialN'
p7712
I94
sg6371
g7095
sS'block_loop.thisIndex'
p7713
g6365
sg38
S'left'
p7714
sg59
g63
sS'trial_loop.thisN'
p7715
I94
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p7716
g60
(g99
S'^\x00\x00\x00'
tRp7717
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7718
I0
sg6380
g7102
sS'block_loop.thisRepN'
p7719
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7720
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p7721
Nsg70
Vn
sS'block_loop.thisTrialN'
p7722
I0
sg39
F0.91630269177767332
sg34
g753
(S'\x07\xdf\x07\n\x0f4\x1f\t\x89h'
tRp7723
sa(dp7724
S'trial_loop.thisTrialN'
p7725
I95
sg6371
g6946
sS'block_loop.thisIndex'
p7726
g6365
sg38
S'right'
p7727
sg59
g63
sS'trial_loop.thisN'
p7728
I95
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p7729
g60
(g99
S'_\x00\x00\x00'
tRp7730
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7731
I0
sg6380
g6953
sS'block_loop.thisRepN'
p7732
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7733
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p7734
Nsg70
Vn
sS'block_loop.thisTrialN'
p7735
I0
sg39
F0.8832453141330916
sg34
g753
(S'\x07\xdf\x07\n\x0f4%\x08\xae\xa8'
tRp7736
sa(dp7737
S'trial_loop.thisTrialN'
p7738
I96
sg6371
g6637
sS'block_loop.thisIndex'
p7739
g6365
sg38
S'left'
p7740
sg59
g63
sS'trial_loop.thisN'
p7741
I96
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7742
g60
(g99
S'`\x00\x00\x00'
tRp7743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7744
I0
sg6380
g6644
sS'block_loop.thisRepN'
p7745
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7746
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7747
Nsg70
Vn
sS'block_loop.thisTrialN'
p7748
I0
sg39
F0.84990312376248767
sg34
g753
(S'\x07\xdf\x07\n\x0f4+\x07V\xe8'
tRp7749
sa(dp7750
S'trial_loop.thisTrialN'
p7751
I97
sg6371
g7151
sS'block_loop.thisIndex'
p7752
g6365
sg38
S'left'
p7753
sg59
g63
sS'trial_loop.thisN'
p7754
I97
sg33
g6828
sg64
g65
sS'trial_loop.thisIndex'
p7755
g60
(g99
S'a\x00\x00\x00'
tRp7756
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7757
I0
sg6380
g7158
sS'block_loop.thisRepN'
p7758
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7759
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p7760
Nsg70
Vn
sS'block_loop.thisTrialN'
p7761
I0
sg39
F1.6165497005313227
sg34
g753
(S'\x07\xdf\x07\n\x0f41\x05\x86\x10'
tRp7762
sa(dp7763
S'trial_loop.thisTrialN'
p7764
I98
sg6371
g6507
sS'block_loop.thisIndex'
p7765
g6365
sg38
S'right'
p7766
sg59
g63
sS'trial_loop.thisN'
p7767
I98
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p7768
g60
(g99
S'b\x00\x00\x00'
tRp7769
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7770
I0
sg6380
g6515
sS'block_loop.thisRepN'
p7771
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7772
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p7773
Nsg70
Vn
sS'block_loop.thisTrialN'
p7774
I0
sg39
F0.89991840500442777
sg34
g753
(S'\x07\xdf\x07\n\x0f48\x00]\xc0'
tRp7775
sa(dp7776
S'trial_loop.thisTrialN'
p7777
I99
sg6371
g7289
sS'block_loop.thisIndex'
p7778
g6365
sg38
S'right'
p7779
sg59
g63
sS'trial_loop.thisN'
p7780
I99
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7781
g60
(g99
S'c\x00\x00\x00'
tRp7782
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7783
I0
sg6380
g7296
sS'block_loop.thisRepN'
p7784
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7785
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7786
Nsg70
Vn
sS'block_loop.thisTrialN'
p7787
I0
sg39
F1.5504326644586399
sg34
g753
(S'\x07\xdf\x07\n\x0f5\x01\x0e\x86\xc0'
tRp7788
sa(dp7789
S'trial_loop.thisTrialN'
p7790
I100
sg6371
g7317
sS'block_loop.thisIndex'
p7791
g6365
sg38
S'left'
p7792
sg59
g63
sS'trial_loop.thisN'
p7793
I100
sg33
g7321
sg64
g65
sS'trial_loop.thisIndex'
p7794
g60
(g99
S'd\x00\x00\x00'
tRp7795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7796
I0
sg6380
g7325
sS'block_loop.thisRepN'
p7797
I2
sg6383
g7321
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7798
I2
sg6385
g7328
sg55
g11
sS'block_loop.thisTrial'
p7799
Nsg70
Vn
sS'block_loop.thisTrialN'
p7800
I0
sg39
F1.1165750742402452
sg34
g753
(S'\x07\xdf\x07\n\x0f5\x08\x08)\xd8'
tRp7801
sa(dp7802
S'trial_loop.thisTrialN'
p7803
I101
sg6371
g6761
sS'block_loop.thisIndex'
p7804
g6365
sg38
S'left'
p7805
sg59
g63
sS'trial_loop.thisN'
p7806
I101
sg33
g6765
sg64
g65
sS'trial_loop.thisIndex'
p7807
g60
(g99
S'e\x00\x00\x00'
tRp7808
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7809
I0
sg6380
g6769
sS'block_loop.thisRepN'
p7810
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7811
I2
sg6385
g6765
sg55
g11
sS'block_loop.thisTrial'
p7812
Nsg70
Vn
sS'block_loop.thisTrialN'
p7813
I0
sg39
F0.86665091026225127
sg34
g753
(S'\x07\xdf\x07\n\x0f5\x0e\nd('
tRp7814
sa(dp7815
S'trial_loop.thisTrialN'
p7816
I102
sg6371
g7248
sS'block_loop.thisIndex'
p7817
g6365
sg38
S'left'
p7818
sg59
g63
sS'trial_loop.thisN'
p7819
I102
sg33
g6940
sg64
g65
sS'trial_loop.thisIndex'
p7820
g60
(g99
S'f\x00\x00\x00'
tRp7821
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7822
I0
sg6380
g7255
sS'block_loop.thisRepN'
p7823
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7824
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p7825
Nsg70
Vn
sS'block_loop.thisTrialN'
p7826
I0
sg39
F1.2164131956960773
sg34
g753
(S'\x07\xdf\x07\n\x0f5\x14\x08\xd1\xd0'
tRp7827
sa(dp7828
S'trial_loop.thisTrialN'
p7829
I103
sg6371
g6637
sS'block_loop.thisIndex'
p7830
g6365
sg38
S'left'
p7831
sg59
g63
sS'trial_loop.thisN'
p7832
I103
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7833
g60
(g99
S'g\x00\x00\x00'
tRp7834
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7835
I0
sg6380
g6644
sS'block_loop.thisRepN'
p7836
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7837
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7838
Nsg70
Vn
sS'block_loop.thisTrialN'
p7839
I0
sg39
F0.76658813171889051
sg34
g753
(S'\x07\xdf\x07\n\x0f5\x1a\x0c\xb9\xd0'
tRp7840
sa(dp7841
S'trial_loop.thisTrialN'
p7842
I104
sg6371
g6667
sS'block_loop.thisIndex'
p7843
g6365
sg38
S'right'
p7844
sg59
g63
sS'trial_loop.thisN'
p7845
I104
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p7846
g60
(g99
S'h\x00\x00\x00'
tRp7847
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7848
I0
sg6380
g6675
sS'block_loop.thisRepN'
p7849
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7850
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p7851
Nsg70
Vn
sS'block_loop.thisTrialN'
p7852
I0
sg39
F1.0499152119082282
sg34
g753
(S'\x07\xdf\x07\n\x0f5 \t\xb8H'
tRp7853
sa(dp7854
S'trial_loop.thisTrialN'
p7855
I105
sg6371
g6834
sS'block_loop.thisIndex'
p7856
g6365
sg38
S'left'
p7857
sg59
g63
sS'trial_loop.thisN'
p7858
I105
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7859
g60
(g99
S'i\x00\x00\x00'
tRp7860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7861
I0
sg6380
g6841
sS'block_loop.thisRepN'
p7862
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7863
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7864
Nsg70
Vn
sS'block_loop.thisTrialN'
p7865
I0
sg39
F1.000008267837984
sg34
g753
(S'\x07\xdf\x07\n\x0f5&\x0b\x00h'
tRp7866
sa(dp7867
S'trial_loop.thisTrialN'
p7868
I106
sg6371
g6426
sS'block_loop.thisIndex'
p7869
g6365
sg38
S'left'
p7870
sg59
g63
sS'trial_loop.thisN'
p7871
I106
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7872
g60
(g99
S'j\x00\x00\x00'
tRp7873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7874
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7875
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7876
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7877
Nsg70
Vn
sS'block_loop.thisTrialN'
p7878
I0
sg39
F1.2999961796886055
sg34
g753
(S'\x07\xdf\x07\n\x0f5,\x0b\x90\xf0'
tRp7879
sa(dp7880
S'trial_loop.thisTrialN'
p7881
I107
sg6371
g6761
sS'block_loop.thisIndex'
p7882
g6365
sg38
S'left'
p7883
sg59
g63
sS'trial_loop.thisN'
p7884
I107
sg33
g6771
sg64
g65
sS'trial_loop.thisIndex'
p7885
g60
(g99
S'k\x00\x00\x00'
tRp7886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7887
I0
sg6380
g6769
sS'block_loop.thisRepN'
p7888
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7889
I2
sg6385
g6765
sg55
g11
sS'block_loop.thisTrial'
p7890
Nsg70
Vn
sS'block_loop.thisTrialN'
p7891
I0
sg39
F0.84989884729293408
sg34
g753
(S'\x07\xdf\x07\n\x0f53\x01g`'
tRp7892
sa(dp7893
S'trial_loop.thisTrialN'
p7894
I108
sg6371
g7054
sS'block_loop.thisIndex'
p7895
g6365
sg38
S'right'
p7896
sg59
g63
sS'trial_loop.thisN'
p7897
I108
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p7898
g60
(g99
S'l\x00\x00\x00'
tRp7899
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7900
I0
sg6380
g7061
sS'block_loop.thisRepN'
p7901
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7902
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p7903
Nsg70
Vn
sS'block_loop.thisTrialN'
p7904
I0
sg39
F0.94991230390951387
sg34
g753
(S'\x07\xdf\x07\n\x0f58\x0e\xd8\xc8'
tRp7905
sa(dp7906
S'trial_loop.thisTrialN'
p7907
I109
sg6371
g7347
sS'block_loop.thisIndex'
p7908
g6365
sg38
S'right'
p7909
sg59
g63
sS'trial_loop.thisN'
p7910
I109
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p7911
g60
(g99
S'm\x00\x00\x00'
tRp7912
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7913
I0
sg6380
g7354
sS'block_loop.thisRepN'
p7914
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7915
I2
sg6385
g6695
sg55
g11
sS'block_loop.thisTrial'
p7916
Nsg70
Vn
sS'block_loop.thisTrialN'
p7917
I0
sg39
F0.96656543793142191
sg34
g753
(S'\x07\xdf\x07\n\x0f6\x02\x0ew '
tRp7918
sa(dp7919
S'trial_loop.thisTrialN'
p7920
I110
sg6371
g6460
sS'block_loop.thisIndex'
p7921
g6365
sg38
S'right'
p7922
sg59
g63
sS'trial_loop.thisN'
p7923
I110
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7924
g60
(g99
S'n\x00\x00\x00'
tRp7925
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7926
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7927
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7928
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7929
Nsg70
Vn
sS'block_loop.thisTrialN'
p7930
I0
sg39
F1.0666826701562968
sg34
g753
(S'\x07\xdf\x07\n\x0f6\x08\x0e\x8e\x90'
tRp7931
sa(dp7932
S'trial_loop.thisTrialN'
p7933
I111
sg6371
S'35-raisins.png'
p7934
sS'block_loop.thisIndex'
p7935
g6365
sg38
S'left'
p7936
sg59
g63
sS'trial_loop.thisN'
p7937
I111
sg33
g6617
sg64
g65
sS'trial_loop.thisIndex'
p7938
g60
(g99
S'o\x00\x00\x00'
tRp7939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7940
I0
sg6380
S'49-yorkie.png'
p7941
sS'block_loop.thisRepN'
p7942
I2
sg6383
g6617
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7943
I2
sg6385
g6611
sg55
g11
sS'block_loop.thisTrial'
p7944
Nsg70
Vn
sS'block_loop.thisTrialN'
p7945
I0
sg39
F1.5333213782323583
sg34
g753
(S'\x07\xdf\x07\n\x0f6\x0f\x00\xcf\x08'
tRp7946
sa(dp7947
S'trial_loop.thisTrialN'
p7948
I112
sg6371
g7317
sS'block_loop.thisIndex'
p7949
g6365
sg38
S'left'
p7950
sg59
g63
sS'trial_loop.thisN'
p7951
I112
sg33
g7321
sg64
g65
sS'trial_loop.thisIndex'
p7952
g60
(g99
S'p\x00\x00\x00'
tRp7953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7954
I0
sg6380
g7325
sS'block_loop.thisRepN'
p7955
I2
sg6383
g7321
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7956
I2
sg6385
g7328
sg55
g11
sS'block_loop.thisTrial'
p7957
Nsg70
Vn
sS'block_loop.thisTrialN'
p7958
I0
sg39
F0.90005667744844686
sg34
g753
(S'\x07\xdf\x07\n\x0f6\x15\ty\xc8'
tRp7959
sa(dp7960
S'trial_loop.thisTrialN'
p7961
I113
sg6371
g6761
sS'block_loop.thisIndex'
p7962
g6365
sg38
S'left'
p7963
sg59
g63
sS'trial_loop.thisN'
p7964
I113
sg33
g6765
sg64
g65
sS'trial_loop.thisIndex'
p7965
g60
(g99
S'q\x00\x00\x00'
tRp7966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7967
I0
sg6380
g6769
sS'block_loop.thisRepN'
p7968
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7969
I2
sg6385
g6765
sg55
g11
sS'block_loop.thisTrial'
p7970
Nsg70
Vn
sS'block_loop.thisTrialN'
p7971
I0
sg39
F0.93318219347565901
sg34
g753
(S'\x07\xdf\x07\n\x0f6\x1b\x08`\x88'
tRp7972
sa(dp7973
S'trial_loop.thisTrialN'
p7974
I114
sg6371
g6372
sS'block_loop.thisIndex'
p7975
g6365
sg38
S'right'
p7976
sg59
g63
sS'trial_loop.thisN'
p7977
I114
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7978
g60
(g99
S'r\x00\x00\x00'
tRp7979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7980
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7981
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7982
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7983
Nsg70
Vn
sS'block_loop.thisTrialN'
p7984
I0
sg39
F0.73327502132451627
sg34
g753
(S'\x07\xdf\x07\n\x0f6!\x07\xfe\xe0'
tRp7985
sa(dp7986
S'trial_loop.thisTrialN'
p7987
I115
sg6371
g7248
sS'block_loop.thisIndex'
p7988
g6365
sg38
S'left'
p7989
sg59
g63
sS'trial_loop.thisN'
p7990
I115
sg33
g6933
sg64
g65
sS'trial_loop.thisIndex'
p7991
g60
(g99
S's\x00\x00\x00'
tRp7992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7993
I0
sg6380
g7255
sS'block_loop.thisRepN'
p7994
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7995
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p7996
Nsg70
Vn
sS'block_loop.thisTrialN'
p7997
I0
sg39
F1.0666413309736527
sg34
g753
(S"\x07\xdf\x07\n\x0f6'\x04E\xc0"
tRp7998
sa(dp7999
S'trial_loop.thisTrialN'
p8000
I116
sg6371
g6524
sS'block_loop.thisIndex'
p8001
g6365
sg38
S'left'
p8002
sg59
g63
sS'trial_loop.thisN'
p8003
I116
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p8004
g60
(g99
S't\x00\x00\x00'
tRp8005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8006
I0
sg6380
g6532
sS'block_loop.thisRepN'
p8007
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8008
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p8009
Nsg70
Vn
sS'block_loop.thisTrialN'
p8010
I0
sg39
F0.93323008990773815
sg34
g753
(S'\x07\xdf\x07\n\x0f6-\x05\xcc`'
tRp8011
sa(dp8012
S'trial_loop.thisTrialN'
p8013
I117
sg6371
g6701
sS'block_loop.thisIndex'
p8014
g6365
sg38
S'right'
p8015
sg59
g63
sS'trial_loop.thisN'
p8016
I117
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p8017
g60
(g99
S'u\x00\x00\x00'
tRp8018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8019
I0
sg6380
g6709
sS'block_loop.thisRepN'
p8020
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8021
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p8022
Nsg70
Vn
sS'block_loop.thisTrialN'
p8023
I0
sg39
F1.433034227702592
sg34
g753
(S'\x07\xdf\x07\n\x0f63\x05j\xb8'
tRp8024
sa(dp8025
S'trial_loop.thisTrialN'
p8026
I118
sg6371
g6558
sS'block_loop.thisIndex'
p8027
g6365
sg38
S'right'
p8028
sg59
g63
sS'trial_loop.thisN'
p8029
I118
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8030
g60
(g99
S'v\x00\x00\x00'
tRp8031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8032
I0
sg6380
g6565
sS'block_loop.thisRepN'
p8033
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8034
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p8035
Nsg70
Vn
sS'block_loop.thisTrialN'
p8036
I0
sg39
F0.7666867755651765
sg34
g753
(S'\x07\xdf\x07\n\x0f69\x0cg\xc8'
tRp8037
sa(dp8038
S'trial_loop.thisTrialN'
p8039
I119
sg6371
g7934
sS'block_loop.thisIndex'
p8040
g6365
sg38
S'left'
p8041
sg59
g63
sS'trial_loop.thisN'
p8042
I119
sg33
g6617
sg64
g65
sS'trial_loop.thisIndex'
p8043
g60
(g99
S'w\x00\x00\x00'
tRp8044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8045
I0
sg6380
g7941
sS'block_loop.thisRepN'
p8046
I2
sg6383
g6617
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8047
I2
sg6385
g6611
sg55
g11
sS'block_loop.thisTrial'
p8048
Nsg70
Vn
sS'block_loop.thisTrialN'
p8049
I0
sg39
F1.6998800878573093
sg34
g753
(S'\x07\xdf\x07\n\x0f7\x03\tf@'
tRp8050
sa(dp8051
S'trial_loop.thisTrialN'
p8052
I120
sg6371
g6558
sS'block_loop.thisIndex'
p8053
g6365
sg38
S'right'
p8054
sg59
g63
sS'trial_loop.thisN'
p8055
I120
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p8056
g60
(g99
S'x\x00\x00\x00'
tRp8057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8058
I0
sg6380
g6565
sS'block_loop.thisRepN'
p8059
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8060
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p8061
Nsg70
Vn
sS'block_loop.thisTrialN'
p8062
I0
sg39
F0.78328231982959551
sg34
g753
(S'\x07\xdf\x07\n\x0f7\n\x05j\xb8'
tRp8063
sa(dp8064
S'trial_loop.thisTrialN'
p8065
I121
sg6371
S'43-mrporky_pork_crackles_redo.png'
p8066
sS'block_loop.thisIndex'
p8067
g6365
sg38
S'right'
p8068
sg59
g63
sS'trial_loop.thisN'
p8069
I121
sg33
g7321
sg64
g65
sS'trial_loop.thisIndex'
p8070
g60
(g99
S'y\x00\x00\x00'
tRp8071
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8072
I0
sg6380
S'18-mms.png'
p8073
sS'block_loop.thisRepN'
p8074
I2
sg6383
g7321
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8075
I2
sg6385
g7328
sg55
g11
sS'block_loop.thisTrial'
p8076
Nsg70
Vn
sS'block_loop.thisTrialN'
p8077
I0
sg39
F1.1832560338079929
sg34
g753
(S'\x07\xdf\x07\n\x0f7\x10\x02\xa7\xb0'
tRp8078
sa(dp8079
S'trial_loop.thisTrialN'
p8080
I122
sg6371
g7000
sS'block_loop.thisIndex'
p8081
g6365
sg38
S'left'
p8082
sg59
g63
sS'trial_loop.thisN'
p8083
I122
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p8084
g60
(g99
S'z\x00\x00\x00'
tRp8085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8086
I0
sg6380
g7007
sS'block_loop.thisRepN'
p8087
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8088
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p8089
Nsg70
Vn
sS'block_loop.thisTrialN'
p8090
I0
sg39
F0.88336419992629089
sg34
g753
(S'\x07\xdf\x07\n\x0f7\x16\x05\xd8\x18'
tRp8091
sa(dp8092
S'trial_loop.thisTrialN'
p8093
I123
sg6371
g6573
sS'block_loop.thisIndex'
p8094
g6365
sg38
S'left'
p8095
sg59
g63
sS'trial_loop.thisN'
p8096
I123
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p8097
g60
(g99
S'{\x00\x00\x00'
tRp8098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8099
I0
sg6380
g6581
sS'block_loop.thisRepN'
p8100
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8101
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p8102
Nsg70
Vn
sS'block_loop.thisTrialN'
p8103
I0
sg39
F0.93327199928899063
sg34
g753
(S'\x07\xdf\x07\n\x0f7\x1c\x04\x80X'
tRp8104
sa(dp8105
S'trial_loop.thisTrialN'
p8106
I124
sg6371
g7347
sS'block_loop.thisIndex'
p8107
g6365
sg38
S'right'
p8108
sg59
g63
sS'trial_loop.thisN'
p8109
I124
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p8110
g60
(g99
S'|\x00\x00\x00'
tRp8111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8112
I0
sg6380
g7354
sS'block_loop.thisRepN'
p8113
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8114
I2
sg6385
g6695
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vn
sS'block_loop.thisTrialN'
p8116
I0
sg39
F0.9499162952779443
sg34
g753
(S'\x07\xdf\x07\n\x0f7"\x04\x1e\xb0'
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g6607
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'right'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g6617
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g6615
sS'block_loop.thisRepN'
p8126
I2
sg6383
g6617
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8127
I2
sg6385
g6611
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vn
sS'block_loop.thisTrialN'
p8129
I0
sg39
F1.4331719299516408
sg34
g753
(S'\x07\xdf\x07\n\x0f7(\x03\xbd\x08'
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g6573
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'left'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g6581
sS'block_loop.thisRepN'
p8139
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8140
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vn
sS'block_loop.thisTrialN'
p8142
I0
sg39
F0.8165509549617127
sg34
g753
(S'\x07\xdf\x07\n\x0f7.\n\xf8\x98'
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g6946
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'right'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g6953
sS'block_loop.thisRepN'
p8152
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8153
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vn
sS'block_loop.thisTrialN'
p8155
I0
sg39
F0.78334504134909366
sg34
g753
(S'\x07\xdf\x07\n\x0f74\x08\xae\xa8'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g6541
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'right'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g6545
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g6549
sS'block_loop.thisRepN'
p8165
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8166
I2
sg6385
g6552
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vn
sS'block_loop.thisTrialN'
p8168
I0
sg39
F1.0332332830039377
sg34
g753
(S'\x07\xdf\x07\n\x0f7:\x05\xeb\xa0'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g8066
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'right'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g7321
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g8073
sS'block_loop.thisRepN'
p8178
I2
sg6383
g7321
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8179
I2
sg6385
g7328
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vn
sS'block_loop.thisTrialN'
p8181
I0
sg39
F0.83327707403077511
sg34
g753
(S'\x07\xdf\x07\n\x0f8\x04\x06\xf5@'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g7000
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'left'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g7007
sS'block_loop.thisRepN'
p8191
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8192
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vn
sS'block_loop.thisTrialN'
p8194
I0
sg39
F0.9665910967378295
sg34
g753
(S'\x07\xdf\x07\n\x0f8\n\x04\xe9\xd0'
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g6426
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'left'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8204
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8205
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vn
sS'block_loop.thisTrialN'
p8207
I0
sg39
F1.4499259886033542
sg34
g753
(S'\x07\xdf\x07\n\x0f8\x10\x04\xc2\xc0'
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g6834
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'left'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g6841
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8218
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vn
sS'block_loop.thisTrialN'
p8220
I0
sg39
F0.7000169348102645
sg34
g753
(S'\x07\xdf\x07\n\x0f8\x16\x0c<\xd0'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g7151
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'left'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6828
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g7158
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8231
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vn
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.81653242360334843
sg34
g753
(S'\x07\xdf\x07\n\x0f8\x1c\x08\n\x98'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g6392
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'right'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8244
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vn
sS'block_loop.thisTrialN'
p8246
I0
sg39
F0.73324508605583105
sg34
g753
(S'\x07\xdf\x07\n\x0f8"\x05\xc0\xa8'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g6541
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'right'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6545
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g6549
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6385
g6552
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vn
sS'block_loop.thisTrialN'
p8259
I0
sg39
F0.88319257103285054
sg34
g753
(S'\x07\xdf\x07\n\x0f8(\x02F\x08'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g7136
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'right'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g7143
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vn
sS'block_loop.thisTrialN'
p8272
I0
sg39
F0.98325449428375578
sg34
g753
(S'\x07\xdf\x07\n\x0f8.\x00\xf20'
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g6746
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'left'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g6753
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vn
sS'block_loop.thisTrialN'
p8285
I0
sg39
F1.5666855211347865
sg34
g753
(S'\x07\xdf\x07\n\x0f84\x01D8'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g7181
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'right'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g7188
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vn
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.9831652586653945
sg34
g753
(S'\x07\xdf\x07\n\x0f8:\nh\x10'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g8066
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'right'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g7321
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g8073
sS'block_loop.thisRepN'
p8308
I2
sg6383
g7321
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6385
g7328
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vn
sS'block_loop.thisTrialN'
p8311
I0
sg39
F1.1665986233201693
sg34
g753
(S'\x07\xdf\x07\n\x0f9\x04\n\xbe\x00'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g7289
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'right'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g7296
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vn
sS'block_loop.thisTrialN'
p8324
I0
sg39
F1.5166913371322153
sg34
g753
(S'\x07\xdf\x07\n\x0f9\n\r\xaf\xe8'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6929
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'right'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6933
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6937
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vn
sS'block_loop.thisTrialN'
p8337
I0
sg39
F1.0164780839586456
sg34
g753
(S'\x07\xdf\x07\n\x0f9\x11\x06\xd9\xe8'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g7289
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'right'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g7296
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vn
sS'block_loop.thisTrialN'
p8350
I0
sg39
F1.6666567832762667
sg34
g753
(S'\x07\xdf\x07\n\x0f9\x17\x07\xa8\xf0'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g7054
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'right'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6584
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g7061
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vn
sS'block_loop.thisTrialN'
p8363
I0
sg39
F0.84985608261558809
sg34
g753
(S'\x07\xdf\x07\n\x0f9\x1e\x02\xf5\xd0'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g7317
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'left'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g7321
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g7325
sS'block_loop.thisRepN'
p8373
I2
sg6383
g7321
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6385
g7328
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vn
sS'block_loop.thisTrialN'
p8376
I0
sg39
F1.0999196594311798
sg34
g753
(S'\x07\xdf\x07\n\x0f9$\x01$\xf8'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g6607
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'left'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6617
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g6615
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6617
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6385
g6611
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vn
sS'block_loop.thisTrialN'
p8389
I0
sg39
F1.7665365290122281
sg34
g753
(S'\x07\xdf\x07\n\x0f9*\x03c0'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g7166
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'right'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6771
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g7173
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6385
g6765
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vn
sS'block_loop.thisTrialN'
p8402
I0
sg39
F0.83318926389983972
sg34
g753
(S'\x07\xdf\x07\n\x0f91\x00Y\xd8'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g6929
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'right'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6933
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g6937
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vn
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.85001146093054558
sg34
g753
(S'\x07\xdf\x07\n\x0f96\r\x90\xa8'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g8066
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'right'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g7321
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g8073
sS'block_loop.thisRepN'
p8425
I2
sg6383
g7321
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6385
g7328
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vn
sS'block_loop.thisTrialN'
p8428
I0
sg39
F1.0998421128242626
sg34
g753
(S'\x07\xdf\x07\n\x0f:\x00\x0b\xbf\xd0'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g6590
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'left'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g6598
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vn
sS'block_loop.thisTrialN'
p8441
I0
sg39
F1.0831350953158108
sg34
g753
(S'\x07\xdf\x07\n\x0f:\x06\r\xbf\x88'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6460
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'right'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6468
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vn
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.98321344019495882
sg34
g753
(S'\x07\xdf\x07\n\x0f:\r\x00>\x80'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g6731
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'right'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g6738
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vn
sS'block_loop.thisTrialN'
p8467
I0
sg39
F1.1332304890456726
sg34
g753
(S'\x07\xdf\x07\n\x0f:\x13\x00\x94p'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g8066
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'right'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g7321
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g8073
sS'block_loop.thisRepN'
p8477
I2
sg6383
g7321
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6385
g7328
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vn
sS'block_loop.thisTrialN'
p8480
I0
sg39
F0.78370483480466646
sg34
g753
(S'\x07\xdf\x07\n\x0f:\x19\x03\r@'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g6946
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'right'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6488
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g6953
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vn
sS'block_loop.thisTrialN'
p8493
I0
sg39
F1.1832557487105078
sg34
g753
(S'\x07\xdf\x07\n\x0f:\x1f\x00FP'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g6731
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'right'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6535
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g6738
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vn
sS'block_loop.thisTrialN'
p8506
I0
sg39
F0.93317421073516016
sg34
g753
(S'\x07\xdf\x07\n\x0f:%\x03v\xb8'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g7151
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'left'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6828
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g7158
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vn
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.99989223302327446
sg34
g753
(S'\x07\xdf\x07\n\x0f:+\x03\x15\x10'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g7166
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'right'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6771
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g7173
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6385
g6765
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vn
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.83324485797857051
sg34
g753
(S'\x07\xdf\x07\n\x0f:1\x03\xa5\x98'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g6667
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'right'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g6675
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vn
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.86665775260917144
sg34
g753
(S'\x07\xdf\x07\n\x0f:7\x01\x9a('
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g7347
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'right'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g7354
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6385
g6695
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vn
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.96657256537946523
sg34
g753
(S'\x07\xdf\x07\n\x0f;\x01\x00\x07\xd0'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g6701
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'right'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g6709
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vn
sS'block_loop.thisTrialN'
p8571
I0
sg39
F0.98308029950931086
sg34
g753
(S'\x07\xdf\x07\n\x0f;\x06\x0f#\x00'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g6946
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'right'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g6953
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vn
sS'block_loop.thisTrialN'
p8584
I0
sg39
F1.0332603672977712
sg34
g753
(S'\x07\xdf\x07\n\x0f;\r\x006\xb0'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g6817
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'right'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6828
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g6825
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vn
sS'block_loop.thisTrialN'
p8597
I0
sg39
F0.7666149309152388
sg34
g753
(S'\x07\xdf\x07\n\x0f;\x13\x01@P'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g7934
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'right'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6617
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g7941
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6617
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6385
g6611
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vn
sS'block_loop.thisTrialN'
p8610
I0
sg39
F1.8832051153367502
sg34
g753
(S'\x07\xdf\x07\n\x0f;\x18\r\x81\x08'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g6477
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'left'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g6485
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vn
sS'block_loop.thisTrialN'
p8623
I0
sg39
F1.4332078522784286
sg34
g753
(S'\x07\xdf\x07\n\x0f;\x1f\x0c%`'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g6426
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'left'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vn
sS'block_loop.thisTrialN'
p8636
I0
sg39
F1.333201238008769
sg34
g753
(S'\x07\xdf\x07\n\x0f;&\x04\x1e\xb0'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g7136
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'right'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g7143
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vn
sS'block_loop.thisTrialN'
p8649
I0
sg39
F1.0831998125177051
sg34
g753
(S'\x07\xdf\x07\n\x0f;,\t\xb0x'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6541
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'right'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6545
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g6549
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6385
g6552
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vn
sS'block_loop.thisTrialN'
p8662
I0
sg39
F1.1332638454914559
sg34
g753
(S'\x07\xdf\x07\n\x0f;2\x0bq\xb0'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g7136
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'right'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g7143
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vn
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.83344186057001934
sg34
g753
(S'\x07\xdf\x07\n\x0f;8\r\xea\x80'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g6684
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'left'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g6692
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6385
g6695
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vn
sS'block_loop.thisTrialN'
p8688
I0
sg39
F1.383333124260389
sg34
g753
(S'\x07\xdf\x07\n\x10\x00\x02\x0b\xdf\x10'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g6573
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'left'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g6581
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vn
sS'block_loop.thisTrialN'
p8701
I0
sg39
F1.1165026593916991
sg34
g753
(S'\x07\xdf\x07\n\x10\x00\t\x03 \xc8'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g7934
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'right'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6617
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g7941
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6617
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6385
g6611
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vn
sS'block_loop.thisTrialN'
p8714
I0
sg39
F1.2832261555595323
sg34
g753
(S'\x07\xdf\x07\n\x10\x00\x0f\x05[\x18'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6834
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'left'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6841
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vn
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.81656663534522522
sg34
g753
(S'\x07\xdf\x07\n\x10\x00\x15\n5H'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g6652
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'left'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g6659
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vn
sS'block_loop.thisTrialN'
p8740
I0
sg39
F0.81673968972245348
sg34
g753
(S'\x07\xdf\x07\n\x10\x00\x1b\x07\xebX'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g6731
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'right'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g6738
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vn
sS'block_loop.thisTrialN'
p8753
I0
sg39
F1.0999829511492862
sg34
g753
(S'\x07\xdf\x07\n\x10\x00!\x05\xa5P'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g7054
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'right'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g7061
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vn
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.84993876098815235
sg34
g753
(S"\x07\xdf\x07\n\x10\x00'\x07\xa1 "
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g6443
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'left'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vn
sS'block_loop.thisTrialN'
p8779
I0
sg39
F1.216677481377701
sg34
g753
(S'\x07\xdf\x07\n\x10\x00-\x05\xd40'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g7934
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'right'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6617
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g7941
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6617
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6385
g6611
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vn
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.93324805107113207
sg34
g753
(S'\x07\xdf\x07\n\x10\x003\t\xb8H'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g7000
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'left'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g7007
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vn
sS'block_loop.thisTrialN'
p8805
I0
sg39
F0.85007788872462697
sg34
g753
(S'\x07\xdf\x07\n\x10\x009\t\x18 '
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6761
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'left'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6771
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6769
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6385
g6765
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vn
sS'block_loop.thisTrialN'
p8818
I0
sg39
F1.0665786094505165
sg34
g753
(S'\x07\xdf\x07\n\x10\x01\x03\x07K0'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g6914
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'left'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6545
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g6921
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6385
g6552
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vn
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.78325124416733161
sg34
g753
(S'\x07\xdf\x07\n\x10\x01\t\x08\xcd\xe8'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6834
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'left'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g6841
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vn
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.74989593929421972
sg34
g753
(S'\x07\xdf\x07\n\x10\x01\x0f\x06\n\xe0'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6507
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'right'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6515
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6385
g6518
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vn
sS'block_loop.thisTrialN'
p8857
I0
sg39
F0.98333774284765241
sg34
g753
(S'\x07\xdf\x07\n\x10\x01\x15\x02\xce\xc0'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g6573
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'left'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g6581
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vn
sS'block_loop.thisTrialN'
p8870
I0
sg39
F0.76650944471839466
sg34
g753
(S'\x07\xdf\x07\n\x10\x01\x1b\x02\xe60'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g6929
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'right'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6933
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g6937
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vn
sS'block_loop.thisTrialN'
p8883
I0
sg39
F0.88327581960038515
sg34
g753
(S'\x07\xdf\x07\n\x10\x01 \x0f&\xe8'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g6914
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'left'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6545
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g6921
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6385
g6552
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vn
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.7832503888712381
sg34
g753
(S'\x07\xdf\x07\n\x10\x01&\x0e\r\xa8'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6409
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'left'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vn
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.86657478914275998
sg34
g753
(S'\x07\xdf\x07\n\x10\x01,\x0b\x0c '
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g7248
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'left'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6933
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g7255
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vn
sS'block_loop.thisTrialN'
p8922
I0
sg39
F1.2498831098928349
sg34
g753
(S'\x07\xdf\x07\n\x10\x012\t\xb4`'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g6914
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'left'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6545
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g6921
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6385
g6552
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vn
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.80002297888131579
sg34
g753
(S'\x07\xdf\x07\n\x10\x018\r\xda\xe0'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g6667
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'right'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g6675
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6671
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6385
g6678
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vn
sS'block_loop.thisTrialN'
p8948
I0
sg39
F1.0498958252537705
sg34
g753
(S'\x07\xdf\x07\n\x10\x02\x02\x0bRp'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g6731
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'right'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6535
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g6738
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6385
g6535
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vn
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.93335154157830402
sg34
g753
(S'\x07\xdf\x07\n\x10\x02\x08\x0c\x9a\x90'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g7317
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'left'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g7321
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g7325
sS'block_loop.thisRepN'
p8971
I2
sg6383
g7321
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6385
g7328
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vn
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.96677042326700757
sg34
g753
(S'\x07\xdf\x07\n\x10\x02\x0e\x0c8\xe8'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g7151
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'left'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g7158
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vn
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.79973759596396121
sg34
g753
(S'\x07\xdf\x07\n\x10\x02\x14\x0c\x11\xd8'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g7289
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'right'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g7296
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vn
sS'block_loop.thisTrialN'
p9000
I0
sg39
F0.98324337546728202
sg34
g753
(S'\x07\xdf\x07\n\x10\x02\x1a\t\x8dP'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g6914
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'left'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6545
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g6921
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6385
g6552
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vn
sS'block_loop.thisTrialN'
p9013
I0
sg39
F0.71656885910851997
sg34
g753
(S'\x07\xdf\x07\n\x10\x02 \t\xdfX'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g7095
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'left'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g7102
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vn
sS'block_loop.thisTrialN'
p9026
I0
sg39
F1.3330142138402152
sg34
g753
(S'\x07\xdf\x07\n\x10\x02&\x06* '
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g6746
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'left'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g6753
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vn
sS'block_loop.thisTrialN'
p9039
I0
sg39
F1.149905575599405
sg34
g753
(S'\x07\xdf\x07\n\x10\x02,\x0b\xbb\xe8'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g6929
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'right'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6933
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g6937
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vn
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.91658180254671606
sg34
g753
(S'\x07\xdf\x07\n\x10\x022\x0eoP'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g6746
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'left'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g6753
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vn
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.98338934555067681
sg34
g753
(S'\x07\xdf\x07\n\x10\x028\r\x94\x90'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g6817
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'right'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6821
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g6825
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6821
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6385
g6828
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vn
sS'block_loop.thisTrialN'
p9078
I0
sg39
F1.0333399095907225
sg34
g753
(S'\x07\xdf\x07\n\x10\x03\x02\r\xe6\x98'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6590
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'left'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6601
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6598
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vn
sS'block_loop.thisTrialN'
p9091
I0
sg39
F1.0498182786468533
sg34
g753
(S'\x07\xdf\x07\n\x10\x03\x08\x0e\xf4 '
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vn
sa(dp9099
g64
g65
sg43
I33
sg56
g57
sg58
Vn
sg42
I567
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp9100
g64
g65
sg43
I33
sg55
g11
sg56
g57
sg45
F0.20999999999999999
sg42
I567
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I01
sg48
I25
sg47
g571
sg51
F30.460000000000001
sg46
F0.91999999999999993
sg66
g67
sg68
g69
sg50
I0
sg70
Vn
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I234119504
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'ff\xa6?\xcd\xcc\x8c?\x1f\x85k?=\nW?H\xe1z?\xaeG\xe1>{\x14\xae?\n\xd7\xa3>\xaeGa?\xf6(\\?333?\x9a\x99\x99?\x1f\x85\xab?\xd7\xa3p?\xecQ8?33\xb3?\xcd\xccL?=\nW?\xf6(\\?\x85\xebQ?=\nW?{\x14.?333?R\xb8\x9e?\x00\x00\x80?\xcd\xccL?33\xb3?\\\x8f\xc2?\xaeGa?\xaeG\xa1?\x14\xaeG?\x8f\xc2\xb5?\x9a\x99\x19?\xf6(\\?fff?q=\xca?q=\x8a?=\nW?\xa4p=?\xaeGa?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'd;\x83@\x98n\x96@\xfe\xd4\x94@\xaa\xf1\xfe@T\xe3\xb5@\xbaI\x8c@D\x8b\xd0@\x10X\x85@w\xbe\xb3@D\x8b\xf8@\x98n\x9e@T\xe3]@\x87\x16q@D\x8blA\xcb\xa1\x91@\xfe\xd4\xbc@T\xe3\xfd@\x9a\x99IA\x87\x16!@\x87\x16\x89@\xa2E\x1cA1\x08\x88@w\xbe\x93@d;\x93@L7_A\xa8\xc6[@\xee|\x97@\xb2\x9d\x01A\xcb\xa1\xe9@\xc9vV@T\xe3\xbd@\xee|\xef@\x98n\x8e@1\x08\xa0@D\x8b\xc0@d;\xdb@\xc9vv@\xcb\xa1\xc1@\x98n\xce@u\x93x@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00B\x00\x00\xb0A\x00\x00\x0cB\x00\x00\x1cB\x00\x00\x08B\x00\x00\x04B\x00\x00\x10B\x00\x00\x14B\x00\x00\x80?\x00\x00\xc0A\x00\x00\xe0@\x00\x00\xa0A\x00\x00\xb8A\x00\x00\x00\x00\x00\x00\xd0A\x00\x00\x80@\x00\x00\xa0@\x00\x00pA\x00\x00\xe8A\x00\x00\xf8A\x00\x00PA\x00\x00\xa8A\x00\x00\xe0A\x00\x00@A\x00\x00\xc0@\x00\x00\x90A\x00\x00\x98A\x00\x00 A\x00\x00\xc8A\x00\x00`A\x00\x00\x88A\x00\x00\x00A\x00\x000A\x00\x00\xd8A\x00\x00\xf0A\x00\x00\x80A\x00\x00\x10A\x00\x00\x00@\x00\x00@@\x00\x00\x18B'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'33\xf3?ff\xa6?\xcd\xcc\x8c?\xcd\xcc\xcc?ff\xe6?33\xf3?\x00\x00\x80?\x9a\x99\xd9?\x9a\x99\x99?33\xf3?\x00\x00\x00@\x9a\x99\x99?ff\xe6?33\xb3?\x00\x00\x80?33\xb3?\x00\x00\x00@\x00\x00\x80?ff\xa6?\x9a\x99\xd9?33\xb3?ff\xe6?ff\xe6?\xcd\xcc\xcc?33\xf3?33\xb3?33\xb3?\xcd\xcc\xcc?ff\xa6?\xcd\xcc\xcc?ff\xa6?ff\xe6?\x9a\x99\x99?\xcd\xcc\x8c?ff\xe6?\x00\x00\x80?33\xf3?33\xf3?\xcd\xcc\x8c?\xcd\xcc\x8c?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'\r\x00\x00\x00\x08\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00\n\x00\x00\x00\x1f\x00\x00\x00$\x00\x00\x00\x1b\x00\x00\x00 \x00\x00\x00\x17\x00\x00\x00\x14\x00\x00\x00\x1d\x00\x00\x00\x11\x00\x00\x00#\x00\x00\x00\x1e\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x0b\x00\x00\x00\x15\x00\x00\x00\x01\x00\x00\x00\x0c\x00\x00\x00\t\x00\x00\x00\x1c\x00\x00\x00\x0e\x00\x00\x00!\x00\x00\x00\x16\x00\x00\x00\x12\x00\x00\x00"\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x04\x00\x00\x00\x02\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\'\x00\x00\x00\x03\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g327
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g257
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g348
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g376
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g341
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g334
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g355
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g362
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g110
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g271
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g152
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g243
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g264
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g103
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g285
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g131
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g138
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g208
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g306
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g320
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g194
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g250
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g299
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g187
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g145
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g229
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g236
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g173
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g278
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g201
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g222
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g159
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g180
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g292
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g313
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g215
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g166
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g117
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g124
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g369
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I234119504
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x9a\x99\xb9@\x00\x00\xc0@33\xa3@\x00\x00\xc0@\x00\x00\xc0@fff@ff\x96@\x9a\x99\x99@\x00\x00\xc0@\xcd\xcc\x8c@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xb0@\x00\x00\xb0@\x00\x00\xc0@\xcd\xccl@\xcd\xcc\x8c@\x00\x00\xb0@33\x83@\x00\x00\xc0@\xcd\xcc\x9c@33\xb3@\xcd\xcc\xac@33\x83@\x00\x00\xc0@\x9a\x99\xa9@\x00\x00\xc0@\x00\x00\xb0@\xcd\xcc\xac@\xcd\xcc\x8c@\x00\x00\xc0@ff\xa6@\x00\x00\xa0@\xcd\xcc\x9c@\x00\x00\xc0@ff\x86@33\xa3@\xcd\xcc\xac@\x00\x00\xc0@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'#\xed\xe6@\x00\xde}@o\xdd\x01A\x03\xbc+@5xG@\xb0i\xde@kvsA\xd5\x19Q@\xd0\x99)@\xe8\xde\x8d@&UE@(#\x02@\x99f\x8e@\x7f\xac*@\xaf`&@W\xed\x1e@\x95\xef>@/\xcdl@\xcf$\xc2?D\xaa\xc2@m\xee\xfd?\xd4x7@\xcd"b@\xc2\x89\xe8?\xedv\x85A x\x07@w\x99\xb9@\x1eg\xe6?\x18g6@\x04\x8aX@\xb4\xdb\xfd?\x84\xef\x0e@\xef\xcd\x0c@\x95W\x15@\xfe\xdd-@\xa3\x13\xd1?\xa5!\x88A)\xdf\xfd?ME$@\xbau\x17@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80@\x9a\x999@fff@\xcd\xccl@\xcd\xccL@\x9a\x999@ffF@ff\x86@\xcd\xccl@333@ffF@\x00\x00\x80@\x9a\x99\x89@\x00\x00\x80@\x9a\x99\x89@fff@333@\x9a\x999@\x00\x00\x80@ffF@fff@33S@\x00\x00@@\xcd\xccL@33s@ff\x86@\x9a\x99y@ffF@\x9a\x99Y@\xcd\xcc,@\xcd\xcc,@ffF@\xcd\xccl@\x00\x00@@\x00\x00@@\x00\x00`@\xcd\xcc,@33\x83@\x00\x00`@\x9a\x99\x89@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\xc0\x15s\x0e\xe0[\x1c\x0e\xe0\x85\x1a\x0e\xe0\x89\x1a\x0e\x00\x8b\x1a\x0e\x80\x80\x1a\x0e\x00\x88\x1a\x0e\x80q\xc9\x04\xa0\x89\x1a\x0e`\x8b\x1a\x0e\x00q\xc9\x04\xa0\x8a\x1a\x0e\x80p\xc9\x04\xc0p\xc9\x04\x80t\xc9\x04 s\xc9\x04`p\xc9\x04\x00]\x1c\x0e`]\x1c\x0e\x00\\\x1c\x0e`V\x1c\x0e\x80W\x1c\x0e\x80S\x1c\x0e\xa0U\x1c\x0e\xe0W\x1c\x0e p\xc9\x04\xe0U\x1c\x0e\x00[\x1c\x0e\xc0V\x1c\x0e\x80\xca\xcb\x04\xc0\x1bs\x0e\xc0\x18s\x0e\xa0\x1bs\x0e\x00\x1cs\x0e \x17s\x0e@\x18s\x0e\x80\x15s\x0e\xe0\x1as\x0e\x80\x17s\x0e \x10s\x0e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'T\xe3\xf5@\x0e-"@\xee|\xe7@\xa8\xc6[@\x87\x16a@\xbaI\xec@\xfc\xa99@\xa2EHAT\xe3=@\x87\x16\x89@\x87\x16A@\x96C\x13@\xc9vV@/\xdd<@T\xe3\x95@\xc9v\x06@\xcb\xa1\xb9@T\xe3=@b\x10P@b\x10\x00@\xe9&\xd1?u\x93\x08@\x98n\xee@\xdb\xf9\x1e@!\xb0\xa2@P\x8d\xd7?D\x8b\x0cAP\x8d\xd7?\x91\xed\xec?\x87\x16\x11@u\x93\x18@\xc9v\x16@\xbaI4@B`U@\xe9&A@\xa8\xc6\xbb?D\x8b\x90@\x87\x16\x81@P\x8dg@\xc9v\x06@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I234119504
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'P7\xa0\x0ex7\xa0\x0e\xa07\xa0\x0eP7\xa0\x0eP\x96\x89\x0e\xc87\xa0\x0e\x80\x96\x89\x0e\xb0\x96\x89\x0e\x80\x96\x89\x0e\xf07\xa0\x0e\xa07\xa0\x0e\x10\x97\x89\x0ex7\xa0\x0e\xc87\xa0\x0e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'H~\xff\x04h\x7f\xff\x04\x80y\xff\x04@q\xff\x04\xe0y\xff\x04\xb8w\xff\x04(t\xff\x04\x80\x1c\x19\x05\x98\x16\x19\x05\xd0\x11\x19\x05\xf0\x1b\x19\x05@\x1a\x19\x05(\x17\x19\x05\xe8\x1a\x19\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g744
sg83
g778
sg84
g749
sg85
g782
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g787
sg83
g788
sg84
g792
sg85
g793
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g798
sg83
g799
sg84
g803
sg85
g804
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g809
sg83
g810
sg84
g814
sg85
g815
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g787
sg83
g820
sg84
g792
sg85
g824
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g809
sg83
g829
sg84
g814
sg85
g833
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g838
sg83
g839
sg84
g843
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g767
sg83
g849
sg84
g772
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g838
sg83
g858
sg84
g843
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g756
sg83
g867
sg84
g761
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g798
sg83
g876
sg84
g803
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I234119504
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I234119504
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'p\xcf\xa1\x0e\xf05\xa2\x0e \xd0\x1c\x0e 6\xa2\x0e@7\xa2\x0e\xb0F\xa2\x0e\xa8\xcf\xa1\x0e \xd0\x1c\x0e\xd8F\xa2\x0eP6\xa2\x0ep\xcf\xa1\x0eP6\xa2\x0e \xd8\x1c\x0e\xd8F\xa2\x0ep\xcf\xa1\x0e\x00G\xa2\x0e \xd8\x1c\x0e\xb0F\xa2\x0e\xf0G\xa2\x0e \xd8\x1c\x0e\xa0\xdf\x1c\x0e\x806\xa2\x0e 6\xa2\x0e\x88F\xa2\x0e\xa8\xcf\xa1\x0e(G\xa2\x0e\xa0\xdf\x1c\x0e `\xa2\x0e\xa8\xcf\xa1\x0e \xd1\x1c\x0e\xb0F\xa2\x0e\xb8H\xa2\x0e\xa0\xdf\x1c\x0e\x806\xa2\x0e\xf05\xa2\x0e(G\xa2\x0e\xb0F\xa2\x0e `\xa2\x0eP6\xa2\x0e `\xa2\x0e 6\xa2\x0ep\xcf\xa1\x0eP6\xa2\x0e\x806\xa2\x0e\xb06\xa2\x0exG\xa2\x0e\xa0G\xa2\x0e\xe0H\xa2\x0e\xa0\xd1\x1c\x0e\xd8F\xa2\x0e \xd8\x1c\x0e(G\xa2\x0e\xa0\xdf\x1c\x0e\xe06\xa2\x0e\x107\xa2\x0e `\xa2\x0e\xd8F\xa2\x0eP6\xa2\x0e \xd0\x1c\x0exG\xa2\x0ep7\xa2\x0e \xd8\x1c\x0e 6\xa2\x0e\xb06\xa2\x0e\x00a\xa2\x0ep\xcf\xa1\x0e\xf05\xa2\x0e\x00G\xa2\x0e\x90`\xa2\x0exG\xa2\x0e\xa0\xd1\x1c\x0e\xd8F\xa2\x0e\xf05\xa2\x0ePG\xa2\x0e\xd8F\xa2\x0e\x88F\xa2\x0e \xd8\x1c\x0e\xa0G\xa2\x0eP6\xa2\x0e(G\xa2\x0e\xa0\xdf\x1c\x0e\xf0G\xa2\x0e\x88F\xa2\x0e \xd0\x1c\x0ep\xcf\xa1\x0e(G\xa2\x0e\xa0G\xa2\x0e\x90H\xa2\x0e\xb06\xa2\x0e\xa0\xd1\x1c\x0e\x806\xa2\x0e\x88F\xa2\x0e\x806\xa2\x0e@H\xa2\x0e\xe06\xa2\x0e\xa0G\xa2\x0e\x88F\xa2\x0e\xa07\xa2\x0e \xd0\x1c\x0e(G\xa2\x0e `\xa2\x0e\xb8H\xa2\x0ep\xcf\xa1\x0exG\xa2\x0e\xa0\xd1\x1c\x0e\xb06\xa2\x0e\xb8H\xa2\x0eP6\xa2\x0e `\xa2\x0e \xd0\x1c\x0e\xd07\xa2\x0e\xa07\xa2\x0e\x00G\xa2\x0e 6\xa2\x0e\x00G\xa2\x0e(G\xa2\x0e 6\xa2\x0e\xa8\xcf\xa1\x0e\xd8F\xa2\x0exG\xa2\x0e `\xa2\x0e\xb06\xa2\x0e\xb8H\xa2\x0e\xa8\xcf\xa1\x0e\xb06\xa2\x0e\xf05\xa2\x0e\x88F\xa2\x0e 6\xa2\x0exG\xa2\x0e\xb06\xa2\x0e@7\xa2\x0e\xd8F\xa2\x0e\x90`\xa2\x0e `\xa2\x0ehH\xa2\x0e \xd8\x1c\x0e \xd0\x1c\x0ePG\xa2\x0e\xf0G\xa2\x0e \xd8\x1c\x0e\x00G\xa2\x0eP6\xa2\x0e \xd8\x1c\x0e\x00G\xa2\x0e\xb06\xa2\x0ep\xcf\xa1\x0e\xb0F\xa2\x0e \xd0\x1c\x0e\xb8H\xa2\x0e\x00G\xa2\x0e\xa0G\xa2\x0ePG\xa2\x0e\x88F\xa2\x0e\xd07\xa2\x0e\xa0\xdf\x1c\x0e 6\xa2\x0e\xa0G\xa2\x0eX`\xa2\x0e\xa8\xcf\xa1\x0e\xa0\xdf\x1c\x0e\xa0\xd1\x1c\x0ePG\xa2\x0e\xa0\xdf\x1c\x0e\xb0F\xa2\x0e\x00a\xa2\x0e\xd8F\xa2\x0exG\xa2\x0e \xd8\x1c\x0e\xa0G\xa2\x0e\x806\xa2\x0eP6\xa2\x0e\x00a\xa2\x0e\xb0F\xa2\x0e\xa0G\xa2\x0e\xd8F\xa2\x0e\xf05\xa2\x0e\x90`\xa2\x0e 6\xa2\x0ePG\xa2\x0e\xa0G\xa2\x0e\xa07\xa2\x0e\xa0G\xa2\x0e\x88F\xa2\x0e\x00a\xa2\x0e\x00G\xa2\x0e \xd0\x1c\x0e\xf05\xa2\x0e\xb0F\xa2\x0e\xe0H\xa2\x0e\xa0\xdf\x1c\x0e\xa0\xd1\x1c\x0e\x00G\xa2\x0e `\xa2\x0e(G\xa2\x0e\x00G\xa2\x0e(G\xa2\x0e\xa8\xcf\xa1\x0exG\xa2\x0e\x806\xa2\x0e\xb0F\xa2\x0e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'\x00\xe5\x89\x0e\xa0\xea\x89\x0e@\xd0p\x0e\xc0\xf6q\x0e@\xdbp\x0e\x80\xd1p\x0e\x80\xea\x89\x0e\x00\xe8\x89\x0e\xe0\xe8\x89\x0e\x00\xea\x89\x0e`\xe9\x89\x0e\x00\xeb\x89\x0e\xe0\xe1\x89\x0e@\xea\x89\x0e`\xeb\x89\x0e\xa0\xe7\x89\x0e\x80\xeb\x89\x0e\xe0\xea\x89\x0e\xa0\xeb\x89\x0e\xc0\xeb\x89\x0e\xe0\xeb\x89\x0e\xe0\xe9\x89\x0e \xec\x89\x0e@\xec\x89\x0e`\xec\x89\x0e\x80\xec\x89\x0e\xc0\xea\x89\x0e\xc0\xec\x89\x0e`Er\x0e\xa0Or\x0e\x00Nr\x0e\xc0Or\x0e\xa0\x01t\x0e\x00\xacs\x0e\x00\xabs\x0e\xc0\xabs\x0e@\xaes\x0e@\xacs\x0e\xc0\xacs\x0e\x80\xacs\x0e@\xads\x0e\x00\xads\x0e`\xa7s\x0e\xa0\xa6s\x0e@\xabs\x0e\x00\xa6s\x0e@\xa6s\x0e`\xa5s\x0e@\xafs\x0e\x00\xaas\x0e\xc0\xaas\x0e\x80\xaes\x0e \xa7s\x0e\x80\xaas\x0e\xc0\xaes\x0e\x80\xa6s\x0e@\xa8s\x0e\x00\xa9s\x0e\xc0\xa7s\x0e\x80\xa8s\x0e@\xa9s\x0e\xc0\xads\x0e\xa0\xa0s\x0e\x00\xa8s\x0e\xc0\xa8s\x0e\x00\xaes\x0e@\xa0s\x0e\xc0\xa0s\x0e@\xaas\x0e\x80\xabs\x0e\x80\xads\x0e\xc0\xa9s\x0e\x00\xafs\x0e\x80\xa0s\x0e\xe0\xa0s\x0e`\xa0s\x0e\x00\xa1s\x0e \xa0s\x0e\xe0\xa6s\x0e\xe0Nr\x0e\x80\xa9s\x0e \x12s\x0e\xc0\x1es\x0e@\x1es\x0e \x1es\x0e\xa0\x12s\x0e\x00\x1fs\x0e \x1fs\x0e \x13s\x0e@\x1fs\x0e`\x1fs\x0e\x00\x11s\x0e \x11s\x0e\xe0\x11s\x0e\xe0\x1es\x0e\x00\x12s\x0e\xe0\x1bs\x0e@\x12s\x0e`\x1es\x0e`\x17s\x0e\x80\x1fs\x0e`\x12s\x0e\xe0\x1fs\x0e\x80\x11s\x0e\xc0\x12s\x0e\x00\x13s\x0e\xe0\x12s\x0e@\x11s\x0e\xa0\x13s\x0e@\x13s\x0e`\x10s\x0e\xa0\x1fs\x0e@\xdcp\x0e\x00\xdcp\x0e\xc0\x1fs\x0e\x80\x13s\x0e r\xc9\x04\xa0p\xc9\x04\x80\xd5p\x0e b\xca\x04 \x14s\x0e`\x13s\x0e\xe0\x13s\x0e\xc0\x11s\x0e\x00\x14s\x0e`\x11s\x0e\xa0\x11s\x0e\xa0\x1es\x0e`k\xca\x04\x80\x1es\x0e\xc0\x13s\x0e`Mr\x0e\xc0\xe9\x89\x0e`\xea\x89\x0e\xa0\xe9\x89\x0e`\xe6\x89\x0e`\xed\x89\x0e\xa0\xec\x89\x0e\xa0\xed\x89\x0e\x00\xe6\x89\x0e\x00\xee\x89\x0e\xc0\xed\x89\x0e \xeb\x89\x0e \xea\x89\x0e`\xee\x89\x0e@\xee\x89\x0e\xa0\xee\x89\x0e\x80\xee\x89\x0e\xe0\xee\x89\x0e\x00\xef\x89\x0e \xef\x89\x0e\xa0\xef\x89\x0e\xe0\xec\x89\x0e\x80\xe8\x89\x0e\xc0\xee\x89\x0e\xe0\xed\x89\x0e`\xef\x89\x0e\xe0\xef\x89\x0e \xee\x89\x0e\x80\xef\x89\x0e \xed\x89\x0e@\xeb\x89\x0e@\xed\x89\x0e\x80\xed\x89\x0e\x00\xec\x89\x0e\xc0\xef\x89\x0e\x80\x1cs\x0e@\xef\x89\x0e p\xd8\x0e@r\xd8\x0e\x80p\xd8\x0e\x80q\xd8\x0e q\xd8\x0e@p\xd8\x0e\xe0q\xd8\x0e`r\xd8\x0e\xc0q\xd8\x0e\xe0p\xd8\x0e\xa0r\xd8\x0e\x80r\xd8\x0e`p\xd8\x0e s\xd8\x0e@s\xd8\x0e`s\xd8\x0e@q\xd8\x0e\x00q\xd8\x0e\xc0s\xd8\x0e\xa0s\xd8\x0e\xc0p\xd8\x0e\xe0s\xd8\x0e@t\xd8\x0e t\xd8\x0e\x80t\xd8\x0e`t\xd8\x0e@)\xe7\r\xe0/\xe7\r\xe0)\xe7\r\xc0(\xe7\r -\xe7\r\x00)\xe7\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\xac\x0eQ@7\x10\tA\x9e\xc9\xac?/e\xa6?\xf3^\x06@\x9b\xfe\x97@\xf0\x97\x81@\x90T\xb5?\x05d\x16@J\xdd-@:\xa7\xaa?c\x85\xe8?/\xcd\xcc?\x17\x97\t@\xc8\x97\xd9?\xcc\xf5\xbf?Z\x0eq@2\x121@\x9eT\xb5?m\x96\xb9?  R@\xabtG@\xf5\xcbL@=}\xa8?\xa6cf@\x8c\x0f\x91@\xcd \xa2@\x93\x0b\xf1?(B\xe4?\xd7s\x97?\x9e\x97\t@\xa4,\xe2?rRe@]s\xd7?\xbc \x0eA\x7f\x99\t@\xc1A\xc4?\xb6\x92\x99?P\x84\xa8?9\xc9\x8c?\x83\xcbL@I\x0e\xd1?f\x95\x99?\xa9-\xb3?i\xcd\xac?\xe1d\xde@\x0b.\xd3?2\xdb\x1d@\xe5?\xc4?\xc0\x1f\x12@\xb5\x1e\x91?[\xcb\x0c@\x80\xa8\x1a@\x95\xbc{?:\xda\xbd?\xd5\xa6\x8a?\xd9\x0f\rAGc\x86?\xd1\x11\xb1?\r\x9fI@MR\x95?\xc8\r\x91?\x95e\xe6?\x10\xef\xae?\xe1P\x84?0sw?#B\x04@B\r\xb1?\xc2AD@\xcc\x98\tAg\x1e\x82?\xa5\x0f)A3\xa7\xaa?\xfc\xb6\xaa?\xb9Q\xd5?\x89\xa0Y?\x1b\xf9\x7f?I\x11\xb1?\xddd\x86?\xa3t\xb7?\x01\x85\xa8?\x90\x85\xa8?E\xb4\x9b?\xde\x01\xa0?7\x00\x80?I\xd7]?)\xf9\x7f?Bfw?.\xf9\x7f?\xf3\xbb{?\xa0\xe5n?\x03\x16\xa2?\xc1\xcb\xcc?\xb3\xaa\xaa??\xfa\x7f?\xdd\xb9\x9b?i\xef\x7f?\x8d\xc9\xcc?\xe1\xc8\x9b?\x18>D?h\x84\x88?Q\xc9\x8c?\xca\xd5]?\xf0e&@<1\x93?\xb3\x1e\x82?O\xa6\xaa?\xde\xb2{?W\x0e\x91?I+s?\x8d\x1f\x82?\x00R\x95?\xf3\xd9\x9d?\x15"\xa2?\xc4w\x97?\x88w\x97?p\x1d\xc2?|T\xd5?\x18\xcc\x1c@E\xca<@\x10?\xe4?U\xee\x8e?\x8b\x90\xd9?\xc3\x11\xb1?\xb8pw?\x90S%@\xda\xc0\xac?\x94s\xd7?\xe6\x0f\x11@\xf1\x1e\x82?\x1f\xb0\x9b?\x13u\xd7?%\xbb\xdb?q\xa5\x8a?\x18\xb1{?y\xb8\x9b?\x8ad\x86?\x1b\xa8\xca?8f\xa6?\xcb\xe5n?0\x1e\xa2?\xbc\xb5\xbb?!\xca\x8c? \x11\x91?\xfa\xefn?\'\xfa\x7f?kc\xc6?\xfeS\xb5?\x86\x00\xe0?\x10\x0e\x91?\x0b\xb8\xbb?\x8eT%@N\'\x93?\xe8\xe0]?\x80\xaa\n@[\xa8\x8a?\xda\xfb\xbf?@xw?E\xcd\xac?pa\xa6?\x9bt\x97?is\xb7?\xd4\xeb\xee?x\xaaj?\x0e\xean?,\xa5\xaa?Ftw@.\x85\x88?*\xee\x8e?1\xda\xbd?\x9a\xdb\x9d?V\x1bb?\xbdP\x95?\xd8\x88\x88?\x8a\x0e\xd1?Q"\x82?m\xb9\xdb?("\x82?\\g\x86?\x88xw?\xa0>\x84?)\x91Y?k\x9e\x8a?\xd4\xd7]?\xbbT\x95?Vqw?\x1d\xaa\x8a?\xc3a\x86?\x8cy\xb7?&v\x97?y\x95Y?\xed\xe7n?\x01\xa4\xaa?\x04w7@-\x99Y?\xbd\xe9n?\xa6\x0f\xb1?\xab\xfd?@Y\x89\x88?C\xa8j?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'\x18\x12\x19\x05\xa0\x14\x19\x05\xf8\x96\xfe\x04\x10\x9a\xfe\x04X\x91\xfe\x04\x00\x9e\xfe\x04\xc0\x95\xfe\x04\xd8\x92\xfe\x04\x98\x9c\xfe\x04P\x99\xfe\x04 \x90\xfe\x04@\x9a\xfe\x04\xb0\x9c\xfe\x04h\x90\xfe\x04P\x90\xfe\x048\x93\xfe\x048\x96\xfe\x04\x98\x93\xfe\x04p\x9d\xfe\x04\x80\x93\xfe\x04\xe8\x9d\xfe\x04 \x9f\xfe\x04\xd0\x9d\xfe\x04\xb0\x96\xfe\x04x\x9b\xfe\x04h\x96\xfe\x04X\x9d\xfe\x04h\x99\xfe\x04pZ`\x02X\x9a\xfe\x04h\x9f\xfe\x04\x10\x97\xfe\x04\xa8\x98\xfe\x04\xd8\x95\xfe\x04\xb8\x9a\xfe\x04\x90\x95\xfe\x04\x00\x98\xfe\x04\xa8\x95\xfe\x04\x18\x9b\xfe\x04\x90\x9b\xfe\x04\xd0\x9a\xfe\x04\xa0\x9a\xfe\x04\xc0\x92\xfe\x04\xc0\x9e\xfe\x04\xf0\x98\xfe\x04\x80\x9c\xfe\x04P\x9f\xfe\x04\xe8\x9a\xfe\x04 \x96\xfe\x04\xb8\x94\xfe\x04 \x99\xfe\x04x\x92\xfe\x04\xc8\x96\xfe\x04\xb8\x9d\xfe\x04\xb0\x9f\xfe\x04@\x9d\xfe\x04\x00\x92\xfe\x04\xa0\x94\xfe\x04\xb0\x99\xfe\x04\x98\x9f\xfe\x04\x10\x9d\xfe\x04\xf8\x93\xfe\x04h\x9c\xfe\x04\x10\x91\xfe\x04p\x9a\xfe\x04(\x94\xfe\x048\x9f\xfe\x04\x18\x9e\xfe\x040\x9e\xfe\x04`\x95\xfe\x040\x9b\xfe\x04\x90\x92\xfe\x04`\x9e\xfe\x04\x90\x9e\xfe\x04\x88\x9a\xfe\x048\x99\xfe\x04\xf0\x9e\xfe\x04\xc8\x9c\xfe\x04@\x97\xfe\x04\x18\x92\xfe\x04X\x94\xfe\x04\xe0\x9c\xfe\x04\x80\x99\xfe\x04\xa0\x97\xfe\x04\x80\x9f\xfe\x040\x98\xfe\x04`\x9b\xfe\x04X\x97\xfe\x04\xc8\x9f\xfe\x048\x90\xfe\x04\xe0\x96\xfe\x04\xa0\x9d\xfe\x04\x00\x9b\xfe\x04\x08\x9c\xfe\x04\xe0\x9f\xfe\x04\xe8\x94\xfe\x04p\x94\xfe\x04\xd8\x9e\xfe\x04\x08\x9f\xfe\x04\xe0\x93\xfe\x04\xb8\x97\xfe\x04(\x9d\xfe\x04\x00\x95\xfe\x04@\x94\xfe\x04\xa0\x91\xfe\x04H\x9e\xfe\x04X\xf7q\x03 \xfcq\x03\xb8]\xff\x04\xa8[\xff\x04H^\xff\x04p]\xff\x04XQ\xff\x04\x80Y\xff\x04\x00[\xff\x04xR\xff\x04\xb0_\xff\x04PP\xff\x04\xd0Q\xff\x04\xd0T\xff\x04\x88]\xff\x04 p\xff\x04\xb8z\xff\x04\xd0w\xff\x04\xd8u\xff\x04\x90x\xff\x04Xt\xff\x04Pp\xff\x048v\xff\x04\x90{\xff\x04\x00x\xff\x04\x88}\xff\x04\x08v\xff\x04@t\xff\x04\xb0y\xff\x04\xc8s\xff\x04\x90r\xff\x04\xa0q\xff\x04\x18x\xff\x04\x90\x1b\xfb\x04p\x14\xfb\x04\xa8\x1b\xfb\x04(\x91\xfe\x04p\x97\xfe\x04 \x9c\xfe\x04 \x93\xfe\x04\xc8\x93\xfe\x04\xd0\x94\xfe\x04x\x95\xfe\x04h\x93\xfe\x04\x08\x96\xfe\x04\xb0\x90\xfe\x04\xd0\x91\xfe\x04P\x93\xfe\x04\xe0\x90\xfe\x04\xc8\x90\xfe\x04x\x98\xfe\x04\x88\x91\xfe\x040\x92\xfe\x04p\x91\xfe\x04H\x98\xfe\x04\x88\x94\xfe\x04\xd8\x9b\xfe\x04\x98\x90\xfe\x04\x90\x98\xfe\x04`\x92\xfe\x04\x18\x95\xfe\x04\xd0\x97\xfe\x04H\x95\xfe\x04\x18\x98\xfe\x04P\x96\xfe\x04\x08\x93\xfe\x04\x80\x90\xfe\x04@\x91\xfe\x04\x98\x96\xfe\x04H\x92\xfe\x04\xf8\x99\xfe\x04\xf0\x92\xfe\x048\x9c\xfe\x04(\x97\xfe\x04\xd8\x98\xfe\x04\xa8\x9b\xfe\x04\xb8\x91\xfe\x04\xc0\x98\xfe\x04\xf0\x9b\xfe\x04\x80\x96\xfe\x04\xa8\x9e\xfe\x04\x08\x99\xfe\x04\xe8\x97\xfe\x040\x95\xfe\x04\xc8\x99\xfe\x04\xb0\x93\xfe\x04\xe8\x91\xfe\x04\xc0\x9b\xfe\x04\xd8x\xff\x04Hu\xff\x04@w\xff\x04\xc0u\xff\x04(q\xff\x04\xf8p\xff\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g977
sg895
g967
sg909
g971
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g937
sg895
g1018
sg909
g944
sg904
g1025
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1037
sg895
g1033
sg909
g1044
sg904
g1041
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1054
sg895
g1050
sg909
g1061
sg904
g1058
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g900
sg895
g1067
sg909
g910
sg904
g1074
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1054
sg895
g1082
sg909
g1061
sg904
g1089
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g1101
sg895
g1097
sg909
g1108
sg904
g1105
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1037
sg895
g1033
sg909
g1044
sg904
g1041
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g900
sg895
g1067
sg909
g910
sg904
g1074
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1144
sg895
g1140
sg909
g1151
sg904
g1148
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g1101
sg895
g1097
sg909
g1108
sg904
g1105
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g988
sg895
g1170
sg909
g995
sg904
g1177
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g920
sg895
g1185
sg909
g927
sg904
g1192
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1101
sg895
g1097
sg909
g1108
sg904
g1105
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1217
sg895
g1213
sg909
g1224
sg904
g1221
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1234
sg895
g1230
sg909
g1241
sg904
g1238
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g954
sg895
g1247
sg909
g961
sg904
g1254
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g977
sg895
g967
sg909
g971
sg904
g975
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1005
sg895
g1275
sg909
g1012
sg904
g1282
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1294
sg895
g1290
sg909
g1301
sg904
g1298
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1217
sg895
g1307
sg909
g1224
sg904
g1314
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1326
sg895
g1322
sg909
g1333
sg904
g1330
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1388
sg895
g1378
sg909
g1382
sg904
g1386
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1217
sg895
g1213
sg909
g1224
sg904
g1221
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1234
sg895
g1408
sg909
g1241
sg904
g1415
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g920
sg895
g1185
sg909
g927
sg904
g1192
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1294
sg895
g1436
sg909
g1301
sg904
g1443
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g988
sg895
g1170
sg909
g995
sg904
g1177
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1326
sg895
g1322
sg909
g1333
sg904
g1330
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g1054
sg895
g1082
sg909
g1061
sg904
g1089
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1326
sg895
g1322
sg909
g1333
sg904
g1330
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g900
sg895
g1067
sg909
g910
sg904
g1074
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1054
sg895
g1082
sg909
g1061
sg904
g1089
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g1234
sg895
g1408
sg909
g1241
sg904
g1415
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1559
sg895
g1555
sg909
g1566
sg904
g1563
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1576
sg895
g1572
sg909
g1583
sg904
g1580
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g1593
sg895
g1589
sg909
g1600
sg904
g1597
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1576
sg895
g1572
sg909
g1583
sg904
g1580
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1623
sg895
g1619
sg909
g1630
sg904
g1627
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1037
sg895
g1033
sg909
g1044
sg904
g1041
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g1101
sg895
g1649
sg909
g1108
sg904
g1656
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1294
sg895
g1290
sg909
g1301
sg904
g1298
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g1217
sg895
g1213
sg909
g1224
sg904
g1221
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g900
sg895
g1067
sg909
g910
sg904
g1074
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g954
sg895
g1247
sg909
g961
sg904
g1254
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1326
sg895
g1322
sg909
g1333
sg904
g1330
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g1037
sg895
g1033
sg909
g1044
sg904
g1041
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g1054
sg895
g1050
sg909
g1061
sg904
g1058
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g1576
sg895
g1768
sg909
g1583
sg904
g1775
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1054
sg895
g1050
sg909
g1061
sg904
g1058
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1101
sg895
g1649
sg909
g1108
sg904
g1656
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g954
sg895
g1247
sg909
g961
sg904
g1254
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g1559
sg895
g1822
sg909
g1566
sg904
g1829
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1623
sg895
g1837
sg909
g1630
sg904
g1844
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g920
sg895
g1185
sg909
g927
sg904
g1192
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1144
sg895
g1140
sg909
g1151
sg904
g1148
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g1005
sg895
g1275
sg909
g1012
sg904
g1282
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1576
sg895
g1768
sg909
g1583
sg904
g1775
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1623
sg895
g1837
sg909
g1630
sg904
g1844
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1037
sg895
g1033
sg909
g1044
sg904
g1041
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1388
sg895
g1378
sg909
g1382
sg904
g1386
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1037
sg895
g1969
sg909
g1044
sg904
g1976
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g977
sg895
g967
sg909
g971
sg904
g975
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g1101
sg895
g1649
sg909
g1108
sg904
g1656
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1593
sg895
g1589
sg909
g1600
sg904
g1597
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g1054
sg895
g1082
sg909
g1061
sg904
g1089
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1294
sg895
g1436
sg909
g1301
sg904
g1443
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g1217
sg895
g1213
sg909
g1224
sg904
g1221
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g977
sg895
g2075
sg909
g971
sg904
g2082
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g937
sg895
g1018
sg909
g944
sg904
g1025
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1294
sg895
g1436
sg909
g1301
sg904
g1443
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1593
sg895
g1589
sg909
g1600
sg904
g1597
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1326
sg895
g2142
sg909
g1333
sg904
g2149
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1559
sg895
g1555
sg909
g1566
sg904
g1563
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g1623
sg895
g1837
sg909
g1630
sg904
g1844
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1234
sg895
g1408
sg909
g1241
sg904
g1415
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g977
sg895
g2075
sg909
g971
sg904
g2082
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g1234
sg895
g1408
sg909
g1241
sg904
g1415
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g1217
sg895
g1307
sg909
g1224
sg904
g1314
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1593
sg895
g2248
sg909
g1600
sg904
g2255
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g977
sg895
g967
sg909
g971
sg904
g975
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1234
sg895
g1230
sg909
g1241
sg904
g1238
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1294
sg895
g1290
sg909
g1301
sg904
g1298
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g1326
sg895
g2142
sg909
g1333
sg904
g2149
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g1388
sg895
g2328
sg909
g1382
sg904
g2335
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g900
sg895
g1067
sg909
g910
sg904
g1074
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1576
sg895
g1768
sg909
g1583
sg904
g1775
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g1623
sg895
g1837
sg909
g1630
sg904
g1844
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g1559
sg895
g1822
sg909
g1566
sg904
g1829
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1388
sg895
g2328
sg909
g1382
sg904
g2335
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1054
sg895
g1050
sg909
g1061
sg904
g1058
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1326
sg895
g1322
sg909
g1333
sg904
g1330
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g937
sg895
g1018
sg909
g944
sg904
g1025
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1559
sg895
g1555
sg909
g1566
sg904
g1563
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g1234
sg895
g1230
sg909
g1241
sg904
g1238
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1144
sg895
g2473
sg909
g1151
sg904
g2480
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g1144
sg895
g2473
sg909
g1151
sg904
g2480
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g1294
sg895
g1436
sg909
g1301
sg904
g1443
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g954
sg895
g1247
sg909
g961
sg904
g1254
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1037
sg895
g1969
sg909
g1044
sg904
g1976
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1576
sg895
g1572
sg909
g1583
sg904
g1580
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g1326
sg895
g2142
sg909
g1333
sg904
g2149
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1559
sg895
g1822
sg909
g1566
sg904
g1829
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1388
sg895
g2328
sg909
g1382
sg904
g2335
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1559
sg895
g1555
sg909
g1566
sg904
g1563
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g977
sg895
g2075
sg909
g971
sg904
g2082
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g1576
sg895
g1768
sg909
g1583
sg904
g1775
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1559
sg895
g1555
sg909
g1566
sg904
g1563
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g977
sg895
g967
sg909
g971
sg904
g975
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1037
sg895
g1969
sg909
g1044
sg904
g1976
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1005
sg895
g1275
sg909
g1012
sg904
g1282
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1326
sg895
g2142
sg909
g1333
sg904
g2149
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1294
sg895
g1290
sg909
g1301
sg904
g1298
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1101
sg895
g1097
sg909
g1108
sg904
g1105
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g937
sg895
g1018
sg909
g944
sg904
g1025
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g1388
sg895
g2328
sg909
g1382
sg904
g2335
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g920
sg895
g1185
sg909
g927
sg904
g1192
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1101
sg895
g1649
sg909
g1108
sg904
g1656
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g1144
sg895
g2473
sg909
g1151
sg904
g2480
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1054
sg895
g1082
sg909
g1061
sg904
g1089
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1101
sg895
g1097
sg909
g1108
sg904
g1105
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1144
sg895
g2473
sg909
g1151
sg904
g2480
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g1559
sg895
g1822
sg909
g1566
sg904
g1829
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g988
sg895
g1170
sg909
g995
sg904
g1177
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g937
sg895
g1018
sg909
g944
sg904
g1025
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1388
sg895
g1378
sg909
g1382
sg904
g1386
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g1144
sg895
g1140
sg909
g1151
sg904
g1148
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g1593
sg895
g2248
sg909
g1600
sg904
g2255
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1388
sg895
g1378
sg909
g1382
sg904
g1386
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g977
sg895
g2075
sg909
g971
sg904
g2082
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g1559
sg895
g1822
sg909
g1566
sg904
g1829
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1217
sg895
g1307
sg909
g1224
sg904
g1314
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g954
sg895
g1247
sg909
g961
sg904
g1254
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1593
sg895
g2248
sg909
g1600
sg904
g2255
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1005
sg895
g1275
sg909
g1012
sg904
g1282
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g1217
sg895
g1213
sg909
g1224
sg904
g1221
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1623
sg895
g1619
sg909
g1630
sg904
g1627
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1388
sg895
g1378
sg909
g1382
sg904
g1386
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1217
sg895
g1307
sg909
g1224
sg904
g1314
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g988
sg895
g1170
sg909
g995
sg904
g1177
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1623
sg895
g1619
sg909
g1630
sg904
g1627
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g1037
sg895
g1969
sg909
g1044
sg904
g1976
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1576
sg895
g1768
sg909
g1583
sg904
g1775
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g1101
sg895
g1649
sg909
g1108
sg904
g1656
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1593
sg895
g1589
sg909
g1600
sg904
g1597
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1234
sg895
g1230
sg909
g1241
sg904
g1238
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1054
sg895
g1050
sg909
g1061
sg904
g1058
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1623
sg895
g1619
sg909
g1630
sg904
g1627
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g988
sg895
g1170
sg909
g995
sg904
g1177
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1593
sg895
g1589
sg909
g1600
sg904
g1597
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g1037
sg895
g1969
sg909
g1044
sg904
g1976
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g1005
sg895
g1275
sg909
g1012
sg904
g1282
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1388
sg895
g2328
sg909
g1382
sg904
g2335
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1593
sg895
g2248
sg909
g1600
sg904
g2255
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1234
sg895
g1230
sg909
g1241
sg904
g1238
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1593
sg895
g2248
sg909
g1600
sg904
g2255
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g977
sg895
g2075
sg909
g971
sg904
g2082
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1623
sg895
g1619
sg909
g1630
sg904
g1627
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g1144
sg895
g2473
sg909
g1151
sg904
g2480
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g920
sg895
g1185
sg909
g927
sg904
g1192
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1576
sg895
g1572
sg909
g1583
sg904
g1580
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1217
sg895
g1307
sg909
g1224
sg904
g1314
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1623
sg895
g1837
sg909
g1630
sg904
g1844
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1144
sg895
g1140
sg909
g1151
sg904
g1148
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1326
sg895
g2142
sg909
g1333
sg904
g2149
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g1294
sg895
g1290
sg909
g1301
sg904
g1298
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g1144
sg895
g1140
sg909
g1151
sg904
g1148
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g1294
sg895
g1436
sg909
g1301
sg904
g1443
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1576
sg895
g1572
sg909
g1583
sg904
g1580
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g1234
sg895
g1408
sg909
g1241
sg904
g1415
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I234119504
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'@\x10s\x0e\x80>\x1b\x0e\x00\x15s\x0e\xc0\x16s\x0e\xd0>\x1b\x0e\xb8=\x1b\x0e\x00\x15s\x0e@\x10s\x0e0\x95\x1b\x0e@\x10s\x0e\x10\x94\x1b\x0e\xa8>\x1b\x0e \xfe\x1b\x0eX\xfe\x1b\x0e\xe80\x1b\x0e\xb8=\x1b\x0e8\xc1\xc9\x04\xe03\x1b\x0e\xe80\x1b\x0e \xfe\x1b\x0e@\x94\x1b\x0e\xa84\x1b\x0e\x00\x15s\x0e@\x94\x1b\x0e\xe80\x1b\x0e\x084\x1b\x0e\xa84\x1b\x0ep\x94\x1b\x0e\x80>\x1b\x0e\xa8>\x1b\x0e\xd0>\x1b\x0e@\x10s\x0e\xd04\x1b\x0e\x80>\x1b\x0e\xa0\x94\x1b\x0e \xfe\x1b\x0ep\x94\x1b\x0eX\xfe\x1b\x0e(7\x1b\x0e\xb8=\x1b\x0ep\xca\xc9\x04@\x94\x1b\x0e\xc0\x16s\x0eX\xfe\x1b\x0e\x10\x94\x1b\x0eX\xfe\x1b\x0ep\x94\x1b\x0e\xa8>\x1b\x0e\xd0\x94\x1b\x0e\x00\x95\x1b\x0e\xc0\xca\xc9\x04\xa84\x1b\x0e\x10\x94\x1b\x0e8\xff\x1b\x0e@\x19s\x0e \xfe\x1b\x0e\xc0\x16s\x0e\xf0\x95\x1b\x0e\x00\x15s\x0e \xfe\x1b\x0e\xe03\x1b\x0e@\x19s\x0e\x084\x1b\x0e\xc0\xca\xc9\x04@\x10s\x0e\xc0\x16s\x0e\xe80\x1b\x0e\x90\xfe\x1b\x0e\xd0>\x1b\x0e\x084\x1b\x0e \xfe\x1b\x0e\xc0\x95\x1b\x0e\x90\xfe\x1b\x0e(7\x1b\x0e\xd0\x94\x1b\x0e\xd0>\x1b\x0ep\x94\x1b\x0e@\x94\x1b\x0e\x10\x94\x1b\x0e\xc0\x16s\x0e\xa8>\x1b\x0e\x084\x1b\x0e \x16s\x0e@\x19s\x0e\xa8>\x1b\x0e\xa0\x94\x1b\x0e(7\x1b\x0e\x00\x15s\x0e@\x19s\x0e\x00\x15s\x0e\xb8=\x1b\x0e\xc0\x16s\x0e(7\x1b\x0e\xe80\x1b\x0e(7\x1b\x0e@\x19s\x0e\x084\x1b\x0e \xfe\x1b\x0ep\x94\x1b\x0e\xa8>\x1b\x0e\xc0\x16s\x0e\xa8>\x1b\x0e\xd0>\x1b\x0e\x80>\x1b\x0e(7\x1b\x0e\x10\x94\x1b\x0e\xc0\x17s\x0e\xb8=\x1b\x0e \x96\x1b\x0e(7\x1b\x0e\x084\x1b\x0e\x10\x94\x1b\x0e\x00\x95\x1b\x0e\xc8\xfe\x1b\x0eX\xfe\x1b\x0e\x80>\x1b\x0e\xc0\x16s\x0e\x90\xfe\x1b\x0e\xa8>\x1b\x0e@\x10s\x0e\xd0\x94\x1b\x0e\x90\xfe\x1b\x0ep\x94\x1b\x0e\x10\x94\x1b\x0e0\x95\x1b\x0e\xe80\x1b\x0e\x00\x95\x1b\x0e@\x19s\x0e\xa0\x94\x1b\x0e\xb8=\x1b\x0e\x90\x95\x1b\x0e \xfe\x1b\x0e \x16s\x0e\xe80\x1b\x0e \xfe\x1b\x0e\x00\x95\x1b\x0e\xa84\x1b\x0e\xb8=\x1b\x0e\xa84\x1b\x0e\xd0\x94\x1b\x0e\xc0\x95\x1b\x0eX\xfe\x1b\x0e\xa84\x1b\x0e@\x19s\x0e@\x94\x1b\x0eX\xfe\x1b\x0ep\x94\x1b\x0e\xa8>\x1b\x0e\x80>\x1b\x0e\xe80\x1b\x0e \xfe\x1b\x0e\x00\x15s\x0e@\x19s\x0e\xc0\x95\x1b\x0e\xd0>\x1b\x0e\x90\xfe\x1b\x0e\xd04\x1b\x0e\xa0\x94\x1b\x0e@\x19s\x0e(7\x1b\x0e\xa84\x1b\x0ep\xca\xc9\x04@\x10s\x0e\xa8>\x1b\x0e\xc8\xfe\x1b\x0e\xa0\x94\x1b\x0e\x90\xfe\x1b\x0e\xc0\x17s\x0eX\xfe\x1b\x0e\xd0\x94\x1b\x0eX\xfe\x1b\x0e\xa84\x1b\x0e\x084\x1b\x0e\xd0\x94\x1b\x0e@\x10s\x0e@\x94\x1b\x0e\xd0\x94\x1b\x0e\xd0>\x1b\x0e(7\x1b\x0e \x96\x1b\x0e\x10\x94\x1b\x0e\x084\x1b\x0e\xa0\x94\x1b\x0e\xc0\x16s\x0e\x00\x15s\x0e\x90\x95\x1b\x0e\xe03\x1b\x0e\x10\x94\x1b\x0e\xf0\x95\x1b\x0e\x90\xfe\x1b\x0e\x10\x94\x1b\x0e\xd0>\x1b\x0e@\x94\x1b\x0e\xd0\x94\x1b\x0e(7\x1b\x0e\xa0\x94\x1b\x0e\x90\xfe\x1b\x0e\xc0\x16s\x0e\xa0\x94\x1b\x0e@\x94\x1b\x0e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S'\xa0u\xd8\x0e\xa0w\xd8\x0e\x80v\xd8\x0e\x00x\xd8\x0e\xc0v\xd8\x0e`v\xd8\x0e\x80u\xd8\x0e\xc0t\xd8\x0e\xc0w\xd8\x0e\xe0v\xd8\x0e w\xd8\x0e y\xd8\x0e`x\xd8\x0e\xc0x\xd8\x0e\x80x\xd8\x0e\xa0v\xd8\x0e v\xd8\x0e\x00v\xd8\x0e\x80y\xd8\x0e\x00y\xd8\x0e\xe0y\xd8\x0e\x00w\xd8\x0e\xe0x\xd8\x0e`w\xd8\x0e\x00z\xd8\x0e@v\xd8\x0e\x80w\xd8\x0e z\xd8\x0e@y\xd8\x0e\xe0z\xd8\x0e\xa0y\xd8\x0e\xe0u\xd8\x0e\xc0y\xd8\x0e\xc0u\xd8\x0e@x\xd8\x0e\xe0w\xd8\x0e\xa0x\xd8\x0e@w\xd8\x0e\xa0{\xd8\x0e`{\xd8\x0e\x80{\xd8\x0e`z\xd8\x0e\xa0z\xd8\x0e\xc0z\xd8\x0e\x00|\xd8\x0e@{\xd8\x0e\xa0|\xd8\x0e`y\xd8\x0e@|\xd8\x0e\x00{\xd8\x0e x\xd8\x0e\xe0{\xd8\x0e`}\xd8\x0e\x80z\xd8\x0e@}\xd8\x0e {\xd8\x0e\xe0}\xd8\x0e ~\xd8\x0e\xa0}\xd8\x0e`|\xd8\x0e\xc0}\xd8\x0e\x00~\xd8\x0e\x00}\xd8\x0e\xe0~\xd8\x0e\x80|\xd8\x0e`~\xd8\x0e\xc0~\xd8\x0e\xa0\x7f\xd8\x0e\xe0\x7f\xd8\x0e\xa0~\xd8\x0e\x00\x7f\xd8\x0e\xa0)\xe7\r }\xd8\x0e@\x7f\xd8\x0e |\xd8\x0e\x80~\xd8\x0e\xc0{\xd8\x0e\xc0|\xd8\x0e \x7f\xd8\x0e`\x7f\xd8\x0e\xe0|\xd8\x0e\xc0-\xe7\r\xc0\x7f\xd8\x0e\x80}\xd8\x0e@\xd2\xe7\x1f \xd2\xe7\x1f\xc0\xd0\xe7\x1f@\xd1\xe7\x1f\x00\xd2\xe7\x1f\xe0\xd0\xe7\x1f`\xd0\xe7\x1f\xc0\xd2\xe7\x1f \xd0\xe7\x1f\x80\xd2\xe7\x1f\xa0\xd2\xe7\x1f\xe0\xd2\xe7\x1f`\xd2\xe7\x1f \xd1\xe7\x1f@\xd3\xe7\x1f`\xd3\xe7\x1f\x80\xd3\xe7\x1f\x80\xd1\xe7\x1f\x00\xd1\xe7\x1f\xa0\xd3\xe7\x1f\x00\xd4\xe7\x1f\xe0\xd3\xe7\x1f\x80\xd0\xe7\x1f \xd4\xe7\x1f@\xd4\xe7\x1f`\xd4\xe7\x1f\x80\xd4\xe7\x1f\xe0\xd4\xe7\x1f\x00\xd5\xe7\x1f\xc0\xd3\xe7\x1f\x00\xd3\xe7\x1f \xd5\xe7\x1f@\xd5\xe7\x1f\xa0\xd5\xe7\x1f\x80\xd5\xe7\x1f\xe0\xd1\xe7\x1f\x00\xd6\xe7\x1f\xe0\xd5\xe7\x1f\xc0\xd1\xe7\x1f \xd6\xe7\x1f@\xd6\xe7\x1f`\xd6\xe7\x1f\x80\xd6\xe7\x1f\xe0\xd6\xe7\x1f\x00\xd7\xe7\x1f \xd7\xe7\x1f\xa0\xd4\xe7\x1f\xa0\xd7\xe7\x1f\xc0\xd4\xe7\x1f`\xd7\xe7\x1f\x80\xd7\xe7\x1f`\xd1\xe7\x1f\xc0\xd7\xe7\x1f \xd8\xe7\x1f\x00\xd8\xe7\x1f@\xd7\xe7\x1f\x80\xd8\xe7\x1f`\xd8\xe7\x1f`\xd5\xe7\x1f\x00(\xe7\r\xc0\xd6\xe7\x1f\xe0\xd8\xe7\x1f\x00\xd9\xe7\x1f\xc0\xd5\xe7\x1f\xa0\xd9\xe7\x1f \xd9\xe7\x1f@\xd0\xe7\x1f \xd3\xe7\x1f\xe0\xd7\xe7\x1f\xa0\xd1\xe7\x1f\xa0\xd0\xe7\x1f\xe0\xd9\xe7\x1f\x00\xdb\xe7\x1f\x80\xd9\xe7\x1f@\xd8\xe7\x1f \xda\xe7\x1f\xc0\xd8\xe7\x1f@\xdb\xe7\x1f\xa0\xd8\xe7\x1f\xa0\xda\xe7\x1f\xc0\xda\xe7\x1f\xa0\xd6\xe7\x1f\xa0\xdb\xe7\x1f\xe0\xdb\xe7\x1f`\xdb\xe7\x1f\x00\xda\xe7\x1f\xc0\xdc\xe7\x1f \xdb\xe7\x1f\x80\xdc\xe7\x1f@\xd9\xe7\x1f`\xdc\xe7\x1f`\xda\xe7\x1f@\xda\xe7\x1f\xc0\xd9\xe7\x1f\xc0\xdb\xe7\x1f`\xd9\xe7\x1f@\xdd\xe7\x1f \xdd\xe7\x1f\xe0\xdc\xe7\x1f\x80\xda\xe7\x1f\x80\xdb\xe7\x1f`\xdd\xe7\x1f\xe0\xdd\xe7\x1f \xdc\xe7\x1f\x00\xdd\xe7\x1f\x00\xdf\xe7\x1f\x00\xde\xe7\x1f@\xde\xe7\x1f\x80\xdd\xe7\x1f\x80\xdf\xe7\x1f`\xdf\xe7\x1f\xa0\xdc\xe7\x1f\x80\xde\xe7\x1f\xc0\xdf\xe7\x1f@\xdc\xe7\x1f\xa0\xde\xe7\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'E?\xe4?\xd86\x84?Ai\x86?nqw?-\xe7\x8e?\xa8\x12Q?\xb1\x1fb?m/\x93?\xe8\xa7\xca?\xcdc\x86?\x11\xc2j?\x14\xa4*?\xbe\xd8]?b\xc7\xac?\x8dx\xb7?x\xdf]?5qw?\xf1 \x82?(\xd5]?\xa5\xe9n?|\x94Y?\x14\xba\xbb?\x9c\xf9\x7f?Alw?u\x1d\xa2?\x8au\x17@\x9a\x87\x88?kbf?;\xcf\xbd?\xcc\x84\xa8?\x13\x94Y?\xe8\xff\x7f?,\x85\x88?\xe6;\x84?\xab\xf9\x7f?\xd3\x1bb?j5s?\x1f\xeb\x8e?Y0\x93?\x99\xean?\xb8\r\x11@D\x7ff?\x85\x82H?\x91\x0f\x91?S\r\x91?\x8f\xeb\x8e?\xd8\xbc;?\x02rw?>A\x84?k\x0bb?81\x93?\xb89b?\xcb\xc9\x8c?\xd0r\x97?\x18\xca\xac?\x0f\xfa\x7f?\xa9\x03@?\x83\x1f\x82?^\xfb\x9f?\x0c\x93Y?W\xf9P?\xedkf?\x96\xdb\x1d@\xc8`\x86?O\x93Y?"R\x95?\x06\x12\x91?\xd6\x83\xa8?\xda\xa7\xaa?\xd3/\x93?F\xd8]?Q\xef\x7f?\x8e\xf3\x7f?ab\x86?\xe5C\x84?\x0b\xeb\x8e?\xad\x89H?\x02\xca\x8c?\xa2b\xa6?N\xd9]?4\xacj?=z\x97?\x92 b?W\x84\x88?\xb1\xc7L?\xbe,s?]\x95Y?\xb2,\x82?Y\x1cb?@\x0cQ?j\xfc??g\x18b?h~H?\xe3\xfb\x8e?8\x13Q?M\xa4j?\x9d\xb9\x9b?\x84\x86H?\xa6\xd8]?\x9d\x0fQ?]\x93Y?|\x0bQ?0mw?\x00`w?\x15^f?\xb5\x8ew?\xabb\xa6?\xc8\x98Y?D-s?**s?pU\x95?\xed\xc8L?\xda8\x84?\xff@\x84? \xbc\xbb?\xd6*\x93?\x9a-3?^jw?/\x0bQ?\xe4MU?\xc2\xc9\x8c?\x7f\xc9\x8c?\x9e\x87H?|\xe8n?\xce\xa6\x8a??\x82\x88?)j\x86?\xaa\xde]?\xce\x1c\x82?\x96\nQ?\xab,s?\xe5!\x82?\x84MU?\x12\xb5{?\x11\xc6L?%Pf?S\nQ?\xfb\x19Q?e \x02@U\xf2n?\xc5\xf8??\x93`\x86?\xda\xdc]?)\xae{?\xdd\x0cQ?\x9e\x1d\xa2?\x01\x83H?\x81\x1bb?\xb0\xd7n?\x9f\x10\x91?\x00\x1bb?\xc3af?&:D?\xd1\x86H?;`f?\xdfp\x97?p\x93Y?\xdb\xd8]?!\x1f\x82?\xa0\xeb\x8e?\x83\r\x91?\x0bC\xc4?@\xe9n?\x1a\x00\x80?Csw?\x0e\xb3{?\x03\x1c\x82?\x90\xa4j?\x9e2\xb3?\x86 \x82?1a\x86?\xfbrw?\x84\x89\xe8?\x9a\xefn?y+s?\x87\xd9]?T\xaa\x8a?\xc1\xb4{?\x96!\xa2?\xf0\xa7\x8a?k\xea\x8e?\xbc\r\x91?b"b?\xe8\x00\x80?\xfd@\x84?\xa8\xfc\x9f?\xff\xd7]?-\xe9n?(\xb6{?j\x13b?\xea\x94Y?\xb1S\x95?\x9ba\x86?"\xaa\xaa?\xf1\nQ?+\x1db?\x81\x08\x91?6\x0cQ?\xd8PU?\xc1vw?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'\x88Q\xff\x04\xd0W\xff\x04\xd0\x1d\x19\x05\xe8\x17\x19\x05\x88\x14\x19\x05p\x11\x19\x05\xe0\x19\x19\x05\x88\x17\x19\x05\xf8\x1c\x19\x05\x18\x18\x19\x05\xb8\x17\x19\x05\xb8\x14\x19\x05\xb8\x1d\x19\x05\x10\x14\x19\x05\xc8\x10\x19\x05\x08\x1f\x19\x05\x08\x19\x19\x05\x98\x10\x19\x05\xe0\x16\x19\x05\xb8\x1a\x19\x05\x00\x18\x19\x05\x18\x1e\x19\x05H\x18\x19\x05@\x17\x19\x05h\x13\x19\x05P\x13\x19\x05\xa8\x12\x19\x05h\x1f\x19\x05\x80\x16\x19\x05\x88\x1d\x19\x05H\x12\x19\x05@\x1d\x19\x05\x10\x11\x19\x05\x88\x11\x19\x058\x1f\x19\x05p\x1d\x19\x050\x12\x19\x05x\x1e\x19\x05\x18\x1b\x19\x05\xc8\x16\x19\x05`\x1b\x19\x05\xa0\x1a\x19\x05\xb0\x19\x19\x05\x00\x12\x19\x05p\x1a\x19\x05\xd8\x1b\x19\x05\xd0\x17\x19\x05\x80\x1f\x19\x05 \x16\x19\x05\xe8\x14\x19\x05\xb8\x11\x19\x05X\x14\x19\x05\xd8\x18\x19\x05P\x1f\x19\x05\xf0\x15\x19\x05`\x12\x19\x05 \x1f\x19\x05\xc8\x19\x19\x05X\x17\x19\x05\xf8\x19\x19\x05\xf0\x12\x19\x058\x13\xfb\x04X\x14\xfb\x04h\x1c\xfb\x04\xe8\x14\xfb\x04\xf8\x19\xfb\x04h\x16\xfb\x04\xc0\x12\xfb\x04\xd8\x18\xfb\x04`\x18\xfb\x04\xb8\x17\xfb\x04\xf0\x15\xfb\x04\xf8\x16\xfb\x04\xe8\x1a\xfb\x04\x80\x1c\xfb\x04\xa0\x11\xfb\x04\xf8\x1c\xfb\x04\xa8\x12\xfb\x04\xe0\x13\xfb\x04x\x1e\xfb\x04\x10\x17\xfb\x04\xc0\x15\xfb\x04p\x1a\xfb\x04\xd0\x17\xfb\x040\x15\xfb\x04\xb8\x11\xfb\x04X\x17\xfb\x04p\x11\xfb\x04`\x1b\xfb\x04\x98\x1c\xfb\x04\x80\x16\xfb\x04\x10\x1d\xfb\x04P\x16\xfb\x04\xb0\x13\xfb\x04 \x1f\xfb\x04\xd8\x15\xfb\x04\x18\x12\xfb\x04\x08\x13\xfb\x04\x18\x1e\xfb\x04\x88\x1a\xfb\x04\xb0\x19\xfb\x040\x12\xfb\x04\x10\x14\xfb\x048\x19\xfb\x04h\x10\xfb\x04\xa8\x15\xfb\x04P\x19\xfb\x04\xa0\x17\xfb\x04H\x1b\xfb\x04\xc0\x18\xfb\x04H\x18\xfb\x040\x1e\xfb\x04\xe8\x17\xfb\x04 \x19\xfb\x04\xc8\x1f\xfb\x04\xd8\x1b\xfb\x04\xc0\x1b\xfb\x04\xa8\x1e\xfb\x04h\x19\xfb\x04@\x1d\xfb\x04\x80\x19\xfb\x04P\x1f\xfb\x04\xf0\x1e\xfb\x040\x1b\xfb\x04\xc0\x1e\xfb\x04 \x1c\xfb\x04\xa0\x14\xfb\x04p\x17\xfb\x040\x18\xfb\x04@\x17\xfb\x04`\x15\xfb\x04\xb0\x1c\xfb\x04p\x1d\xfb\x04\xf8\x10\xfb\x04\xf0\x12\xfb\x048\x1c\xfb\x04h\x1f\xfb\x04X\x11\xfb\x04\xe0\x1f\xfb\x04\x08\x16\x19\x050\x1b\x19\x05\xb0\x16\x19\x05\x00\x1e\x19\x05`\x18\x19\x05\x88\x1a\x19\x05@\x14\x19\x05\x80\x19\x19\x05\x80\x13\x19\x05\xb0\x1f\x19\x05(\x1d\x19\x05\xe0\x1f\x19\x05\xb0\x1c\x19\x05\xf8\x10\x19\x05\xf8\x16\x19\x05\xa0\x17\x19\x05\x10\x17\x19\x05P\x1c\x19\x05(\x11\x19\x05\x90\x18\x19\x05\x18\x15\x19\x05\xc0\x15\x19\x05\x08\x1c\x19\x05p\x17\x19\x05(\x1a\x19\x05\xa8\x18\x19\x05\xa0\x1d\x19\x05\xe0\x10\x19\x058\x10\x19\x058\x1c\x19\x05\xd8\x12\x19\x050\x1e\x19\x05X\x1d\x19\x05X\x1a\x19\x05\x00\x1b\x19\x050\x15\x19\x05P\x19\x19\x05\x98\x1c\x19\x058\x19\x19\x05\x98\x1f\x19\x05\xe0\x13\x19\x05\x80\x10\x19\x050\x18\x19\x05x\x1b\x19\x05 \x1c\x19\x05h\x19\x19\x05\x90\x15\x19\x05\xd0\x1a\x19\x05h\x1c\x19\x05(\x14\x19\x05\xc8\x1f\x19\x05\xc8\x13\x19\x05x\x15\x19\x05H\x15\x19\x05x\x12\x19\x05\x08\x13\x19\x05\x98\x19\x19\x05\x90\x1b\x19\x05\x00\x15\x19\x05p\x14\x19\x05H\x1b\x19\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3675
sg3633
g3739
sg3647
g3682
sg3642
g3746
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3638
sg3633
g3780
sg3647
g3648
sg3642
g3787
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3799
sg3633
g3795
sg3647
g3806
sg3642
g3803
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3816
sg3633
g3812
sg3647
g3823
sg3642
g3820
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3833
sg3633
g3829
sg3647
g3840
sg3642
g3837
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3850
sg3633
g3846
sg3647
g3857
sg3642
g3854
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3867
sg3633
g3863
sg3647
g3874
sg3642
g3871
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3726
sg3633
g3880
sg3647
g3733
sg3642
g3887
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3905
sg3633
g3895
sg3647
g3899
sg3642
g3903
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3726
sg3633
g3880
sg3647
g3733
sg3642
g3887
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3867
sg3633
g3925
sg3647
g3874
sg3642
g3932
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3833
sg3633
g3940
sg3647
g3840
sg3642
g3947
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3959
sg3633
g3955
sg3647
g3966
sg3642
g3963
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3976
sg3633
g3972
sg3647
g3983
sg3642
g3980
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g3959
sg3633
g4002
sg3647
g3966
sg3642
g4009
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3867
sg3633
g3863
sg3647
g3874
sg3642
g3871
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g4034
sg3633
g4030
sg3647
g4041
sg3642
g4038
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3976
sg3633
g4047
sg3647
g3983
sg3642
g4054
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g4066
sg3633
g4062
sg3647
g4073
sg3642
g4070
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g3658
sg3633
g4079
sg3647
g3665
sg3642
g4086
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3816
sg3633
g4094
sg3647
g3823
sg3642
g4101
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g3709
sg3633
g4109
sg3647
g3716
sg3642
g4116
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g3867
sg3633
g3925
sg3647
g3874
sg3642
g3932
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g3658
sg3633
g4079
sg3647
g3665
sg3642
g4086
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g4167
sg3633
g4163
sg3647
g4174
sg3642
g4171
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g3833
sg3633
g3829
sg3647
g3840
sg3642
g3837
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g4066
sg3633
g4193
sg3647
g4073
sg3642
g4200
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3850
sg3633
g4208
sg3647
g3857
sg3642
g4215
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g4227
sg3633
g4223
sg3647
g4234
sg3642
g4231
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g4034
sg3633
g4253
sg3647
g4041
sg3642
g4260
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3959
sg3633
g3955
sg3647
g3966
sg3642
g3963
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3692
sg3633
g4281
sg3647
g3699
sg3642
g4288
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3850
sg3633
g3846
sg3647
g3857
sg3642
g3854
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3799
sg3633
g3795
sg3647
g3806
sg3642
g3803
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g3850
sg3633
g4208
sg3647
g3857
sg3642
g4215
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g4066
sg3633
g4062
sg3647
g4073
sg3642
g4070
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g3816
sg3633
g3812
sg3647
g3823
sg3642
g3820
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g4365
sg3633
g4361
sg3647
g4372
sg3642
g4369
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g3658
sg3633
g4079
sg3647
g3665
sg3642
g4086
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g4401
sg3633
g4391
sg3647
g4395
sg3642
g4399
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3976
sg3633
g3972
sg3647
g3983
sg3642
g3980
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3799
sg3633
g3795
sg3647
g3806
sg3642
g3803
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3850
sg3633
g4208
sg3647
g3857
sg3642
g4215
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g3905
sg3633
g4447
sg3647
g3899
sg3642
g4454
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3833
sg3633
g3940
sg3647
g3840
sg3642
g3947
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g4167
sg3633
g4488
sg3647
g4174
sg3642
g4495
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g3833
sg3633
g3940
sg3647
g3840
sg3642
g3947
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g3905
sg3633
g4447
sg3647
g3899
sg3642
g4454
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g4034
sg3633
g4030
sg3647
g4041
sg3642
g4038
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g4401
sg3633
g4568
sg3647
g4395
sg3642
g4575
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3638
sg3633
g3780
sg3647
g3648
sg3642
g3787
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g3867
sg3633
g3863
sg3647
g3874
sg3642
g3871
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g4401
sg3633
g4568
sg3647
g4395
sg3642
g4575
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3709
sg3633
g4109
sg3647
g3716
sg3642
g4116
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g4034
sg3633
g4030
sg3647
g4041
sg3642
g4038
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g3833
sg3633
g3829
sg3647
g3840
sg3642
g3837
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g4066
sg3633
g4062
sg3647
g4073
sg3642
g4070
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g4401
sg3633
g4391
sg3647
g4395
sg3642
g4399
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g4227
sg3633
g4700
sg3647
g4234
sg3642
g4707
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g4365
sg3633
g4361
sg3647
g4372
sg3642
g4369
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g3709
sg3633
g4109
sg3647
g3716
sg3642
g4116
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g4066
sg3633
g4062
sg3647
g4073
sg3642
g4070
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3959
sg3633
g4002
sg3647
g3966
sg3642
g4009
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3799
sg3633
g4767
sg3647
g3806
sg3642
g4774
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g3692
sg3633
g4281
sg3647
g3699
sg3642
g4288
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g3816
sg3633
g4094
sg3647
g3823
sg3642
g4101
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g4034
sg3633
g4253
sg3647
g4041
sg3642
g4260
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3638
sg3633
g3780
sg3647
g3648
sg3642
g3787
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3905
sg3633
g4447
sg3647
g3899
sg3642
g4454
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3816
sg3633
g4094
sg3647
g3823
sg3642
g4101
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g4167
sg3633
g4488
sg3647
g4174
sg3642
g4495
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g4227
sg3633
g4700
sg3647
g4234
sg3642
g4707
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g3905
sg3633
g3895
sg3647
g3899
sg3642
g3903
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3726
sg3633
g3880
sg3647
g3733
sg3642
g3887
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g4227
sg3633
g4223
sg3647
g4234
sg3642
g4231
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3867
sg3633
g3863
sg3647
g3874
sg3642
g3871
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g4227
sg3633
g4223
sg3647
g4234
sg3642
g4231
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g3905
sg3633
g4447
sg3647
g3899
sg3642
g4454
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g4034
sg3633
g4253
sg3647
g4041
sg3642
g4260
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3833
sg3633
g3829
sg3647
g3840
sg3642
g3837
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g4066
sg3633
g4193
sg3647
g4073
sg3642
g4200
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g3816
sg3633
g3812
sg3647
g3823
sg3642
g3820
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g3692
sg3633
g4281
sg3647
g3699
sg3642
g4288
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g3816
sg3633
g4094
sg3647
g3823
sg3642
g4101
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3709
sg3633
g4109
sg3647
g3716
sg3642
g4116
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3658
sg3633
g4079
sg3647
g3665
sg3642
g4086
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g4227
sg3633
g4700
sg3647
g4234
sg3642
g4707
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g3799
sg3633
g4767
sg3647
g3806
sg3642
g4774
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g3976
sg3633
g4047
sg3647
g3983
sg3642
g4054
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3726
sg3633
g3880
sg3647
g3733
sg3642
g3887
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g4365
sg3633
g5159
sg3647
g4372
sg3642
g5166
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g4227
sg3633
g4700
sg3647
g4234
sg3642
g4707
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g4034
sg3633
g4253
sg3647
g4041
sg3642
g4260
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g3799
sg3633
g4767
sg3647
g3806
sg3642
g4774
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g3675
sg3633
g3739
sg3647
g3682
sg3642
g3746
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3850
sg3633
g4208
sg3647
g3857
sg3642
g4215
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g4401
sg3633
g4391
sg3647
g4395
sg3642
g4399
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3816
sg3633
g3812
sg3647
g3823
sg3642
g3820
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g4365
sg3633
g5159
sg3647
g4372
sg3642
g5166
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g4401
sg3633
g4568
sg3647
g4395
sg3642
g4575
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g4066
sg3633
g4193
sg3647
g4073
sg3642
g4200
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3799
sg3633
g4767
sg3647
g3806
sg3642
g4774
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3867
sg3633
g3925
sg3647
g3874
sg3642
g3932
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3905
sg3633
g3895
sg3647
g3899
sg3642
g3903
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g4167
sg3633
g4163
sg3647
g4174
sg3642
g4171
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g3726
sg3633
g3880
sg3647
g3733
sg3642
g3887
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3959
sg3633
g3955
sg3647
g3966
sg3642
g3963
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g3833
sg3633
g3940
sg3647
g3840
sg3642
g3947
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3638
sg3633
g3780
sg3647
g3648
sg3642
g3787
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g3867
sg3633
g3925
sg3647
g3874
sg3642
g3932
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3833
sg3633
g3940
sg3647
g3840
sg3642
g3947
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3658
sg3633
g4079
sg3647
g3665
sg3642
g4086
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3976
sg3633
g3972
sg3647
g3983
sg3642
g3980
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3976
sg3633
g4047
sg3647
g3983
sg3642
g4054
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g4365
sg3633
g5159
sg3647
g4372
sg3642
g5166
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g4066
sg3633
g4062
sg3647
g4073
sg3642
g4070
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3850
sg3633
g3846
sg3647
g3857
sg3642
g3854
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3976
sg3633
g4047
sg3647
g3983
sg3642
g4054
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g3905
sg3633
g3895
sg3647
g3899
sg3642
g3903
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3959
sg3633
g3955
sg3647
g3966
sg3642
g3963
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3850
sg3633
g3846
sg3647
g3857
sg3642
g3854
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g4066
sg3633
g4193
sg3647
g4073
sg3642
g4200
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g3816
sg3633
g4094
sg3647
g3823
sg3642
g4101
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g3867
sg3633
g3925
sg3647
g3874
sg3642
g3932
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g3833
sg3633
g3829
sg3647
g3840
sg3642
g3837
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3675
sg3633
g3739
sg3647
g3682
sg3642
g3746
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3905
sg3633
g3895
sg3647
g3899
sg3642
g3903
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g4066
sg3633
g4193
sg3647
g4073
sg3642
g4200
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3709
sg3633
g4109
sg3647
g3716
sg3642
g4116
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g4401
sg3633
g4568
sg3647
g4395
sg3642
g4575
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g3867
sg3633
g3863
sg3647
g3874
sg3642
g3871
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g4167
sg3633
g4163
sg3647
g4174
sg3642
g4171
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g3905
sg3633
g4447
sg3647
g3899
sg3642
g4454
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g4227
sg3633
g4700
sg3647
g4234
sg3642
g4707
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3976
sg3633
g3972
sg3647
g3983
sg3642
g3980
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g4034
sg3633
g4030
sg3647
g4041
sg3642
g4038
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3816
sg3633
g3812
sg3647
g3823
sg3642
g3820
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3675
sg3633
g3739
sg3647
g3682
sg3642
g3746
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g4167
sg3633
g4488
sg3647
g4174
sg3642
g4495
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g4401
sg3633
g4391
sg3647
g4395
sg3642
g4399
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g3976
sg3633
g4047
sg3647
g3983
sg3642
g4054
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g3850
sg3633
g3846
sg3647
g3857
sg3642
g3854
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g4365
sg3633
g4361
sg3647
g4372
sg3642
g4369
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g3850
sg3633
g4208
sg3647
g3857
sg3642
g4215
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3976
sg3633
g3972
sg3647
g3983
sg3642
g3980
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g4034
sg3633
g4030
sg3647
g4041
sg3642
g4038
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g4365
sg3633
g4361
sg3647
g4372
sg3642
g4369
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g3638
sg3633
g3780
sg3647
g3648
sg3642
g3787
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3959
sg3633
g4002
sg3647
g3966
sg3642
g4009
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g4365
sg3633
g5159
sg3647
g4372
sg3642
g5166
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g4227
sg3633
g4223
sg3647
g4234
sg3642
g4231
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g4365
sg3633
g4361
sg3647
g4372
sg3642
g4369
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g3799
sg3633
g3795
sg3647
g3806
sg3642
g3803
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g4034
sg3633
g4253
sg3647
g4041
sg3642
g4260
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g4167
sg3633
g4163
sg3647
g4174
sg3642
g4171
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g3692
sg3633
g4281
sg3647
g3699
sg3642
g4288
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3675
sg3633
g3739
sg3647
g3682
sg3642
g3746
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3959
sg3633
g4002
sg3647
g3966
sg3642
g4009
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g3799
sg3633
g4767
sg3647
g3806
sg3642
g4774
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g4167
sg3633
g4488
sg3647
g4174
sg3642
g4495
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g4401
sg3633
g4391
sg3647
g4395
sg3642
g4399
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3799
sg3633
g3795
sg3647
g3806
sg3642
g3803
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g3959
sg3633
g4002
sg3647
g3966
sg3642
g4009
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g4365
sg3633
g5159
sg3647
g4372
sg3642
g5166
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g4227
sg3633
g4223
sg3647
g4234
sg3642
g4231
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g4167
sg3633
g4163
sg3647
g4174
sg3642
g4171
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g4401
sg3633
g4568
sg3647
g4395
sg3642
g4575
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g3692
sg3633
g4281
sg3647
g3699
sg3642
g4288
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g4167
sg3633
g4488
sg3647
g4174
sg3642
g4495
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g3959
sg3633
g3955
sg3647
g3966
sg3642
g3963
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I234119504
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'\xf07\t  Q\t X9\t @8\t \x90[\x08 \xc0[\x08 @Q\t \xc0[\x08 \xf0[\x08 h8\t  \\\x08 \x188\t x\x06\t \xb0\x06\t  :\t @Q\t  \x07\t \xf0[\x08 P\\\x08 `Q\t \xb88\t \x188\t \xa0Q\t \x80\\\x08 H:\t \xb0\\\x08  Q\t \x90[\x08 \x089\t \xc0[\x08  Q\t \xf0[\x08  :\t `Q\t \xf0[\x08 \x10]\x08 \xe8\x06\t @Q\t P\\\x08 \xd09\t \xf07\t P\\\x08 h8\t  \\\x08 \xc0Q\t x\x06\t \xf07\t @Q\t \xa0]\x08 \x188\t \xf07\t \xb0\\\x08 \x089\t \xe08\t \xb0\x06\t X9\t \x089\t \xe0\\\x08  Q\t \xe8\x06\t \xa0]\x08 x\x06\t \x809\t `Q\t \x80Q\t \xe08\t \xc0Q\t  Q\t P\\\x08 \xb0\x06\t X9\t \xb0\\\x08  \x07\t \xe08\t \x80\\\x08 h8\t \x188\t \xa0]\x08 \x90[\x08 \xd09\t \xb0\x06\t \xc0Q\t \xb0\x06\t \xf0[\x08 @8\t \xb88\t h8\t \xb0\x06\t \xb88\t  :\t X\x07\t \xe8\x06\t \xa89\t \xb0\x06\t \xb88\t @Q\t  Q\t X\x07\t \xf0[\x08 @8\t \x80Q\t H:\t \x90\x07\t  Q\t P\\\x08 \xc0[\x08 @8\t \xe08\t x\x06\t `Q\t \xc0[\x08 \x908\t \x80Q\t H:\t \xf07\t \xe8\x06\t h8\t \xb88\t X9\t \x908\t \x188\t \x80Q\t P\\\x08 x\x06\t `Q\t \x908\t x\x06\t @Q\t  \\\x08 \x80Q\t P\\\x08 \x809\t \xc0[\x08 X\x07\t  \x07\t  \\\x08 \x90[\x08 \xf07\t \xb0\x06\t \x80Q\t \x809\t \xe8\x06\t @8\t @]\x08 \x80Q\t \x908\t \xe08\t \xe8\x06\t \x80Q\t \xb0\x06\t \xc0[\x08 h8\t \x80Q\t \xa89\t \xa0Q\t X\x07\t \xe08\t P\\\x08 `Q\t \xa0]\x08 @Q\t X\x07\t \x908\t @Q\t @8\t \x90[\x08  \\\x08 \x90[\x08 `Q\t x\x06\t \x908\t \xc0[\x08 \xf0[\x08 h8\t x\x06\t \xb0\\\x08 \x908\t P\\\x08 \xe08\t  \\\x08 \xc0[\x08 \xf0[\x08 x\x06\t \xe8\x06\t  \\\x08 \x188\t \xe8\x06\t  \\\x08 P\\\x08 \xa0Q\t \x80Q\t \x089\t @8\t  \\\x08 \xb88\t \xf07\t \xe8\x06\t \xf07\t \x089\t \xf89\t '
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'@T\t \xc0R\t @R\t \xe0Q\t \xa0S\t `S\t  S\t `T\t \x00U\t \x80R\t \xe0S\t \xc0T\t \x80S\t \xa0R\t \xc0S\t `R\t \xa0T\t \x80U\t \xe0U\t @U\t \x00V\t \xa0U\t \xe0T\t `V\t \x80V\t @S\t  U\t \xa0V\t \xc0V\t @W\t @V\t \xa0W\t  V\t \xe0V\t  T\t \x80W\t \xe0W\t  X\t @X\t \x80T\t \x80X\t `X\t \xc0X\t \xa0X\t \x00Y\t  Y\t \x00X\t `U\t @Y\t `Y\t \x80Y\t \xe0Y\t \x80\x7f\xd8\x0e\xe0R\t `Z\t  W\t \x00W\t \x00[\t \x80Z\t \xc0W\t `W\t \xa0[\t \xc0U\t @[\t @Z\t \x00S\t \xa0Z\t \xe0X\t  \\\t \x00T\t \x80[\t \xc0[\t \x00Z\t \xe0Z\t @]\t \xe0\\\t `\\\t \xe0[\t \xc0Z\t @\\\t \xa0]\t \x00^\t \xc0]\t `^\t  ]\t  [\t @~\xd8\x0e R\t `]\t \x80^\t \xa0^\t  _\t \xc0\\\t \x80]\t \x80\\\t \xa0\\\t  ^\t `_\t \xc0^\t \x00_\t \x00\\\t \xa0_\t \xe0(\xe7\r\xc0Y\t \xe0^\t \xe0_\t \x80_\t  Z\t \x00]\t \xa0Y\t \xe0]\t \x80\x1bs\x0e \xc23 \xa0\xc03 `\xc13 \x00\xc13 @\xc03 \xc0\xc13 @\xc23 \xa0\xc13 \xc0\xc03 \xa0\xc23 `\xc23 \x80\xc23 \x00\xc33 \xe0\xc23 @\xc33  \xc33  \xc03 `\xc33 \x80\xc33 \xe0\xc33 \xc0\xc33  \xc13 \x00\xc43  \xc43 @\xc43 `\xc43 \xc0\xc43 \xe0\xc43 \xa0\xc33 `\xc03 @\xc53  \xc53 \x80\xc53 `\xc53 \xc0\xc53 \xe0\xc53 \x00\xc63  \xc63 @\xc63 `\xc63 \x00\xc23 \xe0\xc63 \xa0\xc63 \x80\xc63 \x00\xc73  \xc73 \x80\xc13 \x80\xc43 \x80\xc73 \xa0\xc73 \xa0\xc53 \xe0\xc73 \xc0\xc73 \xe0\xc03 \x00\xc83  \xc83 @\xc83 `\xc83 \x80\xc83 \xe0\xc83 \xc0\xc83  \xc93 \x00\xc93 @\xc13 @\xc93 \xa0\xc93 \xc0\xc93 \xe0\xc93 \x00\xca3 @\xc73 \x80\xc03  \xca3 @\xca3 `\xca3 \xc0\xca3 \xe0\xca3 \xe0\xc13  \xcb3 \x00\xcb3 \xa0\xc43 @\xcb3 `\xcb3 \xc0\xcb3 \xe0\xcb3 \x00\xcc3  \xcc3 @\xcc3 `\xc73 '
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'\xee`\xc6?>TU?\'\xd9]?h\xb5{?\xcb^f?\xe0e&@\xe0>D?L\x02@?( \x82?`\x1f\x82?mc\x86?\x83x7?DPU?\xd5\x02Q?\xb0@\xa4?\xde\xccL?#+s?X`f?\xc1\xb2{?QT\x95?8\x9e\xaa?Z\xb8\x8a?\x05\xfa\x7f?\n\xab\xaa?\xbe,s?g\xfe\xbf?\x18\xc0;?\xae=D?$\xc6L?\xa2\tQ?{*3?\x81\x1e\x82?\xc0\x88\xa8?3\xf9\x7f?P\xf9??(=D?\\\xa2j?l\x1e\x82?$\x00\x80?\x14LU?\xb8"b?NA\x84?\x03\xda]?Y4s?9\xb0j?\xd3\xfa\x7f?X"b?L\xb5{?\xa7\x93j?\xbc-3?\xf2\x8fY?\x91\xd7]?AXf?\xd6*s?]\xae;?\xd3PU? \xa3*?O\xac;?\xcb\x93Y?iA\xa4?\nl\x97?\xa0\x93Y?^,s?e\xf8\x7f?h\xb6\x9b?\x97\xabj?U.s?\xbf\xb5{?\xd7\x1e\x82?\xb8\x1b\x82?m\x11\x91?\xd3\xfa\x7f?\x11\x8aH?\x08\x15Q?\xcd\xd6]?J\x94j?"\x12Q?\x0f\xc0\x8c?\xbbqw?L>\x84?\xbf\xb4\x9b?\xd7\xc3j?HWf?\xda\x86\x88?\xb0\xeb\xae?=\x80\x88?>\x05Q?(\xb6\xbb?\xaf\xc9]?i\xc9\xac?\x86\xc3L?\x98D\xa4?\xc5\xf8\x7f?\xfd<\x84?\xd0\x92j?]\x1cb?@\x93Y?\x1a\xeb\xce?\raf?\x94t\xc6?\xef\xeb\x8e?\xd6\xdc]?m\xb3\x9b?\x1f?D?\x9fc\x86?E\x00\x80?Ff\xa6?\xf9\x92Y?t-s?\xd5pw?\x0f\x89\x88?\xe0C\xc4?\x1djf?\x07\xe5n?\xe9\xb7;?\xb4\x87\x88?+\xe8n?\xaam\xb7?\x96ED?\xac\x95\xd9?1\x85H?\xeft\x97?($b?\xea\xean?\xb7-s?.r\xb7?|\tQ?M\x89H?\xfd@\x84?\xa5QU?\x84rw?-\x97\xb9?O43?E\x08Q?\xf3\xb5;?\xe9\x18b?\x91\xb6{?\'\x89\xc8?\xb8\xb0{?\x1bS\x95?\xf1"\xc2?\xf4\x1b\x82?\x02U\xd5?+\x90Y?+\xca\x8c?\xde\x1d\xe2?\xe4KU?Z\x9aY?\xa0\xc7\x8c?,\xa4\x8a?\xe0\xb3{?\xb2\r\x91?\xe1\xa0H?\xedt\x97?\x81\xe4n?\xf0\xf8\x7f?\x89OU?H\xdd]?Mqw?\'\xab{?\xe0A\x84?\xe0@D?\xdd\x0c\xf1?[s\xb7?W\xa6\xaa?K\xa6\x8a?\xca\x0e\x91?r\\U?\x0f\x11\xb1?\x8f\xe9\x8e?\xc1@\xa4?\x83\nQ?\xda\x15Q?>\xcc\x8c?\x96\x95Y?\x16\xbc\x9b?X\xe9n?\xb4\x9eY?\xa6\x85\x88?\'\x83H?.\xf9??\x06\xbc{?\xf79D?]\x1eb?\x19\x83H?\xd8\xd7]?+\xfc\x9f?N\xceL?\xfdb\x86? \xf0n?D~w?\x9a\xbbL?\xd6\xb5{?\x0fq7?6\xa0\xaa?\x1b0\x93?\x1b\xa5j?g\xbf{?{D\x84?r`\x86?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'x\x15\xfb\x04\x10\x1a\xfb\x04\x90B\x0c\x05\x00E\x0c\x05\xb0F\x0c\x05 C\x0c\x058L\x0c\x05\xa0J\x0c\x05XA\x0c\x05\xb0L\x0c\x05\x80C\x0c\x05\x10D\x0c\x05\x88A\x0c\x050E\x0c\x05(M\x0c\x05`B\x0c\x05\xb0I\x0c\x05PI\x0c\x05\x98F\x0c\x05hF\x0c\x05\xc0E\x0c\x05\xa0G\x0c\x05h\xec\xfa\x04\x80\xef\xfa\x04\x00\xeb\xfa\x04\xd0\xe1\xfa\x04\x10\xe7\xfa\x04`\xe2\xfa\x04\x10\xe1\xfa\x04\xf8\xe6\xfa\x04\x88\xe7\xfa\x04x\xe2\xfa\x04\x98\xe6\xfa\x04\x80\xe3\xfa\x04h\xe6\xfa\x04\x98\xe9\xfa\x04\xa0\xe4\xfa\x04\xf8\xe3\xfa\x04\xc8\xe9\xfa\x04\x18\xe2\xfa\x04\xa8\xe2\xfa\x04 \xe0\xfa\x04X\xe1\xfa\x04\xd8\xe2\xfa\x04p\xe1\xfa\x04p\xe4\xfa\x04\x88\xe4\xfa\x04\xd8\xe8\xfa\x04\x80\xe0\xfa\x04\xe0\xe0\xfa\x04H\xeb\xfa\x04 \xe3\xfa\x04\xe8\xe7\xfa\x04@\xe7\xfa\x04\x88\xea\xfa\x04\x80\xec\xfa\x04\xb8\xea\xfa\x04\xc8\xec\xfa\x04\xd0\xe7\xfa\x04\x18\xe8\xfa\x040\xe8\xfa\x04H\xee\xfa\x04\xc8\xe0\xfa\x04@\xed\xfa\x04H\xe2\xfa\x04 \xec\xfa\x04x\xe5\xfa\x04\xb8\xe1\xfa\x04\xc0\xe2\xfa\x04\xc0\xee\xfa\x04\xe0\xe3\xfa\x04\x08\xe9\xfa\x04\xe8\xe4\xfa\x04\x08\xe6\xfa\x04`\xe5\xfa\x04\x00\xe8\xfa\x04@\xe1\xfa\x04\x80\xe9\xfa\x04\x90\xe8\xfa\x04\x10\xe4\xfa\x04\x00\xe2\xfa\x04\x90\xeb\xfa\x04\xa0\xed\xfa\x04\xe8\xed\xfa\x048\xe9\xfa\x04`\xe8\xfa\x04(\xe4\xfa\x04x\xee\xfa\x04\xd8\xee\xfa\x04\xa8\xe5\xfa\x04\x08\xef\xfa\x04\xf0\xe2\xfa\x04\xb8\xe4\xfa\x04P\xe3\xfa\x04\xe0\xec\xfa\x04`\xeb\xfa\x04\xd0\xed\xfa\x04\xa0\xe1\xfa\x04\xf0\xe5\xfa\x04\x88\xe1\xfa\x04\xa8\xe8\xfa\x04\xd0\xe4\xfa\x04\x90\xee\xfa\x04X\xe4\xfa\x048\xe6\xfa\x04\xa0\xe7\xfa\x048\xec\xfa\x04h\xe9\xfa\x04 \xef\xfa\x04H\xe8\xfa\x04\x90\xe5\xfa\x04x\xe8\xfa\x04X\xed\xfa\x04 \xe6\xfa\x04p\xe7\xfa\x04(\xe1\xfa\x04P\xe0\xfa\x04\xf8\xec\xfa\x04\x18\xee\xfa\x04`\xee\xfa\x04x\xeb\xfa\x04(\xed\xfa\x04\x08\xec\xfa\x040\xee\xfa\x04\xf0\xee\xfa\x04\xf0\xeb\xfa\x04\xc8\xe6\xfa\x04\xc0\xeb\xfa\x04X\xea\xfa\x04\x10\xed\xfa\x04(\xea\xfa\x04(\xe7\xfa\x04\xf8\xe9\xfa\x04\x08\xe3\xfa\x04\x18\xe5\xfa\x04\xb0\xef\xfa\x04\x88\xed\xfa\x04\xd8\xe5\xfa\x040\xe5\xfa\x04\xb8\xe7\xfa\x04\xa0\xea\xfa\x04\xb8\xed\xfa\x04\x98\xec\xfa\x04\x10\xea\xfa\x04P\xef\xfa\x04p\xea\xfa\x04\x98\xef\xfa\x04P\xe6\xfa\x04@\xea\xfa\x04h\xe3\xfa\x04\xa8\xee\xfa\x048\xe3\xfa\x04\xc8\xe3\xfa\x04\xe8\xea\xfa\x04\xb0\xe3\xfa\x04X\xe7\xfa\x048\xe0\xfa\x04\xb0\xe6\xfa\x04\xa8\xeb\xfa\x04\xf0\xe8\xfa\x04h\xef\xfa\x04P\xec\xfa\x04\xe8\xe1\xfa\x04\xb0\xec\xfa\x04\xc0\xe8\xfa\x040\xeb\xfa\x04\xc8\xef\xfa\x04 \xe9\xfa\x048\xef\xfa\x04H\xe5\xfa\x04\x18\xeb\xfa\x040\xe2\xfa\x04@\xe4\xfa\x04\x00\xe5\xfa\x04\xc0\xe5\xfa\x04\xe0\xe6\xfa\x04\x80\xe6\xfa\x04\xe0\xef\xfa\x04\x00N\x0c\x058C\x0c\x05pG\x0c\x05PF\x0c\x05\xa8K\x0c\x05\xc0B\x0c\x05 L\x0c\x05\x90N\x0c\x05(D\x0c\x05\xf8C\x0c\x05\xe0L\x0c\x05\xf0B\x0c\x05\xf8I\x0c\x05\xa8B\x0c\x05\x88J\x0c\x05hL\x0c\x05`H\x0c\x05\xe8G\x0c\x05\xa8H\x0c\x05h@\x0c\x05xB\x0c\x05\xc0K\x0c\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6419
sg6371
g6409
sg6385
g6413
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6481
sg6371
g6477
sg6385
g6488
sg6380
g6485
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6511
sg6371
g6507
sg6385
g6518
sg6380
g6515
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6528
sg6371
g6524
sg6385
g6535
sg6380
g6532
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6545
sg6371
g6541
sg6385
g6552
sg6380
g6549
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6419
sg6371
g6558
sg6385
g6413
sg6380
g6565
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6577
sg6371
g6573
sg6385
g6584
sg6380
g6581
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6594
sg6371
g6590
sg6385
g6601
sg6380
g6598
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6617
sg6371
g6607
sg6385
g6611
sg6380
g6615
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6481
sg6371
g6477
sg6385
g6488
sg6380
g6485
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6396
sg6371
g6637
sg6385
g6403
sg6380
g6644
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6511
sg6371
g6652
sg6385
g6518
sg6380
g6659
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6671
sg6371
g6667
sg6385
g6678
sg6380
g6675
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6688
sg6371
g6684
sg6385
g6695
sg6380
g6692
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6705
sg6371
g6701
sg6385
g6712
sg6380
g6709
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6419
sg6371
g6558
sg6385
g6413
sg6380
g6565
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6528
sg6371
g6731
sg6385
g6535
sg6380
g6738
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6376
sg6371
g6746
sg6385
g6386
sg6380
g6753
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6771
sg6371
g6761
sg6385
g6765
sg6380
g6769
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6821
sg6371
g6817
sg6385
g6828
sg6380
g6825
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6464
sg6371
g6834
sg6385
g6471
sg6380
g6841
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6396
sg6371
g6637
sg6385
g6403
sg6380
g6644
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6511
sg6371
g6652
sg6385
g6518
sg6380
g6659
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6617
sg6371
g6607
sg6385
g6611
sg6380
g6615
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6688
sg6371
g6684
sg6385
g6695
sg6380
g6692
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6511
sg6371
g6652
sg6385
g6518
sg6380
g6659
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6545
sg6371
g6914
sg6385
g6552
sg6380
g6921
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6933
sg6371
g6929
sg6385
g6940
sg6380
g6937
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6481
sg6371
g6946
sg6385
g6488
sg6380
g6953
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6671
sg6371
g6667
sg6385
g6678
sg6380
g6675
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6511
sg6371
g6507
sg6385
g6518
sg6380
g6515
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6671
sg6371
g7000
sg6385
g6678
sg6380
g7007
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6528
sg6371
g6524
sg6385
g6535
sg6380
g6532
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6545
sg6371
g6541
sg6385
g6552
sg6380
g6549
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6688
sg6371
g6684
sg6385
g6695
sg6380
g6692
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6577
sg6371
g7054
sg6385
g6584
sg6380
g7061
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6481
sg6371
g6477
sg6385
g6488
sg6380
g6485
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6705
sg6371
g7095
sg6385
g6712
sg6380
g7102
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6419
sg6371
g6558
sg6385
g6413
sg6380
g6565
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6376
sg6371
g6746
sg6385
g6386
sg6380
g6753
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6447
sg6371
g7136
sg6385
g6454
sg6380
g7143
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6821
sg6371
g7151
sg6385
g6828
sg6380
g7158
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6771
sg6371
g7166
sg6385
g6765
sg6380
g7173
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6594
sg6371
g7181
sg6385
g6601
sg6380
g7188
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6419
sg6371
g6409
sg6385
g6413
sg6380
g6417
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6821
sg6371
g6817
sg6385
g6828
sg6380
g6825
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6396
sg6371
g6637
sg6385
g6403
sg6380
g6644
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6933
sg6371
g7248
sg6385
g6940
sg6380
g7255
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6705
sg6371
g6701
sg6385
g6712
sg6380
g6709
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6577
sg6371
g7054
sg6385
g6584
sg6380
g7061
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6430
sg6371
g7289
sg6385
g6437
sg6380
g7296
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6688
sg6371
g6684
sg6385
g6695
sg6380
g6692
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g7321
sg6371
g7317
sg6385
g7328
sg6380
g7325
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6771
sg6371
g7166
sg6385
g6765
sg6380
g7173
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6688
sg6371
g7347
sg6385
g6695
sg6380
g7354
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6671
sg6371
g7000
sg6385
g6678
sg6380
g7007
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6594
sg6371
g6590
sg6385
g6601
sg6380
g6598
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6419
sg6371
g6409
sg6385
g6413
sg6380
g6417
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6771
sg6371
g7166
sg6385
g6765
sg6380
g7173
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6528
sg6371
g6524
sg6385
g6535
sg6380
g6532
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6419
sg6371
g6409
sg6385
g6413
sg6380
g6417
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6705
sg6371
g7095
sg6385
g6712
sg6380
g7102
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6447
sg6371
g7136
sg6385
g6454
sg6380
g7143
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6511
sg6371
g6507
sg6385
g6518
sg6380
g6515
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6594
sg6371
g6590
sg6385
g6601
sg6380
g6598
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6688
sg6371
g7347
sg6385
g6695
sg6380
g7354
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6594
sg6371
g7181
sg6385
g6601
sg6380
g7188
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6511
sg6371
g6652
sg6385
g6518
sg6380
g6659
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6705
sg6371
g7095
sg6385
g6712
sg6380
g7102
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6528
sg6371
g6524
sg6385
g6535
sg6380
g6532
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6594
sg6371
g7181
sg6385
g6601
sg6380
g7188
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6705
sg6371
g6701
sg6385
g6712
sg6380
g6709
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6617
sg6371
g6607
sg6385
g6611
sg6380
g6615
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6821
sg6371
g6817
sg6385
g6828
sg6380
g6825
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6933
sg6371
g7248
sg6385
g6940
sg6380
g7255
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6481
sg6371
g6477
sg6385
g6488
sg6380
g6485
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6594
sg6371
g7181
sg6385
g6601
sg6380
g7188
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6705
sg6371
g7095
sg6385
g6712
sg6380
g7102
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6481
sg6371
g6946
sg6385
g6488
sg6380
g6953
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6396
sg6371
g6637
sg6385
g6403
sg6380
g6644
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6821
sg6371
g7151
sg6385
g6828
sg6380
g7158
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6511
sg6371
g6507
sg6385
g6518
sg6380
g6515
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6430
sg6371
g7289
sg6385
g6437
sg6380
g7296
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g7321
sg6371
g7317
sg6385
g7328
sg6380
g7325
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6771
sg6371
g6761
sg6385
g6765
sg6380
g6769
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6933
sg6371
g7248
sg6385
g6940
sg6380
g7255
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6396
sg6371
g6637
sg6385
g6403
sg6380
g6644
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6671
sg6371
g6667
sg6385
g6678
sg6380
g6675
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6464
sg6371
g6834
sg6385
g6471
sg6380
g6841
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6771
sg6371
g6761
sg6385
g6765
sg6380
g6769
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6577
sg6371
g7054
sg6385
g6584
sg6380
g7061
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6688
sg6371
g7347
sg6385
g6695
sg6380
g7354
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6617
sg6371
g7934
sg6385
g6611
sg6380
g7941
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g7321
sg6371
g7317
sg6385
g7328
sg6380
g7325
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6771
sg6371
g6761
sg6385
g6765
sg6380
g6769
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6933
sg6371
g7248
sg6385
g6940
sg6380
g7255
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6528
sg6371
g6524
sg6385
g6535
sg6380
g6532
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6705
sg6371
g6701
sg6385
g6712
sg6380
g6709
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6419
sg6371
g6558
sg6385
g6413
sg6380
g6565
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6617
sg6371
g7934
sg6385
g6611
sg6380
g7941
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6419
sg6371
g6558
sg6385
g6413
sg6380
g6565
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g7321
sg6371
g8066
sg6385
g7328
sg6380
g8073
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6671
sg6371
g7000
sg6385
g6678
sg6380
g7007
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6577
sg6371
g6573
sg6385
g6584
sg6380
g6581
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6688
sg6371
g7347
sg6385
g6695
sg6380
g7354
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6617
sg6371
g6607
sg6385
g6611
sg6380
g6615
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6577
sg6371
g6573
sg6385
g6584
sg6380
g6581
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6481
sg6371
g6946
sg6385
g6488
sg6380
g6953
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6545
sg6371
g6541
sg6385
g6552
sg6380
g6549
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g7321
sg6371
g8066
sg6385
g7328
sg6380
g8073
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6671
sg6371
g7000
sg6385
g6678
sg6380
g7007
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6464
sg6371
g6834
sg6385
g6471
sg6380
g6841
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6821
sg6371
g7151
sg6385
g6828
sg6380
g7158
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6545
sg6371
g6541
sg6385
g6552
sg6380
g6549
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6447
sg6371
g7136
sg6385
g6454
sg6380
g7143
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6376
sg6371
g6746
sg6385
g6386
sg6380
g6753
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6594
sg6371
g7181
sg6385
g6601
sg6380
g7188
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g7321
sg6371
g8066
sg6385
g7328
sg6380
g8073
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6430
sg6371
g7289
sg6385
g6437
sg6380
g7296
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6933
sg6371
g6929
sg6385
g6940
sg6380
g6937
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6430
sg6371
g7289
sg6385
g6437
sg6380
g7296
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6577
sg6371
g7054
sg6385
g6584
sg6380
g7061
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g7321
sg6371
g7317
sg6385
g7328
sg6380
g7325
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6617
sg6371
g6607
sg6385
g6611
sg6380
g6615
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6771
sg6371
g7166
sg6385
g6765
sg6380
g7173
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6933
sg6371
g6929
sg6385
g6940
sg6380
g6937
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g7321
sg6371
g8066
sg6385
g7328
sg6380
g8073
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6594
sg6371
g6590
sg6385
g6601
sg6380
g6598
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6528
sg6371
g6731
sg6385
g6535
sg6380
g6738
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g7321
sg6371
g8066
sg6385
g7328
sg6380
g8073
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6481
sg6371
g6946
sg6385
g6488
sg6380
g6953
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6528
sg6371
g6731
sg6385
g6535
sg6380
g6738
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6821
sg6371
g7151
sg6385
g6828
sg6380
g7158
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6771
sg6371
g7166
sg6385
g6765
sg6380
g7173
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6671
sg6371
g6667
sg6385
g6678
sg6380
g6675
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6688
sg6371
g7347
sg6385
g6695
sg6380
g7354
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6705
sg6371
g6701
sg6385
g6712
sg6380
g6709
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6481
sg6371
g6946
sg6385
g6488
sg6380
g6953
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6821
sg6371
g6817
sg6385
g6828
sg6380
g6825
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6617
sg6371
g7934
sg6385
g6611
sg6380
g7941
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6481
sg6371
g6477
sg6385
g6488
sg6380
g6485
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6447
sg6371
g7136
sg6385
g6454
sg6380
g7143
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6545
sg6371
g6541
sg6385
g6552
sg6380
g6549
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6447
sg6371
g7136
sg6385
g6454
sg6380
g7143
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6688
sg6371
g6684
sg6385
g6695
sg6380
g6692
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6577
sg6371
g6573
sg6385
g6584
sg6380
g6581
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6617
sg6371
g7934
sg6385
g6611
sg6380
g7941
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6464
sg6371
g6834
sg6385
g6471
sg6380
g6841
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6511
sg6371
g6652
sg6385
g6518
sg6380
g6659
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6528
sg6371
g6731
sg6385
g6535
sg6380
g6738
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6577
sg6371
g7054
sg6385
g6584
sg6380
g7061
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6617
sg6371
g7934
sg6385
g6611
sg6380
g7941
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6671
sg6371
g7000
sg6385
g6678
sg6380
g7007
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6771
sg6371
g6761
sg6385
g6765
sg6380
g6769
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6545
sg6371
g6914
sg6385
g6552
sg6380
g6921
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6464
sg6371
g6834
sg6385
g6471
sg6380
g6841
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6511
sg6371
g6507
sg6385
g6518
sg6380
g6515
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6577
sg6371
g6573
sg6385
g6584
sg6380
g6581
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6933
sg6371
g6929
sg6385
g6940
sg6380
g6937
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6545
sg6371
g6914
sg6385
g6552
sg6380
g6921
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6419
sg6371
g6409
sg6385
g6413
sg6380
g6417
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6933
sg6371
g7248
sg6385
g6940
sg6380
g7255
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6545
sg6371
g6914
sg6385
g6552
sg6380
g6921
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6671
sg6371
g6667
sg6385
g6678
sg6380
g6675
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6528
sg6371
g6731
sg6385
g6535
sg6380
g6738
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g7321
sg6371
g7317
sg6385
g7328
sg6380
g7325
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6821
sg6371
g7151
sg6385
g6828
sg6380
g7158
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6430
sg6371
g7289
sg6385
g6437
sg6380
g7296
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6545
sg6371
g6914
sg6385
g6552
sg6380
g6921
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6705
sg6371
g7095
sg6385
g6712
sg6380
g7102
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6376
sg6371
g6746
sg6385
g6386
sg6380
g6753
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6933
sg6371
g6929
sg6385
g6940
sg6380
g6937
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6376
sg6371
g6746
sg6385
g6386
sg6380
g6753
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6821
sg6371
g6817
sg6385
g6828
sg6380
g6825
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6594
sg6371
g6590
sg6385
g6601
sg6380
g6598
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.