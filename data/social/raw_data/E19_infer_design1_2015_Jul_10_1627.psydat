ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E19_infer_design1_2015_Jul_10_1627
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x12\x97\xff;L\x00N@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_10_1627
p67
sVparticipant
p68
VE19
p69
sVglasses
p70
Vy
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F0.50011717520465027
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F83.948001578304684
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P2\x00'
tbsg70
Vy
sa(dp96
g64
g65
sg20
F13.516999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F0.99999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'$\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V48-twix.png
p103
sg21
F1.5
sg70
Vy
sa(dp104
g64
g65
sg20
F19.434000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F1.4799999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\r\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p110
sg21
F1.7
sg70
Vy
sa(dp111
g64
g65
sg20
F12.217000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F0.39999999999999858
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x07\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p117
sg21
F1.8999999999999999
sg70
Vy
sa(dp118
g64
g65
sg20
F14.683999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F1.46
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'\x1c\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p124
sg21
F1.6000000000000001
sg70
Vy
sa(dp125
g64
g65
sg20
F5.2839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0.11999999999999873
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\x1b\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p131
sg21
F1.8
sg70
Vy
sa(dp132
g64
g65
sg20
F3.851
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0.099999999999998729
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S' \x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p138
sg21
F1.8
sg70
Vy
sa(dp139
g64
g65
sg20
F3.2679999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F0.25999999999999912
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x1e\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p145
sg21
F1.3
sg70
Vy
sa(dp146
g64
g65
sg20
F3.0009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F0.29999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\x1a\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V35-raisins.png
p152
sg21
F1.5
sg70
Vy
sa(dp153
g64
g65
sg20
F6.1340000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F1.5600000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x16\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p159
sg21
F1.5
sg70
Vy
sa(dp160
g64
g65
sg20
F3.6669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F0.21999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\t\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p166
sg21
F1.5
sg70
Vy
sa(dp167
g64
g65
sg20
F3.1669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0.35999999999999943
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'"\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p173
sg21
F1.1000000000000001
sg70
Vy
sa(dp174
g64
g65
sg20
F3.0009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F1.46
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x0c\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V18-mms.png
p180
sg21
F1.6000000000000001
sg70
Vy
sa(dp181
g64
g65
sg20
F4.7009999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F0.15999999999999917
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x18\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p187
sg21
F1.2
sg70
Vy
sa(dp188
g64
g65
sg20
F6.3010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0.17999999999999894
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\x06\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V7-olives.png
p194
sg21
F1.3999999999999999
sg70
Vy
sa(dp195
g64
g65
sg20
F10.567
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F2.0000000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x00\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p201
sg21
F1.3
sg70
Vy
sa(dp202
g64
g65
sg20
F3.5169999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F1.4999999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\x08\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p208
sg21
F1.8
sg70
Vy
sa(dp209
g64
g65
sg20
F3.8170000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F0.17999999999999894
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x13\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p215
sg21
F1.6000000000000001
sg70
Vy
sa(dp216
g64
g65
sg20
F5.2169999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F0.19999999999999915
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x14\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p222
sg21
F1.3
sg70
Vy
sa(dp223
g64
g65
sg20
F3.4169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0.21999999999999847
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'&\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V50-polo.png
p229
sg21
F1.8999999999999999
sg70
Vy
sa(dp230
g64
g65
sg20
F2.8839999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F0.15999999999999873
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x02\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p236
sg21
F1.7
sg70
Vy
sa(dp237
g64
g65
sg20
F5.234
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F2.02
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x1f\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p243
sg21
F2
sg70
Vy
sa(dp244
g64
g65
sg20
F3.2839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F0.35999999999999943
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\n\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p250
sg21
F1.1000000000000001
sg70
Vy
sa(dp251
g64
g65
sg20
F2.4009999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F0.53999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'\x0e\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p257
sg21
F1.8
sg70
Vy
sa(dp258
g64
g65
sg20
F2.734
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F1.4799999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'%\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p264
sg21
F1.7
sg70
Vy
sa(dp265
g64
g65
sg20
F4.117
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F0.1199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x19\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p271
sg21
F1.1000000000000001
sg70
Vy
sa(dp272
g64
g65
sg20
F5.6840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F1.2
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x01\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p278
sg21
F1.2
sg70
Vy
sa(dp279
g64
g65
sg20
F5.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F1.52
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\x15\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V29-beans.png
p285
sg21
F1.5
sg70
Vy
sa(dp286
g64
g65
sg20
F2.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0.15999999999999895
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\x1d\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V40-sardines.png
p292
sg21
F1.5
sg70
Vy
sa(dp293
g64
g65
sg20
F4.0170000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0.99999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x04\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p299
sg21
F1.3999999999999999
sg70
Vy
sa(dp300
g64
g65
sg20
F5.7670000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F1.52
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\x0f\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p306
sg21
F1.2
sg70
Vy
sa(dp307
g64
g65
sg20
F2.8010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F1.0399999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x0b\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p313
sg21
F1.3
sg70
Vy
sa(dp314
g64
g65
sg20
F1.867
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F1.5
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S"'\x00\x00\x00"
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V51-mars.png
p320
sg21
F1.3999999999999999
sg70
Vy
sa(dp321
g64
g65
sg20
F1.4510000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F1.7000000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'\x12\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p327
sg21
F1.6000000000000001
sg70
Vy
sa(dp328
g64
g65
sg20
F3.4169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F1.6800000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\x11\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p334
sg21
F1
sg70
Vy
sa(dp335
g64
g65
sg20
F10.516999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F1.3999999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x03\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V4-corn.png
p341
sg21
F1.7
sg70
Vy
sa(dp342
g64
g65
sg20
F1.9510000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F1.9600000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x10\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V22-daim.png
p348
sg21
F1.6000000000000001
sg70
Vy
sa(dp349
g64
g65
sg20
F4.3010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F1.1199999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'#\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p355
sg21
F1.6000000000000001
sg70
Vy
sa(dp356
g64
g65
sg20
F3.0840000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0.17999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x05\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p362
sg21
F1.1000000000000001
sg70
Vy
sa(dp363
g64
g65
sg20
F1.734
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F1.5599999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'!\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V44-crunch.png
p369
sg21
F1.7
sg70
Vy
sa(dp370
g64
g65
sg20
F3.867
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F2.0000000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x17\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p376
sg21
F1.5
sg70
Vy
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F15.366549415437476
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vy
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p381
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'right'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F2.2665952591669338
sg27
F4.4340000000000002
sg70
Vy
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'25-kitkat.png'
p390
sg26
F5.1000000000000014
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'right'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F4.7834060522836808
sg27
F3.4510000000000001
sg70
Vy
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'38-maltesers.png'
p399
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'left'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F1.4996772692647937
sg27
F2.8170000000000002
sg70
Vy
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p408
sg26
F4.0999999999999996
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'left'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F2.3671102028529276
sg27
F2.4340000000000002
sg70
Vy
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p417
sg26
F4.6000000000000014
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'left'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F8.7500267991963483
sg27
F3.1509999999999998
sg70
Vy
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p426
sg26
F5.2000000000000002
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'left'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F2.9000937401615374
sg27
F2.5009999999999999
sg70
Vy
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p435
sg26
F4
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'right'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F4.8171265674645838
sg27
F2.5670000000000002
sg70
Vy
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p444
sg26
F5.1000000000000014
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'right'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F4.7333736651744402
sg27
F1.4670000000000001
sg70
Vy
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'49-yorkie.png'
p453
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'left'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F1.2334837129310472
sg27
F2.9180000000000001
sg70
Vy
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'31-hobnobs.png'
p462
sg26
F5.1000000000000005
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'left'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F4.8666970961057814
sg27
F1.667
sg70
Vy
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p471
sg26
F4.5000000000000018
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'left'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F5.7503010633008671
sg27
F1.3009999999999999
sg70
Vy
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'40-sardines.png'
p480
sg26
F4.8000000000000007
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'right'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F2.4667615852340532
sg27
F2.5510000000000002
sg70
Vy
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'44-crunch.png'
p489
sg26
F5.1000000000000014
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'left'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F1.4334273776039481
sg27
F1.9510000000000001
sg70
Vy
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p498
sg26
F4.9000000000000004
sg28
F4
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'left'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F5.0500395145609218
sg27
F1.484
sg70
Vy
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'29-beans.png'
p507
sg26
F4.8000000000000007
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'left'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F6.28341460521915
sg27
F1.5669999999999999
sg70
Vy
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p516
sg26
F4
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'right'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F6.3833738932517008
sg27
F0.93400000000000005
sg70
Vy
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'48-twix.png'
p525
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'left'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F1.2000408830281231
sg27
F0.90100000000000002
sg70
Vy
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p534
sg26
F5.1000000000000005
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'right'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F1.8834212194888096
sg27
F0.96699999999999997
sg70
Vy
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p543
sg26
F5.8999999999999977
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'right'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F1.7833869507303461
sg27
F1.2509999999999999
sg70
Vy
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p552
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'right'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F1.0668485970927577
sg27
F0.66700000000000004
sg70
Vy
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p561
sg26
F5.1000000000000005
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'left'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F1.2833838146543712
sg27
F0.86699999999999999
sg70
Vy
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p570
sg26
F5.2000000000000002
sg28
F4
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'right'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F1.2168166091141757
sg27
F0.76800000000000002
sg70
Vy
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p579
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'right'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F2.6499514763527259
sg27
F0.91700000000000004
sg70
Vy
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'7-olives.png'
p588
sg26
F4.9000000000000021
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'right'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F1.700159198622714
sg27
F1.7010000000000001
sg70
Vy
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'51-mars.png'
p597
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'left'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F0.85017795806197682
sg27
F0.63400000000000001
sg70
Vy
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p606
sg26
F5.0000000000000009
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'right'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F1.2833296460667043
sg27
F0.90100000000000002
sg70
Vy
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'22-daim.png'
p615
sg26
F5.3000000000000007
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'left'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F1.300046356904204
sg27
F1.1339999999999999
sg70
Vy
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p624
sg26
F4.7000000000000011
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'right'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F3.4168170082521101
sg27
F1.0840000000000001
sg70
Vy
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'35-raisins.png'
p633
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'right'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F0.95004715518007288
sg27
F0.63400000000000001
sg70
Vy
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p642
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'left'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F1.1000468130623631
sg27
F0.86699999999999999
sg70
Vy
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'50-polo.png'
p651
sg26
F5.1000000000000014
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'right'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F0.75006186622704263
sg27
F1.1839999999999999
sg70
Vy
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p660
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'right'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F1.8664653115774854
sg27
F0.58399999999999996
sg70
Vy
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p669
sg26
F4.3000000000000007
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'left'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F1.6667018287298561
sg27
F1.2669999999999999
sg70
Vy
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p678
sg26
F5.2000000000000002
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'right'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F1.400032159035618
sg27
F0.88400000000000001
sg70
Vy
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p687
sg26
F5.0000000000000018
sg28
F3
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'left'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F1.1833315847361519
sg27
F1.0509999999999999
sg70
Vy
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p696
sg26
F4.8000000000000007
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'left'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F1.166742882818653
sg27
F1.0669999999999999
sg70
Vy
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'18-mms.png'
p705
sg26
F5.5
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'left'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F1.0334083330672001
sg27
F1.401
sg70
Vy
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'5-pineapple.png'
p714
sg26
F5.3999999999999995
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'left'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F1.3000289659394184
sg27
F0.98499999999999999
sg70
Vy
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'4-corn.png'
p723
sg26
F5.3999999999999995
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'right'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F1.1167643791923183
sg27
F0.73399999999999999
sg70
Vy
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'46-pistachios.png'
p732
sg26
F5.6999999999999984
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'right'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F2.8002014501216763
sg27
F0.78400000000000003
sg70
Vy
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F483.28702565424101
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F0.13352413980464917
sg66
g67
sg68
g69
sg70
Vy
sa(dp743
g64
g65
sg82
S'12-topic.png'
p744
sg83
S'39-mackerel.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'39-mackerel.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\n\x10-/\n\x12 '
tRp754
sa(dp755
g64
g65
sg82
S'53-cheestrings.png'
p756
sg83
S'47-picnic.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'47-picnic.png'
p761
sg33
g761
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\n\x10.\x04\t\xa8\xa8'
tRp765
sa(dp766
g64
g65
sg82
S'15-walnut_whip.png'
p767
sg83
S'15-walnut_whip.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'28-maple_pecan.png'
p772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\n\x10.\r\x0b\x1b\xc0'
tRp776
sa(dp777
g64
g65
sg82
S'32-hovis_crackers.png'
p778
sg83
S'32-hovis_crackers.png'
p779
sg56
g57
sS'practice_loop.thisN'
p780
I3
sS'practice_loop.thisTrialN'
p781
I3
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p782
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p784
sS'practice_loop.thisIndex'
p785
g60
(g99
S'\x03\x00\x00\x00'
tRp786
sg34
g753
(S'\x07\xdf\x07\n\x10.\x18\x02F\x08'
tRp787
sa(dp788
g64
g65
sg82
g744
sg83
S'12-topic.png'
p789
sg56
g57
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p792
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p793
sS'practice_loop.thisIndex'
p794
g60
(g99
S'\x04\x00\x00\x00'
tRp795
sg34
g753
(S'\x07\xdf\x07\n\x10.!\x05\xdc\x00'
tRp796
sa(dp797
g64
g65
sg82
g778
sg83
S'24-food_doctor_apple_walnut_bar.png'
p798
sg56
g57
sS'practice_loop.thisN'
p799
I5
sS'practice_loop.thisTrialN'
p800
I5
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p801
I0
sg84
g783
sg33
g783
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p802
sS'practice_loop.thisIndex'
p803
g60
(g99
S'\x05\x00\x00\x00'
tRp804
sg34
g753
(S"\x07\xdf\x07\n\x10.'\n\xb60"
tRp805
sa(dp806
g64
g65
sg82
S'11-snickers.png'
p807
sg83
S'54-frubes_yogurt.png'
p808
sg56
g57
sS'practice_loop.thisN'
p809
I6
sS'practice_loop.thisTrialN'
p810
I6
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p811
I0
sg84
S'54-frubes_yogurt.png'
p812
sg33
g812
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p813
sS'practice_loop.thisIndex'
p814
g60
(g99
S'\x06\x00\x00\x00'
tRp815
sg34
g753
(S'\x07\xdf\x07\n\x10..\x026h'
tRp816
sa(dp817
g64
g65
sg82
g756
sg83
S'53-cheestrings.png'
p818
sg56
g57
sS'practice_loop.thisN'
p819
I7
sS'practice_loop.thisTrialN'
p820
I7
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p821
I0
sg84
g761
sg33
g761
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p822
sS'practice_loop.thisIndex'
p823
g60
(g99
S'\x07\x00\x00\x00'
tRp824
sg34
g753
(S'\x07\xdf\x07\n\x10.6\x0b\xc7\xa0'
tRp825
sa(dp826
g64
g65
sg82
S'52-aero_mousse.png'
p827
sg83
S'52-aero_mousse.png'
p828
sg56
g57
sS'practice_loop.thisN'
p829
I8
sS'practice_loop.thisTrialN'
p830
I8
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p831
I0
sg84
S'14-discos_salt_vinegar.png'
p832
sg33
g827
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p833
sS'practice_loop.thisIndex'
p834
g60
(g99
S'\x08\x00\x00\x00'
tRp835
sg34
g753
(S'\x07\xdf\x07\n\x10/\x01\x01\xd8\xa8'
tRp836
sa(dp837
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p838
sg83
S'37-nakd_cashew_cookie.png'
p839
sg56
g57
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p842
I0
sg84
S'9-yu_mango_pieces.png'
p843
sg33
g838
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\n\x10/\x07\x04\x8f\xf8'
tRp847
sa(dp848
g64
g65
sg82
g767
sg83
S'28-maple_pecan.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\n\x10/\x0e\x00\x1bX'
tRp856
sa(dp857
g64
g65
sg82
g807
sg83
S'11-snickers.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g812
sg33
g807
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\n\x10/\x14\n\xe8\xf8'
tRp865
sa(dp866
g64
g65
sg82
g827
sg83
S'14-discos_salt_vinegar.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g832
sg33
g827
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\n\x10/\x1a\x0e\x15x'
tRp874
sa(dp875
g64
g65
sg82
g838
sg83
S'9-yu_mango_pieces.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g843
sg33
g838
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\n\x10/!\x0b\x89 '
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F81.697948550106958
sg66
g67
sg68
g69
sg70
Vy
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vy
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'35-raisins.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'right'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'49-yorkie.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'49-yorkie.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'35-raisins.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vy
sS'block_loop.thisTrialN'
p912
I0
sg39
F1.6998179365291435
sg34
g753
(S'\x07\xdf\x07\n\x106\x1e\x03\x82p'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'2-steamed_puddings.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'left'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'20-fruit_pastilles.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'20-fruit_pastilles.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg909
S'2-steamed_puddings.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vy
sS'block_loop.thisTrialN'
p929
I0
sg39
F1.599959573130036
sg34
g753
(S'\x07\xdf\x07\n\x106$\x0e\xc9('
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'36-fig_rolls.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'left'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
S'36-fig_rolls.png'
p943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p944
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vy
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.5000128294013848
sg34
g753
(S'\x07\xdf\x07\n\x106+\t#\xd8'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'40-sardines.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'left'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'40-sardines.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'5-pineapple.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p960
I0
sg909
S'5-pineapple.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vy
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.8666315236077935
sg34
g753
(S'\x07\xdf\x07\n\x1062\x02\x13@'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
g916
sS'block_loop.thisIndex'
p967
g889
sg38
S'left'
p968
sg59
g63
sS'trial_loop.thisN'
p969
I4
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p970
g60
(g99
S'\x04\x00\x00\x00'
tRp971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p972
I0
sg904
g924
sS'block_loop.thisRepN'
p973
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p974
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p975
Nsg70
Vy
sS'block_loop.thisTrialN'
p976
I0
sg39
F1.383402117935475
sg34
g753
(S'\x07\xdf\x07\n\x1069\x00y\x18'
tRp977
sa(dp978
S'trial_loop.thisTrialN'
p979
I5
sg895
S'6-sour_patch_kids.png'
p980
sS'block_loop.thisIndex'
p981
g889
sg38
S'right'
p982
sg59
g63
sS'trial_loop.thisN'
p983
I5
sg33
S'38-maltesers.png'
p984
sg64
g65
sS'trial_loop.thisIndex'
p985
g60
(g99
S'\x05\x00\x00\x00'
tRp986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p987
I0
sg904
S'38-maltesers.png'
p988
sS'block_loop.thisRepN'
p989
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p990
I0
sg909
S'6-sour_patch_kids.png'
p991
sg55
g11
sS'block_loop.thisTrial'
p992
Nsg70
Vy
sS'block_loop.thisTrialN'
p993
I0
sg39
F1.6996887872155639
sg34
g753
(S'\x07\xdf\x07\n\x107\x03\x06\xfd\x10'
tRp994
sa(dp995
S'trial_loop.thisTrialN'
p996
I6
sg895
S'5-pineapple.png'
p997
sS'block_loop.thisIndex'
p998
g889
sg38
S'right'
p999
sg59
g63
sS'trial_loop.thisN'
p1000
I6
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1001
g60
(g99
S'\x06\x00\x00\x00'
tRp1002
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1003
I0
sg904
S'40-sardines.png'
p1004
sS'block_loop.thisRepN'
p1005
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1006
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1007
Nsg70
Vy
sS'block_loop.thisTrialN'
p1008
I0
sg39
F2.6499144136323594
sg34
g753
(S'\x07\xdf\x07\n\x107\n\x02\xc6\xf0'
tRp1009
sa(dp1010
S'trial_loop.thisTrialN'
p1011
I7
sg895
S'45-chewy_nougat_redo.png'
p1012
sS'block_loop.thisIndex'
p1013
g889
sg38
S'left'
p1014
sg59
g63
sS'trial_loop.thisN'
p1015
I7
sg33
S'41-peanuts_redo.png'
p1016
sg64
g65
sS'trial_loop.thisIndex'
p1017
g60
(g99
S'\x07\x00\x00\x00'
tRp1018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1019
I0
sg904
S'41-peanuts_redo.png'
p1020
sS'block_loop.thisRepN'
p1021
I0
sg907
g1016
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1022
I0
sg909
S'45-chewy_nougat_redo.png'
p1023
sg55
g11
sS'block_loop.thisTrial'
p1024
Nsg70
Vy
sS'block_loop.thisTrialN'
p1025
I0
sg39
F2.2998761535054655
sg34
g753
(S'\x07\xdf\x07\n\x107\x11\rR('
tRp1026
sa(dp1027
S'trial_loop.thisTrialN'
p1028
I8
sg895
S'25-kitkat.png'
p1029
sS'block_loop.thisIndex'
p1030
g889
sg38
S'right'
p1031
sg59
g63
sS'trial_loop.thisN'
p1032
I8
sg33
S'25-kitkat.png'
p1033
sg64
g65
sS'trial_loop.thisIndex'
p1034
g60
(g99
S'\x08\x00\x00\x00'
tRp1035
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1036
I0
sg904
S'31-hobnobs.png'
p1037
sS'block_loop.thisRepN'
p1038
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1039
I0
sg909
S'31-hobnobs.png'
p1040
sg55
g11
sS'block_loop.thisTrial'
p1041
Nsg70
Vy
sS'block_loop.thisTrialN'
p1042
I0
sg39
F1.8499074002247653
sg34
g753
(S'\x07\xdf\x07\n\x107\x19\x03 \xc8'
tRp1043
sa(dp1044
S'trial_loop.thisTrialN'
p1045
I9
sg895
S'18-mms.png'
p1046
sS'block_loop.thisIndex'
p1047
g889
sg38
S'right'
p1048
sg59
g63
sS'trial_loop.thisN'
p1049
I9
sg33
S'18-mms.png'
p1050
sg64
g65
sS'trial_loop.thisIndex'
p1051
g60
(g99
S'\t\x00\x00\x00'
tRp1052
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1053
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1054
sS'block_loop.thisRepN'
p1055
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1056
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p1057
sg55
g11
sS'block_loop.thisTrial'
p1058
Nsg70
Vy
sS'block_loop.thisTrialN'
p1059
I0
sg39
F2.000021382336854
sg34
g753
(S'\x07\xdf\x07\n\x107 \x01H '
tRp1060
sa(dp1061
S'trial_loop.thisTrialN'
p1062
I10
sg895
S'3-ellas_strawberries_apples.png'
p1063
sS'block_loop.thisIndex'
p1064
g889
sg38
S'left'
p1065
sg59
g63
sS'trial_loop.thisN'
p1066
I10
sg33
S'3-ellas_strawberries_apples.png'
p1067
sg64
g65
sS'trial_loop.thisIndex'
p1068
g60
(g99
S'\n\x00\x00\x00'
tRp1069
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1070
I0
sg904
S'13-mccoys_steak_crisps.png'
p1071
sS'block_loop.thisRepN'
p1072
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1073
I0
sg909
S'13-mccoys_steak_crisps.png'
p1074
sg55
g11
sS'block_loop.thisTrial'
p1075
Nsg70
Vy
sS'block_loop.thisTrialN'
p1076
I0
sg39
F2.1665706837302423
sg34
g753
(S"\x07\xdf\x07\n\x107'\x01\xd4\xc0"
tRp1077
sa(dp1078
S'trial_loop.thisTrialN'
p1079
I11
sg895
S'27-hartleys_raspberries_jelly.png'
p1080
sS'block_loop.thisIndex'
p1081
g889
sg38
S'left'
p1082
sg59
g63
sS'trial_loop.thisN'
p1083
I11
sg33
S'27-hartleys_raspberries_jelly.png'
p1084
sg64
g65
sS'trial_loop.thisIndex'
p1085
g60
(g99
S'\x0b\x00\x00\x00'
tRp1086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1087
I0
sg904
S'51-mars.png'
p1088
sS'block_loop.thisRepN'
p1089
I0
sg907
S'51-mars.png'
p1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1091
I0
sg909
g1084
sg55
g11
sS'block_loop.thisTrial'
p1092
Nsg70
Vy
sS'block_loop.thisTrialN'
p1093
I0
sg39
F1.3332348795520375
sg34
g753
(S'\x07\xdf\x07\n\x107.\x04\xc2\xc0'
tRp1094
sa(dp1095
S'trial_loop.thisTrialN'
p1096
I12
sg895
S'4-corn.png'
p1097
sS'block_loop.thisIndex'
p1098
g889
sg38
S'right'
p1099
sg59
g63
sS'trial_loop.thisN'
p1100
I12
sg33
S'4-corn.png'
p1101
sg64
g65
sS'trial_loop.thisIndex'
p1102
g60
(g99
S'\x0c\x00\x00\x00'
tRp1103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1104
I0
sg904
S'10-bounty_redo.png'
p1105
sS'block_loop.thisRepN'
p1106
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1107
I0
sg909
S'10-bounty_redo.png'
p1108
sg55
g11
sS'block_loop.thisTrial'
p1109
Nsg70
Vy
sS'block_loop.thisTrialN'
p1110
I0
sg39
F2.3998802018941205
sg34
g753
(S'\x07\xdf\x07\n\x1074\n\x8f '
tRp1111
sa(dp1112
S'trial_loop.thisTrialN'
p1113
I13
sg895
S'13-mccoys_steak_crisps.png'
p1114
sS'block_loop.thisIndex'
p1115
g889
sg38
S'right'
p1116
sg59
g63
sS'trial_loop.thisN'
p1117
I13
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p1118
g60
(g99
S'\r\x00\x00\x00'
tRp1119
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1120
I0
sg904
S'3-ellas_strawberries_apples.png'
p1121
sS'block_loop.thisRepN'
p1122
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1123
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p1124
Nsg70
Vy
sS'block_loop.thisTrialN'
p1125
I0
sg39
F1.7499019263486844
sg34
g753
(S'\x07\xdf\x07\n\x108\x00\x01\xcc\xf0'
tRp1126
sa(dp1127
S'trial_loop.thisTrialN'
p1128
I14
sg895
S'31-hobnobs.png'
p1129
sS'block_loop.thisIndex'
p1130
g889
sg38
S'left'
p1131
sg59
g63
sS'trial_loop.thisN'
p1132
I14
sg33
g1040
sg64
g65
sS'trial_loop.thisIndex'
p1133
g60
(g99
S'\x0e\x00\x00\x00'
tRp1134
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1135
I0
sg904
S'25-kitkat.png'
p1136
sS'block_loop.thisRepN'
p1137
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1138
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p1139
Nsg70
Vy
sS'block_loop.thisTrialN'
p1140
I0
sg39
F1.56673883442636
sg34
g753
(S'\x07\xdf\x07\n\x108\x06\r\xcb@'
tRp1141
sa(dp1142
S'trial_loop.thisTrialN'
p1143
I15
sg895
g916
sS'block_loop.thisIndex'
p1144
g889
sg38
S'right'
p1145
sg59
g63
sS'trial_loop.thisN'
p1146
I15
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1147
g60
(g99
S'\x0f\x00\x00\x00'
tRp1148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1149
I0
sg904
g924
sS'block_loop.thisRepN'
p1150
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1151
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1152
Nsg70
Vy
sS'block_loop.thisTrialN'
p1153
I0
sg39
F1.6499280983298377
sg34
g753
(S'\x07\xdf\x07\n\x108\r\x07\xa8\xf0'
tRp1154
sa(dp1155
S'trial_loop.thisTrialN'
p1156
I16
sg895
S'42-mrkipling_lemon_slices.png'
p1157
sS'block_loop.thisIndex'
p1158
g889
sg38
S'left'
p1159
sg59
g63
sS'trial_loop.thisN'
p1160
I16
sg33
S'42-mrkipling_lemon_slices.png'
p1161
sg64
g65
sS'trial_loop.thisIndex'
p1162
g60
(g99
S'\x10\x00\x00\x00'
tRp1163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1164
I0
sg904
S'16-skips_prawn.png'
p1165
sS'block_loop.thisRepN'
p1166
I0
sg907
S'16-skips_prawn.png'
p1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1168
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p1169
Nsg70
Vy
sS'block_loop.thisTrialN'
p1170
I0
sg39
F1.2996574834760395
sg34
g753
(S'\x07\xdf\x07\n\x108\x14\x02\xbb8'
tRp1171
sa(dp1172
S'trial_loop.thisTrialN'
p1173
I17
sg895
S'43-mrporky_pork_crackles_redo.png'
p1174
sS'block_loop.thisIndex'
p1175
g889
sg38
S'left'
p1176
sg59
g63
sS'trial_loop.thisN'
p1177
I17
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p1178
g60
(g99
S'\x11\x00\x00\x00'
tRp1179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1180
I0
sg904
S'18-mms.png'
p1181
sS'block_loop.thisRepN'
p1182
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1183
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p1184
Nsg70
Vy
sS'block_loop.thisTrialN'
p1185
I0
sg39
F1.4332785565384256
sg34
g753
(S'\x07\xdf\x07\n\x108\x1a\x07\xd3\xe8'
tRp1186
sa(dp1187
S'trial_loop.thisTrialN'
p1188
I18
sg895
S'30-spaghetti_hoops.png'
p1189
sS'block_loop.thisIndex'
p1190
g889
sg38
S'right'
p1191
sg59
g63
sS'trial_loop.thisN'
p1192
I18
sg33
S'19-caramello_redo.png'
p1193
sg64
g65
sS'trial_loop.thisIndex'
p1194
g60
(g99
S'\x12\x00\x00\x00'
tRp1195
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1196
I0
sg904
S'19-caramello_redo.png'
p1197
sS'block_loop.thisRepN'
p1198
I0
sg907
g1193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1199
I0
sg909
S'30-spaghetti_hoops.png'
p1200
sg55
g11
sS'block_loop.thisTrial'
p1201
Nsg70
Vy
sS'block_loop.thisTrialN'
p1202
I0
sg39
F1.7832401253508579
sg34
g753
(S'\x07\xdf\x07\n\x108 \x0f\x0fx'
tRp1203
sa(dp1204
S'trial_loop.thisTrialN'
p1205
I19
sg895
g1046
sS'block_loop.thisIndex'
p1206
g889
sg38
S'left'
p1207
sg59
g63
sS'trial_loop.thisN'
p1208
I19
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p1209
g60
(g99
S'\x13\x00\x00\x00'
tRp1210
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1211
I0
sg904
g1054
sS'block_loop.thisRepN'
p1212
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1213
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p1214
Nsg70
Vy
sS'block_loop.thisTrialN'
p1215
I0
sg39
F2.1833016494638287
sg34
g753
(S"\x07\xdf\x07\n\x108'\x0cD\xa0"
tRp1216
sa(dp1217
S'trial_loop.thisTrialN'
p1218
I20
sg895
S'16-skips_prawn.png'
p1219
sS'block_loop.thisIndex'
p1220
g889
sg38
S'right'
p1221
sg59
g63
sS'trial_loop.thisN'
p1222
I20
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p1223
g60
(g99
S'\x14\x00\x00\x00'
tRp1224
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1225
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1226
sS'block_loop.thisRepN'
p1227
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1228
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p1229
Nsg70
Vy
sS'block_loop.thisTrialN'
p1230
I0
sg39
F1.516537954503292
sg34
g753
(S'\x07\xdf\x07\n\x108/\x00*\xf8'
tRp1231
sa(dp1232
S'trial_loop.thisTrialN'
p1233
I21
sg895
S'23-crunchie_redo.png'
p1234
sS'block_loop.thisIndex'
p1235
g889
sg38
S'right'
p1236
sg59
g63
sS'trial_loop.thisN'
p1237
I21
sg33
S'33-ambrosia_rice.png'
p1238
sg64
g65
sS'trial_loop.thisIndex'
p1239
g60
(g99
S'\x15\x00\x00\x00'
tRp1240
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1241
I0
sg904
S'33-ambrosia_rice.png'
p1242
sS'block_loop.thisRepN'
p1243
I0
sg907
g1238
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1244
I0
sg909
S'23-crunchie_redo.png'
p1245
sg55
g11
sS'block_loop.thisTrial'
p1246
Nsg70
Vy
sS'block_loop.thisTrialN'
p1247
I0
sg39
F2.1665738198098552
sg34
g753
(S'\x07\xdf\x07\n\x1085\x08\x978'
tRp1248
sa(dp1249
S'trial_loop.thisTrialN'
p1250
I22
sg895
S'17-jacobs_mini_cheddars_redo.png'
p1251
sS'block_loop.thisIndex'
p1252
g889
sg38
S'left'
p1253
sg59
g63
sS'trial_loop.thisN'
p1254
I22
sg33
S'17-jacobs_mini_cheddars_redo.png'
p1255
sg64
g65
sS'trial_loop.thisIndex'
p1256
g60
(g99
S'\x16\x00\x00\x00'
tRp1257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1258
I0
sg904
S'8-liquorice_catherine_wheels.png'
p1259
sS'block_loop.thisRepN'
p1260
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1261
I0
sg909
S'8-liquorice_catherine_wheels.png'
p1262
sg55
g11
sS'block_loop.thisTrial'
p1263
Nsg70
Vy
sS'block_loop.thisTrialN'
p1264
I0
sg39
F1.5666627133105067
sg34
g753
(S'\x07\xdf\x07\n\x109\x00\x0b\xbf\xd0'
tRp1265
sa(dp1266
S'trial_loop.thisTrialN'
p1267
I23
sg895
g1189
sS'block_loop.thisIndex'
p1268
g889
sg38
S'right'
p1269
sg59
g63
sS'trial_loop.thisN'
p1270
I23
sg33
g1193
sg64
g65
sS'trial_loop.thisIndex'
p1271
g60
(g99
S'\x17\x00\x00\x00'
tRp1272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1273
I0
sg904
g1197
sS'block_loop.thisRepN'
p1274
I0
sg907
g1193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1275
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p1276
Nsg70
Vy
sS'block_loop.thisTrialN'
p1277
I0
sg39
F1.6499945261239191
sg34
g753
(S'\x07\xdf\x07\n\x109\x07\x05\xa1h'
tRp1278
sa(dp1279
S'trial_loop.thisTrialN'
p1280
I24
sg895
g1157
sS'block_loop.thisIndex'
p1281
g889
sg38
S'left'
p1282
sg59
g63
sS'trial_loop.thisN'
p1283
I24
sg33
g1167
sg64
g65
sS'trial_loop.thisIndex'
p1284
g60
(g99
S'\x18\x00\x00\x00'
tRp1285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1286
I0
sg904
g1165
sS'block_loop.thisRepN'
p1287
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1288
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p1289
Nsg70
Vy
sS'block_loop.thisTrialN'
p1290
I0
sg39
F1.0165519242946175
sg34
g753
(S'\x07\xdf\x07\n\x109\x0e\x00\xb3\xb0'
tRp1291
sa(dp1292
S'trial_loop.thisTrialN'
p1293
I25
sg895
g1029
sS'block_loop.thisIndex'
p1294
g889
sg38
S'right'
p1295
sg59
g63
sS'trial_loop.thisN'
p1296
I25
sg33
g1033
sg64
g65
sS'trial_loop.thisIndex'
p1297
g60
(g99
S'\x19\x00\x00\x00'
tRp1298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1299
I0
sg904
g1037
sS'block_loop.thisRepN'
p1300
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1301
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p1302
Nsg70
Vy
sS'block_loop.thisTrialN'
p1303
I0
sg39
F1.4166462346547632
sg34
g753
(S'\x07\xdf\x07\n\x109\x14\x01\x82\xb8'
tRp1304
sa(dp1305
S'trial_loop.thisTrialN'
p1306
I26
sg895
S'1-treacle_cookies.png'
p1307
sS'block_loop.thisIndex'
p1308
g889
sg38
S'right'
p1309
sg59
g63
sS'trial_loop.thisN'
p1310
I26
sg33
S'21-nakd_banana_crunch.png'
p1311
sg64
g65
sS'trial_loop.thisIndex'
p1312
g60
(g99
S'\x1a\x00\x00\x00'
tRp1313
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1314
I0
sg904
S'21-nakd_banana_crunch.png'
p1315
sS'block_loop.thisRepN'
p1316
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1317
I0
sg909
S'1-treacle_cookies.png'
p1318
sg55
g11
sS'block_loop.thisTrial'
p1319
Nsg70
Vy
sS'block_loop.thisTrialN'
p1320
I0
sg39
F2.1166147028379783
sg34
g753
(S'\x07\xdf\x07\n\x109\x1a\x08\x7f\xc8'
tRp1321
sa(dp1322
S'trial_loop.thisTrialN'
p1323
I27
sg895
S'20-fruit_pastilles.png'
p1324
sS'block_loop.thisIndex'
p1325
g889
sg38
S'left'
p1326
sg59
g63
sS'trial_loop.thisN'
p1327
I27
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1328
g60
(g99
S'\x1b\x00\x00\x00'
tRp1329
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1330
I0
sg904
S'2-steamed_puddings.png'
p1331
sS'block_loop.thisRepN'
p1332
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1333
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1334
Nsg70
Vy
sS'block_loop.thisTrialN'
p1335
I0
sg39
F1.0499075142652146
sg34
g753
(S'\x07\xdf\x07\n\x109!\n\xb60'
tRp1336
sa(dp1337
S'trial_loop.thisTrialN'
p1338
I28
sg895
S'50-polo.png'
p1339
sS'block_loop.thisIndex'
p1340
g889
sg38
S'right'
p1341
sg59
g63
sS'trial_loop.thisN'
p1342
I28
sg33
S'48-twix.png'
p1343
sg64
g65
sS'trial_loop.thisIndex'
p1344
g60
(g99
S'\x1c\x00\x00\x00'
tRp1345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1346
I0
sg904
S'48-twix.png'
p1347
sS'block_loop.thisRepN'
p1348
I0
sg907
g1343
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1349
I0
sg909
S'50-polo.png'
p1350
sg55
g11
sS'block_loop.thisTrial'
p1351
Nsg70
Vy
sS'block_loop.thisTrialN'
p1352
I0
sg39
F1.2999377346350229
sg34
g753
(S"\x07\xdf\x07\n\x109'\x0b\xfeP"
tRp1353
sa(dp1354
S'trial_loop.thisTrialN'
p1355
I29
sg895
g1174
sS'block_loop.thisIndex'
p1356
g889
sg38
S'right'
p1357
sg59
g63
sS'trial_loop.thisN'
p1358
I29
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p1359
g60
(g99
S'\x1d\x00\x00\x00'
tRp1360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1361
I0
sg904
g1181
sS'block_loop.thisRepN'
p1362
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1363
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p1364
Nsg70
Vy
sS'block_loop.thisTrialN'
p1365
I0
sg39
F1.8335681589087471
sg34
g753
(S'\x07\xdf\x07\n\x109.\x01\xd4\xc0'
tRp1366
sa(dp1367
S'trial_loop.thisTrialN'
p1368
I30
sg895
g1189
sS'block_loop.thisIndex'
p1369
g889
sg38
S'right'
p1370
sg59
g63
sS'trial_loop.thisN'
p1371
I30
sg33
g1193
sg64
g65
sS'trial_loop.thisIndex'
p1372
g60
(g99
S'\x1e\x00\x00\x00'
tRp1373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1374
I0
sg904
g1197
sS'block_loop.thisRepN'
p1375
I0
sg907
g1193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1376
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p1377
Nsg70
Vy
sS'block_loop.thisTrialN'
p1378
I0
sg39
F1.1166286726329417
sg34
g753
(S'\x07\xdf\x07\n\x1094\x0f\x03\xc0'
tRp1379
sa(dp1380
S'trial_loop.thisTrialN'
p1381
I31
sg895
S'33-ambrosia_rice.png'
p1382
sS'block_loop.thisIndex'
p1383
g889
sg38
S'left'
p1384
sg59
g63
sS'trial_loop.thisN'
p1385
I31
sg33
g1245
sg64
g65
sS'trial_loop.thisIndex'
p1386
g60
(g99
S'\x1f\x00\x00\x00'
tRp1387
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1388
I0
sg904
S'23-crunchie_redo.png'
p1389
sS'block_loop.thisRepN'
p1390
I0
sg907
g1238
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1391
I0
sg909
g1245
sg55
g11
sS'block_loop.thisTrial'
p1392
Nsg70
Vy
sS'block_loop.thisTrialN'
p1393
I0
sg39
F1.4665996496696607
sg34
g753
(S'\x07\xdf\x07\n\x109;\x01\xfb\xd0'
tRp1394
sa(dp1395
S'trial_loop.thisTrialN'
p1396
I32
sg895
S'19-caramello_redo.png'
p1397
sS'block_loop.thisIndex'
p1398
g889
sg38
S'left'
p1399
sg59
g63
sS'trial_loop.thisN'
p1400
I32
sg33
g1193
sg64
g65
sS'trial_loop.thisIndex'
p1401
g60
(g99
S' \x00\x00\x00'
tRp1402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1403
I0
sg904
S'30-spaghetti_hoops.png'
p1404
sS'block_loop.thisRepN'
p1405
I0
sg907
g1193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1406
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p1407
Nsg70
Vy
sS'block_loop.thisTrialN'
p1408
I0
sg39
F1.3333332383008383
sg34
g753
(S'\x07\xdf\x07\n\x10:\x05\t\xb0x'
tRp1409
sa(dp1410
S'trial_loop.thisTrialN'
p1411
I33
sg895
g1251
sS'block_loop.thisIndex'
p1412
g889
sg38
S'left'
p1413
sg59
g63
sS'trial_loop.thisN'
p1414
I33
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p1415
g60
(g99
S'!\x00\x00\x00'
tRp1416
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1417
I0
sg904
g1259
sS'block_loop.thisRepN'
p1418
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1419
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p1420
Nsg70
Vy
sS'block_loop.thisTrialN'
p1421
I0
sg39
F1.0666892274057318
sg34
g753
(S'\x07\xdf\x07\n\x10:\x0c\x00\x00\x00'
tRp1422
sa(dp1423
S'trial_loop.thisTrialN'
p1424
I34
sg895
g1129
sS'block_loop.thisIndex'
p1425
g889
sg38
S'right'
p1426
sg59
g63
sS'trial_loop.thisN'
p1427
I34
sg33
g1033
sg64
g65
sS'trial_loop.thisIndex'
p1428
g60
(g99
S'"\x00\x00\x00'
tRp1429
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1430
I0
sg904
g1136
sS'block_loop.thisRepN'
p1431
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1432
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p1433
Nsg70
Vy
sS'block_loop.thisTrialN'
p1434
I0
sg39
F1.0833828453214664
sg34
g753
(S'\x07\xdf\x07\n\x10:\x12\x01\x86\xa0'
tRp1435
sa(dp1436
S'trial_loop.thisTrialN'
p1437
I35
sg895
S'10-bounty_redo.png'
p1438
sS'block_loop.thisIndex'
p1439
g889
sg38
S'left'
p1440
sg59
g63
sS'trial_loop.thisN'
p1441
I35
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p1442
g60
(g99
S'#\x00\x00\x00'
tRp1443
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1444
I0
sg904
S'4-corn.png'
p1445
sS'block_loop.thisRepN'
p1446
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1447
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p1448
Nsg70
Vy
sS'block_loop.thisTrialN'
p1449
I0
sg39
F1.5165992505353643
sg34
g753
(S'\x07\xdf\x07\n\x10:\x18\x03G\xd8'
tRp1450
sa(dp1451
S'trial_loop.thisTrialN'
p1452
I36
sg895
S'44-crunch.png'
p1453
sS'block_loop.thisIndex'
p1454
g889
sg38
S'left'
p1455
sg59
g63
sS'trial_loop.thisN'
p1456
I36
sg33
S'44-crunch.png'
p1457
sg64
g65
sS'trial_loop.thisIndex'
p1458
g60
(g99
S'$\x00\x00\x00'
tRp1459
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1460
I0
sg904
S'26-walkers_smoky_bacon.png'
p1461
sS'block_loop.thisRepN'
p1462
I0
sg907
g1457
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1463
I0
sg909
S'26-walkers_smoky_bacon.png'
p1464
sg55
g11
sS'block_loop.thisTrial'
p1465
Nsg70
Vy
sS'block_loop.thisTrialN'
p1466
I0
sg39
F1.2165697144009755
sg34
g753
(S'\x07\xdf\x07\n\x10:\x1e\x0b\xb4\x18'
tRp1467
sa(dp1468
S'trial_loop.thisTrialN'
p1469
I37
sg895
g1438
sS'block_loop.thisIndex'
p1470
g889
sg38
S'right'
p1471
sg59
g63
sS'trial_loop.thisN'
p1472
I37
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p1473
g60
(g99
S'%\x00\x00\x00'
tRp1474
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1475
I0
sg904
g1445
sS'block_loop.thisRepN'
p1476
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1477
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p1478
Nsg70
Vy
sS'block_loop.thisTrialN'
p1479
I0
sg39
F1.7665901274049247
sg34
g753
(S'\x07\xdf\x07\n\x10:%\x00Y\xd8'
tRp1480
sa(dp1481
S'trial_loop.thisTrialN'
p1482
I38
sg895
g896
sS'block_loop.thisIndex'
p1483
g889
sg38
S'right'
p1484
sg59
g63
sS'trial_loop.thisN'
p1485
I38
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1486
g60
(g99
S'&\x00\x00\x00'
tRp1487
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1488
I0
sg904
g905
sS'block_loop.thisRepN'
p1489
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1490
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1491
Nsg70
Vy
sS'block_loop.thisTrialN'
p1492
I0
sg39
F0.89988618894858519
sg34
g753
(S'\x07\xdf\x07\n\x10:+\x0c\x92\xc0'
tRp1493
sa(dp1494
S'trial_loop.thisTrialN'
p1495
I39
sg895
g1129
sS'block_loop.thisIndex'
p1496
g889
sg38
S'right'
p1497
sg59
g63
sS'trial_loop.thisN'
p1498
I39
sg33
g1033
sg64
g65
sS'trial_loop.thisIndex'
p1499
g60
(g99
S"'\x00\x00\x00"
tRp1500
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1501
I0
sg904
g1136
sS'block_loop.thisRepN'
p1502
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1503
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p1504
Nsg70
Vy
sS'block_loop.thisTrialN'
p1505
I0
sg39
F1.5102860443475947
sg34
g753
(S'\x07\xdf\x07\n\x10:1\x0by\x80'
tRp1506
sa(dp1507
S'trial_loop.thisTrialN'
p1508
I40
sg895
S'41-peanuts_redo.png'
p1509
sS'block_loop.thisIndex'
p1510
g889
sg38
S'left'
p1511
sg59
g63
sS'trial_loop.thisN'
p1512
I40
sg33
g1016
sg64
g65
sS'trial_loop.thisIndex'
p1513
g60
(g99
S'(\x00\x00\x00'
tRp1514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1515
I0
sg904
S'45-chewy_nougat_redo.png'
p1516
sS'block_loop.thisRepN'
p1517
I0
sg907
g1016
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1518
I0
sg909
g1023
sg55
g11
sS'block_loop.thisTrial'
p1519
Nsg70
Vy
sS'block_loop.thisTrialN'
p1520
I0
sg39
F2.1333448132718331
sg34
g753
(S'\x07\xdf\x07\n\x10:8\x04h\xe8'
tRp1521
sa(dp1522
S'trial_loop.thisTrialN'
p1523
I41
sg895
g1234
sS'block_loop.thisIndex'
p1524
g889
sg38
S'right'
p1525
sg59
g63
sS'trial_loop.thisN'
p1526
I41
sg33
g1245
sg64
g65
sS'trial_loop.thisIndex'
p1527
g60
(g99
S')\x00\x00\x00'
tRp1528
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1529
I0
sg904
g1242
sS'block_loop.thisRepN'
p1530
I0
sg907
g1238
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1531
I0
sg909
g1245
sg55
g11
sS'block_loop.thisTrial'
p1532
Nsg70
Vy
sS'block_loop.thisTrialN'
p1533
I0
sg39
F1.6666037550785404
sg34
g753
(S'\x07\xdf\x07\n\x10;\x03\x06\xd9\xe8'
tRp1534
sa(dp1535
S'trial_loop.thisTrialN'
p1536
I42
sg895
g933
sS'block_loop.thisIndex'
p1537
g889
sg38
S'left'
p1538
sg59
g63
sS'trial_loop.thisN'
p1539
I42
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p1540
g60
(g99
S'*\x00\x00\x00'
tRp1541
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1542
I0
sg904
g941
sS'block_loop.thisRepN'
p1543
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1544
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p1545
Nsg70
Vy
sS'block_loop.thisTrialN'
p1546
I0
sg39
F1.3999386469477031
sg34
g753
(S'\x07\xdf\x07\n\x10;\n\x02eH'
tRp1547
sa(dp1548
S'trial_loop.thisTrialN'
p1549
I43
sg895
g997
sS'block_loop.thisIndex'
p1550
g889
sg38
S'left'
p1551
sg59
g63
sS'trial_loop.thisN'
p1552
I43
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1553
g60
(g99
S'+\x00\x00\x00'
tRp1554
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1555
I0
sg904
g1004
sS'block_loop.thisRepN'
p1556
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1557
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1558
Nsg70
Vy
sS'block_loop.thisTrialN'
p1559
I0
sg39
F1.3165834561150405
sg34
g753
(S'\x07\xdf\x07\n\x10;\x10\x08\xe9@'
tRp1560
sa(dp1561
S'trial_loop.thisTrialN'
p1562
I44
sg895
g1397
sS'block_loop.thisIndex'
p1563
g889
sg38
S'left'
p1564
sg59
g63
sS'trial_loop.thisN'
p1565
I44
sg33
g1193
sg64
g65
sS'trial_loop.thisIndex'
p1566
g60
(g99
S',\x00\x00\x00'
tRp1567
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1568
I0
sg904
g1404
sS'block_loop.thisRepN'
p1569
I0
sg907
g1193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1570
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p1571
Nsg70
Vy
sS'block_loop.thisTrialN'
p1572
I0
sg39
F1.1834618744396721
sg34
g753
(S'\x07\xdf\x07\n\x10;\x16\x0e@p'
tRp1573
sa(dp1574
S'trial_loop.thisTrialN'
p1575
I45
sg895
g997
sS'block_loop.thisIndex'
p1576
g889
sg38
S'right'
p1577
sg59
g63
sS'trial_loop.thisN'
p1578
I45
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p1579
g60
(g99
S'-\x00\x00\x00'
tRp1580
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1581
I0
sg904
g1004
sS'block_loop.thisRepN'
p1582
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1583
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1584
Nsg70
Vy
sS'block_loop.thisTrialN'
p1585
I0
sg39
F1.2332995397373452
sg34
g753
(S'\x07\xdf\x07\n\x10;\x1d\x02i0'
tRp1586
sa(dp1587
S'trial_loop.thisTrialN'
p1588
I46
sg895
g1324
sS'block_loop.thisIndex'
p1589
g889
sg38
S'left'
p1590
sg59
g63
sS'trial_loop.thisN'
p1591
I46
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1592
g60
(g99
S'.\x00\x00\x00'
tRp1593
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1594
I0
sg904
g1331
sS'block_loop.thisRepN'
p1595
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1596
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1597
Nsg70
Vy
sS'block_loop.thisTrialN'
p1598
I0
sg39
F1.4665945179112896
sg34
g753
(S'\x07\xdf\x07\n\x10;#\x06Q0'
tRp1599
sa(dp1600
S'trial_loop.thisTrialN'
p1601
I47
sg895
g1097
sS'block_loop.thisIndex'
p1602
g889
sg38
S'left'
p1603
sg59
g63
sS'trial_loop.thisN'
p1604
I47
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p1605
g60
(g99
S'/\x00\x00\x00'
tRp1606
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1607
I0
sg904
g1105
sS'block_loop.thisRepN'
p1608
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1609
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p1610
Nsg70
Vy
sS'block_loop.thisTrialN'
p1611
I0
sg39
F1.8832615647079365
sg34
g753
(S'\x07\xdf\x07\n\x10;)\x0e\x05\xd8'
tRp1612
sa(dp1613
S'trial_loop.thisTrialN'
p1614
I48
sg895
S'49-yorkie.png'
p1615
sS'block_loop.thisIndex'
p1616
g889
sg38
S'left'
p1617
sg59
g63
sS'trial_loop.thisN'
p1618
I48
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1619
g60
(g99
S'0\x00\x00\x00'
tRp1620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1621
I0
sg904
S'35-raisins.png'
p1622
sS'block_loop.thisRepN'
p1623
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1624
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1625
Nsg70
Vy
sS'block_loop.thisTrialN'
p1626
I0
sg39
F1.5332438316254411
sg34
g753
(S'\x07\xdf\x07\n\x10;0\x0c\xaa0'
tRp1627
sa(dp1628
S'trial_loop.thisTrialN'
p1629
I49
sg895
g1174
sS'block_loop.thisIndex'
p1630
g889
sg38
S'right'
p1631
sg59
g63
sS'trial_loop.thisN'
p1632
I49
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p1633
g60
(g99
S'1\x00\x00\x00'
tRp1634
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1635
I0
sg904
g1181
sS'block_loop.thisRepN'
p1636
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1637
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p1638
Nsg70
Vy
sS'block_loop.thisTrialN'
p1639
I0
sg39
F1.2834348471660633
sg34
g753
(S'\x07\xdf\x07\n\x10;7\x06\x0e\xc8'
tRp1640
sa(dp1641
S'trial_loop.thisTrialN'
p1642
I50
sg895
S'29-beans.png'
p1643
sS'block_loop.thisIndex'
p1644
g889
sg38
S'right'
p1645
sg59
g63
sS'trial_loop.thisN'
p1646
I50
sg33
S'46-pistachios.png'
p1647
sg64
g65
sS'trial_loop.thisIndex'
p1648
g60
(g99
S'2\x00\x00\x00'
tRp1649
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1650
I0
sg904
S'46-pistachios.png'
p1651
sS'block_loop.thisRepN'
p1652
I0
sg907
S'29-beans.png'
p1653
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1654
I0
sg909
g1647
sg55
g11
sS'block_loop.thisTrial'
p1655
Nsg70
Vy
sS'block_loop.thisTrialN'
p1656
I0
sg39
F2.149884193266189
sg34
g753
(S'\x07\xdf\x07\n\x11\x00\x01\n\xe8\xf8'
tRp1657
sa(dp1658
S'trial_loop.thisTrialN'
p1659
I51
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1660
sS'block_loop.thisIndex'
p1661
g889
sg38
S'right'
p1662
sg59
g63
sS'trial_loop.thisN'
p1663
I51
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1664
g60
(g99
S'3\x00\x00\x00'
tRp1665
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1666
I0
sg904
S'36-fig_rolls.png'
p1667
sS'block_loop.thisRepN'
p1668
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1669
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p1670
Nsg70
Vy
sS'block_loop.thisTrialN'
p1671
I0
sg39
F1.0666518795915181
sg34
g753
(S'\x07\xdf\x07\n\x11\x00\x08\r\xd6\xf8'
tRp1672
sa(dp1673
S'trial_loop.thisTrialN'
p1674
I52
sg895
g1029
sS'block_loop.thisIndex'
p1675
g889
sg38
S'right'
p1676
sg59
g63
sS'trial_loop.thisN'
p1677
I52
sg33
g1033
sg64
g65
sS'trial_loop.thisIndex'
p1678
g60
(g99
S'4\x00\x00\x00'
tRp1679
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1680
I0
sg904
g1037
sS'block_loop.thisRepN'
p1681
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1682
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p1683
Nsg70
Vy
sS'block_loop.thisTrialN'
p1684
I0
sg39
F2.1332398972735973
sg34
g753
(S'\x07\xdf\x07\n\x11\x00\x0f\x00\x17p'
tRp1685
sa(dp1686
S'trial_loop.thisTrialN'
p1687
I53
sg895
g1114
sS'block_loop.thisIndex'
p1688
g889
sg38
S'right'
p1689
sg59
g63
sS'trial_loop.thisN'
p1690
I53
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p1691
g60
(g99
S'5\x00\x00\x00'
tRp1692
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1693
I0
sg904
g1121
sS'block_loop.thisRepN'
p1694
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1695
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p1696
Nsg70
Vy
sS'block_loop.thisTrialN'
p1697
I0
sg39
F1.1666707530712301
sg34
g753
(S'\x07\xdf\x07\n\x11\x00\x16\x02\x8cX'
tRp1698
sa(dp1699
S'trial_loop.thisTrialN'
p1700
I54
sg895
g1219
sS'block_loop.thisIndex'
p1701
g889
sg38
S'right'
p1702
sg59
g63
sS'trial_loop.thisN'
p1703
I54
sg33
g1167
sg64
g65
sS'trial_loop.thisIndex'
p1704
g60
(g99
S'6\x00\x00\x00'
tRp1705
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1706
I0
sg904
g1226
sS'block_loop.thisRepN'
p1707
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1708
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p1709
Nsg70
Vy
sS'block_loop.thisTrialN'
p1710
I0
sg39
F1.1999031807790743
sg34
g753
(S'\x07\xdf\x07\n\x11\x00\x1c\x05~@'
tRp1711
sa(dp1712
S'trial_loop.thisTrialN'
p1713
I55
sg895
g1063
sS'block_loop.thisIndex'
p1714
g889
sg38
S'left'
p1715
sg59
g63
sS'trial_loop.thisN'
p1716
I55
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p1717
g60
(g99
S'7\x00\x00\x00'
tRp1718
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1719
I0
sg904
g1071
sS'block_loop.thisRepN'
p1720
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1721
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p1722
Nsg70
Vy
sS'block_loop.thisTrialN'
p1723
I0
sg39
F0.76658528074040078
sg34
g753
(S'\x07\xdf\x07\n\x11\x00"\t\'\xc0'
tRp1724
sa(dp1725
S'trial_loop.thisTrialN'
p1726
I56
sg895
S'38-maltesers.png'
p1727
sS'block_loop.thisIndex'
p1728
g889
sg38
S'left'
p1729
sg59
g63
sS'trial_loop.thisN'
p1730
I56
sg33
g991
sg64
g65
sS'trial_loop.thisIndex'
p1731
g60
(g99
S'8\x00\x00\x00'
tRp1732
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1733
I0
sg904
S'6-sour_patch_kids.png'
p1734
sS'block_loop.thisRepN'
p1735
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1736
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p1737
Nsg70
Vy
sS'block_loop.thisTrialN'
p1738
I0
sg39
F0.91636854937678436
sg34
g753
(S'\x07\xdf\x07\n\x11\x00(\x06&8'
tRp1739
sa(dp1740
S'trial_loop.thisTrialN'
p1741
I57
sg895
S'7-olives.png'
p1742
sS'block_loop.thisIndex'
p1743
g889
sg38
S'right'
p1744
sg59
g63
sS'trial_loop.thisN'
p1745
I57
sg33
S'7-olives.png'
p1746
sg64
g65
sS'trial_loop.thisIndex'
p1747
g60
(g99
S'9\x00\x00\x00'
tRp1748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1749
I0
sg904
S'22-daim.png'
p1750
sS'block_loop.thisRepN'
p1751
I0
sg907
g1746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1752
I0
sg909
S'22-daim.png'
p1753
sg55
g11
sS'block_loop.thisTrial'
p1754
Nsg70
Vy
sS'block_loop.thisTrialN'
p1755
I0
sg39
F1.3666263918457844
sg34
g753
(S'\x07\xdf\x07\n\x11\x00.\x05Kx'
tRp1756
sa(dp1757
S'trial_loop.thisTrialN'
p1758
I58
sg895
g1643
sS'block_loop.thisIndex'
p1759
g889
sg38
S'right'
p1760
sg59
g63
sS'trial_loop.thisN'
p1761
I58
sg33
g1653
sg64
g65
sS'trial_loop.thisIndex'
p1762
g60
(g99
S':\x00\x00\x00'
tRp1763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1764
I0
sg904
g1651
sS'block_loop.thisRepN'
p1765
I0
sg907
g1653
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1766
I0
sg909
g1647
sg55
g11
sS'block_loop.thisTrial'
p1767
Nsg70
Vy
sS'block_loop.thisTrialN'
p1768
I0
sg39
F1.9998320773811429
sg34
g753
(S'\x07\xdf\x07\n\x11\x004\x0bVX'
tRp1769
sa(dp1770
S'trial_loop.thisTrialN'
p1771
I59
sg895
g1157
sS'block_loop.thisIndex'
p1772
g889
sg38
S'left'
p1773
sg59
g63
sS'trial_loop.thisN'
p1774
I59
sg33
g1167
sg64
g65
sS'trial_loop.thisIndex'
p1775
g60
(g99
S';\x00\x00\x00'
tRp1776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1777
I0
sg904
g1165
sS'block_loop.thisRepN'
p1778
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1779
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p1780
Nsg70
Vy
sS'block_loop.thisTrialN'
p1781
I0
sg39
F0.84989941748790443
sg34
g753
(S'\x07\xdf\x07\n\x11\x00;\x0b\xdf\x10'
tRp1782
sa(dp1783
S'trial_loop.thisTrialN'
p1784
I60
sg895
g1397
sS'block_loop.thisIndex'
p1785
g889
sg38
S'left'
p1786
sg59
g63
sS'trial_loop.thisN'
p1787
I60
sg33
g1200
sg64
g65
sS'trial_loop.thisIndex'
p1788
g60
(g99
S'<\x00\x00\x00'
tRp1789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1790
I0
sg904
g1404
sS'block_loop.thisRepN'
p1791
I0
sg907
g1193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1792
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p1793
Nsg70
Vy
sS'block_loop.thisTrialN'
p1794
I0
sg39
F1.2165765567478957
sg34
g753
(S'\x07\xdf\x07\n\x11\x01\x05\n\x12 '
tRp1795
sa(dp1796
S'trial_loop.thisTrialN'
p1797
I61
sg895
g1157
sS'block_loop.thisIndex'
p1798
g889
sg38
S'left'
p1799
sg59
g63
sS'trial_loop.thisN'
p1800
I61
sg33
g1167
sg64
g65
sS'trial_loop.thisIndex'
p1801
g60
(g99
S'=\x00\x00\x00'
tRp1802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1803
I0
sg904
g1165
sS'block_loop.thisRepN'
p1804
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1805
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p1806
Nsg70
Vy
sS'block_loop.thisTrialN'
p1807
I0
sg39
F1.0164586973078258
sg34
g753
(S'\x07\xdf\x07\n\x11\x01\x0b\r\xf68'
tRp1808
sa(dp1809
S'trial_loop.thisTrialN'
p1810
I62
sg895
g1509
sS'block_loop.thisIndex'
p1811
g889
sg38
S'left'
p1812
sg59
g63
sS'trial_loop.thisN'
p1813
I62
sg33
g1016
sg64
g65
sS'trial_loop.thisIndex'
p1814
g60
(g99
S'>\x00\x00\x00'
tRp1815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1816
I0
sg904
g1516
sS'block_loop.thisRepN'
p1817
I0
sg907
g1016
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1818
I0
sg909
g1023
sg55
g11
sS'block_loop.thisTrial'
p1819
Nsg70
Vy
sS'block_loop.thisTrialN'
p1820
I0
sg39
F1.0332463975028077
sg34
g753
(S'\x07\xdf\x07\n\x11\x01\x11\x0e\xc5@'
tRp1821
sa(dp1822
S'trial_loop.thisTrialN'
p1823
I63
sg895
g1615
sS'block_loop.thisIndex'
p1824
g889
sg38
S'left'
p1825
sg59
g63
sS'trial_loop.thisN'
p1826
I63
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1827
g60
(g99
S'?\x00\x00\x00'
tRp1828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1829
I0
sg904
g1622
sS'block_loop.thisRepN'
p1830
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1831
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1832
Nsg70
Vy
sS'block_loop.thisTrialN'
p1833
I0
sg39
F0.94982905534561723
sg34
g753
(S'\x07\xdf\x07\n\x11\x01\x18\x00\x90\x88'
tRp1834
sa(dp1835
S'trial_loop.thisTrialN'
p1836
I64
sg895
g1046
sS'block_loop.thisIndex'
p1837
g889
sg38
S'left'
p1838
sg59
g63
sS'trial_loop.thisN'
p1839
I64
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p1840
g60
(g99
S'@\x00\x00\x00'
tRp1841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1842
I0
sg904
g1054
sS'block_loop.thisRepN'
p1843
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1844
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p1845
Nsg70
Vy
sS'block_loop.thisTrialN'
p1846
I0
sg39
F1.1833233168945299
sg34
g753
(S'\x07\xdf\x07\n\x11\x01\x1e\x00*\xf8'
tRp1847
sa(dp1848
S'trial_loop.thisTrialN'
p1849
I65
sg895
g1382
sS'block_loop.thisIndex'
p1850
g889
sg38
S'left'
p1851
sg59
g63
sS'trial_loop.thisN'
p1852
I65
sg33
g1238
sg64
g65
sS'trial_loop.thisIndex'
p1853
g60
(g99
S'A\x00\x00\x00'
tRp1854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1855
I0
sg904
g1389
sS'block_loop.thisRepN'
p1856
I0
sg907
g1238
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1857
I0
sg909
g1245
sg55
g11
sS'block_loop.thisTrial'
p1858
Nsg70
Vy
sS'block_loop.thisTrialN'
p1859
I0
sg39
F2.1665467355160217
sg34
g753
(S'\x07\xdf\x07\n\x11\x01$\x03\x99\xe0'
tRp1860
sa(dp1861
S'trial_loop.thisTrialN'
p1862
I66
sg895
g1643
sS'block_loop.thisIndex'
p1863
g889
sg38
S'left'
p1864
sg59
g63
sS'trial_loop.thisN'
p1865
I66
sg33
g1653
sg64
g65
sS'trial_loop.thisIndex'
p1866
g60
(g99
S'B\x00\x00\x00'
tRp1867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1868
I0
sg904
g1651
sS'block_loop.thisRepN'
p1869
I0
sg907
g1653
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1870
I0
sg909
g1647
sg55
g11
sS'block_loop.thisTrial'
p1871
Nsg70
Vy
sS'block_loop.thisTrialN'
p1872
I0
sg39
F2.2832367041773978
sg34
g753
(S'\x07\xdf\x07\n\x11\x01+\x06\x83\xf8'
tRp1873
sa(dp1874
S'trial_loop.thisTrialN'
p1875
I67
sg895
g1324
sS'block_loop.thisIndex'
p1876
g889
sg38
S'left'
p1877
sg59
g63
sS'trial_loop.thisN'
p1878
I67
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1879
g60
(g99
S'C\x00\x00\x00'
tRp1880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1881
I0
sg904
g1331
sS'block_loop.thisRepN'
p1882
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1883
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1884
Nsg70
Vy
sS'block_loop.thisTrialN'
p1885
I0
sg39
F0.99991561104616267
sg34
g753
(S'\x07\xdf\x07\n\x11\x012\x0bZ@'
tRp1886
sa(dp1887
S'trial_loop.thisTrialN'
p1888
I68
sg895
g1339
sS'block_loop.thisIndex'
p1889
g889
sg38
S'right'
p1890
sg59
g63
sS'trial_loop.thisN'
p1891
I68
sg33
g1343
sg64
g65
sS'trial_loop.thisIndex'
p1892
g60
(g99
S'D\x00\x00\x00'
tRp1893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1894
I0
sg904
g1347
sS'block_loop.thisRepN'
p1895
I0
sg907
g1343
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1896
I0
sg909
g1350
sg55
g11
sS'block_loop.thisTrial'
p1897
Nsg70
Vy
sS'block_loop.thisTrialN'
p1898
I0
sg39
F1.233263047215587
sg34
g753
(S'\x07\xdf\x07\n\x11\x018\x0b\xea\xc8'
tRp1899
sa(dp1900
S'trial_loop.thisTrialN'
p1901
I69
sg895
g1114
sS'block_loop.thisIndex'
p1902
g889
sg38
S'right'
p1903
sg59
g63
sS'trial_loop.thisN'
p1904
I69
sg33
g1074
sg64
g65
sS'trial_loop.thisIndex'
p1905
g60
(g99
S'E\x00\x00\x00'
tRp1906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1907
I0
sg904
g1121
sS'block_loop.thisRepN'
p1908
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1909
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p1910
Nsg70
Vy
sS'block_loop.thisTrialN'
p1911
I0
sg39
F1.0167172810324701
sg34
g753
(S'\x07\xdf\x07\n\x11\x02\x03\x00\xcb '
tRp1912
sa(dp1913
S'trial_loop.thisTrialN'
p1914
I70
sg895
S'51-mars.png'
p1915
sS'block_loop.thisIndex'
p1916
g889
sg38
S'left'
p1917
sg59
g63
sS'trial_loop.thisN'
p1918
I70
sg33
g1090
sg64
g65
sS'trial_loop.thisIndex'
p1919
g60
(g99
S'F\x00\x00\x00'
tRp1920
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1921
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p1922
sS'block_loop.thisRepN'
p1923
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1924
I0
sg909
g1084
sg55
g11
sS'block_loop.thisTrial'
p1925
Nsg70
Vy
sS'block_loop.thisTrialN'
p1926
I0
sg39
F0.84994987980462611
sg34
g753
(S'\x07\xdf\x07\n\x11\x02\t\x01\x9a('
tRp1927
sa(dp1928
S'trial_loop.thisTrialN'
p1929
I71
sg895
g1397
sS'block_loop.thisIndex'
p1930
g889
sg38
S'left'
p1931
sg59
g63
sS'trial_loop.thisN'
p1932
I71
sg33
g1193
sg64
g65
sS'trial_loop.thisIndex'
p1933
g60
(g99
S'G\x00\x00\x00'
tRp1934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1935
I0
sg904
g1404
sS'block_loop.thisRepN'
p1936
I0
sg907
g1193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1937
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p1938
Nsg70
Vy
sS'block_loop.thisTrialN'
p1939
I0
sg39
F1.1166802753359661
sg34
g753
(S'\x07\xdf\x07\n\x11\x02\x0e\x0f\x0b\x90'
tRp1940
sa(dp1941
S'trial_loop.thisTrialN'
p1942
I72
sg895
S'26-walkers_smoky_bacon.png'
p1943
sS'block_loop.thisIndex'
p1944
g889
sg38
S'right'
p1945
sg59
g63
sS'trial_loop.thisN'
p1946
I72
sg33
g1457
sg64
g65
sS'trial_loop.thisIndex'
p1947
g60
(g99
S'H\x00\x00\x00'
tRp1948
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1949
I0
sg904
S'44-crunch.png'
p1950
sS'block_loop.thisRepN'
p1951
I0
sg907
g1457
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1952
I0
sg909
g1464
sg55
g11
sS'block_loop.thisTrial'
p1953
Nsg70
Vy
sS'block_loop.thisTrialN'
p1954
I0
sg39
F0.89995204654405825
sg34
g753
(S'\x07\xdf\x07\n\x11\x02\x15\x02\x07\x88'
tRp1955
sa(dp1956
S'trial_loop.thisTrialN'
p1957
I73
sg895
S'21-nakd_banana_crunch.png'
p1958
sS'block_loop.thisIndex'
p1959
g889
sg38
S'left'
p1960
sg59
g63
sS'trial_loop.thisN'
p1961
I73
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p1962
g60
(g99
S'I\x00\x00\x00'
tRp1963
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1964
I0
sg904
S'1-treacle_cookies.png'
p1965
sS'block_loop.thisRepN'
p1966
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1967
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p1968
Nsg70
Vy
sS'block_loop.thisTrialN'
p1969
I0
sg39
F0.98326361741419532
sg34
g753
(S'\x07\xdf\x07\n\x11\x02\x1b\x00\xeeH'
tRp1970
sa(dp1971
S'trial_loop.thisTrialN'
p1972
I74
sg895
g1063
sS'block_loop.thisIndex'
p1973
g889
sg38
S'left'
p1974
sg59
g63
sS'trial_loop.thisN'
p1975
I74
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p1976
g60
(g99
S'J\x00\x00\x00'
tRp1977
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1978
I0
sg904
g1071
sS'block_loop.thisRepN'
p1979
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1980
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p1981
Nsg70
Vy
sS'block_loop.thisTrialN'
p1982
I0
sg39
F0.73323140135835274
sg34
g753
(S'\x07\xdf\x07\n\x11\x02!\x01@P'
tRp1983
sa(dp1984
S'trial_loop.thisTrialN'
p1985
I75
sg895
S'8-liquorice_catherine_wheels.png'
p1986
sS'block_loop.thisIndex'
p1987
g889
sg38
S'right'
p1988
sg59
g63
sS'trial_loop.thisN'
p1989
I75
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p1990
g60
(g99
S'K\x00\x00\x00'
tRp1991
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1992
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1993
sS'block_loop.thisRepN'
p1994
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1995
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p1996
Nsg70
Vy
sS'block_loop.thisTrialN'
p1997
I0
sg39
F1.4670543807005743
sg34
g753
(S'\x07\xdf\x07\n\x11\x02&\r\x07\xf0'
tRp1998
sa(dp1999
S'trial_loop.thisTrialN'
p2000
I76
sg895
g1643
sS'block_loop.thisIndex'
p2001
g889
sg38
S'left'
p2002
sg59
g63
sS'trial_loop.thisN'
p2003
I76
sg33
g1653
sg64
g65
sS'trial_loop.thisIndex'
p2004
g60
(g99
S'L\x00\x00\x00'
tRp2005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2006
I0
sg904
g1651
sS'block_loop.thisRepN'
p2007
I0
sg907
g1653
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2008
I0
sg909
g1647
sg55
g11
sS'block_loop.thisTrial'
p2009
Nsg70
Vy
sS'block_loop.thisTrialN'
p2010
I0
sg39
F1.8332277521039941
sg34
g753
(S'\x07\xdf\x07\n\x11\x02-\x05?\xc0'
tRp2011
sa(dp2012
S'trial_loop.thisTrialN'
p2013
I77
sg895
g916
sS'block_loop.thisIndex'
p2014
g889
sg38
S'right'
p2015
sg59
g63
sS'trial_loop.thisN'
p2016
I77
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2017
g60
(g99
S'M\x00\x00\x00'
tRp2018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2019
I0
sg904
g924
sS'block_loop.thisRepN'
p2020
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2021
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2022
Nsg70
Vy
sS'block_loop.thisTrialN'
p2023
I0
sg39
F0.86661840910892352
sg34
g753
(S'\x07\xdf\x07\n\x11\x024\x03,\x80'
tRp2024
sa(dp2025
S'trial_loop.thisTrialN'
p2026
I78
sg895
S'22-daim.png'
p2027
sS'block_loop.thisIndex'
p2028
g889
sg38
S'right'
p2029
sg59
g63
sS'trial_loop.thisN'
p2030
I78
sg33
g1746
sg64
g65
sS'trial_loop.thisIndex'
p2031
g60
(g99
S'N\x00\x00\x00'
tRp2032
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2033
I0
sg904
S'7-olives.png'
p2034
sS'block_loop.thisRepN'
p2035
I0
sg907
g1746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2036
I0
sg909
g1753
sg55
g11
sS'block_loop.thisTrial'
p2037
Nsg70
Vy
sS'block_loop.thisTrialN'
p2038
I0
sg39
F1.8332314583785774
sg34
g753
(S'\x07\xdf\x07\n\x11\x02:\x01\xd4\xc0'
tRp2039
sa(dp2040
S'trial_loop.thisTrialN'
p2041
I79
sg895
g1915
sS'block_loop.thisIndex'
p2042
g889
sg38
S'left'
p2043
sg59
g63
sS'trial_loop.thisN'
p2044
I79
sg33
g1090
sg64
g65
sS'trial_loop.thisIndex'
p2045
g60
(g99
S'O\x00\x00\x00'
tRp2046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2047
I0
sg904
g1922
sS'block_loop.thisRepN'
p2048
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2049
I0
sg909
g1084
sg55
g11
sS'block_loop.thisTrial'
p2050
Nsg70
Vy
sS'block_loop.thisTrialN'
p2051
I0
sg39
F1.9332454851901275
sg34
g753
(S'\x07\xdf\x07\n\x11\x03\x04\x0f\x03\xc0'
tRp2052
sa(dp2053
S'trial_loop.thisTrialN'
p2054
I80
sg895
g1615
sS'block_loop.thisIndex'
p2055
g889
sg38
S'left'
p2056
sg59
g63
sS'trial_loop.thisN'
p2057
I80
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2058
g60
(g99
S'P\x00\x00\x00'
tRp2059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2060
I0
sg904
g1622
sS'block_loop.thisRepN'
p2061
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2062
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2063
Nsg70
Vy
sS'block_loop.thisTrialN'
p2064
I0
sg39
F1.0503328802151373
sg34
g753
(S'\x07\xdf\x07\n\x11\x03\x0b\x0e_\xb0'
tRp2065
sa(dp2066
S'trial_loop.thisTrialN'
p2067
I81
sg895
S'48-twix.png'
p2068
sS'block_loop.thisIndex'
p2069
g889
sg38
S'left'
p2070
sg59
g63
sS'trial_loop.thisN'
p2071
I81
sg33
g1343
sg64
g65
sS'trial_loop.thisIndex'
p2072
g60
(g99
S'Q\x00\x00\x00'
tRp2073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2074
I0
sg904
S'50-polo.png'
p2075
sS'block_loop.thisRepN'
p2076
I0
sg907
g1343
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2077
I0
sg909
g1350
sg55
g11
sS'block_loop.thisTrial'
p2078
Nsg70
Vy
sS'block_loop.thisTrialN'
p2079
I0
sg39
F0.86653886681597214
sg34
g753
(S'\x07\xdf\x07\n\x11\x03\x12\x00e\x90'
tRp2080
sa(dp2081
S'trial_loop.thisTrialN'
p2082
I82
sg895
g1660
sS'block_loop.thisIndex'
p2083
g889
sg38
S'left'
p2084
sg59
g63
sS'trial_loop.thisN'
p2085
I82
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p2086
g60
(g99
S'R\x00\x00\x00'
tRp2087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2088
I0
sg904
g1667
sS'block_loop.thisRepN'
p2089
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2090
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p2091
Nsg70
Vy
sS'block_loop.thisTrialN'
p2092
I0
sg39
F1.8831977027984976
sg34
g753
(S'\x07\xdf\x07\n\x11\x03\x17\x0eP\x10'
tRp2093
sa(dp2094
S'trial_loop.thisTrialN'
p2095
I83
sg895
g1219
sS'block_loop.thisIndex'
p2096
g889
sg38
S'right'
p2097
sg59
g63
sS'trial_loop.thisN'
p2098
I83
sg33
g1167
sg64
g65
sS'trial_loop.thisIndex'
p2099
g60
(g99
S'S\x00\x00\x00'
tRp2100
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2101
I0
sg904
g1226
sS'block_loop.thisRepN'
p2102
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2103
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p2104
Nsg70
Vy
sS'block_loop.thisTrialN'
p2105
I0
sg39
F0.99980499309094739
sg34
g753
(S'\x07\xdf\x07\n\x11\x03\x1e\x0c\xf4h'
tRp2106
sa(dp2107
S'trial_loop.thisTrialN'
p2108
I84
sg895
g933
sS'block_loop.thisIndex'
p2109
g889
sg38
S'left'
p2110
sg59
g63
sS'trial_loop.thisN'
p2111
I84
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p2112
g60
(g99
S'T\x00\x00\x00'
tRp2113
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2114
I0
sg904
g941
sS'block_loop.thisRepN'
p2115
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2116
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p2117
Nsg70
Vy
sS'block_loop.thisTrialN'
p2118
I0
sg39
F1.5999287825652573
sg34
g753
(S'\x07\xdf\x07\n\x11\x03$\r\x84\xf0'
tRp2119
sa(dp2120
S'trial_loop.thisTrialN'
p2121
I85
sg895
S'46-pistachios.png'
p2122
sS'block_loop.thisIndex'
p2123
g889
sg38
S'right'
p2124
sg59
g63
sS'trial_loop.thisN'
p2125
I85
sg33
g1647
sg64
g65
sS'trial_loop.thisIndex'
p2126
g60
(g99
S'U\x00\x00\x00'
tRp2127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2128
I0
sg904
S'29-beans.png'
p2129
sS'block_loop.thisRepN'
p2130
I0
sg907
g1653
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2131
I0
sg909
g1647
sg55
g11
sS'block_loop.thisTrial'
p2132
Nsg70
Vy
sS'block_loop.thisTrialN'
p2133
I0
sg39
F1.0833497739768063
sg34
g753
(S'\x07\xdf\x07\n\x11\x03+\x07\xdf\xa0'
tRp2134
sa(dp2135
S'trial_loop.thisTrialN'
p2136
I86
sg895
g1219
sS'block_loop.thisIndex'
p2137
g889
sg38
S'right'
p2138
sg59
g63
sS'trial_loop.thisN'
p2139
I86
sg33
g1167
sg64
g65
sS'trial_loop.thisIndex'
p2140
g60
(g99
S'V\x00\x00\x00'
tRp2141
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2142
I0
sg904
g1226
sS'block_loop.thisRepN'
p2143
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2144
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p2145
Nsg70
Vy
sS'block_loop.thisTrialN'
p2146
I0
sg39
F0.83324172189895762
sg34
g753
(S'\x07\xdf\x07\n\x11\x031\t\xa4\xc0'
tRp2147
sa(dp2148
S'trial_loop.thisTrialN'
p2149
I87
sg895
g1660
sS'block_loop.thisIndex'
p2150
g889
sg38
S'right'
p2151
sg59
g63
sS'trial_loop.thisN'
p2152
I87
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p2153
g60
(g99
S'W\x00\x00\x00'
tRp2154
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2155
I0
sg904
g1667
sS'block_loop.thisRepN'
p2156
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2157
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p2158
Nsg70
Vy
sS'block_loop.thisTrialN'
p2159
I0
sg39
F1.0833050136134261
sg34
g753
(S'\x07\xdf\x07\n\x11\x037\x07\x95h'
tRp2160
sa(dp2161
S'trial_loop.thisTrialN'
p2162
I88
sg895
g1986
sS'block_loop.thisIndex'
p2163
g889
sg38
S'right'
p2164
sg59
g63
sS'trial_loop.thisN'
p2165
I88
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p2166
g60
(g99
S'X\x00\x00\x00'
tRp2167
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2168
I0
sg904
g1993
sS'block_loop.thisRepN'
p2169
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2170
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p2171
Nsg70
Vy
sS'block_loop.thisTrialN'
p2172
I0
sg39
F1.0332828900245659
sg34
g753
(S'\x07\xdf\x07\n\x11\x04\x01\tV\xa0'
tRp2173
sa(dp2174
S'trial_loop.thisTrialN'
p2175
I89
sg895
g896
sS'block_loop.thisIndex'
p2176
g889
sg38
S'right'
p2177
sg59
g63
sS'trial_loop.thisN'
p2178
I89
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p2179
g60
(g99
S'Y\x00\x00\x00'
tRp2180
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2181
I0
sg904
g905
sS'block_loop.thisRepN'
p2182
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2183
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2184
Nsg70
Vy
sS'block_loop.thisTrialN'
p2185
I0
sg39
F0.66665079622180201
sg34
g753
(S'\x07\xdf\x07\n\x11\x04\x07\nd('
tRp2186
sa(dp2187
S'trial_loop.thisTrialN'
p2188
I90
sg895
g1943
sS'block_loop.thisIndex'
p2189
g889
sg38
S'right'
p2190
sg59
g63
sS'trial_loop.thisN'
p2191
I90
sg33
g1457
sg64
g65
sS'trial_loop.thisIndex'
p2192
g60
(g99
S'Z\x00\x00\x00'
tRp2193
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2194
I0
sg904
g1950
sS'block_loop.thisRepN'
p2195
I0
sg907
g1457
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2196
I0
sg909
g1464
sg55
g11
sS'block_loop.thisTrial'
p2197
Nsg70
Vy
sS'block_loop.thisTrialN'
p2198
I0
sg39
F0.98324280527231167
sg34
g753
(S'\x07\xdf\x07\n\x11\x04\r\x05\xb8\xd8'
tRp2199
sa(dp2200
S'trial_loop.thisTrialN'
p2201
I91
sg895
g950
sS'block_loop.thisIndex'
p2202
g889
sg38
S'left'
p2203
sg59
g63
sS'trial_loop.thisN'
p2204
I91
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2205
g60
(g99
S'[\x00\x00\x00'
tRp2206
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2207
I0
sg904
g958
sS'block_loop.thisRepN'
p2208
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2209
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2210
Nsg70
Vy
sS'block_loop.thisTrialN'
p2211
I0
sg39
F1.9666398484660021
sg34
g753
(S'\x07\xdf\x07\n\x11\x04\x13\x06\n\xe0'
tRp2212
sa(dp2213
S'trial_loop.thisTrialN'
p2214
I92
sg895
g1958
sS'block_loop.thisIndex'
p2215
g889
sg38
S'left'
p2216
sg59
g63
sS'trial_loop.thisN'
p2217
I92
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p2218
g60
(g99
S'\\\x00\x00\x00'
tRp2219
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2220
I0
sg904
g1965
sS'block_loop.thisRepN'
p2221
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2222
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p2223
Nsg70
Vy
sS'block_loop.thisTrialN'
p2224
I0
sg39
F1.0165661791870662
sg34
g753
(S'\x07\xdf\x07\n\x11\x04\x1a\x06\x1eh'
tRp2225
sa(dp2226
S'trial_loop.thisTrialN'
p2227
I93
sg895
g1615
sS'block_loop.thisIndex'
p2228
g889
sg38
S'left'
p2229
sg59
g63
sS'trial_loop.thisN'
p2230
I93
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2231
g60
(g99
S']\x00\x00\x00'
tRp2232
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2233
I0
sg904
g1622
sS'block_loop.thisRepN'
p2234
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2235
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2236
Nsg70
Vy
sS'block_loop.thisTrialN'
p2237
I0
sg39
F0.93323949813566287
sg34
g753
(S'\x07\xdf\x07\n\x11\x04 \x06\xedp'
tRp2238
sa(dp2239
S'trial_loop.thisTrialN'
p2240
I94
sg895
g1234
sS'block_loop.thisIndex'
p2241
g889
sg38
S'right'
p2242
sg59
g63
sS'trial_loop.thisN'
p2243
I94
sg33
g1245
sg64
g65
sS'trial_loop.thisIndex'
p2244
g60
(g99
S'^\x00\x00\x00'
tRp2245
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2246
I0
sg904
g1242
sS'block_loop.thisRepN'
p2247
I0
sg907
g1238
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2248
I0
sg909
g1245
sg55
g11
sS'block_loop.thisTrial'
p2249
Nsg70
Vy
sS'block_loop.thisTrialN'
p2250
I0
sg39
F2.6665969127316203
sg34
g753
(S'\x07\xdf\x07\n\x11\x04&\x06MH'
tRp2251
sa(dp2252
S'trial_loop.thisTrialN'
p2253
I95
sg895
g1339
sS'block_loop.thisIndex'
p2254
g889
sg38
S'right'
p2255
sg59
g63
sS'trial_loop.thisN'
p2256
I95
sg33
g1343
sg64
g65
sS'trial_loop.thisIndex'
p2257
g60
(g99
S'_\x00\x00\x00'
tRp2258
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2259
I0
sg904
g1347
sS'block_loop.thisRepN'
p2260
I0
sg907
g1343
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2261
I0
sg909
g1350
sg55
g11
sS'block_loop.thisTrial'
p2262
Nsg70
Vy
sS'block_loop.thisTrialN'
p2263
I0
sg39
F0.73328614014099003
sg34
g753
(S'\x07\xdf\x07\n\x11\x04.\x01\xd0\xd8'
tRp2264
sa(dp2265
S'trial_loop.thisTrialN'
p2266
I96
sg895
g1438
sS'block_loop.thisIndex'
p2267
g889
sg38
S'right'
p2268
sg59
g63
sS'trial_loop.thisN'
p2269
I96
sg33
g1108
sg64
g65
sS'trial_loop.thisIndex'
p2270
g60
(g99
S'`\x00\x00\x00'
tRp2271
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2272
I0
sg904
g1445
sS'block_loop.thisRepN'
p2273
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2274
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p2275
Nsg70
Vy
sS'block_loop.thisTrialN'
p2276
I0
sg39
F1.2167017146894068
sg34
g753
(S'\x07\xdf\x07\n\x11\x043\r]\xe0'
tRp2277
sa(dp2278
S'trial_loop.thisTrialN'
p2279
I97
sg895
g1727
sS'block_loop.thisIndex'
p2280
g889
sg38
S'left'
p2281
sg59
g63
sS'trial_loop.thisN'
p2282
I97
sg33
g991
sg64
g65
sS'trial_loop.thisIndex'
p2283
g60
(g99
S'a\x00\x00\x00'
tRp2284
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2285
I0
sg904
g1734
sS'block_loop.thisRepN'
p2286
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2287
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p2288
Nsg70
Vy
sS'block_loop.thisTrialN'
p2289
I0
sg39
F1.3329500668260152
sg34
g753
(S'\x07\xdf\x07\n\x11\x04:\x01\xff\xb8'
tRp2290
sa(dp2291
S'trial_loop.thisTrialN'
p2292
I98
sg895
g1915
sS'block_loop.thisIndex'
p2293
g889
sg38
S'left'
p2294
sg59
g63
sS'trial_loop.thisN'
p2295
I98
sg33
g1090
sg64
g65
sS'trial_loop.thisIndex'
p2296
g60
(g99
S'b\x00\x00\x00'
tRp2297
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2298
I0
sg904
g1922
sS'block_loop.thisRepN'
p2299
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2300
I0
sg909
g1084
sg55
g11
sS'block_loop.thisTrial'
p2301
Nsg70
Vy
sS'block_loop.thisTrialN'
p2302
I0
sg39
F1.599992359377211
sg34
g753
(S'\x07\xdf\x07\n\x11\x05\x04\x07\x91\x80'
tRp2303
sa(dp2304
S'trial_loop.thisTrialN'
p2305
I99
sg895
g1029
sS'block_loop.thisIndex'
p2306
g889
sg38
S'right'
p2307
sg59
g63
sS'trial_loop.thisN'
p2308
I99
sg33
g1040
sg64
g65
sS'trial_loop.thisIndex'
p2309
g60
(g99
S'c\x00\x00\x00'
tRp2310
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2311
I0
sg904
g1037
sS'block_loop.thisRepN'
p2312
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2313
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p2314
Nsg70
Vy
sS'block_loop.thisTrialN'
p2315
I0
sg39
F1.8166276462798123
sg34
g753
(S'\x07\xdf\x07\n\x11\x05\x0b\x01\xec0'
tRp2316
sa(dp2317
S'trial_loop.thisTrialN'
p2318
I100
sg895
g1324
sS'block_loop.thisIndex'
p2319
g889
sg38
S'left'
p2320
sg59
g63
sS'trial_loop.thisN'
p2321
I100
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2322
g60
(g99
S'd\x00\x00\x00'
tRp2323
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2324
I0
sg904
g1331
sS'block_loop.thisRepN'
p2325
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2326
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2327
Nsg70
Vy
sS'block_loop.thisTrialN'
p2328
I0
sg39
F0.94983219142159214
sg34
g753
(S'\x07\xdf\x07\n\x11\x05\x11\x0e\xe0\x98'
tRp2329
sa(dp2330
S'trial_loop.thisTrialN'
p2331
I101
sg895
g1012
sS'block_loop.thisIndex'
p2332
g889
sg38
S'right'
p2333
sg59
g63
sS'trial_loop.thisN'
p2334
I101
sg33
g1016
sg64
g65
sS'trial_loop.thisIndex'
p2335
g60
(g99
S'e\x00\x00\x00'
tRp2336
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2337
I0
sg904
g1020
sS'block_loop.thisRepN'
p2338
I0
sg907
g1016
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2339
I0
sg909
g1023
sg55
g11
sS'block_loop.thisTrial'
p2340
Nsg70
Vy
sS'block_loop.thisTrialN'
p2341
I0
sg39
F1.150012487287313
sg34
g753
(S'\x07\xdf\x07\n\x11\x05\x17\x0e\xb9\x88'
tRp2342
sa(dp2343
S'trial_loop.thisTrialN'
p2344
I102
sg895
g1129
sS'block_loop.thisIndex'
p2345
g889
sg38
S'left'
p2346
sg59
g63
sS'trial_loop.thisN'
p2347
I102
sg33
g1033
sg64
g65
sS'trial_loop.thisIndex'
p2348
g60
(g99
S'f\x00\x00\x00'
tRp2349
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2350
I0
sg904
g1136
sS'block_loop.thisRepN'
p2351
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2352
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p2353
Nsg70
Vy
sS'block_loop.thisTrialN'
p2354
I0
sg39
F0.83334977397316834
sg34
g753
(S'\x07\xdf\x07\n\x11\x05\x1e\x02.\x98'
tRp2355
sa(dp2356
S'trial_loop.thisTrialN'
p2357
I103
sg895
g1986
sS'block_loop.thisIndex'
p2358
g889
sg38
S'right'
p2359
sg59
g63
sS'trial_loop.thisN'
p2360
I103
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p2361
g60
(g99
S'g\x00\x00\x00'
tRp2362
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2363
I0
sg904
g1993
sS'block_loop.thisRepN'
p2364
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2365
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p2366
Nsg70
Vy
sS'block_loop.thisTrialN'
p2367
I0
sg39
F0.98324223507370334
sg34
g753
(S'\x07\xdf\x07\n\x11\x05$\x00\x1f@'
tRp2368
sa(dp2369
S'trial_loop.thisTrialN'
p2370
I104
sg895
g1382
sS'block_loop.thisIndex'
p2371
g889
sg38
S'left'
p2372
sg59
g63
sS'trial_loop.thisN'
p2373
I104
sg33
g1238
sg64
g65
sS'trial_loop.thisIndex'
p2374
g60
(g99
S'h\x00\x00\x00'
tRp2375
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2376
I0
sg904
g1389
sS'block_loop.thisRepN'
p2377
I0
sg907
g1238
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2378
I0
sg909
g1245
sg55
g11
sS'block_loop.thisTrial'
p2379
Nsg70
Vy
sS'block_loop.thisTrialN'
p2380
I0
sg39
F2.3666643098549685
sg34
g753
(S'\x07\xdf\x07\n\x11\x05*\x00u0'
tRp2381
sa(dp2382
S'trial_loop.thisTrialN'
p2383
I105
sg895
g1080
sS'block_loop.thisIndex'
p2384
g889
sg38
S'right'
p2385
sg59
g63
sS'trial_loop.thisN'
p2386
I105
sg33
g1090
sg64
g65
sS'trial_loop.thisIndex'
p2387
g60
(g99
S'i\x00\x00\x00'
tRp2388
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2389
I0
sg904
g1088
sS'block_loop.thisRepN'
p2390
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2391
I0
sg909
g1084
sg55
g11
sS'block_loop.thisTrial'
p2392
Nsg70
Vy
sS'block_loop.thisTrialN'
p2393
I0
sg39
F0.9333099172981747
sg34
g753
(S'\x07\xdf\x07\n\x11\x051\x06x@'
tRp2394
sa(dp2395
S'trial_loop.thisTrialN'
p2396
I106
sg895
g1307
sS'block_loop.thisIndex'
p2397
g889
sg38
S'right'
p2398
sg59
g63
sS'trial_loop.thisN'
p2399
I106
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p2400
g60
(g99
S'j\x00\x00\x00'
tRp2401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2402
I0
sg904
g1315
sS'block_loop.thisRepN'
p2403
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2404
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p2405
Nsg70
Vy
sS'block_loop.thisTrialN'
p2406
I0
sg39
F0.80002411927489447
sg34
g753
(S'\x07\xdf\x07\n\x11\x057\x06\x16\x98'
tRp2407
sa(dp2408
S'trial_loop.thisTrialN'
p2409
I107
sg895
g933
sS'block_loop.thisIndex'
p2410
g889
sg38
S'left'
p2411
sg59
g63
sS'trial_loop.thisN'
p2412
I107
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p2413
g60
(g99
S'k\x00\x00\x00'
tRp2414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2415
I0
sg904
g941
sS'block_loop.thisRepN'
p2416
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2417
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p2418
Nsg70
Vy
sS'block_loop.thisTrialN'
p2419
I0
sg39
F1.2333180710957095
sg34
g753
(S'\x07\xdf\x07\n\x11\x06\x01\x03\x8e('
tRp2420
sa(dp2421
S'trial_loop.thisTrialN'
p2422
I108
sg895
g1174
sS'block_loop.thisIndex'
p2423
g889
sg38
S'right'
p2424
sg59
g63
sS'trial_loop.thisN'
p2425
I108
sg33
g1057
sg64
g65
sS'trial_loop.thisIndex'
p2426
g60
(g99
S'l\x00\x00\x00'
tRp2427
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2428
I0
sg904
g1181
sS'block_loop.thisRepN'
p2429
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2430
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p2431
Nsg70
Vy
sS'block_loop.thisTrialN'
p2432
I0
sg39
F0.91669897775500431
sg34
g753
(S'\x07\xdf\x07\n\x11\x06\x07\x07v('
tRp2433
sa(dp2434
S'trial_loop.thisTrialN'
p2435
I109
sg895
g1251
sS'block_loop.thisIndex'
p2436
g889
sg38
S'left'
p2437
sg59
g63
sS'trial_loop.thisN'
p2438
I109
sg33
g1262
sg64
g65
sS'trial_loop.thisIndex'
p2439
g60
(g99
S'm\x00\x00\x00'
tRp2440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2441
I0
sg904
g1259
sS'block_loop.thisRepN'
p2442
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2443
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p2444
Nsg70
Vy
sS'block_loop.thisTrialN'
p2445
I0
sg39
F0.76668592027272098
sg34
g753
(S'\x07\xdf\x07\n\x11\x06\r\x06\xd6\x00'
tRp2446
sa(dp2447
S'trial_loop.thisTrialN'
p2448
I110
sg895
g2122
sS'block_loop.thisIndex'
p2449
g889
sg38
S'right'
p2450
sg59
g63
sS'trial_loop.thisN'
p2451
I110
sg33
g1653
sg64
g65
sS'trial_loop.thisIndex'
p2452
g60
(g99
S'n\x00\x00\x00'
tRp2453
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2454
I0
sg904
g2129
sS'block_loop.thisRepN'
p2455
I0
sg907
g1653
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2456
I0
sg909
g1647
sg55
g11
sS'block_loop.thisTrial'
p2457
Nsg70
Vy
sS'block_loop.thisTrialN'
p2458
I0
sg39
F1.816653305078944
sg34
g753
(S'\x07\xdf\x07\n\x11\x06\x13\x03\xd4x'
tRp2459
sa(dp2460
S'trial_loop.thisTrialN'
p2461
I111
sg895
g1958
sS'block_loop.thisIndex'
p2462
g889
sg38
S'left'
p2463
sg59
g63
sS'trial_loop.thisN'
p2464
I111
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p2465
g60
(g99
S'o\x00\x00\x00'
tRp2466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2467
I0
sg904
g1965
sS'block_loop.thisRepN'
p2468
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2469
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p2470
Nsg70
Vy
sS'block_loop.thisTrialN'
p2471
I0
sg39
F0.85035500380763551
sg34
g753
(S'\x07\xdf\x07\n\x11\x06\x1a\x01\x86\xa0'
tRp2472
sa(dp2473
S'trial_loop.thisTrialN'
p2474
I112
sg895
g1742
sS'block_loop.thisIndex'
p2475
g889
sg38
S'left'
p2476
sg59
g63
sS'trial_loop.thisN'
p2477
I112
sg33
g1746
sg64
g65
sS'trial_loop.thisIndex'
p2478
g60
(g99
S'p\x00\x00\x00'
tRp2479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2480
I0
sg904
g1750
sS'block_loop.thisRepN'
p2481
I0
sg907
g1746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2482
I0
sg909
g1753
sg55
g11
sS'block_loop.thisTrial'
p2483
Nsg70
Vy
sS'block_loop.thisTrialN'
p2484
I0
sg39
F1.5998734735840117
sg34
g753
(S'\x07\xdf\x07\n\x11\x06\x1f\x0e\xf8\x08'
tRp2485
sa(dp2486
S'trial_loop.thisTrialN'
p2487
I113
sg895
g1438
sS'block_loop.thisIndex'
p2488
g889
sg38
S'right'
p2489
sg59
g63
sS'trial_loop.thisN'
p2490
I113
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p2491
g60
(g99
S'q\x00\x00\x00'
tRp2492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2493
I0
sg904
g1445
sS'block_loop.thisRepN'
p2494
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2495
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p2496
Nsg70
Vy
sS'block_loop.thisTrialN'
p2497
I0
sg39
F1.4333204659196781
sg34
g753
(S'\x07\xdf\x07\n\x11\x06&\tR\xb8'
tRp2498
sa(dp2499
S'trial_loop.thisTrialN'
p2500
I114
sg895
g2027
sS'block_loop.thisIndex'
p2501
g889
sg38
S'right'
p2502
sg59
g63
sS'trial_loop.thisN'
p2503
I114
sg33
g1746
sg64
g65
sS'trial_loop.thisIndex'
p2504
g60
(g99
S'r\x00\x00\x00'
tRp2505
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2506
I0
sg904
g2034
sS'block_loop.thisRepN'
p2507
I0
sg907
g1746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2508
I0
sg909
g1753
sg55
g11
sS'block_loop.thisTrial'
p2509
Nsg70
Vy
sS'block_loop.thisTrialN'
p2510
I0
sg39
F0.89998312220632215
sg34
g753
(S'\x07\xdf\x07\n\x11\x06-\x01L\x08'
tRp2511
sa(dp2512
S'trial_loop.thisTrialN'
p2513
I115
sg895
g1727
sS'block_loop.thisIndex'
p2514
g889
sg38
S'left'
p2515
sg59
g63
sS'trial_loop.thisN'
p2516
I115
sg33
g991
sg64
g65
sS'trial_loop.thisIndex'
p2517
g60
(g99
S's\x00\x00\x00'
tRp2518
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2519
I0
sg904
g1734
sS'block_loop.thisRepN'
p2520
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2521
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p2522
Nsg70
Vy
sS'block_loop.thisTrialN'
p2523
I0
sg39
F0.91632150823716074
sg34
g753
(S'\x07\xdf\x07\n\x11\x063\x002\xc8'
tRp2524
sa(dp2525
S'trial_loop.thisTrialN'
p2526
I116
sg895
g1915
sS'block_loop.thisIndex'
p2527
g889
sg38
S'left'
p2528
sg59
g63
sS'trial_loop.thisN'
p2529
I116
sg33
g1090
sg64
g65
sS'trial_loop.thisIndex'
p2530
g60
(g99
S't\x00\x00\x00'
tRp2531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2532
I0
sg904
g1922
sS'block_loop.thisRepN'
p2533
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2534
I0
sg909
g1084
sg55
g11
sS'block_loop.thisTrial'
p2535
Nsg70
Vy
sS'block_loop.thisTrialN'
p2536
I0
sg39
F0.70012641237553908
sg34
g753
(S'\x07\xdf\x07\n\x11\x068\x0e\x9aH'
tRp2537
sa(dp2538
S'trial_loop.thisTrialN'
p2539
I117
sg895
g980
sS'block_loop.thisIndex'
p2540
g889
sg38
S'right'
p2541
sg59
g63
sS'trial_loop.thisN'
p2542
I117
sg33
g984
sg64
g65
sS'trial_loop.thisIndex'
p2543
g60
(g99
S'u\x00\x00\x00'
tRp2544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2545
I0
sg904
g988
sS'block_loop.thisRepN'
p2546
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2547
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p2548
Nsg70
Vy
sS'block_loop.thisTrialN'
p2549
I0
sg39
F0.89971427496129763
sg34
g753
(S'\x07\xdf\x07\n\x11\x07\x02\n\xa6\x90'
tRp2550
sa(dp2551
S'trial_loop.thisTrialN'
p2552
I118
sg895
g1097
sS'block_loop.thisIndex'
p2553
g889
sg38
S'left'
p2554
sg59
g63
sS'trial_loop.thisN'
p2555
I118
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p2556
g60
(g99
S'v\x00\x00\x00'
tRp2557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2558
I0
sg904
g1105
sS'block_loop.thisRepN'
p2559
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2560
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p2561
Nsg70
Vy
sS'block_loop.thisTrialN'
p2562
I0
sg39
F1.4832168613684189
sg34
g753
(S'\x07\xdf\x07\n\x11\x07\x08\t\x8dP'
tRp2563
sa(dp2564
S'trial_loop.thisTrialN'
p2565
I119
sg895
g1251
sS'block_loop.thisIndex'
p2566
g889
sg38
S'left'
p2567
sg59
g63
sS'trial_loop.thisN'
p2568
I119
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p2569
g60
(g99
S'w\x00\x00\x00'
tRp2570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2571
I0
sg904
g1259
sS'block_loop.thisRepN'
p2572
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2573
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p2574
Nsg70
Vy
sS'block_loop.thisTrialN'
p2575
I0
sg39
F1.26660694817474
sg34
g753
(S'\x07\xdf\x07\n\x11\x07\x0f\x02:P'
tRp2576
sa(dp2577
S'trial_loop.thisTrialN'
p2578
I120
sg895
g2027
sS'block_loop.thisIndex'
p2579
g889
sg38
S'right'
p2580
sg59
g63
sS'trial_loop.thisN'
p2581
I120
sg33
g1753
sg64
g65
sS'trial_loop.thisIndex'
p2582
g60
(g99
S'x\x00\x00\x00'
tRp2583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2584
I0
sg904
g2034
sS'block_loop.thisRepN'
p2585
I0
sg907
g1746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2586
I0
sg909
g1753
sg55
g11
sS'block_loop.thisTrial'
p2587
Nsg70
Vy
sS'block_loop.thisTrialN'
p2588
I0
sg39
F1.1165867632516893
sg34
g753
(S'\x07\xdf\x07\n\x11\x07\x15\x06\xd9\xe8'
tRp2589
sa(dp2590
S'trial_loop.thisTrialN'
p2591
I121
sg895
g2068
sS'block_loop.thisIndex'
p2592
g889
sg38
S'left'
p2593
sg59
g63
sS'trial_loop.thisN'
p2594
I121
sg33
g1343
sg64
g65
sS'trial_loop.thisIndex'
p2595
g60
(g99
S'y\x00\x00\x00'
tRp2596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2597
I0
sg904
g2075
sS'block_loop.thisRepN'
p2598
I0
sg907
g1343
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2599
I0
sg909
g1350
sg55
g11
sS'block_loop.thisTrial'
p2600
Nsg70
Vy
sS'block_loop.thisTrialN'
p2601
I0
sg39
F1.1166095710759691
sg34
g753
(S'\x07\xdf\x07\n\x11\x07\x1b\t\x148'
tRp2602
sa(dp2603
S'trial_loop.thisTrialN'
p2604
I122
sg895
g1453
sS'block_loop.thisIndex'
p2605
g889
sg38
S'left'
p2606
sg59
g63
sS'trial_loop.thisN'
p2607
I122
sg33
g1464
sg64
g65
sS'trial_loop.thisIndex'
p2608
g60
(g99
S'z\x00\x00\x00'
tRp2609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2610
I0
sg904
g1461
sS'block_loop.thisRepN'
p2611
I0
sg907
g1457
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2612
I0
sg909
g1464
sg55
g11
sS'block_loop.thisTrial'
p2613
Nsg70
Vy
sS'block_loop.thisTrialN'
p2614
I0
sg39
F0.84997040684538661
sg34
g753
(S'\x07\xdf\x07\n\x11\x07!\x0bRp'
tRp2615
sa(dp2616
S'trial_loop.thisTrialN'
p2617
I123
sg895
g896
sS'block_loop.thisIndex'
p2618
g889
sg38
S'right'
p2619
sg59
g63
sS'trial_loop.thisN'
p2620
I123
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2621
g60
(g99
S'{\x00\x00\x00'
tRp2622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2623
I0
sg904
g905
sS'block_loop.thisRepN'
p2624
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2625
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2626
Nsg70
Vy
sS'block_loop.thisTrialN'
p2627
I0
sg39
F0.7832597971028008
sg34
g753
(S"\x07\xdf\x07\n\x11\x07'\t\x81\x98"
tRp2628
sa(dp2629
S'trial_loop.thisTrialN'
p2630
I124
sg895
g1509
sS'block_loop.thisIndex'
p2631
g889
sg38
S'left'
p2632
sg59
g63
sS'trial_loop.thisN'
p2633
I124
sg33
g1016
sg64
g65
sS'trial_loop.thisIndex'
p2634
g60
(g99
S'|\x00\x00\x00'
tRp2635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2636
I0
sg904
g1516
sS'block_loop.thisRepN'
p2637
I0
sg907
g1016
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2638
I0
sg909
g1023
sg55
g11
sS'block_loop.thisTrial'
p2639
Nsg70
Vy
sS'block_loop.thisTrialN'
p2640
I0
sg39
F0.93328682437640964
sg34
g753
(S'\x07\xdf\x07\n\x11\x07-\x06\xbe\x90'
tRp2641
sa(dp2642
S'trial_loop.thisTrialN'
p2643
I125
sg895
g1943
sS'block_loop.thisIndex'
p2644
g889
sg38
S'right'
p2645
sg59
g63
sS'trial_loop.thisN'
p2646
I125
sg33
g1457
sg64
g65
sS'trial_loop.thisIndex'
p2647
g60
(g99
S'}\x00\x00\x00'
tRp2648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2649
I0
sg904
g1950
sS'block_loop.thisRepN'
p2650
I0
sg907
g1457
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2651
I0
sg909
g1464
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vy
sS'block_loop.thisTrialN'
p2653
I0
sg39
F1.7332171464695421
sg34
g753
(S'\x07\xdf\x07\n\x11\x073\x06Y\x00'
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g1189
sS'block_loop.thisIndex'
p2657
g889
sg38
S'right'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g1193
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g1197
sS'block_loop.thisRepN'
p2663
I0
sg907
g1193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2664
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vy
sS'block_loop.thisTrialN'
p2666
I0
sg39
F0.78335017311110278
sg34
g753
(S'\x07\xdf\x07\n\x11\x07:\x02\x9b\xf8'
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g1174
sS'block_loop.thisIndex'
p2670
g889
sg38
S'right'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g1181
sS'block_loop.thisRepN'
p2676
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2677
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vy
sS'block_loop.thisTrialN'
p2679
I0
sg39
F0.9332625910610659
sg34
g753
(S'\x07\xdf\x07\n\x11\x08\x03\x0f\x1b0'
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g1643
sS'block_loop.thisIndex'
p2683
g889
sg38
S'left'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g1647
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g1651
sS'block_loop.thisRepN'
p2689
I0
sg907
g1653
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2690
I0
sg909
g1647
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vy
sS'block_loop.thisTrialN'
p2692
I0
sg39
F2.3499133872828679
sg34
g753
(S'\x07\xdf\x07\n\x11\x08\t\x0e\xb9\x88'
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g1382
sS'block_loop.thisIndex'
p2696
g889
sg38
S'right'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g1238
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g1389
sS'block_loop.thisRepN'
p2702
I0
sg907
g1238
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2703
I0
sg909
g1245
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vy
sS'block_loop.thisTrialN'
p2705
I0
sg39
F2.5166266199230449
sg34
g753
(S'\x07\xdf\x07\n\x11\x08\x11\x05?\xc0'
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g2068
sS'block_loop.thisIndex'
p2709
g889
sg38
S'left'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g1350
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g2075
sS'block_loop.thisRepN'
p2715
I0
sg907
g1343
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2716
I0
sg909
g1350
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vy
sS'block_loop.thisTrialN'
p2718
I0
sg39
F0.79997593774533016
sg34
g753
(S'\x07\xdf\x07\n\x11\x08\x18\r\xa40'
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g1219
sS'block_loop.thisIndex'
p2722
g889
sg38
S'right'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g1167
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g1226
sS'block_loop.thisRepN'
p2728
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vy
sS'block_loop.thisTrialN'
p2731
I0
sg39
F0.93325232754068566
sg34
g753
(S'\x07\xdf\x07\n\x11\x08\x1e\x0b\x1b\xc0'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g1234
sS'block_loop.thisIndex'
p2735
g889
sg38
S'right'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g1238
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g1242
sS'block_loop.thisRepN'
p2741
I0
sg907
g1238
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg909
g1245
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vy
sS'block_loop.thisTrialN'
p2744
I0
sg39
F1.5665649247566762
sg34
g753
(S'\x07\xdf\x07\n\x11\x08$\n\x7f\x80'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g1080
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1090
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g1088
sS'block_loop.thisRepN'
p2754
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg909
g1084
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vy
sS'block_loop.thisTrialN'
p2757
I0
sg39
F0.81660626393932034
sg34
g753
(S'\x07\xdf\x07\n\x11\x08+\x04\x9b\xb0'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g1012
sS'block_loop.thisIndex'
p2761
g889
sg38
S'right'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1016
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g1020
sS'block_loop.thisRepN'
p2767
I0
sg907
g1016
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg909
g1023
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vy
sS'block_loop.thisTrialN'
p2770
I0
sg39
F0.78325495043827686
sg34
g753
(S'\x07\xdf\x07\n\x11\x081\x02Q\xc0'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g1114
sS'block_loop.thisIndex'
p2774
g889
sg38
S'right'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g1121
sS'block_loop.thisRepN'
p2780
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vy
sS'block_loop.thisTrialN'
p2783
I0
sg39
F1.983333751479222
sg34
g753
(S'\x07\xdf\x07\n\x11\x086\x0e\x92x'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1615
sS'block_loop.thisIndex'
p2787
g889
sg38
S'left'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1622
sS'block_loop.thisRepN'
p2793
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vy
sS'block_loop.thisTrialN'
p2796
I0
sg39
F1.7833270801856997
sg34
g753
(S'\x07\xdf\x07\n\x11\t\x01\x0e\xe0\x98'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g2027
sS'block_loop.thisIndex'
p2800
g889
sg38
S'right'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g1746
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g2034
sS'block_loop.thisRepN'
p2806
I0
sg907
g1746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg909
g1753
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vy
sS'block_loop.thisTrialN'
p2809
I0
sg39
F1.2666936179157346
sg34
g753
(S'\x07\xdf\x07\n\x11\t\x08\x0c\x19\xa8'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g1063
sS'block_loop.thisIndex'
p2813
g889
sg38
S'left'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g1074
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g1071
sS'block_loop.thisRepN'
p2819
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vy
sS'block_loop.thisTrialN'
p2822
I0
sg39
F0.89995803360216087
sg34
g753
(S'\x07\xdf\x07\n\x11\t\x0f\x01s\x18'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1339
sS'block_loop.thisIndex'
p2826
g889
sg38
S'right'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1343
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1347
sS'block_loop.thisRepN'
p2832
I0
sg907
g1343
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g1350
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vy
sS'block_loop.thisTrialN'
p2835
I0
sg39
F0.99996607335924637
sg34
g753
(S'\x07\xdf\x07\n\x11\t\x15\x00Y\xd8'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g933
sS'block_loop.thisIndex'
p2839
g889
sg38
S'left'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g941
sS'block_loop.thisRepN'
p2845
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vy
sS'block_loop.thisTrialN'
p2848
I0
sg39
F1.0499665295137675
sg34
g753
(S'\x07\xdf\x07\n\x11\t\x1b\x00\xea`'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1157
sS'block_loop.thisIndex'
p2852
g889
sg38
S'left'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1167
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1165
sS'block_loop.thisRepN'
p2858
I0
sg907
g1167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g1161
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vy
sS'block_loop.thisTrialN'
p2861
I0
sg39
F1.0498969656473491
sg34
g753
(S'\x07\xdf\x07\n\x11\t!\x022\x80'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g1943
sS'block_loop.thisIndex'
p2865
g889
sg38
S'right'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g1457
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g1950
sS'block_loop.thisRepN'
p2871
I0
sg907
g1457
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g1464
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vy
sS'block_loop.thisTrialN'
p2874
I0
sg39
F1.4165906405833084
sg34
g753
(S"\x07\xdf\x07\n\x11\t'\x03z\xa0"
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g1307
sS'block_loop.thisIndex'
p2878
g889
sg38
S'right'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g1315
sS'block_loop.thisRepN'
p2884
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vy
sS'block_loop.thisTrialN'
p2887
I0
sg39
F0.83330045205002534
sg34
g753
(S'\x07\xdf\x07\n\x11\t-\n=\x18'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1453
sS'block_loop.thisIndex'
p2891
g889
sg38
S'left'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g1457
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1461
sS'block_loop.thisRepN'
p2897
I0
sg907
g1457
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g1464
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vy
sS'block_loop.thisTrialN'
p2900
I0
sg39
F0.70006112497503636
sg34
g753
(S'\x07\xdf\x07\n\x11\t3\x081\xa8'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1097
sS'block_loop.thisIndex'
p2904
g889
sg38
S'left'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1105
sS'block_loop.thisRepN'
p2910
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vy
sS'block_loop.thisTrialN'
p2913
I0
sg39
F0.93324862126610242
sg34
g753
(S'\x07\xdf\x07\n\x11\t9\x04:\x08'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g950
sS'block_loop.thisIndex'
p2917
g889
sg38
S'left'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g958
sS'block_loop.thisRepN'
p2923
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vy
sS'block_loop.thisTrialN'
p2926
I0
sg39
F1.100015452298976
sg34
g753
(S'\x07\xdf\x07\n\x11\n\x03\x03\x9d\xc8'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g1080
sS'block_loop.thisIndex'
p2930
g889
sg38
S'right'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g1090
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g1088
sS'block_loop.thisRepN'
p2936
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g1084
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vy
sS'block_loop.thisTrialN'
p2939
I0
sg39
F0.69994480506284162
sg34
g753
(S'\x07\xdf\x07\n\x11\n\t\x05\xd8\x18'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g896
sS'block_loop.thisIndex'
p2943
g889
sg38
S'right'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g905
sS'block_loop.thisRepN'
p2949
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vy
sS'block_loop.thisTrialN'
p2952
I0
sg39
F0.7333132244348235
sg34
g753
(S'\x07\xdf\x07\n\x11\n\x0f\x01\xa5\xe0'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1742
sS'block_loop.thisIndex'
p2956
g889
sg38
S'left'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g1746
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1750
sS'block_loop.thisRepN'
p2962
I0
sg907
g1746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g1753
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vy
sS'block_loop.thisTrialN'
p2965
I0
sg39
F0.95004287871051929
sg34
g753
(S'\x07\xdf\x07\n\x11\n\x14\rm\x80'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g1129
sS'block_loop.thisIndex'
p2969
g889
sg38
S'left'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g1033
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g1136
sS'block_loop.thisRepN'
p2975
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vy
sS'block_loop.thisTrialN'
p2978
I0
sg39
F1.6664925669283548
sg34
g753
(S'\x07\xdf\x07\n\x11\n\x1a\r\x0b\xd8'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1251
sS'block_loop.thisIndex'
p2982
g889
sg38
S'left'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1259
sS'block_loop.thisRepN'
p2988
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vy
sS'block_loop.thisTrialN'
p2991
I0
sg39
F0.8500177330824954
sg34
g753
(S'\x07\xdf\x07\n\x11\n!\x08\x978'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g1742
sS'block_loop.thisIndex'
p2995
g889
sg38
S'left'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g1746
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g1750
sS'block_loop.thisRepN'
p3001
I0
sg907
g1746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g1753
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vy
sS'block_loop.thisTrialN'
p3004
I0
sg39
F0.6998455910179473
sg34
g753
(S"\x07\xdf\x07\n\x11\n'\x06\xc6`"
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1727
sS'block_loop.thisIndex'
p3008
g889
sg38
S'left'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g984
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1734
sS'block_loop.thisRepN'
p3014
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vy
sS'block_loop.thisTrialN'
p3017
I0
sg39
F0.81644717935705557
sg34
g753
(S'\x07\xdf\x07\n\x11\n-\x02\xd2\xa8'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1012
sS'block_loop.thisIndex'
p3021
g889
sg38
S'right'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1016
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1020
sS'block_loop.thisRepN'
p3027
I0
sg907
g1016
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g1023
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vy
sS'block_loop.thisTrialN'
p3030
I0
sg39
F0.86659103971760487
sg34
g753
(S'\x07\xdf\x07\n\x11\n3\x00N '
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1943
sS'block_loop.thisIndex'
p3034
g889
sg38
S'right'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1457
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1950
sS'block_loop.thisRepN'
p3040
I0
sg907
g1457
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g1464
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vy
sS'block_loop.thisTrialN'
p3043
I0
sg39
F0.66662428212293889
sg34
g753
(S'\x07\xdf\x07\n\x11\n8\x0e8\xa0'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g916
sS'block_loop.thisIndex'
p3047
g889
sg38
S'right'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g924
sS'block_loop.thisRepN'
p3053
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vy
sS'block_loop.thisTrialN'
p3056
I0
sg39
F1.0499568361919955
sg34
g753
(S'\x07\xdf\x07\n\x11\x0b\x02\t\x8dP'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g950
sS'block_loop.thisIndex'
p3060
g889
sg38
S'left'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g958
sS'block_loop.thisRepN'
p3066
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vy
sS'block_loop.thisTrialN'
p3069
I0
sg39
F1.3167559402972984
sg34
g753
(S'\x07\xdf\x07\n\x11\x0b\x08\n\xd5p'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1986
sS'block_loop.thisIndex'
p3073
g889
sg38
S'right'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1993
sS'block_loop.thisRepN'
p3079
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vy
sS'block_loop.thisTrialN'
p3082
I0
sg39
F0.79996367853527772
sg34
g753
(S'\x07\xdf\x07\n\x11\x0b\x0f\x00\xe6x'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1397
sS'block_loop.thisIndex'
p3086
g889
sg38
S'left'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g1193
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1404
sS'block_loop.thisRepN'
p3092
I0
sg907
g1193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vy
sS'block_loop.thisTrialN'
p3095
I0
sg39
F0.76654821802731021
sg34
g753
(S'\x07\xdf\x07\n\x11\x0b\x14\r\xa40'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1509
sS'block_loop.thisIndex'
p3099
g889
sg38
S'left'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1016
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1516
sS'block_loop.thisRepN'
p3105
I0
sg907
g1016
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g1023
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vy
sS'block_loop.thisTrialN'
p3108
I0
sg39
F0.96655774029204622
sg34
g753
(S'\x07\xdf\x07\n\x11\x0b\x1a\n\xa2\xa8'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1660
sS'block_loop.thisIndex'
p3112
g889
sg38
S'right'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1667
sS'block_loop.thisRepN'
p3118
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vy
sS'block_loop.thisTrialN'
p3121
I0
sg39
F1.0166482873573841
sg34
g753
(S'\x07\xdf\x07\n\x11\x0b \n{\x98'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g2122
sS'block_loop.thisIndex'
p3125
g889
sg38
S'left'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1653
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g2129
sS'block_loop.thisRepN'
p3131
I0
sg907
g1653
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g1647
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vy
sS'block_loop.thisTrialN'
p3134
I0
sg39
F2.283337343709718
sg34
g753
(S'\x07\xdf\x07\n\x11\x0b&\x0bJ\xa0'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1660
sS'block_loop.thisIndex'
p3138
g889
sg38
S'right'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g943
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1667
sS'block_loop.thisRepN'
p3144
I0
sg907
g943
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g937
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vy
sS'block_loop.thisTrialN'
p3147
I0
sg39
F0.86659959264943609
sg34
g753
(S'\x07\xdf\x07\n\x11\x0b.\x00\xda\xc0'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g2027
sS'block_loop.thisIndex'
p3151
g889
sg38
S'right'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1746
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g2034
sS'block_loop.thisRepN'
p3157
I0
sg907
g1746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g1753
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vy
sS'block_loop.thisTrialN'
p3160
I0
sg39
F1.0998788904471439
sg34
g753
(S'\x07\xdf\x07\n\x11\x0b3\x0e\x8a\xa8'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g950
sS'block_loop.thisIndex'
p3164
g889
sg38
S'left'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g958
sS'block_loop.thisRepN'
p3170
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vy
sS'block_loop.thisTrialN'
p3173
I0
sg39
F0.93332588277553441
sg34
g753
(S'\x07\xdf\x07\n\x11\x0b:\x01\x86\xa0'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1453
sS'block_loop.thisIndex'
p3177
g889
sg38
S'left'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1457
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1461
sS'block_loop.thisRepN'
p3183
I0
sg907
g1457
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g1464
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vy
sS'block_loop.thisTrialN'
p3186
I0
sg39
F0.93332360199565301
sg34
g753
(S'\x07\xdf\x07\n\x11\x0c\x04\x00\xe6x'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g2068
sS'block_loop.thisIndex'
p3190
g889
sg38
S'left'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g1343
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g2075
sS'block_loop.thisRepN'
p3196
I0
sg907
g1343
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g1350
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vy
sS'block_loop.thisTrialN'
p3199
I0
sg39
F0.68324434480018681
sg34
g753
(S'\x07\xdf\x07\n\x11\x0c\n\x00\x84\xd0'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1046
sS'block_loop.thisIndex'
p3203
g889
sg38
S'left'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1054
sS'block_loop.thisRepN'
p3209
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vy
sS'block_loop.thisTrialN'
p3212
I0
sg39
F0.85002257975065731
sg34
g753
(S'\x07\xdf\x07\n\x11\x0c\x0f\x0bVX'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1958
sS'block_loop.thisIndex'
p3216
g889
sg38
S'left'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1965
sS'block_loop.thisRepN'
p3222
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vy
sS'block_loop.thisTrialN'
p3225
I0
sg39
F0.74996008630478173
sg34
g753
(S'\x07\xdf\x07\n\x11\x0c\x15\t\x85\x80'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1029
sS'block_loop.thisIndex'
p3229
g889
sg38
S'left'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1040
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1037
sS'block_loop.thisRepN'
p3235
I0
sg907
g1033
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g1040
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vy
sS'block_loop.thisTrialN'
p3238
I0
sg39
F1.6333622042402567
sg34
g753
(S'\x07\xdf\x07\n\x11\x0c\x1b\x06I`'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1986
sS'block_loop.thisIndex'
p3242
g889
sg38
S'right'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1993
sS'block_loop.thisRepN'
p3248
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vy
sS'block_loop.thisTrialN'
p3251
I0
sg39
F0.76652541019939235
sg34
g753
(S'\x07\xdf\x07\n\x11\x0c"\x01\x1d('
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1958
sS'block_loop.thisIndex'
p3255
g889
sg38
S'left'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1965
sS'block_loop.thisRepN'
p3261
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vy
sS'block_loop.thisTrialN'
p3264
I0
sg39
F0.71670884213745012
sg34
g753
(S"\x07\xdf\x07\n\x11\x0c'\ra\xc8"
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g980
sS'block_loop.thisIndex'
p3268
g889
sg38
S'right'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g984
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g988
sS'block_loop.thisRepN'
p3274
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vy
sS'block_loop.thisTrialN'
p3277
I0
sg39
F0.63300896803775686
sg34
g753
(S'\x07\xdf\x07\n\x11\x0c-\t\xa8\xa8'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g1742
sS'block_loop.thisIndex'
p3281
g889
sg38
S'left'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g1746
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g1750
sS'block_loop.thisRepN'
p3287
I0
sg907
g1746
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g1753
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vy
sS'block_loop.thisTrialN'
p3290
I0
sg39
F1.0670755349565297
sg34
g753
(S'\x07\xdf\x07\n\x11\x0c3\x04\x84@'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g997
sS'block_loop.thisIndex'
p3294
g889
sg38
S'right'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g1004
sS'block_loop.thisRepN'
p3300
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vy
sS'block_loop.thisTrialN'
p3303
I0
sg39
F1.6333482344452932
sg34
g753
(S'\x07\xdf\x07\n\x11\x0c9\x06\x06\xf8'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1307
sS'block_loop.thisIndex'
p3307
g889
sg38
S'right'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1315
sS'block_loop.thisRepN'
p3313
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vy
sS'block_loop.thisTrialN'
p3316
I0
sg39
F0.73330239071583492
sg34
g753
(S'\x07\xdf\x07\n\x11\r\x04\x00\xde\xa8'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g1189
sS'block_loop.thisIndex'
p3320
g889
sg38
S'right'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1193
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g1197
sS'block_loop.thisRepN'
p3326
I0
sg907
g1193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vy
sS'block_loop.thisTrialN'
p3329
I0
sg39
F0.96662302769254893
sg34
g753
(S'\x07\xdf\x07\n\x11\r\t\x0c\xa6H'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g1727
sS'block_loop.thisIndex'
p3333
g889
sg38
S'left'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g984
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g1734
sS'block_loop.thisRepN'
p3339
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vy
sS'block_loop.thisTrialN'
p3342
I0
sg39
F0.71634078085116926
sg34
g753
(S'\x07\xdf\x07\n\x11\r\x0f\x0c\x7f8'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g1915
sS'block_loop.thisIndex'
p3346
g889
sg38
S'left'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1090
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g1922
sS'block_loop.thisRepN'
p3352
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g1084
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vy
sS'block_loop.thisTrialN'
p3355
I0
sg39
F0.61666716083345818
sg34
g753
(S'\x07\xdf\x07\n\x11\r\x15\x08\xc6\x18'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g1339
sS'block_loop.thisIndex'
p3359
g889
sg38
S'right'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1343
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g1347
sS'block_loop.thisRepN'
p3365
I0
sg907
g1343
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g1350
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vy
sS'block_loop.thisTrialN'
p3368
I0
sg39
F0.76682989467371954
sg34
g753
(S'\x07\xdf\x07\n\x11\r\x1b\x03g\x18'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1234
sS'block_loop.thisIndex'
p3372
g889
sg38
S'right'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1238
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1242
sS'block_loop.thisRepN'
p3378
I0
sg907
g1238
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g1245
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vy
sS'block_loop.thisTrialN'
p3381
I0
sg39
F2.5832514152243675
sg34
g753
(S'\x07\xdf\x07\n\x11\r!\x00e\x90'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g1438
sS'block_loop.thisIndex'
p3385
g889
sg38
S'right'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g1445
sS'block_loop.thisRepN'
p3391
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vy
sS'block_loop.thisTrialN'
p3394
I0
sg39
F1.1332424631509639
sg34
g753
(S'\x07\xdf\x07\n\x11\r(\t\xc0\x18'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g1063
sS'block_loop.thisIndex'
p3398
g889
sg38
S'left'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g1071
sS'block_loop.thisRepN'
p3404
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vy
sS'block_loop.thisTrialN'
p3407
I0
sg39
F0.90001562335964991
sg34
g753
(S'\x07\xdf\x07\n\x11\r.\x0cs\x80'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g1097
sS'block_loop.thisIndex'
p3411
g889
sg38
S'left'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g1105
sS'block_loop.thisRepN'
p3417
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g1108
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vy
sS'block_loop.thisTrialN'
p3420
I0
sg39
F0.83334350182121852
sg34
g753
(S'\x07\xdf\x07\n\x11\r4\x0bZ@'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1324
sS'block_loop.thisIndex'
p3424
g889
sg38
S'left'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1331
sS'block_loop.thisRepN'
p3430
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vy
sS'block_loop.thisTrialN'
p3433
I0
sg39
F1.1500019386658096
sg34
g753
(S'\x07\xdf\x07\n\x11\r:\tN\xd0'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g1046
sS'block_loop.thisIndex'
p3437
g889
sg38
S'left'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g1050
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g1054
sS'block_loop.thisRepN'
p3443
I0
sg907
g1050
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g1057
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vy
sS'block_loop.thisTrialN'
p3446
I0
sg39
F0.8000643180712359
sg34
g753
(S'\x07\xdf\x07\n\x11\x0e\x04\x0c\x028'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g1012
sS'block_loop.thisIndex'
p3450
g889
sg38
S'right'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g1016
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g1020
sS'block_loop.thisRepN'
p3456
I0
sg907
g1016
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g1023
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vy
sS'block_loop.thisTrialN'
p3459
I0
sg39
F1.1166594631940825
sg34
g753
(S'\x07\xdf\x07\n\x11\x0e\n\t}\xb0'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g980
sS'block_loop.thisIndex'
p3463
g889
sg38
S'right'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g984
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g988
sS'block_loop.thisRepN'
p3469
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vy
sS'block_loop.thisTrialN'
p3472
I0
sg39
F0.83298313817431335
sg34
g753
(S'\x07\xdf\x07\n\x11\x0e\x10\x0b\xb8\x00'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g1114
sS'block_loop.thisIndex'
p3476
g889
sg38
S'right'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g1121
sS'block_loop.thisRepN'
p3482
I0
sg907
g1067
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g1074
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vy
sS'block_loop.thisTrialN'
p3485
I0
sg39
F0.70003175989768351
sg34
g753
(S'\x07\xdf\x07\n\x11\x0e\x16\t\xac\x90'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1453
sS'block_loop.thisIndex'
p3489
g889
sg38
S'left'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1457
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1461
sS'block_loop.thisRepN'
p3495
I0
sg907
g1457
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g1464
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vy
sS'block_loop.thisTrialN'
p3498
I0
sg39
F0.78326378847123124
sg34
g753
(S'\x07\xdf\x07\n\x11\x0e\x1c\x05\xb8\xd8'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g1080
sS'block_loop.thisIndex'
p3502
g889
sg38
S'right'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g1088
sS'block_loop.thisRepN'
p3508
I0
sg907
g1090
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g1084
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vy
sS'block_loop.thisTrialN'
p3511
I0
sg39
F0.6832893902574142
sg34
g753
(S'\x07\xdf\x07\n\x11\x0e"\x02\xf5\xd0'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g2068
sS'block_loop.thisIndex'
p3515
g889
sg38
S'left'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1343
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g2075
sS'block_loop.thisRepN'
p3521
I0
sg907
g1343
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g1350
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vy
sS'block_loop.thisTrialN'
p3524
I0
sg39
F0.58339025786335696
sg34
g753
(S"\x07\xdf\x07\n\x11\x0e'\x0e~\xf0"
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g2122
sS'block_loop.thisIndex'
p3528
g889
sg38
S'left'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g1653
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g2129
sS'block_loop.thisRepN'
p3534
I0
sg907
g1653
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g1647
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vy
sS'block_loop.thisTrialN'
p3537
I0
sg39
F2.249962081987178
sg34
g753
(S'\x07\xdf\x07\n\x11\x0e-\x08dp'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g980
sS'block_loop.thisIndex'
p3541
g889
sg38
S'right'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g984
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g988
sS'block_loop.thisRepN'
p3547
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vy
sS'block_loop.thisTrialN'
p3550
I0
sg39
F0.88302892488354701
sg34
g753
(S'\x07\xdf\x07\n\x11\x0e4\x0c\xc1\xa0'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1307
sS'block_loop.thisIndex'
p3554
g889
sg38
S'right'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1315
sS'block_loop.thisRepN'
p3560
I0
sg907
g1311
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vy
sS'block_loop.thisTrialN'
p3563
I0
sg39
F0.8333340935932938
sg34
g753
(S'\x07\xdf\x07\n\x11\x0e:\x0b\xa8`'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g997
sS'block_loop.thisIndex'
p3567
g889
sg38
S'right'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1004
sS'block_loop.thisRepN'
p3573
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vy
sS'block_loop.thisTrialN'
p3576
I0
sg39
F1.1500395715775085
sg34
g753
(S'\x07\xdf\x07\n\x11\x0f\x04\t\x99\x08'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1382
sS'block_loop.thisIndex'
p3580
g889
sg38
S'left'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1238
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1389
sS'block_loop.thisRepN'
p3586
I0
sg907
g1238
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g1245
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vy
sS'block_loop.thisTrialN'
p3589
I0
sg39
F0.86667999023848097
sg34
g753
(S'\x07\xdf\x07\n\x11\x0f\n\x0cPX'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g2122
sS'block_loop.thisIndex'
p3593
g889
sg38
S'right'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g1647
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g2129
sS'block_loop.thisRepN'
p3599
I0
sg907
g1653
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g1647
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vy
sS'block_loop.thisTrialN'
p3602
I0
sg39
F1.4498951980422135
sg34
g753
(S'\x07\xdf\x07\n\x11\x0f\x10\n\xbe\x00'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1509
sS'block_loop.thisIndex'
p3606
g889
sg38
S'left'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1023
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1516
sS'block_loop.thisRepN'
p3612
I0
sg907
g1016
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g1023
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vy
sS'block_loop.thisTrialN'
p3615
I0
sg39
F1.0498673154725111
sg34
g753
(S'\x07\xdf\x07\n\x11\x0f\x17\x02\xf1\xe8'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F162.99605424613037
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vy
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vy
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'48-twix.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'left'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'50-polo.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'50-polo.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
S'48-twix.png'
p3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3647
I1
sS'img_wrong'
p3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vy
sS'block_loop.thisTrialN'
p3650
I0
sg39
F0.89979752352519426
sg34
g753
(S'\x07\xdf\x07\n\x11\x18\x06\x05\xe7\xb8'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'22-daim.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'right'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'7-olives.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'7-olives.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3648
S'22-daim.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vy
sS'block_loop.thisTrialN'
p3667
I0
sg39
F1.1332535819674376
sg34
g753
(S'\x07\xdf\x07\n\x11\x18\x0c\x04\x8f\xf8'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
g3634
sS'block_loop.thisIndex'
p3671
g3627
sg38
S'left'
p3672
sg59
g63
sS'trial_loop.thisN'
p3673
I2
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p3674
g60
(g99
S'\x02\x00\x00\x00'
tRp3675
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3676
I0
sg3642
g3643
sS'block_loop.thisRepN'
p3677
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3678
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p3679
Nsg70
Vy
sS'block_loop.thisTrialN'
p3680
I0
sg39
F0.73330809267281438
sg34
g753
(S'\x07\xdf\x07\n\x11\x18\x12\x07GH'
tRp3681
sa(dp3682
S'trial_loop.thisTrialN'
p3683
I3
sg3633
S'20-fruit_pastilles.png'
p3684
sS'block_loop.thisIndex'
p3685
g3627
sg38
S'left'
p3686
sg59
g63
sS'trial_loop.thisN'
p3687
I3
sg33
S'20-fruit_pastilles.png'
p3688
sg64
g65
sS'trial_loop.thisIndex'
p3689
g60
(g99
S'\x03\x00\x00\x00'
tRp3690
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3691
I0
sg3642
S'2-steamed_puddings.png'
p3692
sS'block_loop.thisRepN'
p3693
I1
sg3645
g3688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3694
I1
sg3648
S'2-steamed_puddings.png'
p3695
sg55
g11
sS'block_loop.thisTrial'
p3696
Nsg70
Vy
sS'block_loop.thisTrialN'
p3697
I0
sg39
F0.89993722146027721
sg34
g753
(S'\x07\xdf\x07\n\x11\x18\x18\x03\x8e('
tRp3698
sa(dp3699
S'trial_loop.thisTrialN'
p3700
I4
sg3633
S'35-raisins.png'
p3701
sS'block_loop.thisIndex'
p3702
g3627
sg38
S'right'
p3703
sg59
g63
sS'trial_loop.thisN'
p3704
I4
sg33
S'35-raisins.png'
p3705
sg64
g65
sS'trial_loop.thisIndex'
p3706
g60
(g99
S'\x04\x00\x00\x00'
tRp3707
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3708
I0
sg3642
S'49-yorkie.png'
p3709
sS'block_loop.thisRepN'
p3710
I1
sg3645
S'49-yorkie.png'
p3711
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3712
I1
sg3648
g3705
sg55
g11
sS'block_loop.thisTrial'
p3713
Nsg70
Vy
sS'block_loop.thisTrialN'
p3714
I0
sg39
F0.716590241441736
sg34
g753
(S'\x07\xdf\x07\n\x11\x18\x1e\x02\xb3h'
tRp3715
sa(dp3716
S'trial_loop.thisTrialN'
p3717
I5
sg3633
S'27-hartleys_raspberries_jelly.png'
p3718
sS'block_loop.thisIndex'
p3719
g3627
sg38
S'right'
p3720
sg59
g63
sS'trial_loop.thisN'
p3721
I5
sg33
S'51-mars.png'
p3722
sg64
g65
sS'trial_loop.thisIndex'
p3723
g60
(g99
S'\x05\x00\x00\x00'
tRp3724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3725
I0
sg3642
S'51-mars.png'
p3726
sS'block_loop.thisRepN'
p3727
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3728
I1
sg3648
S'27-hartleys_raspberries_jelly.png'
p3729
sg55
g11
sS'block_loop.thisTrial'
p3730
Nsg70
Vy
sS'block_loop.thisTrialN'
p3731
I0
sg39
F0.7500621513245278
sg34
g753
(S'\x07\xdf\x07\n\x11\x18#\x0e\x01\xf0'
tRp3732
sa(dp3733
S'trial_loop.thisTrialN'
p3734
I6
sg3633
S'21-nakd_banana_crunch.png'
p3735
sS'block_loop.thisIndex'
p3736
g3627
sg38
S'left'
p3737
sg59
g63
sS'trial_loop.thisN'
p3738
I6
sg33
S'21-nakd_banana_crunch.png'
p3739
sg64
g65
sS'trial_loop.thisIndex'
p3740
g60
(g99
S'\x06\x00\x00\x00'
tRp3741
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3742
I0
sg3642
S'1-treacle_cookies.png'
p3743
sS'block_loop.thisRepN'
p3744
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3745
I1
sg3648
S'1-treacle_cookies.png'
p3746
sg55
g11
sS'block_loop.thisTrial'
p3747
Nsg70
Vy
sS'block_loop.thisTrialN'
p3748
I0
sg39
F0.74992958084112615
sg34
g753
(S'\x07\xdf\x07\n\x11\x18)\n\xc1\xe8'
tRp3749
sa(dp3750
S'trial_loop.thisTrialN'
p3751
I7
sg3633
S'49-yorkie.png'
p3752
sS'block_loop.thisIndex'
p3753
g3627
sg38
S'left'
p3754
sg59
g63
sS'trial_loop.thisN'
p3755
I7
sg33
g3711
sg64
g65
sS'trial_loop.thisIndex'
p3756
g60
(g99
S'\x07\x00\x00\x00'
tRp3757
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3758
I0
sg3642
S'35-raisins.png'
p3759
sS'block_loop.thisRepN'
p3760
I1
sg3645
g3711
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3761
I1
sg3648
g3705
sg55
g11
sS'block_loop.thisTrial'
p3762
Nsg70
Vy
sS'block_loop.thisTrialN'
p3763
I0
sg39
F0.68343650073438766
sg34
g753
(S'\x07\xdf\x07\n\x11\x18/\x07\x85\xc8'
tRp3764
sa(dp3765
S'trial_loop.thisTrialN'
p3766
I8
sg3633
S'45-chewy_nougat_redo.png'
p3767
sS'block_loop.thisIndex'
p3768
g3627
sg38
S'right'
p3769
sg59
g63
sS'trial_loop.thisN'
p3770
I8
sg33
S'41-peanuts_redo.png'
p3771
sg64
g65
sS'trial_loop.thisIndex'
p3772
g60
(g99
S'\x08\x00\x00\x00'
tRp3773
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3774
I0
sg3642
S'41-peanuts_redo.png'
p3775
sS'block_loop.thisRepN'
p3776
I1
sg3645
g3771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3777
I1
sg3648
S'45-chewy_nougat_redo.png'
p3778
sg55
g11
sS'block_loop.thisTrial'
p3779
Nsg70
Vy
sS'block_loop.thisTrialN'
p3780
I0
sg39
F1.1000319879749441
sg34
g753
(S'\x07\xdf\x07\n\x11\x185\x03\x18\xf8'
tRp3781
sa(dp3782
S'trial_loop.thisTrialN'
p3783
I9
sg3633
g3634
sS'block_loop.thisIndex'
p3784
g3627
sg38
S'left'
p3785
sg59
g63
sS'trial_loop.thisN'
p3786
I9
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p3787
g60
(g99
S'\t\x00\x00\x00'
tRp3788
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3789
I0
sg3642
g3643
sS'block_loop.thisRepN'
p3790
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3791
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p3792
Nsg70
Vy
sS'block_loop.thisTrialN'
p3793
I0
sg39
F0.66653019984005368
sg34
g753
(S'\x07\xdf\x07\n\x11\x18;\x05\x14\xc8'
tRp3794
sa(dp3795
S'trial_loop.thisTrialN'
p3796
I10
sg3633
S'16-skips_prawn.png'
p3797
sS'block_loop.thisIndex'
p3798
g3627
sg38
S'right'
p3799
sg59
g63
sS'trial_loop.thisN'
p3800
I10
sg33
S'16-skips_prawn.png'
p3801
sg64
g65
sS'trial_loop.thisIndex'
p3802
g60
(g99
S'\n\x00\x00\x00'
tRp3803
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3804
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p3805
sS'block_loop.thisRepN'
p3806
I1
sg3645
g3801
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3807
I1
sg3648
S'42-mrkipling_lemon_slices.png'
p3808
sg55
g11
sS'block_loop.thisTrial'
p3809
Nsg70
Vy
sS'block_loop.thisTrialN'
p3810
I0
sg39
F0.86643879747862229
sg34
g753
(S'\x07\xdf\x07\n\x11\x19\x05\x00\xa7\xf8'
tRp3811
sa(dp3812
S'trial_loop.thisTrialN'
p3813
I11
sg3633
S'29-beans.png'
p3814
sS'block_loop.thisIndex'
p3815
g3627
sg38
S'left'
p3816
sg59
g63
sS'trial_loop.thisN'
p3817
I11
sg33
S'46-pistachios.png'
p3818
sg64
g65
sS'trial_loop.thisIndex'
p3819
g60
(g99
S'\x0b\x00\x00\x00'
tRp3820
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3821
I0
sg3642
S'46-pistachios.png'
p3822
sS'block_loop.thisRepN'
p3823
I1
sg3645
S'29-beans.png'
p3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3825
I1
sg3648
g3818
sg55
g11
sS'block_loop.thisTrial'
p3826
Nsg70
Vy
sS'block_loop.thisTrialN'
p3827
I0
sg39
F1.9336335033294745
sg34
g753
(S'\x07\xdf\x07\n\x11\x19\n\x0eW\xe0'
tRp3828
sa(dp3829
S'trial_loop.thisTrialN'
p3830
I12
sg3633
S'13-mccoys_steak_crisps.png'
p3831
sS'block_loop.thisIndex'
p3832
g3627
sg38
S'right'
p3833
sg59
g63
sS'trial_loop.thisN'
p3834
I12
sg33
S'3-ellas_strawberries_apples.png'
p3835
sg64
g65
sS'trial_loop.thisIndex'
p3836
g60
(g99
S'\x0c\x00\x00\x00'
tRp3837
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3838
I0
sg3642
S'3-ellas_strawberries_apples.png'
p3839
sS'block_loop.thisRepN'
p3840
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3841
I1
sg3648
S'13-mccoys_steak_crisps.png'
p3842
sg55
g11
sS'block_loop.thisTrial'
p3843
Nsg70
Vy
sS'block_loop.thisTrialN'
p3844
I0
sg39
F0.78325095906620845
sg34
g753
(S'\x07\xdf\x07\n\x11\x19\x11\r\xaf\xe8'
tRp3845
sa(dp3846
S'trial_loop.thisTrialN'
p3847
I13
sg3633
S'18-mms.png'
p3848
sS'block_loop.thisIndex'
p3849
g3627
sg38
S'left'
p3850
sg59
g63
sS'trial_loop.thisN'
p3851
I13
sg33
S'18-mms.png'
p3852
sg64
g65
sS'trial_loop.thisIndex'
p3853
g60
(g99
S'\r\x00\x00\x00'
tRp3854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3855
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p3856
sS'block_loop.thisRepN'
p3857
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3858
I1
sg3648
S'43-mrporky_pork_crackles_redo.png'
p3859
sg55
g11
sS'block_loop.thisTrial'
p3860
Nsg70
Vy
sS'block_loop.thisTrialN'
p3861
I0
sg39
F0.90000136847083922
sg34
g753
(S'\x07\xdf\x07\n\x11\x19\x17\n\xec\xe0'
tRp3862
sa(dp3863
S'trial_loop.thisTrialN'
p3864
I14
sg3633
S'8-liquorice_catherine_wheels.png'
p3865
sS'block_loop.thisIndex'
p3866
g3627
sg38
S'right'
p3867
sg59
g63
sS'trial_loop.thisN'
p3868
I14
sg33
S'8-liquorice_catherine_wheels.png'
p3869
sg64
g65
sS'trial_loop.thisIndex'
p3870
g60
(g99
S'\x0e\x00\x00\x00'
tRp3871
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3872
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p3873
sS'block_loop.thisRepN'
p3874
I1
sg3645
S'17-jacobs_mini_cheddars_redo.png'
p3875
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3876
I1
sg3648
g3869
sg55
g11
sS'block_loop.thisTrial'
p3877
Nsg70
Vy
sS'block_loop.thisTrialN'
p3878
I0
sg39
F0.89994976576417685
sg34
g753
(S'\x07\xdf\x07\n\x11\x19\x1d\n\x12 '
tRp3879
sa(dp3880
S'trial_loop.thisTrialN'
p3881
I15
sg3633
S'4-corn.png'
p3882
sS'block_loop.thisIndex'
p3883
g3627
sg38
S'left'
p3884
sg59
g63
sS'trial_loop.thisN'
p3885
I15
sg33
S'4-corn.png'
p3886
sg64
g65
sS'trial_loop.thisIndex'
p3887
g60
(g99
S'\x0f\x00\x00\x00'
tRp3888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3889
I0
sg3642
S'10-bounty_redo.png'
p3890
sS'block_loop.thisRepN'
p3891
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3892
I1
sg3648
S'10-bounty_redo.png'
p3893
sg55
g11
sS'block_loop.thisTrial'
p3894
Nsg70
Vy
sS'block_loop.thisTrialN'
p3895
I0
sg39
F0.93323978323314805
sg34
g753
(S'\x07\xdf\x07\n\x11\x19#\x08\xf8\xe0'
tRp3896
sa(dp3897
S'trial_loop.thisTrialN'
p3898
I16
sg3633
g3814
sS'block_loop.thisIndex'
p3899
g3627
sg38
S'left'
p3900
sg59
g63
sS'trial_loop.thisN'
p3901
I16
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p3902
g60
(g99
S'\x10\x00\x00\x00'
tRp3903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3904
I0
sg3642
g3822
sS'block_loop.thisRepN'
p3905
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3906
I1
sg3648
g3818
sg55
g11
sS'block_loop.thisTrial'
p3907
Nsg70
Vy
sS'block_loop.thisTrialN'
p3908
I0
sg39
F0.61646816255597514
sg34
g753
(S'\x07\xdf\x07\n\x11\x19)\x08X\xb8'
tRp3909
sa(dp3910
S'trial_loop.thisTrialN'
p3911
I17
sg3633
S'51-mars.png'
p3912
sS'block_loop.thisIndex'
p3913
g3627
sg38
S'left'
p3914
sg59
g63
sS'trial_loop.thisN'
p3915
I17
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p3916
g60
(g99
S'\x11\x00\x00\x00'
tRp3917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3918
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p3919
sS'block_loop.thisRepN'
p3920
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3921
I1
sg3648
g3729
sg55
g11
sS'block_loop.thisTrial'
p3922
Nsg70
Vy
sS'block_loop.thisTrialN'
p3923
I0
sg39
F0.73336140596802579
sg34
g753
(S'\x07\xdf\x07\n\x11\x19/\x034P'
tRp3924
sa(dp3925
S'trial_loop.thisTrialN'
p3926
I18
sg3633
g3735
sS'block_loop.thisIndex'
p3927
g3627
sg38
S'left'
p3928
sg59
g63
sS'trial_loop.thisN'
p3929
I18
sg33
g3746
sg64
g65
sS'trial_loop.thisIndex'
p3930
g60
(g99
S'\x12\x00\x00\x00'
tRp3931
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3932
I0
sg3642
g3743
sS'block_loop.thisRepN'
p3933
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3934
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p3935
Nsg70
Vy
sS'block_loop.thisTrialN'
p3936
I0
sg39
F0.86648612371936906
sg34
g753
(S'\x07\xdf\x07\n\x11\x194\x0e\xbdp'
tRp3937
sa(dp3938
S'trial_loop.thisTrialN'
p3939
I19
sg3633
S'30-spaghetti_hoops.png'
p3940
sS'block_loop.thisIndex'
p3941
g3627
sg38
S'right'
p3942
sg59
g63
sS'trial_loop.thisN'
p3943
I19
sg33
S'19-caramello_redo.png'
p3944
sg64
g65
sS'trial_loop.thisIndex'
p3945
g60
(g99
S'\x13\x00\x00\x00'
tRp3946
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3947
I0
sg3642
S'19-caramello_redo.png'
p3948
sS'block_loop.thisRepN'
p3949
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3950
I1
sg3648
S'30-spaghetti_hoops.png'
p3951
sg55
g11
sS'block_loop.thisTrial'
p3952
Nsg70
Vy
sS'block_loop.thisTrialN'
p3953
I0
sg39
F0.96662074690902955
sg34
g753
(S'\x07\xdf\x07\n\x11\x19:\r+\x18'
tRp3954
sa(dp3955
S'trial_loop.thisTrialN'
p3956
I20
sg3633
S'41-peanuts_redo.png'
p3957
sS'block_loop.thisIndex'
p3958
g3627
sg38
S'left'
p3959
sg59
g63
sS'trial_loop.thisN'
p3960
I20
sg33
g3771
sg64
g65
sS'trial_loop.thisIndex'
p3961
g60
(g99
S'\x14\x00\x00\x00'
tRp3962
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3963
I0
sg3642
S'45-chewy_nougat_redo.png'
p3964
sS'block_loop.thisRepN'
p3965
I1
sg3645
g3771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3966
I1
sg3648
g3778
sg55
g11
sS'block_loop.thisTrial'
p3967
Nsg70
Vy
sS'block_loop.thisTrialN'
p3968
I0
sg39
F0.83329389480059035
sg34
g753
(S'\x07\xdf\x07\n\x11\x1a\x04\rB\x88'
tRp3969
sa(dp3970
S'trial_loop.thisTrialN'
p3971
I21
sg3633
S'19-caramello_redo.png'
p3972
sS'block_loop.thisIndex'
p3973
g3627
sg38
S'left'
p3974
sg59
g63
sS'trial_loop.thisN'
p3975
I21
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p3976
g60
(g99
S'\x15\x00\x00\x00'
tRp3977
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3978
I0
sg3642
S'30-spaghetti_hoops.png'
p3979
sS'block_loop.thisRepN'
p3980
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3981
I1
sg3648
g3951
sg55
g11
sS'block_loop.thisTrial'
p3982
Nsg70
Vy
sS'block_loop.thisTrialN'
p3983
I0
sg39
F0.81663306313566864
sg34
g753
(S'\x07\xdf\x07\n\x11\x1a\n\x0b7\x18'
tRp3984
sa(dp3985
S'trial_loop.thisTrialN'
p3986
I22
sg3633
g3654
sS'block_loop.thisIndex'
p3987
g3627
sg38
S'right'
p3988
sg59
g63
sS'trial_loop.thisN'
p3989
I22
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p3990
g60
(g99
S'\x16\x00\x00\x00'
tRp3991
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3992
I0
sg3642
g3662
sS'block_loop.thisRepN'
p3993
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3994
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p3995
Nsg70
Vy
sS'block_loop.thisTrialN'
p3996
I0
sg39
F1.0666518795915181
sg34
g753
(S'\x07\xdf\x07\n\x11\x1a\x10\x08\xed('
tRp3997
sa(dp3998
S'trial_loop.thisTrialN'
p3999
I23
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p4000
sS'block_loop.thisIndex'
p4001
g3627
sg38
S'right'
p4002
sg59
g63
sS'trial_loop.thisN'
p4003
I23
sg33
S'36-fig_rolls.png'
p4004
sg64
g65
sS'trial_loop.thisIndex'
p4005
g60
(g99
S'\x17\x00\x00\x00'
tRp4006
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4007
I0
sg3642
S'36-fig_rolls.png'
p4008
sS'block_loop.thisRepN'
p4009
I1
sg3645
g4004
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4010
I1
sg3648
S'34-hula_hoops_bbq_beef_redo.png'
p4011
sg55
g11
sS'block_loop.thisTrial'
p4012
Nsg70
Vy
sS'block_loop.thisTrialN'
p4013
I0
sg39
F0.999978617663146
sg34
g753
(S'\x07\xdf\x07\n\x11\x1a\x16\no\xe0'
tRp4014
sa(dp4015
S'trial_loop.thisTrialN'
p4016
I24
sg3633
g3718
sS'block_loop.thisIndex'
p4017
g3627
sg38
S'right'
p4018
sg59
g63
sS'trial_loop.thisN'
p4019
I24
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p4020
g60
(g99
S'\x18\x00\x00\x00'
tRp4021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4022
I0
sg3642
g3726
sS'block_loop.thisRepN'
p4023
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4024
I1
sg3648
g3729
sg55
g11
sS'block_loop.thisTrial'
p4025
Nsg70
Vy
sS'block_loop.thisTrialN'
p4026
I0
sg39
F0.86662468126087333
sg34
g753
(S'\x07\xdf\x07\n\x11\x1a\x1c\x0b\x04P'
tRp4027
sa(dp4028
S'trial_loop.thisTrialN'
p4029
I25
sg3633
S'46-pistachios.png'
p4030
sS'block_loop.thisIndex'
p4031
g3627
sg38
S'right'
p4032
sg59
g63
sS'trial_loop.thisN'
p4033
I25
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p4034
g60
(g99
S'\x19\x00\x00\x00'
tRp4035
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4036
I0
sg3642
S'29-beans.png'
p4037
sS'block_loop.thisRepN'
p4038
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4039
I1
sg3648
g3818
sg55
g11
sS'block_loop.thisTrial'
p4040
Nsg70
Vy
sS'block_loop.thisTrialN'
p4041
I0
sg39
F1.5999533009780862
sg34
g753
(S'\x07\xdf\x07\n\x11\x1a"\tn\x10'
tRp4042
sa(dp4043
S'trial_loop.thisTrialN'
p4044
I26
sg3633
g3848
sS'block_loop.thisIndex'
p4045
g3627
sg38
S'left'
p4046
sg59
g63
sS'trial_loop.thisN'
p4047
I26
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p4048
g60
(g99
S'\x1a\x00\x00\x00'
tRp4049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4050
I0
sg3642
g3856
sS'block_loop.thisRepN'
p4051
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4052
I1
sg3648
g3859
sg55
g11
sS'block_loop.thisTrial'
p4053
Nsg70
Vy
sS'block_loop.thisTrialN'
p4054
I0
sg39
F0.79997052088583587
sg34
g753
(S'\x07\xdf\x07\n\x11\x1a)\x03\xc8\xc0'
tRp4055
sa(dp4056
S'trial_loop.thisTrialN'
p4057
I27
sg3633
S'33-ambrosia_rice.png'
p4058
sS'block_loop.thisIndex'
p4059
g3627
sg38
S'left'
p4060
sg59
g63
sS'trial_loop.thisN'
p4061
I27
sg33
S'33-ambrosia_rice.png'
p4062
sg64
g65
sS'trial_loop.thisIndex'
p4063
g60
(g99
S'\x1b\x00\x00\x00'
tRp4064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4065
I0
sg3642
S'23-crunchie_redo.png'
p4066
sS'block_loop.thisRepN'
p4067
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4068
I1
sg3648
S'23-crunchie_redo.png'
p4069
sg55
g11
sS'block_loop.thisTrial'
p4070
Nsg70
Vy
sS'block_loop.thisTrialN'
p4071
I0
sg39
F1.2832461124053225
sg34
g753
(S'\x07\xdf\x07\n\x11\x1a/\x01D8'
tRp4072
sa(dp4073
S'trial_loop.thisTrialN'
p4074
I28
sg3633
S'6-sour_patch_kids.png'
p4075
sS'block_loop.thisIndex'
p4076
g3627
sg38
S'right'
p4077
sg59
g63
sS'trial_loop.thisN'
p4078
I28
sg33
S'6-sour_patch_kids.png'
p4079
sg64
g65
sS'trial_loop.thisIndex'
p4080
g60
(g99
S'\x1c\x00\x00\x00'
tRp4081
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4082
I0
sg3642
S'38-maltesers.png'
p4083
sS'block_loop.thisRepN'
p4084
I1
sg3645
S'38-maltesers.png'
p4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4086
I1
sg3648
g4079
sg55
g11
sS'block_loop.thisTrial'
p4087
Nsg70
Vy
sS'block_loop.thisTrialN'
p4088
I0
sg39
F1.0334277197180199
sg34
g753
(S'\x07\xdf\x07\n\x11\x1a5\x06\x1eh'
tRp4089
sa(dp4090
S'trial_loop.thisTrialN'
p4091
I29
sg3633
g4058
sS'block_loop.thisIndex'
p4092
g3627
sg38
S'left'
p4093
sg59
g63
sS'trial_loop.thisN'
p4094
I29
sg33
g4062
sg64
g65
sS'trial_loop.thisIndex'
p4095
g60
(g99
S'\x1d\x00\x00\x00'
tRp4096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4097
I0
sg3642
g4066
sS'block_loop.thisRepN'
p4098
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4099
I1
sg3648
g4069
sg55
g11
sS'block_loop.thisTrial'
p4100
Nsg70
Vy
sS'block_loop.thisTrialN'
p4101
I0
sg39
F0.8999107073614141
sg34
g753
(S'\x07\xdf\x07\n\x11\x1a;\x07(\x08'
tRp4102
sa(dp4103
S'trial_loop.thisTrialN'
p4104
I30
sg3633
g4000
sS'block_loop.thisIndex'
p4105
g3627
sg38
S'right'
p4106
sg59
g63
sS'trial_loop.thisN'
p4107
I30
sg33
g4004
sg64
g65
sS'trial_loop.thisIndex'
p4108
g60
(g99
S'\x1e\x00\x00\x00'
tRp4109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4110
I0
sg3642
g4008
sS'block_loop.thisRepN'
p4111
I1
sg3645
g4004
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4112
I1
sg3648
g4011
sg55
g11
sS'block_loop.thisTrial'
p4113
Nsg70
Vy
sS'block_loop.thisTrialN'
p4114
I0
sg39
F0.93326886320937774
sg34
g753
(S'\x07\xdf\x07\n\x11\x1b\x05\x06\x0e\xc8'
tRp4115
sa(dp4116
S'trial_loop.thisTrialN'
p4117
I31
sg3633
g3701
sS'block_loop.thisIndex'
p4118
g3627
sg38
S'right'
p4119
sg59
g63
sS'trial_loop.thisN'
p4120
I31
sg33
g3711
sg64
g65
sS'trial_loop.thisIndex'
p4121
g60
(g99
S'\x1f\x00\x00\x00'
tRp4122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4123
I0
sg3642
g3709
sS'block_loop.thisRepN'
p4124
I1
sg3645
g3711
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4125
I1
sg3648
g3705
sg55
g11
sS'block_loop.thisTrial'
p4126
Nsg70
Vy
sS'block_loop.thisTrialN'
p4127
I0
sg39
F0.64994805517562781
sg34
g753
(S'\x07\xdf\x07\n\x11\x1b\x0b\x05\xad '
tRp4128
sa(dp4129
S'trial_loop.thisTrialN'
p4130
I32
sg3633
S'43-mrporky_pork_crackles_redo.png'
p4131
sS'block_loop.thisIndex'
p4132
g3627
sg38
S'right'
p4133
sg59
g63
sS'trial_loop.thisN'
p4134
I32
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p4135
g60
(g99
S' \x00\x00\x00'
tRp4136
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4137
I0
sg3642
S'18-mms.png'
p4138
sS'block_loop.thisRepN'
p4139
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4140
I1
sg3648
g3859
sg55
g11
sS'block_loop.thisTrial'
p4141
Nsg70
Vy
sS'block_loop.thisTrialN'
p4142
I0
sg39
F1.0499696655897424
sg34
g753
(S'\x07\xdf\x07\n\x11\x1b\x11\x00\xc3P'
tRp4143
sa(dp4144
S'trial_loop.thisTrialN'
p4145
I33
sg3633
g3718
sS'block_loop.thisIndex'
p4146
g3627
sg38
S'right'
p4147
sg59
g63
sS'trial_loop.thisN'
p4148
I33
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p4149
g60
(g99
S'!\x00\x00\x00'
tRp4150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4151
I0
sg3642
g3726
sS'block_loop.thisRepN'
p4152
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4153
I1
sg3648
g3729
sg55
g11
sS'block_loop.thisTrial'
p4154
Nsg70
Vy
sS'block_loop.thisTrialN'
p4155
I0
sg39
F0.66659178096961114
sg34
g753
(S'\x07\xdf\x07\n\x11\x1b\x17\x02\x0bp'
tRp4156
sa(dp4157
S'trial_loop.thisTrialN'
p4158
I34
sg3633
g3848
sS'block_loop.thisIndex'
p4159
g3627
sg38
S'left'
p4160
sg59
g63
sS'trial_loop.thisN'
p4161
I34
sg33
g3859
sg64
g65
sS'trial_loop.thisIndex'
p4162
g60
(g99
S'"\x00\x00\x00'
tRp4163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4164
I0
sg3642
g3856
sS'block_loop.thisRepN'
p4165
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4166
I1
sg3648
g3859
sg55
g11
sS'block_loop.thisTrial'
p4167
Nsg70
Vy
sS'block_loop.thisTrialN'
p4168
I0
sg39
F0.73336710792136728
sg34
g753
(S'\x07\xdf\x07\n\x11\x1b\x1c\x0c\xa2`'
tRp4169
sa(dp4170
S'trial_loop.thisTrialN'
p4171
I35
sg3633
S'5-pineapple.png'
p4172
sS'block_loop.thisIndex'
p4173
g3627
sg38
S'right'
p4174
sg59
g63
sS'trial_loop.thisN'
p4175
I35
sg33
S'40-sardines.png'
p4176
sg64
g65
sS'trial_loop.thisIndex'
p4177
g60
(g99
S'#\x00\x00\x00'
tRp4178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4179
I0
sg3642
S'40-sardines.png'
p4180
sS'block_loop.thisRepN'
p4181
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4182
I1
sg3648
S'5-pineapple.png'
p4183
sg55
g11
sS'block_loop.thisTrial'
p4184
Nsg70
Vy
sS'block_loop.thisTrialN'
p4185
I0
sg39
F1.6332718282283167
sg34
g753
(S'\x07\xdf\x07\n\x11\x1b"\t\'\xc0'
tRp4186
sa(dp4187
S'trial_loop.thisTrialN'
p4188
I36
sg3633
S'26-walkers_smoky_bacon.png'
p4189
sS'block_loop.thisIndex'
p4190
g3627
sg38
S'right'
p4191
sg59
g63
sS'trial_loop.thisN'
p4192
I36
sg33
S'44-crunch.png'
p4193
sg64
g65
sS'trial_loop.thisIndex'
p4194
g60
(g99
S'$\x00\x00\x00'
tRp4195
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4196
I0
sg3642
S'44-crunch.png'
p4197
sS'block_loop.thisRepN'
p4198
I1
sg3645
g4193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4199
I1
sg3648
S'26-walkers_smoky_bacon.png'
p4200
sg55
g11
sS'block_loop.thisTrial'
p4201
Nsg70
Vy
sS'block_loop.thisTrialN'
p4202
I0
sg39
F1.0999801001707965
sg34
g753
(S'\x07\xdf\x07\n\x11\x1b)\x03\xffp'
tRp4203
sa(dp4204
S'trial_loop.thisTrialN'
p4205
I37
sg3633
g4030
sS'block_loop.thisIndex'
p4206
g3627
sg38
S'right'
p4207
sg59
g63
sS'trial_loop.thisN'
p4208
I37
sg33
g3818
sg64
g65
sS'trial_loop.thisIndex'
p4209
g60
(g99
S'%\x00\x00\x00'
tRp4210
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4211
I0
sg3642
g4037
sS'block_loop.thisRepN'
p4212
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4213
I1
sg3648
g3818
sg55
g11
sS'block_loop.thisTrial'
p4214
Nsg70
Vy
sS'block_loop.thisTrialN'
p4215
I0
sg39
F1.2832791837536206
sg34
g753
(S'\x07\xdf\x07\n\x11\x1b/\x069\xc0'
tRp4216
sa(dp4217
S'trial_loop.thisTrialN'
p4218
I38
sg3633
g4172
sS'block_loop.thisIndex'
p4219
g3627
sg38
S'right'
p4220
sg59
g63
sS'trial_loop.thisN'
p4221
I38
sg33
g4183
sg64
g65
sS'trial_loop.thisIndex'
p4222
g60
(g99
S'&\x00\x00\x00'
tRp4223
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4224
I0
sg3642
g4180
sS'block_loop.thisRepN'
p4225
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4226
I1
sg3648
g4183
sg55
g11
sS'block_loop.thisTrial'
p4227
Nsg70
Vy
sS'block_loop.thisTrialN'
p4228
I0
sg39
F0.94996362151869107
sg34
g753
(S'\x07\xdf\x07\n\x11\x1b5\n\xd9X'
tRp4229
sa(dp4230
S'trial_loop.thisTrialN'
p4231
I39
sg3633
g3865
sS'block_loop.thisIndex'
p4232
g3627
sg38
S'right'
p4233
sg59
g63
sS'trial_loop.thisN'
p4234
I39
sg33
g3875
sg64
g65
sS'trial_loop.thisIndex'
p4235
g60
(g99
S"'\x00\x00\x00"
tRp4236
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4237
I0
sg3642
g3873
sS'block_loop.thisRepN'
p4238
I1
sg3645
g3875
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4239
I1
sg3648
g3869
sg55
g11
sS'block_loop.thisTrial'
p4240
Nsg70
Vy
sS'block_loop.thisTrialN'
p4241
I0
sg39
F0.76671870651989593
sg34
g753
(S'\x07\xdf\x07\n\x11\x1b;\n\xb2H'
tRp4242
sa(dp4243
S'trial_loop.thisTrialN'
p4244
I40
sg3633
g3912
sS'block_loop.thisIndex'
p4245
g3627
sg38
S'left'
p4246
sg59
g63
sS'trial_loop.thisN'
p4247
I40
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p4248
g60
(g99
S'(\x00\x00\x00'
tRp4249
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4250
I0
sg3642
g3919
sS'block_loop.thisRepN'
p4251
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4252
I1
sg3648
g3729
sg55
g11
sS'block_loop.thisTrial'
p4253
Nsg70
Vy
sS'block_loop.thisTrialN'
p4254
I0
sg39
F0.98325934094464174
sg34
g753
(S'\x07\xdf\x07\n\x11\x1c\x05\x07\xb0\xc0'
tRp4255
sa(dp4256
S'trial_loop.thisTrialN'
p4257
I41
sg3633
S'36-fig_rolls.png'
p4258
sS'block_loop.thisIndex'
p4259
g3627
sg38
S'left'
p4260
sg59
g63
sS'trial_loop.thisN'
p4261
I41
sg33
g4004
sg64
g65
sS'trial_loop.thisIndex'
p4262
g60
(g99
S')\x00\x00\x00'
tRp4263
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4264
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p4265
sS'block_loop.thisRepN'
p4266
I1
sg3645
g4004
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4267
I1
sg3648
g4011
sg55
g11
sS'block_loop.thisTrial'
p4268
Nsg70
Vy
sS'block_loop.thisTrialN'
p4269
I0
sg39
F0.98323225665080827
sg34
g753
(S'\x07\xdf\x07\n\x11\x1c\x0b\x07\xc80'
tRp4270
sa(dp4271
S'trial_loop.thisTrialN'
p4272
I42
sg3633
g3957
sS'block_loop.thisIndex'
p4273
g3627
sg38
S'left'
p4274
sg59
g63
sS'trial_loop.thisN'
p4275
I42
sg33
g3771
sg64
g65
sS'trial_loop.thisIndex'
p4276
g60
(g99
S'*\x00\x00\x00'
tRp4277
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4278
I0
sg3642
g3964
sS'block_loop.thisRepN'
p4279
I1
sg3645
g3771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4280
I1
sg3648
g3778
sg55
g11
sS'block_loop.thisTrial'
p4281
Nsg70
Vy
sS'block_loop.thisTrialN'
p4282
I0
sg39
F0.78324440182041144
sg34
g753
(S'\x07\xdf\x07\n\x11\x1c\x11\x08\x1e '
tRp4283
sa(dp4284
S'trial_loop.thisTrialN'
p4285
I43
sg3633
g3735
sS'block_loop.thisIndex'
p4286
g3627
sg38
S'left'
p4287
sg59
g63
sS'trial_loop.thisN'
p4288
I43
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p4289
g60
(g99
S'+\x00\x00\x00'
tRp4290
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4291
I0
sg3642
g3743
sS'block_loop.thisRepN'
p4292
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4293
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p4294
Nsg70
Vy
sS'block_loop.thisTrialN'
p4295
I0
sg39
F0.79999703498469898
sg34
g753
(S'\x07\xdf\x07\n\x11\x1c\x17\x05[\x18'
tRp4296
sa(dp4297
S'trial_loop.thisTrialN'
p4298
I44
sg3633
g3684
sS'block_loop.thisIndex'
p4299
g3627
sg38
S'left'
p4300
sg59
g63
sS'trial_loop.thisN'
p4301
I44
sg33
g3695
sg64
g65
sS'trial_loop.thisIndex'
p4302
g60
(g99
S',\x00\x00\x00'
tRp4303
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4304
I0
sg3642
g3692
sS'block_loop.thisRepN'
p4305
I1
sg3645
g3688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4306
I1
sg3648
g3695
sg55
g11
sS'block_loop.thisTrial'
p4307
Nsg70
Vy
sS'block_loop.thisTrialN'
p4308
I0
sg39
F0.93330421534119523
sg34
g753
(S'\x07\xdf\x07\n\x11\x1c\x1d\x02\xd2\xa8'
tRp4309
sa(dp4310
S'trial_loop.thisTrialN'
p4311
I45
sg3633
g4189
sS'block_loop.thisIndex'
p4312
g3627
sg38
S'right'
p4313
sg59
g63
sS'trial_loop.thisN'
p4314
I45
sg33
g4193
sg64
g65
sS'trial_loop.thisIndex'
p4315
g60
(g99
S'-\x00\x00\x00'
tRp4316
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4317
I0
sg3642
g4197
sS'block_loop.thisRepN'
p4318
I1
sg3645
g4193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4319
I1
sg3648
g4200
sg55
g11
sS'block_loop.thisTrial'
p4320
Nsg70
Vy
sS'block_loop.thisTrialN'
p4321
I0
sg39
F1.0003977114611189
sg34
g753
(S'\x07\xdf\x07\n\x11\x1c#\x022\x80'
tRp4322
sa(dp4323
S'trial_loop.thisTrialN'
p4324
I46
sg3633
g3634
sS'block_loop.thisIndex'
p4325
g3627
sg38
S'left'
p4326
sg59
g63
sS'trial_loop.thisN'
p4327
I46
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p4328
g60
(g99
S'.\x00\x00\x00'
tRp4329
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4330
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4331
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4332
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p4333
Nsg70
Vy
sS'block_loop.thisTrialN'
p4334
I0
sg39
F1.1332974870347243
sg34
g753
(S'\x07\xdf\x07\n\x11\x1c)\x02\xc3\x08'
tRp4335
sa(dp4336
S'trial_loop.thisTrialN'
p4337
I47
sg3633
S'38-maltesers.png'
p4338
sS'block_loop.thisIndex'
p4339
g3627
sg38
S'left'
p4340
sg59
g63
sS'trial_loop.thisN'
p4341
I47
sg33
g4085
sg64
g65
sS'trial_loop.thisIndex'
p4342
g60
(g99
S'/\x00\x00\x00'
tRp4343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4344
I0
sg3642
S'6-sour_patch_kids.png'
p4345
sS'block_loop.thisRepN'
p4346
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4347
I1
sg3648
g4079
sg55
g11
sS'block_loop.thisTrial'
p4348
Nsg70
Vy
sS'block_loop.thisTrialN'
p4349
I0
sg39
F1.8830217974391417
sg34
g753
(S'\x07\xdf\x07\n\x11\x1c/\x05zX'
tRp4350
sa(dp4351
S'trial_loop.thisTrialN'
p4352
I48
sg3633
S'7-olives.png'
p4353
sS'block_loop.thisIndex'
p4354
g3627
sg38
S'left'
p4355
sg59
g63
sS'trial_loop.thisN'
p4356
I48
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4357
g60
(g99
S'0\x00\x00\x00'
tRp4358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4359
I0
sg3642
S'22-daim.png'
p4360
sS'block_loop.thisRepN'
p4361
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4362
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p4363
Nsg70
Vy
sS'block_loop.thisTrialN'
p4364
I0
sg39
F0.74996749885031022
sg34
g753
(S'\x07\xdf\x07\n\x11\x1c6\x04\x1e\xb0'
tRp4365
sa(dp4366
S'trial_loop.thisTrialN'
p4367
I49
sg3633
g3701
sS'block_loop.thisIndex'
p4368
g3627
sg38
S'right'
p4369
sg59
g63
sS'trial_loop.thisN'
p4370
I49
sg33
g3711
sg64
g65
sS'trial_loop.thisIndex'
p4371
g60
(g99
S'1\x00\x00\x00'
tRp4372
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4373
I0
sg3642
g3709
sS'block_loop.thisRepN'
p4374
I1
sg3645
g3711
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4375
I1
sg3648
g3705
sg55
g11
sS'block_loop.thisTrial'
p4376
Nsg70
Vy
sS'block_loop.thisTrialN'
p4377
I0
sg39
F0.76665427441548673
sg34
g753
(S'\x07\xdf\x07\n\x11\x1d\x00\x00\xde\xa8'
tRp4378
sa(dp4379
S'trial_loop.thisTrialN'
p4380
I50
sg3633
S'23-crunchie_redo.png'
p4381
sS'block_loop.thisIndex'
p4382
g3627
sg38
S'right'
p4383
sg59
g63
sS'trial_loop.thisN'
p4384
I50
sg33
g4062
sg64
g65
sS'trial_loop.thisIndex'
p4385
g60
(g99
S'2\x00\x00\x00'
tRp4386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4387
I0
sg3642
S'33-ambrosia_rice.png'
p4388
sS'block_loop.thisRepN'
p4389
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4390
I1
sg3648
g4069
sg55
g11
sS'block_loop.thisTrial'
p4391
Nsg70
Vy
sS'block_loop.thisTrialN'
p4392
I0
sg39
F0.84999093388978508
sg34
g753
(S'\x07\xdf\x07\n\x11\x1d\x05\x0c\xe4\xc8'
tRp4393
sa(dp4394
S'trial_loop.thisTrialN'
p4395
I51
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p4396
sS'block_loop.thisIndex'
p4397
g3627
sg38
S'left'
p4398
sg59
g63
sS'trial_loop.thisN'
p4399
I51
sg33
g3875
sg64
g65
sS'trial_loop.thisIndex'
p4400
g60
(g99
S'3\x00\x00\x00'
tRp4401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4402
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p4403
sS'block_loop.thisRepN'
p4404
I1
sg3645
g3875
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4405
I1
sg3648
g3869
sg55
g11
sS'block_loop.thisTrial'
p4406
Nsg70
Vy
sS'block_loop.thisTrialN'
p4407
I0
sg39
F0.7331943386416242
sg34
g753
(S'\x07\xdf\x07\n\x11\x1d\x0b\x0bRp'
tRp4408
sa(dp4409
S'trial_loop.thisTrialN'
p4410
I52
sg3633
g3831
sS'block_loop.thisIndex'
p4411
g3627
sg38
S'right'
p4412
sg59
g63
sS'trial_loop.thisN'
p4413
I52
sg33
g3835
sg64
g65
sS'trial_loop.thisIndex'
p4414
g60
(g99
S'4\x00\x00\x00'
tRp4415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4416
I0
sg3642
g3839
sS'block_loop.thisRepN'
p4417
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4418
I1
sg3648
g3842
sg55
g11
sS'block_loop.thisTrial'
p4419
Nsg70
Vy
sS'block_loop.thisTrialN'
p4420
I0
sg39
F0.93320756718094344
sg34
g753
(S'\x07\xdf\x07\n\x11\x1d\x11\x07\x99P'
tRp4421
sa(dp4422
S'trial_loop.thisTrialN'
p4423
I53
sg3633
g4189
sS'block_loop.thisIndex'
p4424
g3627
sg38
S'right'
p4425
sg59
g63
sS'trial_loop.thisN'
p4426
I53
sg33
g4193
sg64
g65
sS'trial_loop.thisIndex'
p4427
g60
(g99
S'5\x00\x00\x00'
tRp4428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4429
I0
sg3642
g4197
sS'block_loop.thisRepN'
p4430
I1
sg3645
g4193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4431
I1
sg3648
g4200
sg55
g11
sS'block_loop.thisTrial'
p4432
Nsg70
Vy
sS'block_loop.thisTrialN'
p4433
I0
sg39
F0.88330090820818441
sg34
g753
(S'\x07\xdf\x07\n\x11\x1d\x17\x077\xa8'
tRp4434
sa(dp4435
S'trial_loop.thisTrialN'
p4436
I54
sg3633
g4172
sS'block_loop.thisIndex'
p4437
g3627
sg38
S'right'
p4438
sg59
g63
sS'trial_loop.thisN'
p4439
I54
sg33
g4176
sg64
g65
sS'trial_loop.thisIndex'
p4440
g60
(g99
S'6\x00\x00\x00'
tRp4441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4442
I0
sg3642
g4180
sS'block_loop.thisRepN'
p4443
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4444
I1
sg3648
g4183
sg55
g11
sS'block_loop.thisTrial'
p4445
Nsg70
Vy
sS'block_loop.thisTrialN'
p4446
I0
sg39
F0.79994144090596819
sg34
g753
(S'\x07\xdf\x07\n\x11\x1d\x1d\x05\xdf\xe8'
tRp4447
sa(dp4448
S'trial_loop.thisTrialN'
p4449
I55
sg3633
g3957
sS'block_loop.thisIndex'
p4450
g3627
sg38
S'left'
p4451
sg59
g63
sS'trial_loop.thisN'
p4452
I55
sg33
g3771
sg64
g65
sS'trial_loop.thisIndex'
p4453
g60
(g99
S'7\x00\x00\x00'
tRp4454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4455
I0
sg3642
g3964
sS'block_loop.thisRepN'
p4456
I1
sg3645
g3771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4457
I1
sg3648
g3778
sg55
g11
sS'block_loop.thisTrial'
p4458
Nsg70
Vy
sS'block_loop.thisTrialN'
p4459
I0
sg39
F0.83331727282347856
sg34
g753
(S'\x07\xdf\x07\n\x11\x1d#\x03[`'
tRp4460
sa(dp4461
S'trial_loop.thisTrialN'
p4462
I56
sg3633
S'25-kitkat.png'
p4463
sS'block_loop.thisIndex'
p4464
g3627
sg38
S'right'
p4465
sg59
g63
sS'trial_loop.thisN'
p4466
I56
sg33
S'31-hobnobs.png'
p4467
sg64
g65
sS'trial_loop.thisIndex'
p4468
g60
(g99
S'8\x00\x00\x00'
tRp4469
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4470
I0
sg3642
S'31-hobnobs.png'
p4471
sS'block_loop.thisRepN'
p4472
I1
sg3645
S'25-kitkat.png'
p4473
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4474
I1
sg3648
g4467
sg55
g11
sS'block_loop.thisTrial'
p4475
Nsg70
Vy
sS'block_loop.thisTrialN'
p4476
I0
sg39
F1.7000032501164242
sg34
g753
(S'\x07\xdf\x07\n\x11\x1d)\x01O\xf0'
tRp4477
sa(dp4478
S'trial_loop.thisTrialN'
p4479
I57
sg3633
g3831
sS'block_loop.thisIndex'
p4480
g3627
sg38
S'right'
p4481
sg59
g63
sS'trial_loop.thisN'
p4482
I57
sg33
g3835
sg64
g65
sS'trial_loop.thisIndex'
p4483
g60
(g99
S'9\x00\x00\x00'
tRp4484
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4485
I0
sg3642
g3839
sS'block_loop.thisRepN'
p4486
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4487
I1
sg3648
g3842
sg55
g11
sS'block_loop.thisTrial'
p4488
Nsg70
Vy
sS'block_loop.thisTrialN'
p4489
I0
sg39
F0.95003090460522799
sg34
g753
(S'\x07\xdf\x07\n\x11\x1d/\x0cX('
tRp4490
sa(dp4491
S'trial_loop.thisTrialN'
p4492
I58
sg3633
S'10-bounty_redo.png'
p4493
sS'block_loop.thisIndex'
p4494
g3627
sg38
S'right'
p4495
sg59
g63
sS'trial_loop.thisN'
p4496
I58
sg33
g3893
sg64
g65
sS'trial_loop.thisIndex'
p4497
g60
(g99
S':\x00\x00\x00'
tRp4498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4499
I0
sg3642
S'4-corn.png'
p4500
sS'block_loop.thisRepN'
p4501
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4502
I1
sg3648
g3893
sg55
g11
sS'block_loop.thisTrial'
p4503
Nsg70
Vy
sS'block_loop.thisTrialN'
p4504
I0
sg39
F1.2998935444738891
sg34
g753
(S'\x07\xdf\x07\n\x11\x1d5\x0c5\x00'
tRp4505
sa(dp4506
S'trial_loop.thisTrialN'
p4507
I59
sg3633
S'50-polo.png'
p4508
sS'block_loop.thisIndex'
p4509
g3627
sg38
S'right'
p4510
sg59
g63
sS'trial_loop.thisN'
p4511
I59
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p4512
g60
(g99
S';\x00\x00\x00'
tRp4513
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4514
I0
sg3642
S'48-twix.png'
p4515
sS'block_loop.thisRepN'
p4516
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4517
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p4518
Nsg70
Vy
sS'block_loop.thisTrialN'
p4519
I0
sg39
F0.7499389890654129
sg34
g753
(S'\x07\xdf\x07\n\x11\x1e\x00\x02\x07\x88'
tRp4520
sa(dp4521
S'trial_loop.thisTrialN'
p4522
I60
sg3633
S'1-treacle_cookies.png'
p4523
sS'block_loop.thisIndex'
p4524
g3627
sg38
S'right'
p4525
sg59
g63
sS'trial_loop.thisN'
p4526
I60
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p4527
g60
(g99
S'<\x00\x00\x00'
tRp4528
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4529
I0
sg3642
S'21-nakd_banana_crunch.png'
p4530
sS'block_loop.thisRepN'
p4531
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4532
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p4533
Nsg70
Vy
sS'block_loop.thisTrialN'
p4534
I0
sg39
F0.66664480916733737
sg34
g753
(S'\x07\xdf\x07\n\x11\x1e\x05\x0e\r\xa8'
tRp4535
sa(dp4536
S'trial_loop.thisTrialN'
p4537
I61
sg3633
g4075
sS'block_loop.thisIndex'
p4538
g3627
sg38
S'right'
p4539
sg59
g63
sS'trial_loop.thisN'
p4540
I61
sg33
g4085
sg64
g65
sS'trial_loop.thisIndex'
p4541
g60
(g99
S'=\x00\x00\x00'
tRp4542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4543
I0
sg3642
g4083
sS'block_loop.thisRepN'
p4544
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4545
I1
sg3648
g4079
sg55
g11
sS'block_loop.thisTrial'
p4546
Nsg70
Vy
sS'block_loop.thisTrialN'
p4547
I0
sg39
F0.9330804135533981
sg34
g753
(S'\x07\xdf\x07\n\x11\x1e\x0b\tbX'
tRp4548
sa(dp4549
S'trial_loop.thisTrialN'
p4550
I62
sg3633
g4523
sS'block_loop.thisIndex'
p4551
g3627
sg38
S'right'
p4552
sg59
g63
sS'trial_loop.thisN'
p4553
I62
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p4554
g60
(g99
S'>\x00\x00\x00'
tRp4555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4556
I0
sg3642
g4530
sS'block_loop.thisRepN'
p4557
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4558
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p4559
Nsg70
Vy
sS'block_loop.thisTrialN'
p4560
I0
sg39
F0.61668939846640569
sg34
g753
(S'\x07\xdf\x07\n\x11\x1e\x11\t\x00\xb0'
tRp4561
sa(dp4562
S'trial_loop.thisTrialN'
p4563
I63
sg3633
S'31-hobnobs.png'
p4564
sS'block_loop.thisIndex'
p4565
g3627
sg38
S'left'
p4566
sg59
g63
sS'trial_loop.thisN'
p4567
I63
sg33
g4473
sg64
g65
sS'trial_loop.thisIndex'
p4568
g60
(g99
S'?\x00\x00\x00'
tRp4569
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4570
I0
sg3642
S'25-kitkat.png'
p4571
sS'block_loop.thisRepN'
p4572
I1
sg3645
g4473
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4573
I1
sg3648
g4467
sg55
g11
sS'block_loop.thisTrial'
p4574
Nsg70
Vy
sS'block_loop.thisTrialN'
p4575
I0
sg39
F1.4666629413877672
sg34
g753
(S'\x07\xdf\x07\n\x11\x1e\x17\x03\x9d\xc8'
tRp4576
sa(dp4577
S'trial_loop.thisTrialN'
p4578
I64
sg3633
g3797
sS'block_loop.thisIndex'
p4579
g3627
sg38
S'right'
p4580
sg59
g63
sS'trial_loop.thisN'
p4581
I64
sg33
g3808
sg64
g65
sS'trial_loop.thisIndex'
p4582
g60
(g99
S'@\x00\x00\x00'
tRp4583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4584
I0
sg3642
g3805
sS'block_loop.thisRepN'
p4585
I1
sg3645
g3801
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4586
I1
sg3648
g3808
sg55
g11
sS'block_loop.thisTrial'
p4587
Nsg70
Vy
sS'block_loop.thisTrialN'
p4588
I0
sg39
F0.91657096883136546
sg34
g753
(S'\x07\xdf\x07\n\x11\x1e\x1d\x0b\x13\xf0'
tRp4589
sa(dp4590
S'trial_loop.thisTrialN'
p4591
I65
sg3633
g4564
sS'block_loop.thisIndex'
p4592
g3627
sg38
S'left'
p4593
sg59
g63
sS'trial_loop.thisN'
p4594
I65
sg33
g4473
sg64
g65
sS'trial_loop.thisIndex'
p4595
g60
(g99
S'A\x00\x00\x00'
tRp4596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4597
I0
sg3642
g4571
sS'block_loop.thisRepN'
p4598
I1
sg3645
g4473
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4599
I1
sg3648
g4467
sg55
g11
sS'block_loop.thisTrial'
p4600
Nsg70
Vy
sS'block_loop.thisTrialN'
p4601
I0
sg39
F0.96658197360375198
sg34
g753
(S'\x07\xdf\x07\n\x11\x1e#\nw\xb0'
tRp4602
sa(dp4603
S'trial_loop.thisTrialN'
p4604
I66
sg3633
g4058
sS'block_loop.thisIndex'
p4605
g3627
sg38
S'left'
p4606
sg59
g63
sS'trial_loop.thisN'
p4607
I66
sg33
g4062
sg64
g65
sS'trial_loop.thisIndex'
p4608
g60
(g99
S'B\x00\x00\x00'
tRp4609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4610
I0
sg3642
g4066
sS'block_loop.thisRepN'
p4611
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4612
I1
sg3648
g4069
sg55
g11
sS'block_loop.thisTrial'
p4613
Nsg70
Vy
sS'block_loop.thisTrialN'
p4614
I0
sg39
F0.79999304361263057
sg34
g753
(S'\x07\xdf\x07\n\x11\x1e)\nP\xa0'
tRp4615
sa(dp4616
S'trial_loop.thisTrialN'
p4617
I67
sg3633
g3972
sS'block_loop.thisIndex'
p4618
g3627
sg38
S'left'
p4619
sg59
g63
sS'trial_loop.thisN'
p4620
I67
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p4621
g60
(g99
S'C\x00\x00\x00'
tRp4622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4623
I0
sg3642
g3979
sS'block_loop.thisRepN'
p4624
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4625
I1
sg3648
g3951
sg55
g11
sS'block_loop.thisTrial'
p4626
Nsg70
Vy
sS'block_loop.thisTrialN'
p4627
I0
sg39
F0.9500277685256151
sg34
g753
(S'\x07\xdf\x07\n\x11\x1e/\x07\xc80'
tRp4628
sa(dp4629
S'trial_loop.thisTrialN'
p4630
I68
sg3633
g4508
sS'block_loop.thisIndex'
p4631
g3627
sg38
S'right'
p4632
sg59
g63
sS'trial_loop.thisN'
p4633
I68
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p4634
g60
(g99
S'D\x00\x00\x00'
tRp4635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4636
I0
sg3642
g4515
sS'block_loop.thisRepN'
p4637
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4638
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p4639
Nsg70
Vy
sS'block_loop.thisTrialN'
p4640
I0
sg39
F0.76659582936190418
sg34
g753
(S'\x07\xdf\x07\n\x11\x1e5\x07\xa5\x08'
tRp4641
sa(dp4642
S'trial_loop.thisTrialN'
p4643
I69
sg3633
g3797
sS'block_loop.thisIndex'
p4644
g3627
sg38
S'right'
p4645
sg59
g63
sS'trial_loop.thisN'
p4646
I69
sg33
g3808
sg64
g65
sS'trial_loop.thisIndex'
p4647
g60
(g99
S'E\x00\x00\x00'
tRp4648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4649
I0
sg3642
g3805
sS'block_loop.thisRepN'
p4650
I1
sg3645
g3801
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4651
I1
sg3648
g3808
sg55
g11
sS'block_loop.thisTrial'
p4652
Nsg70
Vy
sS'block_loop.thisTrialN'
p4653
I0
sg39
F0.73314074025256559
sg34
g753
(S'\x07\xdf\x07\n\x11\x1e;\x04\xa3\x80'
tRp4654
sa(dp4655
S'trial_loop.thisTrialN'
p4656
I70
sg3633
g4131
sS'block_loop.thisIndex'
p4657
g3627
sg38
S'right'
p4658
sg59
g63
sS'trial_loop.thisN'
p4659
I70
sg33
g3859
sg64
g65
sS'trial_loop.thisIndex'
p4660
g60
(g99
S'F\x00\x00\x00'
tRp4661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4662
I0
sg3642
g4138
sS'block_loop.thisRepN'
p4663
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4664
I1
sg3648
g3859
sg55
g11
sS'block_loop.thisTrial'
p4665
Nsg70
Vy
sS'block_loop.thisTrialN'
p4666
I0
sg39
F1.0665951451264846
sg34
g753
(S'\x07\xdf\x07\n\x11\x1f\x05\x00\xea`'
tRp4667
sa(dp4668
S'trial_loop.thisTrialN'
p4669
I71
sg3633
g3752
sS'block_loop.thisIndex'
p4670
g3627
sg38
S'left'
p4671
sg59
g63
sS'trial_loop.thisN'
p4672
I71
sg33
g3711
sg64
g65
sS'trial_loop.thisIndex'
p4673
g60
(g99
S'G\x00\x00\x00'
tRp4674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4675
I0
sg3642
g3759
sS'block_loop.thisRepN'
p4676
I1
sg3645
g3711
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4677
I1
sg3648
g3705
sg55
g11
sS'block_loop.thisTrial'
p4678
Nsg70
Vy
sS'block_loop.thisTrialN'
p4679
I0
sg39
F1.0999969209442497
sg34
g753
(S'\x07\xdf\x07\n\x11\x1f\x0b\x02q\x00'
tRp4680
sa(dp4681
S'trial_loop.thisTrialN'
p4682
I72
sg3633
S'44-crunch.png'
p4683
sS'block_loop.thisIndex'
p4684
g3627
sg38
S'left'
p4685
sg59
g63
sS'trial_loop.thisN'
p4686
I72
sg33
g4193
sg64
g65
sS'trial_loop.thisIndex'
p4687
g60
(g99
S'H\x00\x00\x00'
tRp4688
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4689
I0
sg3642
S'26-walkers_smoky_bacon.png'
p4690
sS'block_loop.thisRepN'
p4691
I1
sg3645
g4193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4692
I1
sg3648
g4200
sg55
g11
sS'block_loop.thisTrial'
p4693
Nsg70
Vy
sS'block_loop.thisTrialN'
p4694
I0
sg39
F0.79993687934256741
sg34
g753
(S'\x07\xdf\x07\n\x11\x1f\x11\x04\xabP'
tRp4695
sa(dp4696
S'trial_loop.thisTrialN'
p4697
I73
sg3633
g4058
sS'block_loop.thisIndex'
p4698
g3627
sg38
S'left'
p4699
sg59
g63
sS'trial_loop.thisN'
p4700
I73
sg33
g4062
sg64
g65
sS'trial_loop.thisIndex'
p4701
g60
(g99
S'I\x00\x00\x00'
tRp4702
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4703
I0
sg3642
g4066
sS'block_loop.thisRepN'
p4704
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4705
I1
sg3648
g4069
sg55
g11
sS'block_loop.thisTrial'
p4706
Nsg70
Vy
sS'block_loop.thisTrialN'
p4707
I0
sg39
F0.65002275080405525
sg34
g753
(S'\x07\xdf\x07\n\x11\x1f\x17\x01\xe8H'
tRp4708
sa(dp4709
S'trial_loop.thisTrialN'
p4710
I74
sg3633
g4131
sS'block_loop.thisIndex'
p4711
g3627
sg38
S'right'
p4712
sg59
g63
sS'trial_loop.thisN'
p4713
I74
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p4714
g60
(g99
S'J\x00\x00\x00'
tRp4715
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4716
I0
sg3642
g4138
sS'block_loop.thisRepN'
p4717
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4718
I1
sg3648
g3859
sg55
g11
sS'block_loop.thisTrial'
p4719
Nsg70
Vy
sS'block_loop.thisTrialN'
p4720
I0
sg39
F0.73329098680551397
sg34
g753
(S'\x07\xdf\x07\n\x11\x1f\x1c\x0c\x7f8'
tRp4721
sa(dp4722
S'trial_loop.thisTrialN'
p4723
I75
sg3633
S'3-ellas_strawberries_apples.png'
p4724
sS'block_loop.thisIndex'
p4725
g3627
sg38
S'left'
p4726
sg59
g63
sS'trial_loop.thisN'
p4727
I75
sg33
g3835
sg64
g65
sS'trial_loop.thisIndex'
p4728
g60
(g99
S'K\x00\x00\x00'
tRp4729
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4730
I0
sg3642
S'13-mccoys_steak_crisps.png'
p4731
sS'block_loop.thisRepN'
p4732
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4733
I1
sg3648
g3842
sg55
g11
sS'block_loop.thisTrial'
p4734
Nsg70
Vy
sS'block_loop.thisTrialN'
p4735
I0
sg39
F0.80003466789639788
sg34
g753
(S'\x07\xdf\x07\n\x11\x1f"\x08\xca\x00'
tRp4736
sa(dp4737
S'trial_loop.thisTrialN'
p4738
I76
sg3633
g3701
sS'block_loop.thisIndex'
p4739
g3627
sg38
S'right'
p4740
sg59
g63
sS'trial_loop.thisN'
p4741
I76
sg33
g3711
sg64
g65
sS'trial_loop.thisIndex'
p4742
g60
(g99
S'L\x00\x00\x00'
tRp4743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4744
I0
sg3642
g3709
sS'block_loop.thisRepN'
p4745
I1
sg3645
g3711
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4746
I1
sg3648
g3705
sg55
g11
sS'block_loop.thisTrial'
p4747
Nsg70
Vy
sS'block_loop.thisTrialN'
p4748
I0
sg39
F0.66668614834998152
sg34
g753
(S'\x07\xdf\x07\n\x11\x1f(\x06A\x90'
tRp4749
sa(dp4750
S'trial_loop.thisTrialN'
p4751
I77
sg3633
g4463
sS'block_loop.thisIndex'
p4752
g3627
sg38
S'right'
p4753
sg59
g63
sS'trial_loop.thisN'
p4754
I77
sg33
g4473
sg64
g65
sS'trial_loop.thisIndex'
p4755
g60
(g99
S'M\x00\x00\x00'
tRp4756
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4757
I0
sg3642
g4471
sS'block_loop.thisRepN'
p4758
I1
sg3645
g4473
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4759
I1
sg3648
g4467
sg55
g11
sS'block_loop.thisTrial'
p4760
Nsg70
Vy
sS'block_loop.thisTrialN'
p4761
I0
sg39
F1.5833386551603326
sg34
g753
(S'\x07\xdf\x07\n\x11\x1f.\x01\xd4\xc0'
tRp4762
sa(dp4763
S'trial_loop.thisTrialN'
p4764
I78
sg3633
g3848
sS'block_loop.thisIndex'
p4765
g3627
sg38
S'left'
p4766
sg59
g63
sS'trial_loop.thisN'
p4767
I78
sg33
g3859
sg64
g65
sS'trial_loop.thisIndex'
p4768
g60
(g99
S'N\x00\x00\x00'
tRp4769
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4770
I0
sg3642
g3856
sS'block_loop.thisRepN'
p4771
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4772
I1
sg3648
g3859
sg55
g11
sS'block_loop.thisTrial'
p4773
Nsg70
Vy
sS'block_loop.thisTrialN'
p4774
I0
sg39
F1.0836211871028354
sg34
g753
(S'\x07\xdf\x07\n\x11\x1f4\x0b30'
tRp4775
sa(dp4776
S'trial_loop.thisTrialN'
p4777
I79
sg3633
g3684
sS'block_loop.thisIndex'
p4778
g3627
sg38
S'left'
p4779
sg59
g63
sS'trial_loop.thisN'
p4780
I79
sg33
g3695
sg64
g65
sS'trial_loop.thisIndex'
p4781
g60
(g99
S'O\x00\x00\x00'
tRp4782
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4783
I0
sg3642
g3692
sS'block_loop.thisRepN'
p4784
I1
sg3645
g3688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4785
I1
sg3648
g3695
sg55
g11
sS'block_loop.thisTrial'
p4786
Nsg70
Vy
sS'block_loop.thisTrialN'
p4787
I0
sg39
F0.69997017876812606
sg34
g753
(S'\x07\xdf\x07\n\x11\x1f:\x0c\xf4h'
tRp4788
sa(dp4789
S'trial_loop.thisTrialN'
p4790
I80
sg3633
S'40-sardines.png'
p4791
sS'block_loop.thisIndex'
p4792
g3627
sg38
S'left'
p4793
sg59
g63
sS'trial_loop.thisN'
p4794
I80
sg33
g4176
sg64
g65
sS'trial_loop.thisIndex'
p4795
g60
(g99
S'P\x00\x00\x00'
tRp4796
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4797
I0
sg3642
S'5-pineapple.png'
p4798
sS'block_loop.thisRepN'
p4799
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4800
I1
sg3648
g4183
sg55
g11
sS'block_loop.thisTrial'
p4801
Nsg70
Vy
sS'block_loop.thisTrialN'
p4802
I0
sg39
F1.0165633282122144
sg34
g753
(S'\x07\xdf\x07\n\x11 \x04\x08\xc6\x18'
tRp4803
sa(dp4804
S'trial_loop.thisTrialN'
p4805
I81
sg3633
g4564
sS'block_loop.thisIndex'
p4806
g3627
sg38
S'right'
p4807
sg59
g63
sS'trial_loop.thisN'
p4808
I81
sg33
g4473
sg64
g65
sS'trial_loop.thisIndex'
p4809
g60
(g99
S'Q\x00\x00\x00'
tRp4810
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4811
I0
sg3642
g4571
sS'block_loop.thisRepN'
p4812
I1
sg3645
g4473
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4813
I1
sg3648
g4467
sg55
g11
sS'block_loop.thisTrial'
p4814
Nsg70
Vy
sS'block_loop.thisTrialN'
p4815
I0
sg39
F1.6666710381650773
sg34
g753
(S'\x07\xdf\x07\n\x11 \n\t\x918'
tRp4816
sa(dp4817
S'trial_loop.thisTrialN'
p4818
I82
sg3633
g4075
sS'block_loop.thisIndex'
p4819
g3627
sg38
S'right'
p4820
sg59
g63
sS'trial_loop.thisN'
p4821
I82
sg33
g4085
sg64
g65
sS'trial_loop.thisIndex'
p4822
g60
(g99
S'R\x00\x00\x00'
tRp4823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4824
I0
sg3642
g4083
sS'block_loop.thisRepN'
p4825
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4826
I1
sg3648
g4079
sg55
g11
sS'block_loop.thisTrial'
p4827
Nsg70
Vy
sS'block_loop.thisTrialN'
p4828
I0
sg39
F0.74976422409963561
sg34
g753
(S'\x07\xdf\x07\n\x11 \x11\x05\x1c\x98'
tRp4829
sa(dp4830
S'trial_loop.thisTrialN'
p4831
I83
sg3633
g3865
sS'block_loop.thisIndex'
p4832
g3627
sg38
S'right'
p4833
sg59
g63
sS'trial_loop.thisN'
p4834
I83
sg33
g3875
sg64
g65
sS'trial_loop.thisIndex'
p4835
g60
(g99
S'S\x00\x00\x00'
tRp4836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4837
I0
sg3642
g3873
sS'block_loop.thisRepN'
p4838
I1
sg3645
g3875
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4839
I1
sg3648
g3869
sg55
g11
sS'block_loop.thisTrial'
p4840
Nsg70
Vy
sS'block_loop.thisTrialN'
p4841
I0
sg39
F0.73334686597445398
sg34
g753
(S'\x07\xdf\x07\n\x11 \x17\x01\xe0x'
tRp4842
sa(dp4843
S'trial_loop.thisTrialN'
p4844
I84
sg3633
g3752
sS'block_loop.thisIndex'
p4845
g3627
sg38
S'left'
p4846
sg59
g63
sS'trial_loop.thisN'
p4847
I84
sg33
g3711
sg64
g65
sS'trial_loop.thisIndex'
p4848
g60
(g99
S'T\x00\x00\x00'
tRp4849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4850
I0
sg3642
g3759
sS'block_loop.thisRepN'
p4851
I1
sg3645
g3711
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4852
I1
sg3648
g3705
sg55
g11
sS'block_loop.thisTrial'
p4853
Nsg70
Vy
sS'block_loop.thisTrialN'
p4854
I0
sg39
F0.91668044639664004
sg34
g753
(S'\x07\xdf\x07\n\x11 \x1c\ri\x98'
tRp4855
sa(dp4856
S'trial_loop.thisTrialN'
p4857
I85
sg3633
g4396
sS'block_loop.thisIndex'
p4858
g3627
sg38
S'left'
p4859
sg59
g63
sS'trial_loop.thisN'
p4860
I85
sg33
g3875
sg64
g65
sS'trial_loop.thisIndex'
p4861
g60
(g99
S'U\x00\x00\x00'
tRp4862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4863
I0
sg3642
g4403
sS'block_loop.thisRepN'
p4864
I1
sg3645
g3875
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4865
I1
sg3648
g3869
sg55
g11
sS'block_loop.thisTrial'
p4866
Nsg70
Vy
sS'block_loop.thisTrialN'
p4867
I0
sg39
F1.1333368305313343
sg34
g753
(S'\x07\xdf\x07\n\x11 "\x0c\xcdX'
tRp4868
sa(dp4869
S'trial_loop.thisTrialN'
p4870
I86
sg3633
g3972
sS'block_loop.thisIndex'
p4871
g3627
sg38
S'left'
p4872
sg59
g63
sS'trial_loop.thisN'
p4873
I86
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p4874
g60
(g99
S'V\x00\x00\x00'
tRp4875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4876
I0
sg3642
g3979
sS'block_loop.thisRepN'
p4877
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4878
I1
sg3648
g3951
sg55
g11
sS'block_loop.thisTrial'
p4879
Nsg70
Vy
sS'block_loop.thisTrialN'
p4880
I0
sg39
F1.1000063291721744
sg34
g753
(S'\x07\xdf\x07\n\x11 )\x00\x03\xe8'
tRp4881
sa(dp4882
S'trial_loop.thisTrialN'
p4883
I87
sg3633
g4508
sS'block_loop.thisIndex'
p4884
g3627
sg38
S'right'
p4885
sg59
g63
sS'trial_loop.thisN'
p4886
I87
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4887
g60
(g99
S'W\x00\x00\x00'
tRp4888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4889
I0
sg3642
g4515
sS'block_loop.thisRepN'
p4890
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4891
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p4892
Nsg70
Vy
sS'block_loop.thisTrialN'
p4893
I0
sg39
F1.1332743941093213
sg34
g753
(S'\x07\xdf\x07\n\x11 /\x01\xff\xb8'
tRp4894
sa(dp4895
S'trial_loop.thisTrialN'
p4896
I88
sg3633
g4381
sS'block_loop.thisIndex'
p4897
g3627
sg38
S'right'
p4898
sg59
g63
sS'trial_loop.thisN'
p4899
I88
sg33
g4069
sg64
g65
sS'trial_loop.thisIndex'
p4900
g60
(g99
S'X\x00\x00\x00'
tRp4901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4902
I0
sg3642
g4388
sS'block_loop.thisRepN'
p4903
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4904
I1
sg3648
g4069
sg55
g11
sS'block_loop.thisTrial'
p4905
Nsg70
Vy
sS'block_loop.thisTrialN'
p4906
I0
sg39
F0.8832860831207654
sg34
g753
(S'\x07\xdf\x07\n\x11 5\x04x\x88'
tRp4907
sa(dp4908
S'trial_loop.thisTrialN'
p4909
I89
sg3633
g3972
sS'block_loop.thisIndex'
p4910
g3627
sg38
S'left'
p4911
sg59
g63
sS'trial_loop.thisN'
p4912
I89
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p4913
g60
(g99
S'Y\x00\x00\x00'
tRp4914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4915
I0
sg3642
g3979
sS'block_loop.thisRepN'
p4916
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4917
I1
sg3648
g3951
sg55
g11
sS'block_loop.thisTrial'
p4918
Nsg70
Vy
sS'block_loop.thisTrialN'
p4919
I0
sg39
F0.64990529050191981
sg34
g753
(S'\x07\xdf\x07\n\x11 ;\x03_H'
tRp4920
sa(dp4921
S'trial_loop.thisTrialN'
p4922
I90
sg3633
g4030
sS'block_loop.thisIndex'
p4923
g3627
sg38
S'right'
p4924
sg59
g63
sS'trial_loop.thisN'
p4925
I90
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p4926
g60
(g99
S'Z\x00\x00\x00'
tRp4927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4928
I0
sg3642
g4037
sS'block_loop.thisRepN'
p4929
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4930
I1
sg3648
g3818
sg55
g11
sS'block_loop.thisTrial'
p4931
Nsg70
Vy
sS'block_loop.thisTrialN'
p4932
I0
sg39
F1.4832995397373452
sg34
g753
(S'\x07\xdf\x07\n\x11!\x04\r\xbb\xa0'
tRp4933
sa(dp4934
S'trial_loop.thisTrialN'
p4935
I91
sg3633
g4493
sS'block_loop.thisIndex'
p4936
g3627
sg38
S'right'
p4937
sg59
g63
sS'trial_loop.thisN'
p4938
I91
sg33
g3893
sg64
g65
sS'trial_loop.thisIndex'
p4939
g60
(g99
S'[\x00\x00\x00'
tRp4940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4941
I0
sg3642
g4500
sS'block_loop.thisRepN'
p4942
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4943
I1
sg3648
g3893
sg55
g11
sS'block_loop.thisTrial'
p4944
Nsg70
Vy
sS'block_loop.thisTrialN'
p4945
I0
sg39
F0.96665638413833221
sg34
g753
(S'\x07\xdf\x07\n\x11!\x0b\x06l\x88'
tRp4946
sa(dp4947
S'trial_loop.thisTrialN'
p4948
I92
sg3633
g4258
sS'block_loop.thisIndex'
p4949
g3627
sg38
S'left'
p4950
sg59
g63
sS'trial_loop.thisN'
p4951
I92
sg33
g4004
sg64
g65
sS'trial_loop.thisIndex'
p4952
g60
(g99
S'\\\x00\x00\x00'
tRp4953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4954
I0
sg3642
g4265
sS'block_loop.thisRepN'
p4955
I1
sg3645
g4004
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4956
I1
sg3648
g4011
sg55
g11
sS'block_loop.thisTrial'
p4957
Nsg70
Vy
sS'block_loop.thisTrialN'
p4958
I0
sg39
F0.84998922330123605
sg34
g753
(S'\x07\xdf\x07\n\x11!\x11\x06Ex'
tRp4959
sa(dp4960
S'trial_loop.thisTrialN'
p4961
I93
sg3633
g3831
sS'block_loop.thisIndex'
p4962
g3627
sg38
S'right'
p4963
sg59
g63
sS'trial_loop.thisN'
p4964
I93
sg33
g3835
sg64
g65
sS'trial_loop.thisIndex'
p4965
g60
(g99
S']\x00\x00\x00'
tRp4966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4967
I0
sg3642
g3839
sS'block_loop.thisRepN'
p4968
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4969
I1
sg3648
g3842
sg55
g11
sS'block_loop.thisTrial'
p4970
Nsg70
Vy
sS'block_loop.thisTrialN'
p4971
I0
sg39
F1.2500946524778556
sg34
g753
(S'\x07\xdf\x07\n\x11!\x17\x04t\xa0'
tRp4972
sa(dp4973
S'trial_loop.thisTrialN'
p4974
I94
sg3633
g4508
sS'block_loop.thisIndex'
p4975
g3627
sg38
S'right'
p4976
sg59
g63
sS'trial_loop.thisN'
p4977
I94
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p4978
g60
(g99
S'^\x00\x00\x00'
tRp4979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4980
I0
sg3642
g4515
sS'block_loop.thisRepN'
p4981
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4982
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p4983
Nsg70
Vy
sS'block_loop.thisTrialN'
p4984
I0
sg39
F0.63317917144013336
sg34
g753
(S'\x07\xdf\x07\n\x11!\x1d\x08\xd5\xb8'
tRp4985
sa(dp4986
S'trial_loop.thisTrialN'
p4987
I95
sg3633
g3735
sS'block_loop.thisIndex'
p4988
g3627
sg38
S'left'
p4989
sg59
g63
sS'trial_loop.thisN'
p4990
I95
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p4991
g60
(g99
S'_\x00\x00\x00'
tRp4992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4993
I0
sg3642
g3743
sS'block_loop.thisRepN'
p4994
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4995
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p4996
Nsg70
Vy
sS'block_loop.thisTrialN'
p4997
I0
sg39
F1.016462403578771
sg34
g753
(S'\x07\xdf\x07\n\x11!#\x03\xb1P'
tRp4998
sa(dp4999
S'trial_loop.thisTrialN'
p5000
I96
sg3633
g4564
sS'block_loop.thisIndex'
p5001
g3627
sg38
S'right'
p5002
sg59
g63
sS'trial_loop.thisN'
p5003
I96
sg33
g4473
sg64
g65
sS'trial_loop.thisIndex'
p5004
g60
(g99
S'`\x00\x00\x00'
tRp5005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5006
I0
sg3642
g4571
sS'block_loop.thisRepN'
p5007
I1
sg3645
g4473
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5008
I1
sg3648
g4467
sg55
g11
sS'block_loop.thisTrial'
p5009
Nsg70
Vy
sS'block_loop.thisTrialN'
p5010
I0
sg39
F1.6833441290400515
sg34
g753
(S'\x07\xdf\x07\n\x11!)\x04\x80X'
tRp5011
sa(dp5012
S'trial_loop.thisTrialN'
p5013
I97
sg3633
g3882
sS'block_loop.thisIndex'
p5014
g3627
sg38
S'left'
p5015
sg59
g63
sS'trial_loop.thisN'
p5016
I97
sg33
g3886
sg64
g65
sS'trial_loop.thisIndex'
p5017
g60
(g99
S'a\x00\x00\x00'
tRp5018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5019
I0
sg3642
g3890
sS'block_loop.thisRepN'
p5020
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5021
I1
sg3648
g3893
sg55
g11
sS'block_loop.thisTrial'
p5022
Nsg70
Vy
sS'block_loop.thisTrialN'
p5023
I0
sg39
F0.68332417219062336
sg34
g753
(S'\x07\xdf\x07\n\x11!0\x00FP'
tRp5024
sa(dp5025
S'trial_loop.thisTrialN'
p5026
I98
sg3633
g4258
sS'block_loop.thisIndex'
p5027
g3627
sg38
S'left'
p5028
sg59
g63
sS'trial_loop.thisN'
p5029
I98
sg33
g4011
sg64
g65
sS'trial_loop.thisIndex'
p5030
g60
(g99
S'b\x00\x00\x00'
tRp5031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5032
I0
sg3642
g4265
sS'block_loop.thisRepN'
p5033
I1
sg3645
g4004
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5034
I1
sg3648
g4011
sg55
g11
sS'block_loop.thisTrial'
p5035
Nsg70
Vy
sS'block_loop.thisTrialN'
p5036
I0
sg39
F0.99999543843296124
sg34
g753
(S'\x07\xdf\x07\n\x11!5\x0b\x1b\xc0'
tRp5037
sa(dp5038
S'trial_loop.thisTrialN'
p5039
I99
sg3633
g4172
sS'block_loop.thisIndex'
p5040
g3627
sg38
S'right'
p5041
sg59
g63
sS'trial_loop.thisN'
p5042
I99
sg33
g4176
sg64
g65
sS'trial_loop.thisIndex'
p5043
g60
(g99
S'c\x00\x00\x00'
tRp5044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5045
I0
sg3642
g4180
sS'block_loop.thisRepN'
p5046
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5047
I1
sg3648
g4183
sg55
g11
sS'block_loop.thisTrial'
p5048
Nsg70
Vy
sS'block_loop.thisTrialN'
p5049
I0
sg39
F1.1499406426300993
sg34
g753
(S'\x07\xdf\x07\n\x11!;\x0b\xacH'
tRp5050
sa(dp5051
S'trial_loop.thisTrialN'
p5052
I100
sg3633
g4258
sS'block_loop.thisIndex'
p5053
g3627
sg38
S'left'
p5054
sg59
g63
sS'trial_loop.thisN'
p5055
I100
sg33
g4011
sg64
g65
sS'trial_loop.thisIndex'
p5056
g60
(g99
S'd\x00\x00\x00'
tRp5057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5058
I0
sg3642
g4265
sS'block_loop.thisRepN'
p5059
I1
sg3645
g4004
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5060
I1
sg3648
g4011
sg55
g11
sS'block_loop.thisTrial'
p5061
Nsg70
Vy
sS'block_loop.thisTrialN'
p5062
I0
sg39
F0.79997593774533016
sg34
g753
(S'\x07\xdf\x07\n\x11"\x05\x0ec\x98'
tRp5063
sa(dp5064
S'trial_loop.thisTrialN'
p5065
I101
sg3633
g4058
sS'block_loop.thisIndex'
p5066
g3627
sg38
S'left'
p5067
sg59
g63
sS'trial_loop.thisN'
p5068
I101
sg33
g4062
sg64
g65
sS'trial_loop.thisIndex'
p5069
g60
(g99
S'e\x00\x00\x00'
tRp5070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5071
I0
sg3642
g4066
sS'block_loop.thisRepN'
p5072
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5073
I1
sg3648
g4069
sg55
g11
sS'block_loop.thisTrial'
p5074
Nsg70
Vy
sS'block_loop.thisTrialN'
p5075
I0
sg39
F1.2833196676438092
sg34
g753
(S'\x07\xdf\x07\n\x11"\x0b\x0b\xdb('
tRp5076
sa(dp5077
S'trial_loop.thisTrialN'
p5078
I102
sg3633
g3735
sS'block_loop.thisIndex'
p5079
g3627
sg38
S'left'
p5080
sg59
g63
sS'trial_loop.thisN'
p5081
I102
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p5082
g60
(g99
S'f\x00\x00\x00'
tRp5083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5084
I0
sg3642
g3743
sS'block_loop.thisRepN'
p5085
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5086
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p5087
Nsg70
Vy
sS'block_loop.thisTrialN'
p5088
I0
sg39
F0.73325420918263262
sg34
g753
(S'\x07\xdf\x07\n\x11"\x12\x01s\x18'
tRp5089
sa(dp5090
S'trial_loop.thisTrialN'
p5091
I103
sg3633
g4724
sS'block_loop.thisIndex'
p5092
g3627
sg38
S'left'
p5093
sg59
g63
sS'trial_loop.thisN'
p5094
I103
sg33
g3835
sg64
g65
sS'trial_loop.thisIndex'
p5095
g60
(g99
S'g\x00\x00\x00'
tRp5096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5097
I0
sg3642
g4731
sS'block_loop.thisRepN'
p5098
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5099
I1
sg3648
g3842
sg55
g11
sS'block_loop.thisTrial'
p5100
Nsg70
Vy
sS'block_loop.thisTrialN'
p5101
I0
sg39
F0.6500210402191442
sg34
g753
(S'\x07\xdf\x07\n\x11"\x17\r:\xb8'
tRp5102
sa(dp5103
S'trial_loop.thisTrialN'
p5104
I104
sg3633
g4396
sS'block_loop.thisIndex'
p5105
g3627
sg38
S'left'
p5106
sg59
g63
sS'trial_loop.thisN'
p5107
I104
sg33
g3875
sg64
g65
sS'trial_loop.thisIndex'
p5108
g60
(g99
S'h\x00\x00\x00'
tRp5109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5110
I0
sg3642
g4403
sS'block_loop.thisRepN'
p5111
I1
sg3645
g3875
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5112
I1
sg3648
g3869
sg55
g11
sS'block_loop.thisTrial'
p5113
Nsg70
Vy
sS'block_loop.thisTrialN'
p5114
I0
sg39
F1.216677481377701
sg34
g753
(S'\x07\xdf\x07\n\x11"\x1d\x08T\xd0'
tRp5115
sa(dp5116
S'trial_loop.thisTrialN'
p5117
I105
sg3633
S'2-steamed_puddings.png'
p5118
sS'block_loop.thisIndex'
p5119
g3627
sg38
S'right'
p5120
sg59
g63
sS'trial_loop.thisN'
p5121
I105
sg33
g3688
sg64
g65
sS'trial_loop.thisIndex'
p5122
g60
(g99
S'i\x00\x00\x00'
tRp5123
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5124
I0
sg3642
S'20-fruit_pastilles.png'
p5125
sS'block_loop.thisRepN'
p5126
I1
sg3645
g3688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5127
I1
sg3648
g3695
sg55
g11
sS'block_loop.thisTrial'
p5128
Nsg70
Vy
sS'block_loop.thisTrialN'
p5129
I0
sg39
F1.5833001669525402
sg34
g753
(S'\x07\xdf\x07\n\x11"#\x0c8\xe8'
tRp5130
sa(dp5131
S'trial_loop.thisTrialN'
p5132
I106
sg3633
g3797
sS'block_loop.thisIndex'
p5133
g3627
sg38
S'right'
p5134
sg59
g63
sS'trial_loop.thisN'
p5135
I106
sg33
g3801
sg64
g65
sS'trial_loop.thisIndex'
p5136
g60
(g99
S'j\x00\x00\x00'
tRp5137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5138
I0
sg3642
g3805
sS'block_loop.thisRepN'
p5139
I1
sg3645
g3801
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5140
I1
sg3648
g3808
sg55
g11
sS'block_loop.thisTrial'
p5141
Nsg70
Vy
sS'block_loop.thisTrialN'
p5142
I0
sg39
F0.81649992245365866
sg34
g753
(S'\x07\xdf\x07\n\x11"*\x06Y\x00'
tRp5143
sa(dp5144
S'trial_loop.thisTrialN'
p5145
I107
sg3633
g5118
sS'block_loop.thisIndex'
p5146
g3627
sg38
S'right'
p5147
sg59
g63
sS'trial_loop.thisN'
p5148
I107
sg33
g3695
sg64
g65
sS'trial_loop.thisIndex'
p5149
g60
(g99
S'k\x00\x00\x00'
tRp5150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5151
I0
sg3642
g5125
sS'block_loop.thisRepN'
p5152
I1
sg3645
g3688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5153
I1
sg3648
g3695
sg55
g11
sS'block_loop.thisTrial'
p5154
Nsg70
Vy
sS'block_loop.thisTrialN'
p5155
I0
sg39
F1.7998898382029438
sg34
g753
(S'\x07\xdf\x07\n\x11"0\x04\x0f\x10'
tRp5156
sa(dp5157
S'trial_loop.thisTrialN'
p5158
I108
sg3633
g4463
sS'block_loop.thisIndex'
p5159
g3627
sg38
S'left'
p5160
sg59
g63
sS'trial_loop.thisN'
p5161
I108
sg33
g4473
sg64
g65
sS'trial_loop.thisIndex'
p5162
g60
(g99
S'l\x00\x00\x00'
tRp5163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5164
I0
sg3642
g4471
sS'block_loop.thisRepN'
p5165
I1
sg3645
g4473
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5166
I1
sg3648
g4467
sg55
g11
sS'block_loop.thisTrial'
p5167
Nsg70
Vy
sS'block_loop.thisTrialN'
p5168
I0
sg39
F1.333258827766258
sg34
g753
(S'\x07\xdf\x07\n\x11"7\x01~\xd0'
tRp5169
sa(dp5170
S'trial_loop.thisTrialN'
p5171
I109
sg3633
g4381
sS'block_loop.thisIndex'
p5172
g3627
sg38
S'right'
p5173
sg59
g63
sS'trial_loop.thisN'
p5174
I109
sg33
g4062
sg64
g65
sS'trial_loop.thisIndex'
p5175
g60
(g99
S'm\x00\x00\x00'
tRp5176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5177
I0
sg3642
g4388
sS'block_loop.thisRepN'
p5178
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5179
I1
sg3648
g4069
sg55
g11
sS'block_loop.thisTrial'
p5180
Nsg70
Vy
sS'block_loop.thisTrialN'
p5181
I0
sg39
F0.8837006153553375
sg34
g753
(S'\x07\xdf\x07\n\x11#\x01\x07\x10\x98'
tRp5182
sa(dp5183
S'trial_loop.thisTrialN'
p5184
I110
sg3633
g3814
sS'block_loop.thisIndex'
p5185
g3627
sg38
S'left'
p5186
sg59
g63
sS'trial_loop.thisN'
p5187
I110
sg33
g3818
sg64
g65
sS'trial_loop.thisIndex'
p5188
g60
(g99
S'n\x00\x00\x00'
tRp5189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5190
I0
sg3642
g3822
sS'block_loop.thisRepN'
p5191
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5192
I1
sg3648
g3818
sg55
g11
sS'block_loop.thisTrial'
p5193
Nsg70
Vy
sS'block_loop.thisTrialN'
p5194
I0
sg39
F1.2999069440702442
sg34
g753
(S'\x07\xdf\x07\n\x11#\x07\x05\xbc\xc0'
tRp5195
sa(dp5196
S'trial_loop.thisTrialN'
p5197
I111
sg3633
g4683
sS'block_loop.thisIndex'
p5198
g3627
sg38
S'left'
p5199
sg59
g63
sS'trial_loop.thisN'
p5200
I111
sg33
g4193
sg64
g65
sS'trial_loop.thisIndex'
p5201
g60
(g99
S'o\x00\x00\x00'
tRp5202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5203
I0
sg3642
g4690
sS'block_loop.thisRepN'
p5204
I1
sg3645
g4193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5205
I1
sg3648
g4200
sg55
g11
sS'block_loop.thisTrial'
p5206
Nsg70
Vy
sS'block_loop.thisTrialN'
p5207
I0
sg39
F0.6499523316451814
sg34
g753
(S'\x07\xdf\x07\n\x11#\r\n\xd1\x88'
tRp5208
sa(dp5209
S'trial_loop.thisTrialN'
p5210
I112
sg3633
g3848
sS'block_loop.thisIndex'
p5211
g3627
sg38
S'left'
p5212
sg59
g63
sS'trial_loop.thisN'
p5213
I112
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5214
g60
(g99
S'p\x00\x00\x00'
tRp5215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5216
I0
sg3642
g3856
sS'block_loop.thisRepN'
p5217
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5218
I1
sg3648
g3859
sg55
g11
sS'block_loop.thisTrial'
p5219
Nsg70
Vy
sS'block_loop.thisTrialN'
p5220
I0
sg39
F0.74992188319811248
sg34
g753
(S'\x07\xdf\x07\n\x11#\x13\x06&8'
tRp5221
sa(dp5222
S'trial_loop.thisTrialN'
p5223
I113
sg3633
g4075
sS'block_loop.thisIndex'
p5224
g3627
sg38
S'right'
p5225
sg59
g63
sS'trial_loop.thisN'
p5226
I113
sg33
g4085
sg64
g65
sS'trial_loop.thisIndex'
p5227
g60
(g99
S'q\x00\x00\x00'
tRp5228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5229
I0
sg3642
g4083
sS'block_loop.thisRepN'
p5230
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5231
I1
sg3648
g4079
sg55
g11
sS'block_loop.thisTrial'
p5232
Nsg70
Vy
sS'block_loop.thisTrialN'
p5233
I0
sg39
F0.74924106959588244
sg34
g753
(S'\x07\xdf\x07\n\x11#\x19\x02\xab\x98'
tRp5234
sa(dp5235
S'trial_loop.thisTrialN'
p5236
I114
sg3633
g4353
sS'block_loop.thisIndex'
p5237
g3627
sg38
S'left'
p5238
sg59
g63
sS'trial_loop.thisN'
p5239
I114
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p5240
g60
(g99
S'r\x00\x00\x00'
tRp5241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5242
I0
sg3642
g4360
sS'block_loop.thisRepN'
p5243
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5244
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p5245
Nsg70
Vy
sS'block_loop.thisTrialN'
p5246
I0
sg39
F0.81662878666975303
sg34
g753
(S'\x07\xdf\x07\n\x11#\x1e\x0e\xb1\xb8'
tRp5247
sa(dp5248
S'trial_loop.thisTrialN'
p5249
I115
sg3633
g3767
sS'block_loop.thisIndex'
p5250
g3627
sg38
S'right'
p5251
sg59
g63
sS'trial_loop.thisN'
p5252
I115
sg33
g3778
sg64
g65
sS'trial_loop.thisIndex'
p5253
g60
(g99
S's\x00\x00\x00'
tRp5254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5255
I0
sg3642
g3775
sS'block_loop.thisRepN'
p5256
I1
sg3645
g3771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5257
I1
sg3648
g3778
sg55
g11
sS'block_loop.thisTrial'
p5258
Nsg70
Vy
sS'block_loop.thisTrialN'
p5259
I0
sg39
F0.91671465813487885
sg34
g753
(S'\x07\xdf\x07\n\x11#$\x0cg\xc8'
tRp5260
sa(dp5261
S'trial_loop.thisTrialN'
p5262
I116
sg3633
g4000
sS'block_loop.thisIndex'
p5263
g3627
sg38
S'right'
p5264
sg59
g63
sS'trial_loop.thisN'
p5265
I116
sg33
g4011
sg64
g65
sS'trial_loop.thisIndex'
p5266
g60
(g99
S't\x00\x00\x00'
tRp5267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5268
I0
sg3642
g4008
sS'block_loop.thisRepN'
p5269
I1
sg3645
g4004
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5270
I1
sg3648
g4011
sg55
g11
sS'block_loop.thisTrial'
p5271
Nsg70
Vy
sS'block_loop.thisTrialN'
p5272
I0
sg39
F0.7500011403899407
sg34
g753
(S'\x07\xdf\x07\n\x11#*\x0b\x8d\x08'
tRp5273
sa(dp5274
S'trial_loop.thisTrialN'
p5275
I117
sg3633
g4396
sS'block_loop.thisIndex'
p5276
g3627
sg38
S'left'
p5277
sg59
g63
sS'trial_loop.thisN'
p5278
I117
sg33
g3869
sg64
g65
sS'trial_loop.thisIndex'
p5279
g60
(g99
S'u\x00\x00\x00'
tRp5280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5281
I0
sg3642
g4403
sS'block_loop.thisRepN'
p5282
I1
sg3645
g3875
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5283
I1
sg3648
g3869
sg55
g11
sS'block_loop.thisTrial'
p5284
Nsg70
Vy
sS'block_loop.thisTrialN'
p5285
I0
sg39
F0.86662040479495772
sg34
g753
(S'\x07\xdf\x07\n\x11#0\x08M\x00'
tRp5286
sa(dp5287
S'trial_loop.thisTrialN'
p5288
I118
sg3633
g3654
sS'block_loop.thisIndex'
p5289
g3627
sg38
S'right'
p5290
sg59
g63
sS'trial_loop.thisN'
p5291
I118
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5292
g60
(g99
S'v\x00\x00\x00'
tRp5293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5294
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5295
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5296
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p5297
Nsg70
Vy
sS'block_loop.thisTrialN'
p5298
I0
sg39
F0.73328756563205388
sg34
g753
(S'\x07\xdf\x07\n\x11#6\x06\xba\xa8'
tRp5299
sa(dp5300
S'trial_loop.thisTrialN'
p5301
I119
sg3633
g4338
sS'block_loop.thisIndex'
p5302
g3627
sg38
S'left'
p5303
sg59
g63
sS'trial_loop.thisN'
p5304
I119
sg33
g4079
sg64
g65
sS'trial_loop.thisIndex'
p5305
g60
(g99
S'w\x00\x00\x00'
tRp5306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5307
I0
sg3642
g4345
sS'block_loop.thisRepN'
p5308
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5309
I1
sg3648
g4079
sg55
g11
sS'block_loop.thisTrial'
p5310
Nsg70
Vy
sS'block_loop.thisTrialN'
p5311
I0
sg39
F0.78305794784319005
sg34
g753
(S'\x07\xdf\x07\n\x11$\x00\x03@\x08'
tRp5312
sa(dp5313
S'trial_loop.thisTrialN'
p5314
I120
sg3633
g3767
sS'block_loop.thisIndex'
p5315
g3627
sg38
S'right'
p5316
sg59
g63
sS'trial_loop.thisN'
p5317
I120
sg33
g3771
sg64
g65
sS'trial_loop.thisIndex'
p5318
g60
(g99
S'x\x00\x00\x00'
tRp5319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5320
I0
sg3642
g3775
sS'block_loop.thisRepN'
p5321
I1
sg3645
g3771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5322
I1
sg3648
g3778
sg55
g11
sS'block_loop.thisTrial'
p5323
Nsg70
Vy
sS'block_loop.thisTrialN'
p5324
I0
sg39
F0.91662855859249248
sg34
g753
(S'\x07\xdf\x07\n\x11$\x06\x00}\x00'
tRp5325
sa(dp5326
S'trial_loop.thisTrialN'
p5327
I121
sg3633
g4396
sS'block_loop.thisIndex'
p5328
g3627
sg38
S'left'
p5329
sg59
g63
sS'trial_loop.thisN'
p5330
I121
sg33
g3869
sg64
g65
sS'trial_loop.thisIndex'
p5331
g60
(g99
S'y\x00\x00\x00'
tRp5332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5333
I0
sg3642
g4403
sS'block_loop.thisRepN'
p5334
I1
sg3645
g3875
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5335
I1
sg3648
g3869
sg55
g11
sS'block_loop.thisTrial'
p5336
Nsg70
Vy
sS'block_loop.thisTrialN'
p5337
I0
sg39
F0.83372638819855638
sg34
g753
(S'\x07\xdf\x07\n\x11$\x0b\x0e\xe0\x98'
tRp5338
sa(dp5339
S'trial_loop.thisTrialN'
p5340
I122
sg3633
g4000
sS'block_loop.thisIndex'
p5341
g3627
sg38
S'right'
p5342
sg59
g63
sS'trial_loop.thisN'
p5343
I122
sg33
g4004
sg64
g65
sS'trial_loop.thisIndex'
p5344
g60
(g99
S'z\x00\x00\x00'
tRp5345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5346
I0
sg3642
g4008
sS'block_loop.thisRepN'
p5347
I1
sg3645
g4004
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5348
I1
sg3648
g4011
sg55
g11
sS'block_loop.thisTrial'
p5349
Nsg70
Vy
sS'block_loop.thisTrialN'
p5350
I0
sg39
F0.74991447065258399
sg34
g753
(S'\x07\xdf\x07\n\x11$\x11\x0c\xd5('
tRp5351
sa(dp5352
S'trial_loop.thisTrialN'
p5353
I123
sg3633
g3865
sS'block_loop.thisIndex'
p5354
g3627
sg38
S'right'
p5355
sg59
g63
sS'trial_loop.thisN'
p5356
I123
sg33
g3875
sg64
g65
sS'trial_loop.thisIndex'
p5357
g60
(g99
S'{\x00\x00\x00'
tRp5358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5359
I0
sg3642
g3873
sS'block_loop.thisRepN'
p5360
I1
sg3645
g3875
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5361
I1
sg3648
g3869
sg55
g11
sS'block_loop.thisTrial'
p5362
Nsg70
Vy
sS'block_loop.thisTrialN'
p5363
I0
sg39
F0.8000549098396732
sg34
g753
(S'\x07\xdf\x07\n\x11$\x17\t\x99\x08'
tRp5364
sa(dp5365
S'trial_loop.thisTrialN'
p5366
I124
sg3633
g4493
sS'block_loop.thisIndex'
p5367
g3627
sg38
S'right'
p5368
sg59
g63
sS'trial_loop.thisN'
p5369
I124
sg33
g3886
sg64
g65
sS'trial_loop.thisIndex'
p5370
g60
(g99
S'|\x00\x00\x00'
tRp5371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5372
I0
sg3642
g4500
sS'block_loop.thisRepN'
p5373
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5374
I1
sg3648
g3893
sg55
g11
sS'block_loop.thisTrial'
p5375
Nsg70
Vy
sS'block_loop.thisTrialN'
p5376
I0
sg39
F0.78325922690783045
sg34
g753
(S'\x07\xdf\x07\n\x11$\x1d\x07\x10\x98'
tRp5377
sa(dp5378
S'trial_loop.thisTrialN'
p5379
I125
sg3633
g3684
sS'block_loop.thisIndex'
p5380
g3627
sg38
S'right'
p5381
sg59
g63
sS'trial_loop.thisN'
p5382
I125
sg33
g3688
sg64
g65
sS'trial_loop.thisIndex'
p5383
g60
(g99
S'}\x00\x00\x00'
tRp5384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5385
I0
sg3642
g3692
sS'block_loop.thisRepN'
p5386
I1
sg3645
g3688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5387
I1
sg3648
g3695
sg55
g11
sS'block_loop.thisTrial'
p5388
Nsg70
Vy
sS'block_loop.thisTrialN'
p5389
I0
sg39
F0.66662057585199364
sg34
g753
(S'\x07\xdf\x07\n\x11$#\x04M\x90'
tRp5390
sa(dp5391
S'trial_loop.thisTrialN'
p5392
I126
sg3633
g3718
sS'block_loop.thisIndex'
p5393
g3627
sg38
S'right'
p5394
sg59
g63
sS'trial_loop.thisN'
p5395
I126
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p5396
g60
(g99
S'~\x00\x00\x00'
tRp5397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5398
I0
sg3642
g3726
sS'block_loop.thisRepN'
p5399
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5400
I1
sg3648
g3729
sg55
g11
sS'block_loop.thisTrial'
p5401
Nsg70
Vy
sS'block_loop.thisTrialN'
p5402
I0
sg39
F0.73324651154325693
sg34
g753
(S'\x07\xdf\x07\n\x11$(\x0e\xe4\x80'
tRp5403
sa(dp5404
S'trial_loop.thisTrialN'
p5405
I127
sg3633
g4131
sS'block_loop.thisIndex'
p5406
g3627
sg38
S'right'
p5407
sg59
g63
sS'trial_loop.thisN'
p5408
I127
sg33
g3859
sg64
g65
sS'trial_loop.thisIndex'
p5409
g60
(g99
S'\x7f\x00\x00\x00'
tRp5410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5411
I0
sg3642
g4138
sS'block_loop.thisRepN'
p5412
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5413
I1
sg3648
g3859
sg55
g11
sS'block_loop.thisTrial'
p5414
Nsg70
Vy
sS'block_loop.thisTrialN'
p5415
I0
sg39
F0.76664543638253235
sg34
g753
(S'\x07\xdf\x07\n\x11$.\x0bi\xe0'
tRp5416
sa(dp5417
S'trial_loop.thisTrialN'
p5418
I128
sg3633
g4338
sS'block_loop.thisIndex'
p5419
g3627
sg38
S'left'
p5420
sg59
g63
sS'trial_loop.thisN'
p5421
I128
sg33
g4085
sg64
g65
sS'trial_loop.thisIndex'
p5422
g60
(g99
S'\x80\x00\x00\x00'
tRp5423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5424
I0
sg3642
g4345
sS'block_loop.thisRepN'
p5425
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5426
I1
sg3648
g4079
sg55
g11
sS'block_loop.thisTrial'
p5427
Nsg70
Vy
sS'block_loop.thisTrialN'
p5428
I0
sg39
F0.66632435921565047
sg34
g753
(S'\x07\xdf\x07\n\x11$4\x08hX'
tRp5429
sa(dp5430
S'trial_loop.thisTrialN'
p5431
I129
sg3633
g3634
sS'block_loop.thisIndex'
p5432
g3627
sg38
S'left'
p5433
sg59
g63
sS'trial_loop.thisN'
p5434
I129
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p5435
g60
(g99
S'\x81\x00\x00\x00'
tRp5436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5437
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5438
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5439
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p5440
Nsg70
Vy
sS'block_loop.thisTrialN'
p5441
I0
sg39
F0.88340382852038601
sg34
g753
(S'\x07\xdf\x07\n\x11$:\x03\xbd\x08'
tRp5442
sa(dp5443
S'trial_loop.thisTrialN'
p5444
I130
sg3633
g3940
sS'block_loop.thisIndex'
p5445
g3627
sg38
S'right'
p5446
sg59
g63
sS'trial_loop.thisN'
p5447
I130
sg33
g3951
sg64
g65
sS'trial_loop.thisIndex'
p5448
g60
(g99
S'\x82\x00\x00\x00'
tRp5449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5450
I0
sg3642
g3948
sS'block_loop.thisRepN'
p5451
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5452
I1
sg3648
g3951
sg55
g11
sS'block_loop.thisTrial'
p5453
Nsg70
Vy
sS'block_loop.thisTrialN'
p5454
I0
sg39
F0.98328100838261889
sg34
g753
(S'\x07\xdf\x07\n\x11%\x04\x02eH'
tRp5455
sa(dp5456
S'trial_loop.thisTrialN'
p5457
I131
sg3633
g3814
sS'block_loop.thisIndex'
p5458
g3627
sg38
S'left'
p5459
sg59
g63
sS'trial_loop.thisN'
p5460
I131
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p5461
g60
(g99
S'\x83\x00\x00\x00'
tRp5462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5463
I0
sg3642
g3822
sS'block_loop.thisRepN'
p5464
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5465
I1
sg3648
g3818
sg55
g11
sS'block_loop.thisTrial'
p5466
Nsg70
Vy
sS'block_loop.thisTrialN'
p5467
I0
sg39
F1.1165839122731995
sg34
g753
(S'\x07\xdf\x07\n\x11%\n\x02\xbb8'
tRp5468
sa(dp5469
S'trial_loop.thisTrialN'
p5470
I132
sg3633
g3684
sS'block_loop.thisIndex'
p5471
g3627
sg38
S'left'
p5472
sg59
g63
sS'trial_loop.thisN'
p5473
I132
sg33
g3688
sg64
g65
sS'trial_loop.thisIndex'
p5474
g60
(g99
S'\x84\x00\x00\x00'
tRp5475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5476
I0
sg3642
g3692
sS'block_loop.thisRepN'
p5477
I1
sg3645
g3688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5478
I1
sg3648
g3695
sg55
g11
sS'block_loop.thisTrial'
p5479
Nsg70
Vy
sS'block_loop.thisTrialN'
p5480
I0
sg39
F0.98327388093457557
sg34
g753
(S'\x07\xdf\x07\n\x11%\x10\x04\xf9p'
tRp5481
sa(dp5482
S'trial_loop.thisTrialN'
p5483
I133
sg3633
g3797
sS'block_loop.thisIndex'
p5484
g3627
sg38
S'right'
p5485
sg59
g63
sS'trial_loop.thisN'
p5486
I133
sg33
g3801
sg64
g65
sS'trial_loop.thisIndex'
p5487
g60
(g99
S'\x85\x00\x00\x00'
tRp5488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5489
I0
sg3642
g3805
sS'block_loop.thisRepN'
p5490
I1
sg3645
g3801
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5491
I1
sg3648
g3808
sg55
g11
sS'block_loop.thisTrial'
p5492
Nsg70
Vy
sS'block_loop.thisTrialN'
p5493
I0
sg39
F0.94995164740976179
sg34
g753
(S'\x07\xdf\x07\n\x11%\x16\x05Kx'
tRp5494
sa(dp5495
S'trial_loop.thisTrialN'
p5496
I134
sg3633
g5118
sS'block_loop.thisIndex'
p5497
g3627
sg38
S'right'
p5498
sg59
g63
sS'trial_loop.thisN'
p5499
I134
sg33
g3688
sg64
g65
sS'trial_loop.thisIndex'
p5500
g60
(g99
S'\x86\x00\x00\x00'
tRp5501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5502
I0
sg3642
g5125
sS'block_loop.thisRepN'
p5503
I1
sg3645
g3688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5504
I1
sg3648
g3695
sg55
g11
sS'block_loop.thisTrial'
p5505
Nsg70
Vy
sS'block_loop.thisTrialN'
p5506
I0
sg39
F1.1833099172981747
sg34
g753
(S'\x07\xdf\x07\n\x11%\x1c\x04\xe9\xd0'
tRp5507
sa(dp5508
S'trial_loop.thisTrialN'
p5509
I135
sg3633
g3882
sS'block_loop.thisIndex'
p5510
g3627
sg38
S'left'
p5511
sg59
g63
sS'trial_loop.thisN'
p5512
I135
sg33
g3886
sg64
g65
sS'trial_loop.thisIndex'
p5513
g60
(g99
S'\x87\x00\x00\x00'
tRp5514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5515
I0
sg3642
g3890
sS'block_loop.thisRepN'
p5516
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5517
I1
sg3648
g3893
sg55
g11
sS'block_loop.thisTrial'
p5518
Nsg70
Vy
sS'block_loop.thisTrialN'
p5519
I0
sg39
F0.94999526737592532
sg34
g753
(S'\x07\xdf\x07\n\x11%"\x08T\xd0'
tRp5520
sa(dp5521
S'trial_loop.thisTrialN'
p5522
I136
sg3633
g4523
sS'block_loop.thisIndex'
p5523
g3627
sg38
S'right'
p5524
sg59
g63
sS'trial_loop.thisN'
p5525
I136
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p5526
g60
(g99
S'\x88\x00\x00\x00'
tRp5527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5528
I0
sg3642
g4530
sS'block_loop.thisRepN'
p5529
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5530
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p5531
Nsg70
Vy
sS'block_loop.thisTrialN'
p5532
I0
sg39
F0.88330689526264905
sg34
g753
(S'\x07\xdf\x07\n\x11%(\x081\xa8'
tRp5533
sa(dp5534
S'trial_loop.thisTrialN'
p5535
I137
sg3633
g4683
sS'block_loop.thisIndex'
p5536
g3627
sg38
S'left'
p5537
sg59
g63
sS'trial_loop.thisN'
p5538
I137
sg33
g4193
sg64
g65
sS'trial_loop.thisIndex'
p5539
g60
(g99
S'\x89\x00\x00\x00'
tRp5540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5541
I0
sg3642
g4690
sS'block_loop.thisRepN'
p5542
I1
sg3645
g4193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5543
I1
sg3648
g4200
sg55
g11
sS'block_loop.thisTrial'
p5544
Nsg70
Vy
sS'block_loop.thisTrialN'
p5545
I0
sg39
F1.1165987373569806
sg34
g753
(S'\x07\xdf\x07\n\x11%.\x06\xd9\xe8'
tRp5546
sa(dp5547
S'trial_loop.thisTrialN'
p5548
I138
sg3633
g3912
sS'block_loop.thisIndex'
p5549
g3627
sg38
S'left'
p5550
sg59
g63
sS'trial_loop.thisN'
p5551
I138
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p5552
g60
(g99
S'\x8a\x00\x00\x00'
tRp5553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5554
I0
sg3642
g3919
sS'block_loop.thisRepN'
p5555
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5556
I1
sg3648
g3729
sg55
g11
sS'block_loop.thisTrial'
p5557
Nsg70
Vy
sS'block_loop.thisTrialN'
p5558
I0
sg39
F1.0833075794980687
sg34
g753
(S'\x07\xdf\x07\n\x11%4\t\x18 '
tRp5559
sa(dp5560
S'trial_loop.thisTrialN'
p5561
I139
sg3633
g4338
sS'block_loop.thisIndex'
p5562
g3627
sg38
S'left'
p5563
sg59
g63
sS'trial_loop.thisN'
p5564
I139
sg33
g4085
sg64
g65
sS'trial_loop.thisIndex'
p5565
g60
(g99
S'\x8b\x00\x00\x00'
tRp5566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5567
I0
sg3642
g4345
sS'block_loop.thisRepN'
p5568
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5569
I1
sg3648
g4079
sg55
g11
sS'block_loop.thisTrial'
p5570
Nsg70
Vy
sS'block_loop.thisTrialN'
p5571
I0
sg39
F1.4163577156614338
sg34
g753
(S'\x07\xdf\x07\n\x11%:\n\xd9X'
tRp5572
sa(dp5573
S'trial_loop.thisTrialN'
p5574
I140
sg3633
S'42-mrkipling_lemon_slices.png'
p5575
sS'block_loop.thisIndex'
p5576
g3627
sg38
S'left'
p5577
sg59
g63
sS'trial_loop.thisN'
p5578
I140
sg33
g3801
sg64
g65
sS'trial_loop.thisIndex'
p5579
g60
(g99
S'\x8c\x00\x00\x00'
tRp5580
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5581
I0
sg3642
S'16-skips_prawn.png'
p5582
sS'block_loop.thisRepN'
p5583
I1
sg3645
g3801
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3648
g3808
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vy
sS'block_loop.thisTrialN'
p5586
I0
sg39
F0.81644774955202593
sg34
g753
(S'\x07\xdf\x07\n\x11&\x05\x02\x94('
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g3972
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'left'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g3951
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g3979
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3648
g3951
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vy
sS'block_loop.thisTrialN'
p5599
I0
sg39
F1.5998962814119295
sg34
g753
(S'\x07\xdf\x07\n\x11&\x0b\x00J8'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g3752
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'left'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3711
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g3759
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3711
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3648
g3705
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vy
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.76665427441548673
sg34
g753
(S'\x07\xdf\x07\n\x11&\x11\t\xe7('
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g5575
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'left'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g3801
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g5582
sS'block_loop.thisRepN'
p5622
I1
sg3645
g3801
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3648
g3808
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vy
sS'block_loop.thisTrialN'
p5625
I0
sg39
F0.73355498738601455
sg34
g753
(S'\x07\xdf\x07\n\x11&\x17\x06\xe5\xa0'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g3912
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'left'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g3729
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g3919
sS'block_loop.thisRepN'
p5635
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3648
g3729
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vy
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.66662912878746283
sg34
g753
(S'\x07\xdf\x07\n\x11&\x1d\x030h'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g4381
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'right'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g4062
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g4388
sS'block_loop.thisRepN'
p5648
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3648
g4069
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vy
sS'block_loop.thisTrialN'
p5651
I0
sg39
F1.4999814686416357
sg34
g753
(S'\x07\xdf\x07\n\x11&"\x0e\x01\xf0'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g4258
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'left'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g4004
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g4265
sS'block_loop.thisRepN'
p5661
I1
sg3645
g4004
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3648
g4011
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vy
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.76667109518893994
sg34
g753
(S'\x07\xdf\x07\n\x11&)\x06\xb2\xd8'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g3752
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'left'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g3705
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g3759
sS'block_loop.thisRepN'
p5674
I1
sg3645
g3711
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3648
g3705
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vy
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.66655072688809014
sg34
g753
(S'\x07\xdf\x07\n\x11&/\x03\xb1P'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g4000
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'right'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g4004
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g4008
sS'block_loop.thisRepN'
p5687
I1
sg3645
g4004
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3648
g4011
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vy
sS'block_loop.thisTrialN'
p5690
I0
sg39
F0.89999367082782555
sg34
g753
(S'\x07\xdf\x07\n\x11&4\x0e\x86\xc0'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g4463
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'left'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g4473
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g4471
sS'block_loop.thisRepN'
p5700
I1
sg3645
g4473
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3648
g4467
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vy
sS'block_loop.thisTrialN'
p5703
I0
sg39
F1.4003662936847832
sg34
g753
(S'\x07\xdf\x07\n\x11&:\rm\x80'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g4353
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'left'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g4360
sS'block_loop.thisRepN'
p5713
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vy
sS'block_loop.thisTrialN'
p5716
I0
sg39
F1.0333407648831781
sg34
g753
(S"\x07\xdf\x07\n\x11'\x05\x04\xaf8"
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g3865
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'right'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3875
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g3873
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3875
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3648
g3869
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vy
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.7999842055796762
sg34
g753
(S"\x07\xdf\x07\n\x11'\x0b\x05\xbc\xc0"
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g3767
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'right'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3778
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g3775
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3648
g3778
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vy
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.88341494733685977
sg34
g753
(S"\x07\xdf\x07\n\x11'\x11\x034P"
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g4172
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'right'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g4176
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g4180
sS'block_loop.thisRepN'
p5752
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3648
g4183
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vy
sS'block_loop.thisTrialN'
p5755
I0
sg39
F1.2167108378234843
sg34
g753
(S"\x07\xdf\x07\n\x11'\x17\x01\xe0x"
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g3940
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'right'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g3948
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3648
g3951
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vy
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.85000005702022463
sg34
g753
(S"\x07\xdf\x07\n\x11'\x1d\x05\xc4\x90"
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g3654
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vy
sS'block_loop.thisTrialN'
p5781
I0
sg39
F1.9332828330043412
sg34
g753
(S"\x07\xdf\x07\n\x11'#\x03\xf3\xb8"
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g3940
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'right'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g3948
sS'block_loop.thisRepN'
p5791
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3648
g3951
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vy
sS'block_loop.thisTrialN'
p5794
I0
sg39
F1.1665746751023107
sg34
g753
(S"\x07\xdf\x07\n\x11'*\x03\x8e("
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g4724
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'left'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g3835
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g4731
sS'block_loop.thisRepN'
p5804
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3648
g3842
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vy
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.96657598655292531
sg34
g753
(S"\x07\xdf\x07\n\x11'0\x06\x80\x10"
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g4791
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'left'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g4176
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g4798
sS'block_loop.thisRepN'
p5817
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3648
g4183
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vy
sS'block_loop.thisTrialN'
p5820
I0
sg39
F1.8166687003649713
sg34
g753
(S"\x07\xdf\x07\n\x11'6\x06\x97\x80"
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g4523
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'right'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g4530
sS'block_loop.thisRepN'
p5830
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vy
sS'block_loop.thisTrialN'
p5833
I0
sg39
F1.5003615040404839
sg34
g753
(S'\x07\xdf\x07\n\x11(\x01\x04E\xc0'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g5575
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'left'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3801
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g5582
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3801
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3648
g3808
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vy
sS'block_loop.thisTrialN'
p5846
I0
sg39
F1.9664494031203503
sg34
g753
(S'\x07\xdf\x07\n\x11(\x07\x0cwh'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g4564
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'right'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g4473
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g4571
sS'block_loop.thisRepN'
p5856
I1
sg3645
g4473
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3648
g4467
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vy
sS'block_loop.thisTrialN'
p5859
I0
sg39
F1.0999236508032482
sg34
g753
(S'\x07\xdf\x07\n\x11(\x0e\x0cH\x88'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g4353
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'left'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g4360
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vy
sS'block_loop.thisTrialN'
p5872
I0
sg39
F0.78323670417739777
sg34
g753
(S'\x07\xdf\x07\n\x11(\x14\x0e\x86\xc0'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g3940
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'right'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g3948
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3648
g3951
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vy
sS'block_loop.thisTrialN'
p5885
I0
sg39
F1.2332151507798699
sg34
g753
(S'\x07\xdf\x07\n\x11(\x1a\x0b\x858'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g4493
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'right'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3886
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g4500
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3648
g3893
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vy
sS'block_loop.thisTrialN'
p5898
I0
sg39
F0.91665507268771762
sg34
g753
(S'\x07\xdf\x07\n\x11(!\x00e\x90'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g3701
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'right'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3711
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g3709
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3711
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3648
g3705
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vy
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.96656116146914428
sg34
g753
(S'\x07\xdf\x07\n\x11(&\x0e\xcd\x10'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g4030
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'right'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g4037
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3648
g3818
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vy
sS'block_loop.thisTrialN'
p5924
I0
sg39
F1.0497638249617012
sg34
g753
(S'\x07\xdf\x07\n\x11(,\x0e\xe4\x80'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g4791
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'left'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g4176
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g4798
sS'block_loop.thisRepN'
p5934
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3648
g4183
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vy
sS'block_loop.thisTrialN'
p5937
I0
sg39
F0.66657980686431983
sg34
g753
(S'\x07\xdf\x07\n\x11(3\x00\xea`'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g4030
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'right'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g3818
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g4037
sS'block_loop.thisRepN'
p5947
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3648
g3818
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vy
sS'block_loop.thisTrialN'
p5950
I0
sg39
F0.83326481482072268
sg34
g753
(S'\x07\xdf\x07\n\x11(8\x0b\x81P'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g4075
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'right'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g4085
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g4083
sS'block_loop.thisRepN'
p5960
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3648
g4079
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vy
sS'block_loop.thisTrialN'
p5963
I0
sg39
F0.93310664255113807
sg34
g753
(S'\x07\xdf\x07\n\x11)\x02\t\xb0x'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g4131
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'right'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g4138
sS'block_loop.thisRepN'
p5973
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3648
g3859
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vy
sS'block_loop.thisTrialN'
p5976
I0
sg39
F1.1666847228625556
sg34
g753
(S'\x07\xdf\x07\n\x11)\x08\t\x10P'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g3831
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'right'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3842
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g3839
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3648
g3842
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vy
sS'block_loop.thisTrialN'
p5989
I0
sg39
F1.0500112898735097
sg34
g753
(S'\x07\xdf\x07\n\x11)\x0e\x0c\x06 '
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g5575
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'left'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3801
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g5582
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3801
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3648
g3808
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vy
sS'block_loop.thisTrialN'
p6002
I0
sg39
F1.1665068218208035
sg34
g753
(S'\x07\xdf\x07\n\x11)\x14\rN@'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g3767
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'right'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3771
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g3775
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3648
g3778
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vy
sS'block_loop.thisTrialN'
p6015
I0
sg39
F1.3665588236617623
sg34
g753
(S'\x07\xdf\x07\n\x11)\x1b\x018\x80'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4189
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'right'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g4193
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4197
sS'block_loop.thisRepN'
p6025
I1
sg3645
g4193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3648
g4200
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vy
sS'block_loop.thisTrialN'
p6028
I0
sg39
F0.81660854472283972
sg34
g753
(S'\x07\xdf\x07\n\x11)!\x07C`'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g4724
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'left'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3835
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g4731
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3648
g3842
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vy
sS'block_loop.thisTrialN'
p6041
I0
sg39
F1.5837112780136522
sg34
g753
(S"\x07\xdf\x07\n\x11)'\x04\xf9p"
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g3814
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'left'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g3822
sS'block_loop.thisRepN'
p6051
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3648
g3818
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vy
sS'block_loop.thisTrialN'
p6054
I0
sg39
F1.1832543232230819
sg34
g753
(S'\x07\xdf\x07\n\x11)-\x0e[\xc8'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g4683
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'left'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g4200
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g4690
sS'block_loop.thisRepN'
p6064
I1
sg3645
g4193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3648
g4200
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vy
sS'block_loop.thisTrialN'
p6067
I0
sg39
F0.64995660811109701
sg34
g753
(S'\x07\xdf\x07\n\x11)4\x02\x84\x88'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g4791
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'left'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g4176
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g4798
sS'block_loop.thisRepN'
p6077
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3648
g4183
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vy
sS'block_loop.thisTrialN'
p6080
I0
sg39
F0.74994298043748131
sg34
g753
(S'\x07\xdf\x07\n\x11)9\x0c\xe0\xe0'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g4508
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'right'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g4515
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vy
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.89976502237550449
sg34
g753
(S'\x07\xdf\x07\n\x11*\x03\t\xa0\xd8'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g4338
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'left'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g4085
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g4345
sS'block_loop.thisRepN'
p6103
I1
sg3645
g4085
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3648
g4079
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vy
sS'block_loop.thisTrialN'
p6106
I0
sg39
F1.1163487065678055
sg34
g753
(S'\x07\xdf\x07\n\x11*\t\x08\x87\x98'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g5575
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'left'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g3801
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g5582
sS'block_loop.thisRepN'
p6116
I1
sg3645
g3801
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3648
g3808
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vy
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.90025938200051314
sg34
g753
(S'\x07\xdf\x07\n\x11*\x0f\n\xc5\xd0'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g4523
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'right'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g4530
sS'block_loop.thisRepN'
p6129
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vy
sS'block_loop.thisTrialN'
p6132
I0
sg39
F1.016677652434737
sg34
g753
(S'\x07\xdf\x07\n\x11*\x15\t\xe7('
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g4683
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'left'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g4193
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g4690
sS'block_loop.thisRepN'
p6142
I1
sg3645
g4193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3648
g4200
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vy
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.71662530847606831
sg34
g753
(S'\x07\xdf\x07\n\x11*\x1b\nw\xb0'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g3718
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'right'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3729
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g3726
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3648
g3729
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vy
sS'block_loop.thisTrialN'
p6158
I0
sg39
F0.68324691068119137
sg34
g753
(S'\x07\xdf\x07\n\x11*!\x06\xc2x'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g3882
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'left'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3893
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g3890
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3648
g3893
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vy
sS'block_loop.thisTrialN'
p6171
I0
sg39
F0.83330330302851507
sg34
g753
(S"\x07\xdf\x07\n\x11*'\x02Q\xc0"
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g3957
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'left'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3771
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g3964
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3648
g3778
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vy
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.86662582165445201
sg34
g753
(S'\x07\xdf\x07\n\x11*-\x00\x84\xd0'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g4724
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'left'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g3835
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g4731
sS'block_loop.thisRepN'
p6194
I1
sg3645
g3835
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3648
g3842
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vy
sS'block_loop.thisTrialN'
p6197
I0
sg39
F1.0833514845617174
sg34
g753
(S'\x07\xdf\x07\n\x11*2\x0e0\xd0'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g4463
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'left'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g4473
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g4471
sS'block_loop.thisRepN'
p6207
I1
sg3645
g4473
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3648
g4467
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vy
sS'block_loop.thisTrialN'
p6210
I0
sg39
F1.7999782185288495
sg34
g753
(S'\x07\xdf\x07\n\x11*9\x00\xb3\xb0'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g3882
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'left'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g3893
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g3890
sS'block_loop.thisRepN'
p6220
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3648
g3893
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vy
sS'block_loop.thisTrialN'
p6223
I0
sg39
F0.98319633432765841
sg34
g753
(S'\x07\xdf\x07\n\x11+\x03\ri\x98'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g3912
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'left'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g3919
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3648
g3729
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vy
sS'block_loop.thisTrialN'
p6236
I0
sg39
F1.9831929131505603
sg34
g753
(S'\x07\xdf\x07\n\x11+\t\r\xbb\xa0'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g5118
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'right'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3688
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g5125
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3648
g3695
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vy
sS'block_loop.thisTrialN'
p6249
I0
sg39
F1.0332934386424313
sg34
g753
(S'\x07\xdf\x07\n\x11+\x10\r\xcf('
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g3654
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'right'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g3662
sS'block_loop.thisRepN'
p6259
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vy
sS'block_loop.thisTrialN'
p6262
I0
sg39
F1.1503739913241589
sg34
g753
(S'\x07\xdf\x07\n\x11+\x16\x0e\xd8\xc8'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g4493
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'right'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g3886
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g4500
sS'block_loop.thisRepN'
p6272
I1
sg3645
g3886
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3648
g3893
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vy
sS'block_loop.thisTrialN'
p6275
I0
sg39
F0.76655220939210267
sg34
g753
(S'\x07\xdf\x07\n\x11+\x1d\x02\x88p'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g3957
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'left'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3771
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g3964
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3771
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3648
g3778
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vy
sS'block_loop.thisTrialN'
p6288
I0
sg39
F1.0499183479842031
sg34
g753
(S'\x07\xdf\x07\n\x11+"\x0e\x8e\x90'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g5118
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'right'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g3688
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g5125
sS'block_loop.thisRepN'
p6298
I1
sg3645
g3688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3648
g3695
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vy
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.79993203267804347
sg34
g753
(S'\x07\xdf\x07\n\x11+)\x00\x94p'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g4353
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'left'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g4360
sS'block_loop.thisRepN'
p6311
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vy
sS'block_loop.thisTrialN'
p6314
I0
sg39
F0.81656150358321611
sg34
g753
(S'\x07\xdf\x07\n\x11+.\rN@'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4381
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'right'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g4062
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4388
sS'block_loop.thisRepN'
p6324
I1
sg3645
g4062
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3648
g4069
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vy
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.78330142138656811
sg34
g753
(S'\x07\xdf\x07\n\x11+4\x0b\x04P'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g4189
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'right'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g4200
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g4197
sS'block_loop.thisRepN'
p6337
I1
sg3645
g4193
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3648
g4200
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vy
sS'block_loop.thisTrialN'
p6340
I0
sg39
F0.83334635280334624
sg34
g753
(S'\x07\xdf\x07\n\x11+:\x08AH'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g4791
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'left'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g4183
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g4798
sS'block_loop.thisRepN'
p6350
I1
sg3645
g4176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3648
g4183
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vy
sS'block_loop.thisTrialN'
p6353
I0
sg39
F1.0498958252574084
sg34
g753
(S'\x07\xdf\x07\n\x11,\x04\x065\xd8'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F227.96074202980526
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vy
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vy
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'30-spaghetti_hoops.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'right'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'19-caramello_redo.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'19-caramello_redo.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'30-spaghetti_hoops.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vy
sS'block_loop.thisTrialN'
p6388
I0
sg39
F1.0665381255603279
sg34
g753
(S'\x07\xdf\x07\n\x114\x01\x0b;\x00'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'40-sardines.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'left'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'40-sardines.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'5-pineapple.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6385
S'5-pineapple.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vy
sS'block_loop.thisTrialN'
p6405
I0
sg39
F1.0998959963144443
sg34
g753
(S'\x07\xdf\x07\n\x114\x07\x0c\xc1\xa0'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'16-skips_prawn.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'right'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'16-skips_prawn.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6419
I2
sg6385
S'42-mrkipling_lemon_slices.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vy
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.69979883497580886
sg34
g753
(S'\x07\xdf\x07\n\x114\r\x0e\xc1X'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'46-pistachios.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'right'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'29-beans.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'29-beans.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6436
I2
sg6385
S'46-pistachios.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vy
sS'block_loop.thisTrialN'
p6439
I0
sg39
F0.86651634408917744
sg34
g753
(S'\x07\xdf\x07\n\x114\x13\n\xc9\xb8'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'13-mccoys_steak_crisps.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'right'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
S'3-ellas_strawberries_apples.png'
p6447
sg64
g65
sS'trial_loop.thisIndex'
p6448
g60
(g99
S'\x04\x00\x00\x00'
tRp6449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6450
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6451
sS'block_loop.thisRepN'
p6452
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6453
I2
sg6385
S'13-mccoys_steak_crisps.png'
p6454
sg55
g11
sS'block_loop.thisTrial'
p6455
Nsg70
Vy
sS'block_loop.thisTrialN'
p6456
I0
sg39
F0.7166415590509132
sg34
g753
(S'\x07\xdf\x07\n\x114\x19\t7`'
tRp6457
sa(dp6458
S'trial_loop.thisTrialN'
p6459
I5
sg6371
S'48-twix.png'
p6460
sS'block_loop.thisIndex'
p6461
g6365
sg38
S'left'
p6462
sg59
g63
sS'trial_loop.thisN'
p6463
I5
sg33
S'48-twix.png'
p6464
sg64
g65
sS'trial_loop.thisIndex'
p6465
g60
(g99
S'\x05\x00\x00\x00'
tRp6466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6467
I0
sg6380
S'50-polo.png'
p6468
sS'block_loop.thisRepN'
p6469
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6470
I2
sg6385
S'50-polo.png'
p6471
sg55
g11
sS'block_loop.thisTrial'
p6472
Nsg70
Vy
sS'block_loop.thisTrialN'
p6473
I0
sg39
F0.70033681457061903
sg34
g753
(S'\x07\xdf\x07\n\x114\x1f\x05\x82('
tRp6474
sa(dp6475
S'trial_loop.thisTrialN'
p6476
I6
sg6371
g6426
sS'block_loop.thisIndex'
p6477
g6365
sg38
S'right'
p6478
sg59
g63
sS'trial_loop.thisN'
p6479
I6
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6480
g60
(g99
S'\x06\x00\x00\x00'
tRp6481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6482
I0
sg6380
g6434
sS'block_loop.thisRepN'
p6483
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6484
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6485
Nsg70
Vy
sS'block_loop.thisTrialN'
p6486
I0
sg39
F0.98326475780413602
sg34
g753
(S'\x07\xdf\x07\n\x114%\x01O\xf0'
tRp6487
sa(dp6488
S'trial_loop.thisTrialN'
p6489
I7
sg6371
S'50-polo.png'
p6490
sS'block_loop.thisIndex'
p6491
g6365
sg38
S'right'
p6492
sg59
g63
sS'trial_loop.thisN'
p6493
I7
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p6494
g60
(g99
S'\x07\x00\x00\x00'
tRp6495
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6496
I0
sg6380
S'48-twix.png'
p6497
sS'block_loop.thisRepN'
p6498
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6499
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p6500
Nsg70
Vy
sS'block_loop.thisTrialN'
p6501
I0
sg39
F0.59989913239041925
sg34
g753
(S'\x07\xdf\x07\n\x114+\x01\xa5\xe0'
tRp6502
sa(dp6503
S'trial_loop.thisTrialN'
p6504
I8
sg6371
S'3-ellas_strawberries_apples.png'
p6505
sS'block_loop.thisIndex'
p6506
g6365
sg38
S'left'
p6507
sg59
g63
sS'trial_loop.thisN'
p6508
I8
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6509
g60
(g99
S'\x08\x00\x00\x00'
tRp6510
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6511
I0
sg6380
S'13-mccoys_steak_crisps.png'
p6512
sS'block_loop.thisRepN'
p6513
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6514
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p6515
Nsg70
Vy
sS'block_loop.thisTrialN'
p6516
I0
sg39
F0.75001311449886998
sg34
g753
(S'\x07\xdf\x07\n\x1140\x0bF\xb8'
tRp6517
sa(dp6518
S'trial_loop.thisTrialN'
p6519
I9
sg6371
S'10-bounty_redo.png'
p6520
sS'block_loop.thisIndex'
p6521
g6365
sg38
S'right'
p6522
sg59
g63
sS'trial_loop.thisN'
p6523
I9
sg33
S'4-corn.png'
p6524
sg64
g65
sS'trial_loop.thisIndex'
p6525
g60
(g99
S'\t\x00\x00\x00'
tRp6526
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6527
I0
sg6380
S'4-corn.png'
p6528
sS'block_loop.thisRepN'
p6529
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6530
I2
sg6385
S'10-bounty_redo.png'
p6531
sg55
g11
sS'block_loop.thisTrial'
p6532
Nsg70
Vy
sS'block_loop.thisTrialN'
p6533
I0
sg39
F0.83327992500562686
sg34
g753
(S'\x07\xdf\x07\n\x1146\x08\n\x98'
tRp6534
sa(dp6535
S'trial_loop.thisTrialN'
p6536
I10
sg6371
S'21-nakd_banana_crunch.png'
p6537
sS'block_loop.thisIndex'
p6538
g6365
sg38
S'left'
p6539
sg59
g63
sS'trial_loop.thisN'
p6540
I10
sg33
S'1-treacle_cookies.png'
p6541
sg64
g65
sS'trial_loop.thisIndex'
p6542
g60
(g99
S'\n\x00\x00\x00'
tRp6543
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6544
I0
sg6380
S'1-treacle_cookies.png'
p6545
sS'block_loop.thisRepN'
p6546
I2
sg6383
S'21-nakd_banana_crunch.png'
p6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6548
I2
sg6385
g6541
sg55
g11
sS'block_loop.thisTrial'
p6549
Nsg70
Vy
sS'block_loop.thisTrialN'
p6550
I0
sg39
F0.90001704884707578
sg34
g753
(S'\x07\xdf\x07\n\x115\x00\x05\xfb@'
tRp6551
sa(dp6552
S'trial_loop.thisTrialN'
p6553
I11
sg6371
S'18-mms.png'
p6554
sS'block_loop.thisIndex'
p6555
g6365
sg38
S'left'
p6556
sg59
g63
sS'trial_loop.thisN'
p6557
I11
sg33
S'18-mms.png'
p6558
sg64
g65
sS'trial_loop.thisIndex'
p6559
g60
(g99
S'\x0b\x00\x00\x00'
tRp6560
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6561
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p6562
sS'block_loop.thisRepN'
p6563
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6564
I2
sg6385
S'43-mrporky_pork_crackles_redo.png'
p6565
sg55
g11
sS'block_loop.thisTrial'
p6566
Nsg70
Vy
sS'block_loop.thisTrialN'
p6567
I0
sg39
F0.81708351769702858
sg34
g753
(S'\x07\xdf\x07\n\x115\x06\x04\xe2\x00'
tRp6568
sa(dp6569
S'trial_loop.thisTrialN'
p6570
I12
sg6371
S'42-mrkipling_lemon_slices.png'
p6571
sS'block_loop.thisIndex'
p6572
g6365
sg38
S'left'
p6573
sg59
g63
sS'trial_loop.thisN'
p6574
I12
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6575
g60
(g99
S'\x0c\x00\x00\x00'
tRp6576
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6577
I0
sg6380
S'16-skips_prawn.png'
p6578
sS'block_loop.thisRepN'
p6579
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6580
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6581
Nsg70
Vy
sS'block_loop.thisTrialN'
p6582
I0
sg39
F0.88312500284882844
sg34
g753
(S'\x07\xdf\x07\n\x115\x0c\x02\x98\x10'
tRp6583
sa(dp6584
S'trial_loop.thisTrialN'
p6585
I13
sg6371
g6490
sS'block_loop.thisIndex'
p6586
g6365
sg38
S'right'
p6587
sg59
g63
sS'trial_loop.thisN'
p6588
I13
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p6589
g60
(g99
S'\r\x00\x00\x00'
tRp6590
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6591
I0
sg6380
g6497
sS'block_loop.thisRepN'
p6592
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6593
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p6594
Nsg70
Vy
sS'block_loop.thisTrialN'
p6595
I0
sg39
F0.6332270678722125
sg34
g753
(S'\x07\xdf\x07\n\x115\x12\x01D8'
tRp6596
sa(dp6597
S'trial_loop.thisTrialN'
p6598
I14
sg6371
S'19-caramello_redo.png'
p6599
sS'block_loop.thisIndex'
p6600
g6365
sg38
S'left'
p6601
sg59
g63
sS'trial_loop.thisN'
p6602
I14
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6603
g60
(g99
S'\x0e\x00\x00\x00'
tRp6604
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6605
I0
sg6380
S'30-spaghetti_hoops.png'
p6606
sS'block_loop.thisRepN'
p6607
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6608
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6609
Nsg70
Vy
sS'block_loop.thisTrialN'
p6610
I0
sg39
F0.81658374121616362
sg34
g753
(S'\x07\xdf\x07\n\x115\x17\x0b\x9c\xa8'
tRp6611
sa(dp6612
S'trial_loop.thisTrialN'
p6613
I15
sg6371
S'1-treacle_cookies.png'
p6614
sS'block_loop.thisIndex'
p6615
g6365
sg38
S'right'
p6616
sg59
g63
sS'trial_loop.thisN'
p6617
I15
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p6618
g60
(g99
S'\x0f\x00\x00\x00'
tRp6619
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6620
I0
sg6380
S'21-nakd_banana_crunch.png'
p6621
sS'block_loop.thisRepN'
p6622
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6623
I2
sg6385
g6541
sg55
g11
sS'block_loop.thisTrial'
p6624
Nsg70
Vy
sS'block_loop.thisTrialN'
p6625
I0
sg39
F0.69994052859328804
sg34
g753
(S'\x07\xdf\x07\n\x115\x1d\tR\xb8'
tRp6626
sa(dp6627
S'trial_loop.thisTrialN'
p6628
I16
sg6371
S'25-kitkat.png'
p6629
sS'block_loop.thisIndex'
p6630
g6365
sg38
S'left'
p6631
sg59
g63
sS'trial_loop.thisN'
p6632
I16
sg33
S'25-kitkat.png'
p6633
sg64
g65
sS'trial_loop.thisIndex'
p6634
g60
(g99
S'\x10\x00\x00\x00'
tRp6635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6636
I0
sg6380
S'31-hobnobs.png'
p6637
sS'block_loop.thisRepN'
p6638
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6639
I2
sg6385
S'31-hobnobs.png'
p6640
sg55
g11
sS'block_loop.thisTrial'
p6641
Nsg70
Vy
sS'block_loop.thisTrialN'
p6642
I0
sg39
F1.1166546165331965
sg34
g753
(S'\x07\xdf\x07\n\x115#\x05 \x80'
tRp6643
sa(dp6644
S'trial_loop.thisTrialN'
p6645
I17
sg6371
S'41-peanuts_redo.png'
p6646
sS'block_loop.thisIndex'
p6647
g6365
sg38
S'left'
p6648
sg59
g63
sS'trial_loop.thisN'
p6649
I17
sg33
S'45-chewy_nougat_redo.png'
p6650
sg64
g65
sS'trial_loop.thisIndex'
p6651
g60
(g99
S'\x11\x00\x00\x00'
tRp6652
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6653
I0
sg6380
S'45-chewy_nougat_redo.png'
p6654
sS'block_loop.thisRepN'
p6655
I2
sg6383
S'41-peanuts_redo.png'
p6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6657
I2
sg6385
g6650
sg55
g11
sS'block_loop.thisTrial'
p6658
Nsg70
Vy
sS'block_loop.thisTrialN'
p6659
I0
sg39
F1.683285683982831
sg34
g753
(S'\x07\xdf\x07\n\x115)\x07^\xb8'
tRp6660
sa(dp6661
S'trial_loop.thisTrialN'
p6662
I18
sg6371
g6571
sS'block_loop.thisIndex'
p6663
g6365
sg38
S'left'
p6664
sg59
g63
sS'trial_loop.thisN'
p6665
I18
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6666
g60
(g99
S'\x12\x00\x00\x00'
tRp6667
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6668
I0
sg6380
g6578
sS'block_loop.thisRepN'
p6669
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6670
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6671
Nsg70
Vy
sS'block_loop.thisTrialN'
p6672
I0
sg39
F0.86650750605258509
sg34
g753
(S'\x07\xdf\x07\n\x1150\x03$\xb0'
tRp6673
sa(dp6674
S'trial_loop.thisTrialN'
p6675
I19
sg6371
S'8-liquorice_catherine_wheels.png'
p6676
sS'block_loop.thisIndex'
p6677
g6365
sg38
S'right'
p6678
sg59
g63
sS'trial_loop.thisN'
p6679
I19
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6680
sg64
g65
sS'trial_loop.thisIndex'
p6681
g60
(g99
S'\x13\x00\x00\x00'
tRp6682
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6683
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p6684
sS'block_loop.thisRepN'
p6685
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6686
I2
sg6385
S'8-liquorice_catherine_wheels.png'
p6687
sg55
g11
sS'block_loop.thisTrial'
p6688
Nsg70
Vy
sS'block_loop.thisTrialN'
p6689
I0
sg39
F0.94992285252737929
sg34
g753
(S'\x07\xdf\x07\n\x1156\x01\x92X'
tRp6690
sa(dp6691
S'trial_loop.thisTrialN'
p6692
I20
sg6371
g6392
sS'block_loop.thisIndex'
p6693
g6365
sg38
S'left'
p6694
sg59
g63
sS'trial_loop.thisN'
p6695
I20
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6696
g60
(g99
S'\x14\x00\x00\x00'
tRp6697
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6698
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6699
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6700
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6701
Nsg70
Vy
sS'block_loop.thisTrialN'
p6702
I0
sg39
F1.0833178430184489
sg34
g753
(S'\x07\xdf\x07\n\x116\x00\x01o0'
tRp6703
sa(dp6704
S'trial_loop.thisTrialN'
p6705
I21
sg6371
g6443
sS'block_loop.thisIndex'
p6706
g6365
sg38
S'right'
p6707
sg59
g63
sS'trial_loop.thisN'
p6708
I21
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6709
g60
(g99
S'\x15\x00\x00\x00'
tRp6710
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6711
I0
sg6380
g6451
sS'block_loop.thisRepN'
p6712
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6713
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p6714
Nsg70
Vy
sS'block_loop.thisTrialN'
p6715
I0
sg39
F0.9665300858032424
sg34
g753
(S'\x07\xdf\x07\n\x116\x06\x030h'
tRp6716
sa(dp6717
S'trial_loop.thisTrialN'
p6718
I22
sg6371
S'27-hartleys_raspberries_jelly.png'
p6719
sS'block_loop.thisIndex'
p6720
g6365
sg38
S'right'
p6721
sg59
g63
sS'trial_loop.thisN'
p6722
I22
sg33
S'51-mars.png'
p6723
sg64
g65
sS'trial_loop.thisIndex'
p6724
g60
(g99
S'\x16\x00\x00\x00'
tRp6725
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6726
I0
sg6380
S'51-mars.png'
p6727
sS'block_loop.thisRepN'
p6728
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6729
I2
sg6385
S'27-hartleys_raspberries_jelly.png'
p6730
sg55
g11
sS'block_loop.thisTrial'
p6731
Nsg70
Vy
sS'block_loop.thisTrialN'
p6732
I0
sg39
F0.61659417579357978
sg34
g753
(S'\x07\xdf\x07\n\x116\x0c\x03\tX'
tRp6733
sa(dp6734
S'trial_loop.thisTrialN'
p6735
I23
sg6371
g6554
sS'block_loop.thisIndex'
p6736
g6365
sg38
S'left'
p6737
sg59
g63
sS'trial_loop.thisN'
p6738
I23
sg33
g6565
sg64
g65
sS'trial_loop.thisIndex'
p6739
g60
(g99
S'\x17\x00\x00\x00'
tRp6740
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6741
I0
sg6380
g6562
sS'block_loop.thisRepN'
p6742
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6743
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p6744
Nsg70
Vy
sS'block_loop.thisTrialN'
p6745
I0
sg39
F1.1170195417471405
sg34
g753
(S'\x07\xdf\x07\n\x116\x11\x0c\xe8\xb0'
tRp6746
sa(dp6747
S'trial_loop.thisTrialN'
p6748
I24
sg6371
S'7-olives.png'
p6749
sS'block_loop.thisIndex'
p6750
g6365
sg38
S'left'
p6751
sg59
g63
sS'trial_loop.thisN'
p6752
I24
sg33
S'22-daim.png'
p6753
sg64
g65
sS'trial_loop.thisIndex'
p6754
g60
(g99
S'\x18\x00\x00\x00'
tRp6755
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6756
I0
sg6380
S'22-daim.png'
p6757
sS'block_loop.thisRepN'
p6758
I2
sg6383
S'7-olives.png'
p6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6760
I2
sg6385
g6753
sg55
g11
sS'block_loop.thisTrial'
p6761
Nsg70
Vy
sS'block_loop.thisTrialN'
p6762
I0
sg39
F0.86662268557483912
sg34
g753
(S'\x07\xdf\x07\n\x116\x18\x00#('
tRp6763
sa(dp6764
S'trial_loop.thisTrialN'
p6765
I25
sg6371
S'33-ambrosia_rice.png'
p6766
sS'block_loop.thisIndex'
p6767
g6365
sg38
S'left'
p6768
sg59
g63
sS'trial_loop.thisN'
p6769
I25
sg33
S'33-ambrosia_rice.png'
p6770
sg64
g65
sS'trial_loop.thisIndex'
p6771
g60
(g99
S'\x19\x00\x00\x00'
tRp6772
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6773
I0
sg6380
S'23-crunchie_redo.png'
p6774
sS'block_loop.thisRepN'
p6775
I2
sg6383
g6770
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6776
I2
sg6385
S'23-crunchie_redo.png'
p6777
sg55
g11
sS'block_loop.thisTrial'
p6778
Nsg70
Vy
sS'block_loop.thisTrialN'
p6779
I0
sg39
F0.76657416192392702
sg34
g753
(S'\x07\xdf\x07\n\x116\x1d\r\xcf('
tRp6780
sa(dp6781
S'trial_loop.thisTrialN'
p6782
I26
sg6371
g6614
sS'block_loop.thisIndex'
p6783
g6365
sg38
S'right'
p6784
sg59
g63
sS'trial_loop.thisN'
p6785
I26
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p6786
g60
(g99
S'\x1a\x00\x00\x00'
tRp6787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6788
I0
sg6380
g6621
sS'block_loop.thisRepN'
p6789
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6790
I2
sg6385
g6541
sg55
g11
sS'block_loop.thisTrial'
p6791
Nsg70
Vy
sS'block_loop.thisTrialN'
p6792
I0
sg39
F0.69989804902070318
sg34
g753
(S'\x07\xdf\x07\n\x116#\n\xd1\x88'
tRp6793
sa(dp6794
S'trial_loop.thisTrialN'
p6795
I27
sg6371
S'22-daim.png'
p6796
sS'block_loop.thisIndex'
p6797
g6365
sg38
S'right'
p6798
sg59
g63
sS'trial_loop.thisN'
p6799
I27
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p6800
g60
(g99
S'\x1b\x00\x00\x00'
tRp6801
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6802
I0
sg6380
S'7-olives.png'
p6803
sS'block_loop.thisRepN'
p6804
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6805
I2
sg6385
g6753
sg55
g11
sS'block_loop.thisTrial'
p6806
Nsg70
Vy
sS'block_loop.thisTrialN'
p6807
I0
sg39
F1.1500315888406476
sg34
g753
(S'\x07\xdf\x07\n\x116)\x06\x9fP'
tRp6808
sa(dp6809
S'trial_loop.thisTrialN'
p6810
I28
sg6371
g6599
sS'block_loop.thisIndex'
p6811
g6365
sg38
S'left'
p6812
sg59
g63
sS'trial_loop.thisN'
p6813
I28
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6814
g60
(g99
S'\x1c\x00\x00\x00'
tRp6815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6816
I0
sg6380
g6606
sS'block_loop.thisRepN'
p6817
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6818
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6819
Nsg70
Vy
sS'block_loop.thisTrialN'
p6820
I0
sg39
F0.98328927621696494
sg34
g753
(S'\x07\xdf\x07\n\x116/\t\x918'
tRp6821
sa(dp6822
S'trial_loop.thisTrialN'
p6823
I29
sg6371
g6460
sS'block_loop.thisIndex'
p6824
g6365
sg38
S'left'
p6825
sg59
g63
sS'trial_loop.thisN'
p6826
I29
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p6827
g60
(g99
S'\x1d\x00\x00\x00'
tRp6828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6829
I0
sg6380
g6468
sS'block_loop.thisRepN'
p6830
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6831
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p6832
Nsg70
Vy
sS'block_loop.thisTrialN'
p6833
I0
sg39
F0.83372667329604155
sg34
g753
(S'\x07\xdf\x07\n\x1165\t\xa8\xa8'
tRp6834
sa(dp6835
S'trial_loop.thisTrialN'
p6836
I30
sg6371
g6537
sS'block_loop.thisIndex'
p6837
g6365
sg38
S'left'
p6838
sg59
g63
sS'trial_loop.thisN'
p6839
I30
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p6840
g60
(g99
S'\x1e\x00\x00\x00'
tRp6841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6842
I0
sg6380
g6545
sS'block_loop.thisRepN'
p6843
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6844
I2
sg6385
g6541
sg55
g11
sS'block_loop.thisTrial'
p6845
Nsg70
Vy
sS'block_loop.thisTrialN'
p6846
I0
sg39
F0.69996248112875037
sg34
g753
(S'\x07\xdf\x07\n\x116;\x07\x9d8'
tRp6847
sa(dp6848
S'trial_loop.thisTrialN'
p6849
I31
sg6371
g6409
sS'block_loop.thisIndex'
p6850
g6365
sg38
S'right'
p6851
sg59
g63
sS'trial_loop.thisN'
p6852
I31
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p6853
g60
(g99
S'\x1f\x00\x00\x00'
tRp6854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6855
I0
sg6380
g6417
sS'block_loop.thisRepN'
p6856
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6857
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6858
Nsg70
Vy
sS'block_loop.thisTrialN'
p6859
I0
sg39
F0.88313213029323379
sg34
g753
(S'\x07\xdf\x07\n\x117\x05\x03\xa5\x98'
tRp6860
sa(dp6861
S'trial_loop.thisTrialN'
p6862
I32
sg6371
g6554
sS'block_loop.thisIndex'
p6863
g6365
sg38
S'left'
p6864
sg59
g63
sS'trial_loop.thisN'
p6865
I32
sg33
g6558
sg64
g65
sS'trial_loop.thisIndex'
p6866
g60
(g99
S' \x00\x00\x00'
tRp6867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6868
I0
sg6380
g6562
sS'block_loop.thisRepN'
p6869
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6870
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p6871
Nsg70
Vy
sS'block_loop.thisTrialN'
p6872
I0
sg39
F0.74994982278440148
sg34
g753
(S'\x07\xdf\x07\n\x117\x0b\x02Q\xc0'
tRp6873
sa(dp6874
S'trial_loop.thisTrialN'
p6875
I33
sg6371
g6490
sS'block_loop.thisIndex'
p6876
g6365
sg38
S'right'
p6877
sg59
g63
sS'trial_loop.thisN'
p6878
I33
sg33
g6471
sg64
g65
sS'trial_loop.thisIndex'
p6879
g60
(g99
S'!\x00\x00\x00'
tRp6880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6881
I0
sg6380
g6497
sS'block_loop.thisRepN'
p6882
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6883
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p6884
Nsg70
Vy
sS'block_loop.thisTrialN'
p6885
I0
sg39
F0.64990842658153269
sg34
g753
(S'\x07\xdf\x07\n\x117\x10\x0eS\xf8'
tRp6886
sa(dp6887
S'trial_loop.thisTrialN'
p6888
I34
sg6371
S'38-maltesers.png'
p6889
sS'block_loop.thisIndex'
p6890
g6365
sg38
S'left'
p6891
sg59
g63
sS'trial_loop.thisN'
p6892
I34
sg33
S'6-sour_patch_kids.png'
p6893
sg64
g65
sS'trial_loop.thisIndex'
p6894
g60
(g99
S'"\x00\x00\x00'
tRp6895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6896
I0
sg6380
S'6-sour_patch_kids.png'
p6897
sS'block_loop.thisRepN'
p6898
I2
sg6383
S'38-maltesers.png'
p6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6900
I2
sg6385
g6893
sg55
g11
sS'block_loop.thisTrial'
p6901
Nsg70
Vy
sS'block_loop.thisTrialN'
p6902
I0
sg39
F1.0163683212958858
sg34
g753
(S'\x07\xdf\x07\n\x117\x16\tn\x10'
tRp6903
sa(dp6904
S'trial_loop.thisTrialN'
p6905
I35
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p6906
sS'block_loop.thisIndex'
p6907
g6365
sg38
S'left'
p6908
sg59
g63
sS'trial_loop.thisN'
p6909
I35
sg33
g6687
sg64
g65
sS'trial_loop.thisIndex'
p6910
g60
(g99
S'#\x00\x00\x00'
tRp6911
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6912
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p6913
sS'block_loop.thisRepN'
p6914
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6915
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p6916
Nsg70
Vy
sS'block_loop.thisTrialN'
p6917
I0
sg39
F1.0500024518405553
sg34
g753
(S'\x07\xdf\x07\n\x117\x1c\n=\x18'
tRp6918
sa(dp6919
S'trial_loop.thisTrialN'
p6920
I36
sg6371
g6571
sS'block_loop.thisIndex'
p6921
g6365
sg38
S'left'
p6922
sg59
g63
sS'trial_loop.thisN'
p6923
I36
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p6924
g60
(g99
S'$\x00\x00\x00'
tRp6925
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6926
I0
sg6380
g6578
sS'block_loop.thisRepN'
p6927
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6928
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6929
Nsg70
Vy
sS'block_loop.thisTrialN'
p6930
I0
sg39
F0.88319200083788019
sg34
g753
(S'\x07\xdf\x07\n\x117"\x0b\x858'
tRp6931
sa(dp6932
S'trial_loop.thisTrialN'
p6933
I37
sg6371
S'31-hobnobs.png'
p6934
sS'block_loop.thisIndex'
p6935
g6365
sg38
S'right'
p6936
sg59
g63
sS'trial_loop.thisN'
p6937
I37
sg33
g6633
sg64
g65
sS'trial_loop.thisIndex'
p6938
g60
(g99
S'%\x00\x00\x00'
tRp6939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6940
I0
sg6380
S'25-kitkat.png'
p6941
sS'block_loop.thisRepN'
p6942
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6943
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p6944
Nsg70
Vy
sS'block_loop.thisTrialN'
p6945
I0
sg39
F1.6332581435344764
sg34
g753
(S'\x07\xdf\x07\n\x117(\n-x'
tRp6946
sa(dp6947
S'trial_loop.thisTrialN'
p6948
I38
sg6371
S'35-raisins.png'
p6949
sS'block_loop.thisIndex'
p6950
g6365
sg38
S'right'
p6951
sg59
g63
sS'trial_loop.thisN'
p6952
I38
sg33
S'35-raisins.png'
p6953
sg64
g65
sS'trial_loop.thisIndex'
p6954
g60
(g99
S'&\x00\x00\x00'
tRp6955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6956
I0
sg6380
S'49-yorkie.png'
p6957
sS'block_loop.thisRepN'
p6958
I2
sg6383
S'49-yorkie.png'
p6959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6960
I2
sg6385
g6953
sg55
g11
sS'block_loop.thisTrial'
p6961
Nsg70
Vy
sS'block_loop.thisTrialN'
p6962
I0
sg39
F1.0498784342889849
sg34
g753
(S'\x07\xdf\x07\n\x117/\x05?\xc0'
tRp6963
sa(dp6964
S'trial_loop.thisTrialN'
p6965
I39
sg6371
g6409
sS'block_loop.thisIndex'
p6966
g6365
sg38
S'right'
p6967
sg59
g63
sS'trial_loop.thisN'
p6968
I39
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6969
g60
(g99
S"'\x00\x00\x00"
tRp6970
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6971
I0
sg6380
g6417
sS'block_loop.thisRepN'
p6972
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6973
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6974
Nsg70
Vy
sS'block_loop.thisTrialN'
p6975
I0
sg39
F0.71649929523846367
sg34
g753
(S'\x07\xdf\x07\n\x1175\x06I`'
tRp6976
sa(dp6977
S'trial_loop.thisTrialN'
p6978
I40
sg6371
g6392
sS'block_loop.thisIndex'
p6979
g6365
sg38
S'left'
p6980
sg59
g63
sS'trial_loop.thisN'
p6981
I40
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6982
g60
(g99
S'(\x00\x00\x00'
tRp6983
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6984
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6985
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6986
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6987
Nsg70
Vy
sS'block_loop.thisTrialN'
p6988
I0
sg39
F0.916657353471237
sg34
g753
(S'\x07\xdf\x07\n\x117;\x02\x94('
tRp6989
sa(dp6990
S'trial_loop.thisTrialN'
p6991
I41
sg6371
S'26-walkers_smoky_bacon.png'
p6992
sS'block_loop.thisIndex'
p6993
g6365
sg38
S'right'
p6994
sg59
g63
sS'trial_loop.thisN'
p6995
I41
sg33
S'26-walkers_smoky_bacon.png'
p6996
sg64
g65
sS'trial_loop.thisIndex'
p6997
g60
(g99
S')\x00\x00\x00'
tRp6998
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6999
I0
sg6380
S'44-crunch.png'
p7000
sS'block_loop.thisRepN'
p7001
I2
sg6383
S'44-crunch.png'
p7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7003
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p7004
Nsg70
Vy
sS'block_loop.thisTrialN'
p7005
I0
sg39
F0.86662981302288244
sg34
g753
(S'\x07\xdf\x07\n\x118\x05\x01\xb5\x80'
tRp7006
sa(dp7007
S'trial_loop.thisTrialN'
p7008
I42
sg6371
g6520
sS'block_loop.thisIndex'
p7009
g6365
sg38
S'right'
p7010
sg59
g63
sS'trial_loop.thisN'
p7011
I42
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p7012
g60
(g99
S'*\x00\x00\x00'
tRp7013
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7014
I0
sg6380
g6528
sS'block_loop.thisRepN'
p7015
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7016
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p7017
Nsg70
Vy
sS'block_loop.thisTrialN'
p7018
I0
sg39
F1.0999056896434922
sg34
g753
(S'\x07\xdf\x07\n\x118\x0b\x00a\xa8'
tRp7019
sa(dp7020
S'trial_loop.thisTrialN'
p7021
I43
sg6371
S'2-steamed_puddings.png'
p7022
sS'block_loop.thisIndex'
p7023
g6365
sg38
S'right'
p7024
sg59
g63
sS'trial_loop.thisN'
p7025
I43
sg33
S'20-fruit_pastilles.png'
p7026
sg64
g65
sS'trial_loop.thisIndex'
p7027
g60
(g99
S'+\x00\x00\x00'
tRp7028
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7029
I0
sg6380
S'20-fruit_pastilles.png'
p7030
sS'block_loop.thisRepN'
p7031
I2
sg6383
g7026
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7032
I2
sg6385
S'2-steamed_puddings.png'
p7033
sg55
g11
sS'block_loop.thisTrial'
p7034
Nsg70
Vy
sS'block_loop.thisTrialN'
p7035
I0
sg39
F0.93325147224459215
sg34
g753
(S'\x07\xdf\x07\n\x118\x11\x02a`'
tRp7036
sa(dp7037
S'trial_loop.thisTrialN'
p7038
I44
sg6371
g6443
sS'block_loop.thisIndex'
p7039
g6365
sg38
S'right'
p7040
sg59
g63
sS'trial_loop.thisN'
p7041
I44
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p7042
g60
(g99
S',\x00\x00\x00'
tRp7043
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7044
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7045
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7046
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7047
Nsg70
Vy
sS'block_loop.thisTrialN'
p7048
I0
sg39
F0.93320528639742406
sg34
g753
(S'\x07\xdf\x07\n\x118\x17\x01\xc18'
tRp7049
sa(dp7050
S'trial_loop.thisTrialN'
p7051
I45
sg6371
S'36-fig_rolls.png'
p7052
sS'block_loop.thisIndex'
p7053
g6365
sg38
S'left'
p7054
sg59
g63
sS'trial_loop.thisN'
p7055
I45
sg33
S'36-fig_rolls.png'
p7056
sg64
g65
sS'trial_loop.thisIndex'
p7057
g60
(g99
S'-\x00\x00\x00'
tRp7058
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7059
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p7060
sS'block_loop.thisRepN'
p7061
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7062
I2
sg6385
S'34-hula_hoops_bbq_beef_redo.png'
p7063
sg55
g11
sS'block_loop.thisTrial'
p7064
Nsg70
Vy
sS'block_loop.thisTrialN'
p7065
I0
sg39
F0.81663049725466408
sg34
g753
(S'\x07\xdf\x07\n\x118\x1d\x01_\x90'
tRp7066
sa(dp7067
S'trial_loop.thisTrialN'
p7068
I46
sg6371
S'6-sour_patch_kids.png'
p7069
sS'block_loop.thisIndex'
p7070
g6365
sg38
S'right'
p7071
sg59
g63
sS'trial_loop.thisN'
p7072
I46
sg33
g6899
sg64
g65
sS'trial_loop.thisIndex'
p7073
g60
(g99
S'.\x00\x00\x00'
tRp7074
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7075
I0
sg6380
S'38-maltesers.png'
p7076
sS'block_loop.thisRepN'
p7077
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7078
I2
sg6385
g6893
sg55
g11
sS'block_loop.thisTrial'
p7079
Nsg70
Vy
sS'block_loop.thisTrialN'
p7080
I0
sg39
F0.68341540349138086
sg34
g753
(S'\x07\xdf\x07\n\x118"\x0eW\xe0'
tRp7081
sa(dp7082
S'trial_loop.thisTrialN'
p7083
I47
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p7084
sS'block_loop.thisIndex'
p7085
g6365
sg38
S'right'
p7086
sg59
g63
sS'trial_loop.thisN'
p7087
I47
sg33
g7063
sg64
g65
sS'trial_loop.thisIndex'
p7088
g60
(g99
S'/\x00\x00\x00'
tRp7089
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7090
I0
sg6380
S'36-fig_rolls.png'
p7091
sS'block_loop.thisRepN'
p7092
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7093
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p7094
Nsg70
Vy
sS'block_loop.thisTrialN'
p7095
I0
sg39
F0.73312791084754281
sg34
g753
(S'\x07\xdf\x07\n\x118(\t\xe7('
tRp7096
sa(dp7097
S'trial_loop.thisTrialN'
p7098
I48
sg6371
g6646
sS'block_loop.thisIndex'
p7099
g6365
sg38
S'left'
p7100
sg59
g63
sS'trial_loop.thisN'
p7101
I48
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p7102
g60
(g99
S'0\x00\x00\x00'
tRp7103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7104
I0
sg6380
g6654
sS'block_loop.thisRepN'
p7105
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7106
I2
sg6385
g6650
sg55
g11
sS'block_loop.thisTrial'
p7107
Nsg70
Vy
sS'block_loop.thisTrialN'
p7108
I0
sg39
F1.7165987943772052
sg34
g753
(S'\x07\xdf\x07\n\x118.\x06l\x88'
tRp7109
sa(dp7110
S'trial_loop.thisTrialN'
p7111
I49
sg6371
g6934
sS'block_loop.thisIndex'
p7112
g6365
sg38
S'right'
p7113
sg59
g63
sS'trial_loop.thisN'
p7114
I49
sg33
g6633
sg64
g65
sS'trial_loop.thisIndex'
p7115
g60
(g99
S'1\x00\x00\x00'
tRp7116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7117
I0
sg6380
g6941
sS'block_loop.thisRepN'
p7118
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7119
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p7120
Nsg70
Vy
sS'block_loop.thisTrialN'
p7121
I0
sg39
F0.96656144656662946
sg34
g753
(S'\x07\xdf\x07\n\x1185\x02\xaf\x80'
tRp7122
sa(dp7123
S'trial_loop.thisTrialN'
p7124
I50
sg6371
S'23-crunchie_redo.png'
p7125
sS'block_loop.thisIndex'
p7126
g6365
sg38
S'right'
p7127
sg59
g63
sS'trial_loop.thisN'
p7128
I50
sg33
g6777
sg64
g65
sS'trial_loop.thisIndex'
p7129
g60
(g99
S'2\x00\x00\x00'
tRp7130
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7131
I0
sg6380
S'33-ambrosia_rice.png'
p7132
sS'block_loop.thisRepN'
p7133
I2
sg6383
g6770
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7134
I2
sg6385
g6777
sg55
g11
sS'block_loop.thisTrial'
p7135
Nsg70
Vy
sS'block_loop.thisTrialN'
p7136
I0
sg39
F1.9331610962362902
sg34
g753
(S'\x07\xdf\x07\n\x118;\x02\x88p'
tRp7137
sa(dp7138
S'trial_loop.thisTrialN'
p7139
I51
sg6371
S'49-yorkie.png'
p7140
sS'block_loop.thisIndex'
p7141
g6365
sg38
S'left'
p7142
sg59
g63
sS'trial_loop.thisN'
p7143
I51
sg33
g6959
sg64
g65
sS'trial_loop.thisIndex'
p7144
g60
(g99
S'3\x00\x00\x00'
tRp7145
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7146
I0
sg6380
S'35-raisins.png'
p7147
sS'block_loop.thisRepN'
p7148
I2
sg6383
g6959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7149
I2
sg6385
g6953
sg55
g11
sS'block_loop.thisTrial'
p7150
Nsg70
Vy
sS'block_loop.thisTrialN'
p7151
I0
sg39
F0.95034365691390121
sg34
g753
(S'\x07\xdf\x07\n\x119\x06\x02"\xe0'
tRp7152
sa(dp7153
S'trial_loop.thisTrialN'
p7154
I52
sg6371
S'43-mrporky_pork_crackles_redo.png'
p7155
sS'block_loop.thisIndex'
p7156
g6365
sg38
S'right'
p7157
sg59
g63
sS'trial_loop.thisN'
p7158
I52
sg33
g6558
sg64
g65
sS'trial_loop.thisIndex'
p7159
g60
(g99
S'4\x00\x00\x00'
tRp7160
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7161
I0
sg6380
S'18-mms.png'
p7162
sS'block_loop.thisRepN'
p7163
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7164
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p7165
Nsg70
Vy
sS'block_loop.thisTrialN'
p7166
I0
sg39
F1.1998088134023419
sg34
g753
(S'\x07\xdf\x07\n\x119\x0c\x01\xbdP'
tRp7167
sa(dp7168
S'trial_loop.thisTrialN'
p7169
I53
sg6371
g6372
sS'block_loop.thisIndex'
p7170
g6365
sg38
S'right'
p7171
sg59
g63
sS'trial_loop.thisN'
p7172
I53
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7173
g60
(g99
S'5\x00\x00\x00'
tRp7174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7175
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7176
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7177
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7178
Nsg70
Vy
sS'block_loop.thisTrialN'
p7179
I0
sg39
F0.98331122874878929
sg34
g753
(S'\x07\xdf\x07\n\x119\x12\x05f\xd0'
tRp7180
sa(dp7181
S'trial_loop.thisTrialN'
p7182
I54
sg6371
g7155
sS'block_loop.thisIndex'
p7183
g6365
sg38
S'right'
p7184
sg59
g63
sS'trial_loop.thisN'
p7185
I54
sg33
g6558
sg64
g65
sS'trial_loop.thisIndex'
p7186
g60
(g99
S'6\x00\x00\x00'
tRp7187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7188
I0
sg6380
g7162
sS'block_loop.thisRepN'
p7189
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7190
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p7191
Nsg70
Vy
sS'block_loop.thisTrialN'
p7192
I0
sg39
F0.61660700519860256
sg34
g753
(S'\x07\xdf\x07\n\x119\x18\x05\xbc\xc0'
tRp7193
sa(dp7194
S'trial_loop.thisTrialN'
p7195
I55
sg6371
g7125
sS'block_loop.thisIndex'
p7196
g6365
sg38
S'right'
p7197
sg59
g63
sS'trial_loop.thisN'
p7198
I55
sg33
g6770
sg64
g65
sS'trial_loop.thisIndex'
p7199
g60
(g99
S'7\x00\x00\x00'
tRp7200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7201
I0
sg6380
g7132
sS'block_loop.thisRepN'
p7202
I2
sg6383
g6770
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7203
I2
sg6385
g6777
sg55
g11
sS'block_loop.thisTrial'
p7204
Nsg70
Vy
sS'block_loop.thisTrialN'
p7205
I0
sg39
F0.91655300766797154
sg34
g753
(S'\x07\xdf\x07\n\x119\x1e\x00Y\xd8'
tRp7206
sa(dp7207
S'trial_loop.thisTrialN'
p7208
I56
sg6371
g6749
sS'block_loop.thisIndex'
p7209
g6365
sg38
S'left'
p7210
sg59
g63
sS'trial_loop.thisN'
p7211
I56
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p7212
g60
(g99
S'8\x00\x00\x00'
tRp7213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7214
I0
sg6380
g6757
sS'block_loop.thisRepN'
p7215
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7216
I2
sg6385
g6753
sg55
g11
sS'block_loop.thisTrial'
p7217
Nsg70
Vy
sS'block_loop.thisTrialN'
p7218
I0
sg39
F1.7666266199266829
sg34
g753
(S'\x07\xdf\x07\n\x119#\x0e\xc1X'
tRp7219
sa(dp7220
S'trial_loop.thisTrialN'
p7221
I57
sg6371
g6571
sS'block_loop.thisIndex'
p7222
g6365
sg38
S'left'
p7223
sg59
g63
sS'trial_loop.thisN'
p7224
I57
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7225
g60
(g99
S'9\x00\x00\x00'
tRp7226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7227
I0
sg6380
g6578
sS'block_loop.thisRepN'
p7228
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7229
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7230
Nsg70
Vy
sS'block_loop.thisTrialN'
p7231
I0
sg39
F1.0998013438365888
sg34
g753
(S'\x07\xdf\x07\n\x119*\x0b\xb8\x00'
tRp7232
sa(dp7233
S'trial_loop.thisTrialN'
p7234
I58
sg6371
S'29-beans.png'
p7235
sS'block_loop.thisIndex'
p7236
g6365
sg38
S'left'
p7237
sg59
g63
sS'trial_loop.thisN'
p7238
I58
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7239
g60
(g99
S':\x00\x00\x00'
tRp7240
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7241
I0
sg6380
S'46-pistachios.png'
p7242
sS'block_loop.thisRepN'
p7243
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7244
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7245
Nsg70
Vy
sS'block_loop.thisTrialN'
p7246
I0
sg39
F1.1832714290903823
sg34
g753
(S'\x07\xdf\x07\n\x1190\r\xb7\xb8'
tRp7247
sa(dp7248
S'trial_loop.thisTrialN'
p7249
I59
sg6371
S'51-mars.png'
p7250
sS'block_loop.thisIndex'
p7251
g6365
sg38
S'left'
p7252
sg59
g63
sS'trial_loop.thisN'
p7253
I59
sg33
g6730
sg64
g65
sS'trial_loop.thisIndex'
p7254
g60
(g99
S';\x00\x00\x00'
tRp7255
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7256
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p7257
sS'block_loop.thisRepN'
p7258
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7259
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p7260
Nsg70
Vy
sS'block_loop.thisTrialN'
p7261
I0
sg39
F0.71663386141153751
sg34
g753
(S'\x07\xdf\x07\n\x1197\x01\xe4`'
tRp7262
sa(dp7263
S'trial_loop.thisTrialN'
p7264
I60
sg6371
g6537
sS'block_loop.thisIndex'
p7265
g6365
sg38
S'left'
p7266
sg59
g63
sS'trial_loop.thisN'
p7267
I60
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p7268
g60
(g99
S'<\x00\x00\x00'
tRp7269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7270
I0
sg6380
g6545
sS'block_loop.thisRepN'
p7271
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7272
I2
sg6385
g6541
sg55
g11
sS'block_loop.thisTrial'
p7273
Nsg70
Vy
sS'block_loop.thisTrialN'
p7274
I0
sg39
F0.68327741614848492
sg34
g753
(S'\x07\xdf\x07\n\x11:\x00\r/\x00'
tRp7275
sa(dp7276
S'trial_loop.thisTrialN'
p7277
I61
sg6371
S'44-crunch.png'
p7278
sS'block_loop.thisIndex'
p7279
g6365
sg38
S'left'
p7280
sg59
g63
sS'trial_loop.thisN'
p7281
I61
sg33
g6996
sg64
g65
sS'trial_loop.thisIndex'
p7282
g60
(g99
S'=\x00\x00\x00'
tRp7283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7284
I0
sg6380
S'26-walkers_smoky_bacon.png'
p7285
sS'block_loop.thisRepN'
p7286
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7287
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p7288
Nsg70
Vy
sS'block_loop.thisTrialN'
p7289
I0
sg39
F0.86667143730664975
sg34
g753
(S'\x07\xdf\x07\n\x11:\x06\t\x00\xb0'
tRp7290
sa(dp7291
S'trial_loop.thisTrialN'
p7292
I62
sg6371
g6676
sS'block_loop.thisIndex'
p7293
g6365
sg38
S'right'
p7294
sg59
g63
sS'trial_loop.thisN'
p7295
I62
sg33
g6680
sg64
g65
sS'trial_loop.thisIndex'
p7296
g60
(g99
S'>\x00\x00\x00'
tRp7297
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7298
I0
sg6380
g6684
sS'block_loop.thisRepN'
p7299
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7300
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p7301
Nsg70
Vy
sS'block_loop.thisTrialN'
p7302
I0
sg39
F1.2500208121418837
sg34
g753
(S'\x07\xdf\x07\n\x11:\x0c\x07nX'
tRp7303
sa(dp7304
S'trial_loop.thisTrialN'
p7305
I63
sg6371
g7278
sS'block_loop.thisIndex'
p7306
g6365
sg38
S'left'
p7307
sg59
g63
sS'trial_loop.thisN'
p7308
I63
sg33
g7002
sg64
g65
sS'trial_loop.thisIndex'
p7309
g60
(g99
S'?\x00\x00\x00'
tRp7310
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7311
I0
sg6380
g7285
sS'block_loop.thisRepN'
p7312
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7313
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p7314
Nsg70
Vy
sS'block_loop.thisTrialN'
p7315
I0
sg39
F0.71661675554059912
sg34
g753
(S'\x07\xdf\x07\n\x11:\x12\x0b\xcb\x88'
tRp7316
sa(dp7317
S'trial_loop.thisTrialN'
p7318
I64
sg6371
g7084
sS'block_loop.thisIndex'
p7319
g6365
sg38
S'right'
p7320
sg59
g63
sS'trial_loop.thisN'
p7321
I64
sg33
g7063
sg64
g65
sS'trial_loop.thisIndex'
p7322
g60
(g99
S'@\x00\x00\x00'
tRp7323
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7324
I0
sg6380
g7091
sS'block_loop.thisRepN'
p7325
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7326
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p7327
Nsg70
Vy
sS'block_loop.thisTrialN'
p7328
I0
sg39
F1.1000017676051357
sg34
g753
(S'\x07\xdf\x07\n\x11:\x18\x07\xd7\xd0'
tRp7329
sa(dp7330
S'trial_loop.thisTrialN'
p7331
I65
sg6371
S'5-pineapple.png'
p7332
sS'block_loop.thisIndex'
p7333
g6365
sg38
S'right'
p7334
sg59
g63
sS'trial_loop.thisN'
p7335
I65
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7336
g60
(g99
S'A\x00\x00\x00'
tRp7337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7338
I0
sg6380
S'40-sardines.png'
p7339
sS'block_loop.thisRepN'
p7340
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7341
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7342
Nsg70
Vy
sS'block_loop.thisTrialN'
p7343
I0
sg39
F1.1165725083592406
sg34
g753
(S'\x07\xdf\x07\n\x11:\x1e\t\xd7\x88'
tRp7344
sa(dp7345
S'trial_loop.thisTrialN'
p7346
I66
sg6371
g6409
sS'block_loop.thisIndex'
p7347
g6365
sg38
S'right'
p7348
sg59
g63
sS'trial_loop.thisN'
p7349
I66
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7350
g60
(g99
S'B\x00\x00\x00'
tRp7351
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7352
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7353
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7354
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7355
Nsg70
Vy
sS'block_loop.thisTrialN'
p7356
I0
sg39
F0.816577754158061
sg34
g753
(S'\x07\xdf\x07\n\x11:$\x0cPX'
tRp7357
sa(dp7358
S'trial_loop.thisTrialN'
p7359
I67
sg6371
g6599
sS'block_loop.thisIndex'
p7360
g6365
sg38
S'left'
p7361
sg59
g63
sS'trial_loop.thisN'
p7362
I67
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7363
g60
(g99
S'C\x00\x00\x00'
tRp7364
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7365
I0
sg6380
g6606
sS'block_loop.thisRepN'
p7366
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7367
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7368
Nsg70
Vy
sS'block_loop.thisTrialN'
p7369
I0
sg39
F0.78329172805752023
sg34
g753
(S'\x07\xdf\x07\n\x11:*\n\x06h'
tRp7370
sa(dp7371
S'trial_loop.thisTrialN'
p7372
I68
sg6371
g6614
sS'block_loop.thisIndex'
p7373
g6365
sg38
S'right'
p7374
sg59
g63
sS'trial_loop.thisN'
p7375
I68
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p7376
g60
(g99
S'D\x00\x00\x00'
tRp7377
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7378
I0
sg6380
g6621
sS'block_loop.thisRepN'
p7379
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7380
I2
sg6385
g6541
sg55
g11
sS'block_loop.thisTrial'
p7381
Nsg70
Vy
sS'block_loop.thisTrialN'
p7382
I0
sg39
F1.0000230929217651
sg34
g753
(S'\x07\xdf\x07\n\x11:0\x07C`'
tRp7383
sa(dp7384
S'trial_loop.thisTrialN'
p7385
I69
sg6371
g7155
sS'block_loop.thisIndex'
p7386
g6365
sg38
S'right'
p7387
sg59
g63
sS'trial_loop.thisN'
p7388
I69
sg33
g6558
sg64
g65
sS'trial_loop.thisIndex'
p7389
g60
(g99
S'E\x00\x00\x00'
tRp7390
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7391
I0
sg6380
g7162
sS'block_loop.thisRepN'
p7392
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7393
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p7394
Nsg70
Vy
sS'block_loop.thisTrialN'
p7395
I0
sg39
F0.98323966919633676
sg34
g753
(S'\x07\xdf\x07\n\x11:6\x07\x95h'
tRp7396
sa(dp7397
S'trial_loop.thisTrialN'
p7398
I70
sg6371
g6490
sS'block_loop.thisIndex'
p7399
g6365
sg38
S'right'
p7400
sg59
g63
sS'trial_loop.thisN'
p7401
I70
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7402
g60
(g99
S'F\x00\x00\x00'
tRp7403
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7404
I0
sg6380
g6497
sS'block_loop.thisRepN'
p7405
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7406
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7407
Nsg70
Vy
sS'block_loop.thisTrialN'
p7408
I0
sg39
F0.74995295885673841
sg34
g753
(S'\x07\xdf\x07\n\x11;\x00\x07\xebX'
tRp7409
sa(dp7410
S'trial_loop.thisTrialN'
p7411
I71
sg6371
g7140
sS'block_loop.thisIndex'
p7412
g6365
sg38
S'left'
p7413
sg59
g63
sS'trial_loop.thisN'
p7414
I71
sg33
g6959
sg64
g65
sS'trial_loop.thisIndex'
p7415
g60
(g99
S'G\x00\x00\x00'
tRp7416
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7417
I0
sg6380
g7147
sS'block_loop.thisRepN'
p7418
I2
sg6383
g6959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7419
I2
sg6385
g6953
sg55
g11
sS'block_loop.thisTrial'
p7420
Nsg70
Vy
sS'block_loop.thisTrialN'
p7421
I0
sg39
F1.1666482303407975
sg34
g753
(S'\x07\xdf\x07\n\x11;\x06\x04\xaf8'
tRp7422
sa(dp7423
S'trial_loop.thisTrialN'
p7424
I72
sg6371
g6719
sS'block_loop.thisIndex'
p7425
g6365
sg38
S'right'
p7426
sg59
g63
sS'trial_loop.thisN'
p7427
I72
sg33
g6723
sg64
g65
sS'trial_loop.thisIndex'
p7428
g60
(g99
S'H\x00\x00\x00'
tRp7429
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7430
I0
sg6380
g6727
sS'block_loop.thisRepN'
p7431
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7432
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p7433
Nsg70
Vy
sS'block_loop.thisTrialN'
p7434
I0
sg39
F0.68330193456131383
sg34
g753
(S'\x07\xdf\x07\n\x11;\x0c\x07\xa1 '
tRp7435
sa(dp7436
S'trial_loop.thisTrialN'
p7437
I73
sg6371
S'20-fruit_pastilles.png'
p7438
sS'block_loop.thisIndex'
p7439
g6365
sg38
S'left'
p7440
sg59
g63
sS'trial_loop.thisN'
p7441
I73
sg33
g7026
sg64
g65
sS'trial_loop.thisIndex'
p7442
g60
(g99
S'I\x00\x00\x00'
tRp7443
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7444
I0
sg6380
S'2-steamed_puddings.png'
p7445
sS'block_loop.thisRepN'
p7446
I2
sg6383
g7026
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7447
I2
sg6385
g7033
sg55
g11
sS'block_loop.thisTrial'
p7448
Nsg70
Vy
sS'block_loop.thisTrialN'
p7449
I0
sg39
F1.1832175456038385
sg34
g753
(S'\x07\xdf\x07\n\x11;\x12\x03n\xe8'
tRp7450
sa(dp7451
S'trial_loop.thisTrialN'
p7452
I74
sg6371
g7052
sS'block_loop.thisIndex'
p7453
g6365
sg38
S'left'
p7454
sg59
g63
sS'trial_loop.thisN'
p7455
I74
sg33
g7056
sg64
g65
sS'trial_loop.thisIndex'
p7456
g60
(g99
S'J\x00\x00\x00'
tRp7457
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7458
I0
sg6380
g7060
sS'block_loop.thisRepN'
p7459
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7460
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p7461
Nsg70
Vy
sS'block_loop.thisTrialN'
p7462
I0
sg39
F1.0666307823557872
sg34
g753
(S'\x07\xdf\x07\n\x11;\x18\x06\x9fP'
tRp7463
sa(dp7464
S'trial_loop.thisTrialN'
p7465
I75
sg6371
g6520
sS'block_loop.thisIndex'
p7466
g6365
sg38
S'right'
p7467
sg59
g63
sS'trial_loop.thisN'
p7468
I75
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p7469
g60
(g99
S'K\x00\x00\x00'
tRp7470
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7471
I0
sg6380
g6528
sS'block_loop.thisRepN'
p7472
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7473
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p7474
Nsg70
Vy
sS'block_loop.thisTrialN'
p7475
I0
sg39
F1.0332826049270807
sg34
g753
(S'\x07\xdf\x07\n\x11;\x1e\x08"\x08'
tRp7476
sa(dp7477
S'trial_loop.thisTrialN'
p7478
I76
sg6371
g6889
sS'block_loop.thisIndex'
p7479
g6365
sg38
S'left'
p7480
sg59
g63
sS'trial_loop.thisN'
p7481
I76
sg33
g6899
sg64
g65
sS'trial_loop.thisIndex'
p7482
g60
(g99
S'L\x00\x00\x00'
tRp7483
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7484
I0
sg6380
g6897
sS'block_loop.thisRepN'
p7485
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7486
I2
sg6385
g6893
sg55
g11
sS'block_loop.thisTrial'
p7487
Nsg70
Vy
sS'block_loop.thisTrialN'
p7488
I0
sg39
F1.3162764057633467
sg34
g753
(S'\x07\xdf\x07\n\x11;$\t/\x90'
tRp7489
sa(dp7490
S'trial_loop.thisTrialN'
p7491
I77
sg6371
g7235
sS'block_loop.thisIndex'
p7492
g6365
sg38
S'left'
p7493
sg59
g63
sS'trial_loop.thisN'
p7494
I77
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7495
g60
(g99
S'M\x00\x00\x00'
tRp7496
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7497
I0
sg6380
g7242
sS'block_loop.thisRepN'
p7498
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7499
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7500
Nsg70
Vy
sS'block_loop.thisTrialN'
p7501
I0
sg39
F1.2832637884712312
sg34
g753
(S'\x07\xdf\x07\n\x11;*\x0e\x82\xd8'
tRp7502
sa(dp7503
S'trial_loop.thisTrialN'
p7504
I78
sg6371
g6629
sS'block_loop.thisIndex'
p7505
g6365
sg38
S'left'
p7506
sg59
g63
sS'trial_loop.thisN'
p7507
I78
sg33
g6640
sg64
g65
sS'trial_loop.thisIndex'
p7508
g60
(g99
S'N\x00\x00\x00'
tRp7509
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7510
I0
sg6380
g6637
sS'block_loop.thisRepN'
p7511
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7512
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p7513
Nsg70
Vy
sS'block_loop.thisTrialN'
p7514
I0
sg39
F1.250021382336854
sg34
g753
(S'\x07\xdf\x07\n\x11;1\x04\x1a\xc8'
tRp7515
sa(dp7516
S'trial_loop.thisTrialN'
p7517
I79
sg6371
g6460
sS'block_loop.thisIndex'
p7518
g6365
sg38
S'left'
p7519
sg59
g63
sS'trial_loop.thisN'
p7520
I79
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7521
g60
(g99
S'O\x00\x00\x00'
tRp7522
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7523
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7524
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7525
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7526
Nsg70
Vy
sS'block_loop.thisTrialN'
p7527
I0
sg39
F0.84990911081331433
sg34
g753
(S'\x07\xdf\x07\n\x11;7\x08{\xe0'
tRp7528
sa(dp7529
S'trial_loop.thisTrialN'
p7530
I80
sg6371
g7069
sS'block_loop.thisIndex'
p7531
g6365
sg38
S'right'
p7532
sg59
g63
sS'trial_loop.thisN'
p7533
I80
sg33
g6899
sg64
g65
sS'trial_loop.thisIndex'
p7534
g60
(g99
S'P\x00\x00\x00'
tRp7535
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7536
I0
sg6380
g7076
sS'block_loop.thisRepN'
p7537
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7538
I2
sg6385
g6893
sg55
g11
sS'block_loop.thisTrial'
p7539
Nsg70
Vy
sS'block_loop.thisTrialN'
p7540
I0
sg39
F0.7329329039384902
sg34
g753
(S'\x07\xdf\x07\n\x12\x00\x01\x06\xab\x08'
tRp7541
sa(dp7542
S'trial_loop.thisTrialN'
p7543
I81
sg6371
g7278
sS'block_loop.thisIndex'
p7544
g6365
sg38
S'left'
p7545
sg59
g63
sS'trial_loop.thisN'
p7546
I81
sg33
g7002
sg64
g65
sS'trial_loop.thisIndex'
p7547
g60
(g99
S'Q\x00\x00\x00'
tRp7548
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7549
I0
sg6380
g7285
sS'block_loop.thisRepN'
p7550
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7551
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p7552
Nsg70
Vy
sS'block_loop.thisTrialN'
p7553
I0
sg39
F0.73317951355420519
sg34
g753
(S'\x07\xdf\x07\n\x12\x00\x07\x02\xf5\xd0'
tRp7554
sa(dp7555
S'trial_loop.thisTrialN'
p7556
I82
sg6371
g6629
sS'block_loop.thisIndex'
p7557
g6365
sg38
S'left'
p7558
sg59
g63
sS'trial_loop.thisN'
p7559
I82
sg33
g6633
sg64
g65
sS'trial_loop.thisIndex'
p7560
g60
(g99
S'R\x00\x00\x00'
tRp7561
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7562
I0
sg6380
g6637
sS'block_loop.thisRepN'
p7563
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7564
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p7565
Nsg70
Vy
sS'block_loop.thisTrialN'
p7566
I0
sg39
F1.6166032989240193
sg34
g753
(S'\x07\xdf\x07\n\x12\x00\x0c\x0e\xbdp'
tRp7567
sa(dp7568
S'trial_loop.thisTrialN'
p7569
I83
sg6371
S'45-chewy_nougat_redo.png'
p7570
sS'block_loop.thisIndex'
p7571
g6365
sg38
S'right'
p7572
sg59
g63
sS'trial_loop.thisN'
p7573
I83
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p7574
g60
(g99
S'S\x00\x00\x00'
tRp7575
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7576
I0
sg6380
S'41-peanuts_redo.png'
p7577
sS'block_loop.thisRepN'
p7578
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7579
I2
sg6385
g6650
sg55
g11
sS'block_loop.thisTrial'
p7580
Nsg70
Vy
sS'block_loop.thisTrialN'
p7581
I0
sg39
F1.2334503564852639
sg34
g753
(S'\x07\xdf\x07\n\x12\x00\x13\tR\xb8'
tRp7582
sa(dp7583
S'trial_loop.thisTrialN'
p7584
I84
sg6371
g7250
sS'block_loop.thisIndex'
p7585
g6365
sg38
S'left'
p7586
sg59
g63
sS'trial_loop.thisN'
p7587
I84
sg33
g6723
sg64
g65
sS'trial_loop.thisIndex'
p7588
g60
(g99
S'T\x00\x00\x00'
tRp7589
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7590
I0
sg6380
g7257
sS'block_loop.thisRepN'
p7591
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7592
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p7593
Nsg70
Vy
sS'block_loop.thisTrialN'
p7594
I0
sg39
F0.74995153337295051
sg34
g753
(S'\x07\xdf\x07\n\x12\x00\x19\ruP'
tRp7595
sa(dp7596
S'trial_loop.thisTrialN'
p7597
I85
sg6371
g6646
sS'block_loop.thisIndex'
p7598
g6365
sg38
S'left'
p7599
sg59
g63
sS'trial_loop.thisN'
p7600
I85
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p7601
g60
(g99
S'U\x00\x00\x00'
tRp7602
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7603
I0
sg6380
g6654
sS'block_loop.thisRepN'
p7604
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7605
I2
sg6385
g6650
sg55
g11
sS'block_loop.thisTrial'
p7606
Nsg70
Vy
sS'block_loop.thisTrialN'
p7607
I0
sg39
F1.0499117907347681
sg34
g753
(S'\x07\xdf\x07\n\x12\x00\x1f\n90'
tRp7608
sa(dp7609
S'trial_loop.thisTrialN'
p7610
I86
sg6371
g6766
sS'block_loop.thisIndex'
p7611
g6365
sg38
S'left'
p7612
sg59
g63
sS'trial_loop.thisN'
p7613
I86
sg33
g6770
sg64
g65
sS'trial_loop.thisIndex'
p7614
g60
(g99
S'V\x00\x00\x00'
tRp7615
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7616
I0
sg6380
g6774
sS'block_loop.thisRepN'
p7617
I2
sg6383
g6770
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7618
I2
sg6385
g6777
sg55
g11
sS'block_loop.thisTrial'
p7619
Nsg70
Vy
sS'block_loop.thisTrialN'
p7620
I0
sg39
F1.4832105892164691
sg34
g753
(S'\x07\xdf\x07\n\x12\x00%\x0b\x81P'
tRp7621
sa(dp7622
S'trial_loop.thisTrialN'
p7623
I87
sg6371
g7570
sS'block_loop.thisIndex'
p7624
g6365
sg38
S'right'
p7625
sg59
g63
sS'trial_loop.thisN'
p7626
I87
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p7627
g60
(g99
S'W\x00\x00\x00'
tRp7628
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7629
I0
sg6380
g7577
sS'block_loop.thisRepN'
p7630
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7631
I2
sg6385
g6650
sg55
g11
sS'block_loop.thisTrial'
p7632
Nsg70
Vy
sS'block_loop.thisTrialN'
p7633
I0
sg39
F1.4332486212661024
sg34
g753
(S'\x07\xdf\x07\n\x12\x00,\x0428'
tRp7634
sa(dp7635
S'trial_loop.thisTrialN'
p7636
I88
sg6371
g6505
sS'block_loop.thisIndex'
p7637
g6365
sg38
S'left'
p7638
sg59
g63
sS'trial_loop.thisN'
p7639
I88
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7640
g60
(g99
S'X\x00\x00\x00'
tRp7641
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7642
I0
sg6380
g6512
sS'block_loop.thisRepN'
p7643
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7644
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7645
Nsg70
Vy
sS'block_loop.thisTrialN'
p7646
I0
sg39
F0.73337223968337639
sg34
g753
(S'\x07\xdf\x07\n\x12\x002\x0b/H'
tRp7647
sa(dp7648
S'trial_loop.thisTrialN'
p7649
I89
sg6371
g7438
sS'block_loop.thisIndex'
p7650
g6365
sg38
S'left'
p7651
sg59
g63
sS'trial_loop.thisN'
p7652
I89
sg33
g7033
sg64
g65
sS'trial_loop.thisIndex'
p7653
g60
(g99
S'Y\x00\x00\x00'
tRp7654
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7655
I0
sg6380
g7445
sS'block_loop.thisRepN'
p7656
I2
sg6383
g7026
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7657
I2
sg6385
g7033
sg55
g11
sS'block_loop.thisTrial'
p7658
Nsg70
Vy
sS'block_loop.thisTrialN'
p7659
I0
sg39
F1.0666128211923933
sg34
g753
(S'\x07\xdf\x07\n\x12\x008\x07\xb4\xa8'
tRp7660
sa(dp7661
S'trial_loop.thisTrialN'
p7662
I90
sg6371
S'4-corn.png'
p7663
sS'block_loop.thisIndex'
p7664
g6365
sg38
S'left'
p7665
sg59
g63
sS'trial_loop.thisN'
p7666
I90
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p7667
g60
(g99
S'Z\x00\x00\x00'
tRp7668
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7669
I0
sg6380
S'10-bounty_redo.png'
p7670
sS'block_loop.thisRepN'
p7671
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7672
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p7673
Nsg70
Vy
sS'block_loop.thisTrialN'
p7674
I0
sg39
F0.94989149176763021
sg34
g753
(S'\x07\xdf\x07\n\x12\x01\x02\t;H'
tRp7675
sa(dp7676
S'trial_loop.thisTrialN'
p7677
I91
sg6371
g7250
sS'block_loop.thisIndex'
p7678
g6365
sg38
S'left'
p7679
sg59
g63
sS'trial_loop.thisN'
p7680
I91
sg33
g6723
sg64
g65
sS'trial_loop.thisIndex'
p7681
g60
(g99
S'[\x00\x00\x00'
tRp7682
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7683
I0
sg6380
g7257
sS'block_loop.thisRepN'
p7684
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7685
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p7686
Nsg70
Vy
sS'block_loop.thisTrialN'
p7687
I0
sg39
F0.66659206607073429
sg34
g753
(S'\x07\xdf\x07\n\x12\x01\x08\x08\xd9\xa0'
tRp7688
sa(dp7689
S'trial_loop.thisTrialN'
p7690
I92
sg6371
g6749
sS'block_loop.thisIndex'
p7691
g6365
sg38
S'left'
p7692
sg59
g63
sS'trial_loop.thisN'
p7693
I92
sg33
g6753
sg64
g65
sS'trial_loop.thisIndex'
p7694
g60
(g99
S'\\\x00\x00\x00'
tRp7695
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7696
I0
sg6380
g6757
sS'block_loop.thisRepN'
p7697
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7698
I2
sg6385
g6753
sg55
g11
sS'block_loop.thisTrial'
p7699
Nsg70
Vy
sS'block_loop.thisTrialN'
p7700
I0
sg39
F0.8500057589772041
sg34
g753
(S'\x07\xdf\x07\n\x12\x01\x0e\x04h\xe8'
tRp7701
sa(dp7702
S'trial_loop.thisTrialN'
p7703
I93
sg6371
g6934
sS'block_loop.thisIndex'
p7704
g6365
sg38
S'right'
p7705
sg59
g63
sS'trial_loop.thisN'
p7706
I93
sg33
g6633
sg64
g65
sS'trial_loop.thisIndex'
p7707
g60
(g99
S']\x00\x00\x00'
tRp7708
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7709
I0
sg6380
g6941
sS'block_loop.thisRepN'
p7710
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7711
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p7712
Nsg70
Vy
sS'block_loop.thisTrialN'
p7713
I0
sg39
F0.98332833461972768
sg34
g753
(S'\x07\xdf\x07\n\x12\x01\x14\x02\x98\x10'
tRp7714
sa(dp7715
S'trial_loop.thisTrialN'
p7716
I94
sg6371
g6676
sS'block_loop.thisIndex'
p7717
g6365
sg38
S'right'
p7718
sg59
g63
sS'trial_loop.thisN'
p7719
I94
sg33
g6680
sg64
g65
sS'trial_loop.thisIndex'
p7720
g60
(g99
S'^\x00\x00\x00'
tRp7721
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7722
I0
sg6380
g6684
sS'block_loop.thisRepN'
p7723
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7724
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p7725
Nsg70
Vy
sS'block_loop.thisTrialN'
p7726
I0
sg39
F1.1499526167426666
sg34
g753
(S'\x07\xdf\x07\n\x12\x01\x1a\x02\xaf\x80'
tRp7727
sa(dp7728
S'trial_loop.thisTrialN'
p7729
I95
sg6371
g6537
sS'block_loop.thisIndex'
p7730
g6365
sg38
S'left'
p7731
sg59
g63
sS'trial_loop.thisN'
p7732
I95
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p7733
g60
(g99
S'_\x00\x00\x00'
tRp7734
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7735
I0
sg6380
g6545
sS'block_loop.thisRepN'
p7736
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7737
I2
sg6385
g6541
sg55
g11
sS'block_loop.thisTrial'
p7738
Nsg70
Vy
sS'block_loop.thisTrialN'
p7739
I0
sg39
F1.0665837412161636
sg34
g753
(S'\x07\xdf\x07\n\x12\x01 \x05\xa5P'
tRp7740
sa(dp7741
S'trial_loop.thisTrialN'
p7742
I96
sg6371
g7663
sS'block_loop.thisIndex'
p7743
g6365
sg38
S'left'
p7744
sg59
g63
sS'trial_loop.thisN'
p7745
I96
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p7746
g60
(g99
S'`\x00\x00\x00'
tRp7747
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7748
I0
sg6380
g7670
sS'block_loop.thisRepN'
p7749
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7750
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p7751
Nsg70
Vy
sS'block_loop.thisTrialN'
p7752
I0
sg39
F1.499894798904279
sg34
g753
(S'\x07\xdf\x07\n\x12\x01&\x07(\x08'
tRp7753
sa(dp7754
S'trial_loop.thisTrialN'
p7755
I97
sg6371
g7155
sS'block_loop.thisIndex'
p7756
g6365
sg38
S'right'
p7757
sg59
g63
sS'trial_loop.thisN'
p7758
I97
sg33
g6565
sg64
g65
sS'trial_loop.thisIndex'
p7759
g60
(g99
S'a\x00\x00\x00'
tRp7760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7761
I0
sg6380
g7162
sS'block_loop.thisRepN'
p7762
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7763
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p7764
Nsg70
Vy
sS'block_loop.thisTrialN'
p7765
I0
sg39
F1.3165500996692572
sg34
g753
(S'\x07\xdf\x07\n\x12\x01-\x00\x17p'
tRp7766
sa(dp7767
S'trial_loop.thisTrialN'
p7768
I98
sg6371
g6599
sS'block_loop.thisIndex'
p7769
g6365
sg38
S'left'
p7770
sg59
g63
sS'trial_loop.thisN'
p7771
I98
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7772
g60
(g99
S'b\x00\x00\x00'
tRp7773
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7774
I0
sg6380
g6606
sS'block_loop.thisRepN'
p7775
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7776
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7777
Nsg70
Vy
sS'block_loop.thisTrialN'
p7778
I0
sg39
F2.1998849345181952
sg34
g753
(S'\x07\xdf\x07\n\x12\x013\x05j\xb8'
tRp7779
sa(dp7780
S'trial_loop.thisTrialN'
p7781
I99
sg6371
g6749
sS'block_loop.thisIndex'
p7782
g6365
sg38
S'left'
p7783
sg59
g63
sS'trial_loop.thisN'
p7784
I99
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p7785
g60
(g99
S'c\x00\x00\x00'
tRp7786
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7787
I0
sg6380
g6757
sS'block_loop.thisRepN'
p7788
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7789
I2
sg6385
g6753
sg55
g11
sS'block_loop.thisTrial'
p7790
Nsg70
Vy
sS'block_loop.thisTrialN'
p7791
I0
sg39
F0.94986098630033666
sg34
g753
(S'\x07\xdf\x07\n\x12\x01:\x08\xd1\xd0'
tRp7792
sa(dp7793
S'trial_loop.thisTrialN'
p7794
I100
sg6371
g6409
sS'block_loop.thisIndex'
p7795
g6365
sg38
S'right'
p7796
sg59
g63
sS'trial_loop.thisN'
p7797
I100
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7798
g60
(g99
S'd\x00\x00\x00'
tRp7799
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7800
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7801
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7802
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7803
Nsg70
Vy
sS'block_loop.thisTrialN'
p7804
I0
sg39
F0.94983960396348266
sg34
g753
(S'\x07\xdf\x07\n\x12\x02\x04\x08\xaa\xc0'
tRp7805
sa(dp7806
S'trial_loop.thisTrialN'
p7807
I101
sg6371
g6719
sS'block_loop.thisIndex'
p7808
g6365
sg38
S'right'
p7809
sg59
g63
sS'trial_loop.thisN'
p7810
I101
sg33
g6723
sg64
g65
sS'trial_loop.thisIndex'
p7811
g60
(g99
S'e\x00\x00\x00'
tRp7812
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7813
I0
sg6380
g6727
sS'block_loop.thisRepN'
p7814
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7815
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p7816
Nsg70
Vy
sS'block_loop.thisTrialN'
p7817
I0
sg39
F1.4332329408862279
sg34
g753
(S'\x07\xdf\x07\n\x12\x02\n\x08I\x18'
tRp7818
sa(dp7819
S'trial_loop.thisTrialN'
p7820
I102
sg6371
g6992
sS'block_loop.thisIndex'
p7821
g6365
sg38
S'right'
p7822
sg59
g63
sS'trial_loop.thisN'
p7823
I102
sg33
g7002
sg64
g65
sS'trial_loop.thisIndex'
p7824
g60
(g99
S'f\x00\x00\x00'
tRp7825
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7826
I0
sg6380
g7000
sS'block_loop.thisRepN'
p7827
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7828
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p7829
Nsg70
Vy
sS'block_loop.thisTrialN'
p7830
I0
sg39
F0.66673518517563934
sg34
g753
(S'\x07\xdf\x07\n\x12\x02\x11\x00Bh'
tRp7831
sa(dp7832
S'trial_loop.thisTrialN'
p7833
I103
sg6371
g6676
sS'block_loop.thisIndex'
p7834
g6365
sg38
S'right'
p7835
sg59
g63
sS'trial_loop.thisN'
p7836
I103
sg33
g6680
sg64
g65
sS'trial_loop.thisIndex'
p7837
g60
(g99
S'g\x00\x00\x00'
tRp7838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7839
I0
sg6380
g6684
sS'block_loop.thisRepN'
p7840
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7841
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p7842
Nsg70
Vy
sS'block_loop.thisTrialN'
p7843
I0
sg39
F0.76665627010152093
sg34
g753
(S'\x07\xdf\x07\n\x12\x02\x16\n\xd9X'
tRp7844
sa(dp7845
S'trial_loop.thisTrialN'
p7846
I104
sg6371
g6505
sS'block_loop.thisIndex'
p7847
g6365
sg38
S'left'
p7848
sg59
g63
sS'trial_loop.thisN'
p7849
I104
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7850
g60
(g99
S'h\x00\x00\x00'
tRp7851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7852
I0
sg6380
g6512
sS'block_loop.thisRepN'
p7853
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7854
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7855
Nsg70
Vy
sS'block_loop.thisTrialN'
p7856
I0
sg39
F0.75003164585723425
sg34
g753
(S'\x07\xdf\x07\n\x12\x02\x1c\x07\xd7\xd0'
tRp7857
sa(dp7858
S'trial_loop.thisTrialN'
p7859
I105
sg6371
g6460
sS'block_loop.thisIndex'
p7860
g6365
sg38
S'left'
p7861
sg59
g63
sS'trial_loop.thisN'
p7862
I105
sg33
g6471
sg64
g65
sS'trial_loop.thisIndex'
p7863
g60
(g99
S'i\x00\x00\x00'
tRp7864
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7865
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7866
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7867
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7868
Nsg70
Vy
sS'block_loop.thisTrialN'
p7869
I0
sg39
F1.2999944691036944
sg34
g753
(S'\x07\xdf\x07\n\x12\x02"\x04\x9b\xb0'
tRp7870
sa(dp7871
S'trial_loop.thisTrialN'
p7872
I106
sg6371
g6537
sS'block_loop.thisIndex'
p7873
g6365
sg38
S'left'
p7874
sg59
g63
sS'trial_loop.thisN'
p7875
I106
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p7876
g60
(g99
S'j\x00\x00\x00'
tRp7877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7878
I0
sg6380
g6545
sS'block_loop.thisRepN'
p7879
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7880
I2
sg6385
g6541
sg55
g11
sS'block_loop.thisTrial'
p7881
Nsg70
Vy
sS'block_loop.thisTrialN'
p7882
I0
sg39
F0.86657507424024516
sg34
g753
(S'\x07\xdf\x07\n\x12\x02(\t\xb0x'
tRp7883
sa(dp7884
S'trial_loop.thisTrialN'
p7885
I107
sg6371
g6934
sS'block_loop.thisIndex'
p7886
g6365
sg38
S'right'
p7887
sg59
g63
sS'trial_loop.thisN'
p7888
I107
sg33
g6633
sg64
g65
sS'trial_loop.thisIndex'
p7889
g60
(g99
S'k\x00\x00\x00'
tRp7890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7891
I0
sg6380
g6941
sS'block_loop.thisRepN'
p7892
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7893
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p7894
Nsg70
Vy
sS'block_loop.thisTrialN'
p7895
I0
sg39
F0.93320100993150845
sg34
g753
(S'\x07\xdf\x07\n\x12\x02.\x08\x1e '
tRp7896
sa(dp7897
S'trial_loop.thisTrialN'
p7898
I108
sg6371
g6796
sS'block_loop.thisIndex'
p7899
g6365
sg38
S'right'
p7900
sg59
g63
sS'trial_loop.thisN'
p7901
I108
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p7902
g60
(g99
S'l\x00\x00\x00'
tRp7903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7904
I0
sg6380
g6803
sS'block_loop.thisRepN'
p7905
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7906
I2
sg6385
g6753
sg55
g11
sS'block_loop.thisTrial'
p7907
Nsg70
Vy
sS'block_loop.thisTrialN'
p7908
I0
sg39
F0.9833454404870281
sg34
g753
(S'\x07\xdf\x07\n\x12\x024\x07\xbcx'
tRp7909
sa(dp7910
S'trial_loop.thisTrialN'
p7911
I109
sg6371
g7438
sS'block_loop.thisIndex'
p7912
g6365
sg38
S'left'
p7913
sg59
g63
sS'trial_loop.thisN'
p7914
I109
sg33
g7026
sg64
g65
sS'trial_loop.thisIndex'
p7915
g60
(g99
S'm\x00\x00\x00'
tRp7916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7917
I0
sg6380
g7445
sS'block_loop.thisRepN'
p7918
I2
sg6383
g7026
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7919
I2
sg6385
g7033
sg55
g11
sS'block_loop.thisTrial'
p7920
Nsg70
Vy
sS'block_loop.thisTrialN'
p7921
I0
sg39
F1.216562301859085
sg34
g753
(S'\x07\xdf\x07\n\x12\x02:\x07\xd3\xe8'
tRp7922
sa(dp7923
S'trial_loop.thisTrialN'
p7924
I110
sg6371
g7332
sS'block_loop.thisIndex'
p7925
g6365
sg38
S'right'
p7926
sg59
g63
sS'trial_loop.thisN'
p7927
I110
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7928
g60
(g99
S'n\x00\x00\x00'
tRp7929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7930
I0
sg6380
g7339
sS'block_loop.thisRepN'
p7931
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7932
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7933
Nsg70
Vy
sS'block_loop.thisTrialN'
p7934
I0
sg39
F0.95036532434824039
sg34
g753
(S'\x07\xdf\x07\n\x12\x03\x04\x0b\xbb\xe8'
tRp7935
sa(dp7936
S'trial_loop.thisTrialN'
p7937
I111
sg6371
g7052
sS'block_loop.thisIndex'
p7938
g6365
sg38
S'left'
p7939
sg59
g63
sS'trial_loop.thisN'
p7940
I111
sg33
g7056
sg64
g65
sS'trial_loop.thisIndex'
p7941
g60
(g99
S'o\x00\x00\x00'
tRp7942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7943
I0
sg6380
g7060
sS'block_loop.thisRepN'
p7944
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7945
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p7946
Nsg70
Vy
sS'block_loop.thisTrialN'
p7947
I0
sg39
F0.86668939846640569
sg34
g753
(S'\x07\xdf\x07\n\x12\x03\n\x0bVX'
tRp7948
sa(dp7949
S'trial_loop.thisTrialN'
p7950
I112
sg6371
g7332
sS'block_loop.thisIndex'
p7951
g6365
sg38
S'right'
p7952
sg59
g63
sS'trial_loop.thisN'
p7953
I112
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7954
g60
(g99
S'p\x00\x00\x00'
tRp7955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7956
I0
sg6380
g7339
sS'block_loop.thisRepN'
p7957
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7958
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7959
Nsg70
Vy
sS'block_loop.thisTrialN'
p7960
I0
sg39
F0.86655796836930676
sg34
g753
(S'\x07\xdf\x07\n\x12\x03\x10\n\x02\x80'
tRp7961
sa(dp7962
S'trial_loop.thisTrialN'
p7963
I113
sg6371
g6372
sS'block_loop.thisIndex'
p7964
g6365
sg38
S'right'
p7965
sg59
g63
sS'trial_loop.thisN'
p7966
I113
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7967
g60
(g99
S'q\x00\x00\x00'
tRp7968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7969
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7970
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7971
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7972
Nsg70
Vy
sS'block_loop.thisTrialN'
p7973
I0
sg39
F1.0165636133096996
sg34
g753
(S'\x07\xdf\x07\n\x12\x03\x16\x08p('
tRp7974
sa(dp7975
S'trial_loop.thisTrialN'
p7976
I114
sg6371
g6766
sS'block_loop.thisIndex'
p7977
g6365
sg38
S'left'
p7978
sg59
g63
sS'trial_loop.thisN'
p7979
I114
sg33
g6770
sg64
g65
sS'trial_loop.thisIndex'
p7980
g60
(g99
S'r\x00\x00\x00'
tRp7981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7982
I0
sg6380
g6774
sS'block_loop.thisRepN'
p7983
I2
sg6383
g6770
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7984
I2
sg6385
g6777
sg55
g11
sS'block_loop.thisTrial'
p7985
Nsg70
Vy
sS'block_loop.thisTrialN'
p7986
I0
sg39
F1.4998942287093087
sg34
g753
(S'\x07\xdf\x07\n\x12\x03\x1c\t;H'
tRp7987
sa(dp7988
S'trial_loop.thisTrialN'
p7989
I115
sg6371
g7663
sS'block_loop.thisIndex'
p7990
g6365
sg38
S'left'
p7991
sg59
g63
sS'trial_loop.thisN'
p7992
I115
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p7993
g60
(g99
S's\x00\x00\x00'
tRp7994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7995
I0
sg6380
g7670
sS'block_loop.thisRepN'
p7996
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7997
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p7998
Nsg70
Vy
sS'block_loop.thisTrialN'
p7999
I0
sg39
F1.1832286644166743
sg34
g753
(S'\x07\xdf\x07\n\x12\x03#\x01\xec0'
tRp8000
sa(dp8001
S'trial_loop.thisTrialN'
p8002
I116
sg6371
g6554
sS'block_loop.thisIndex'
p8003
g6365
sg38
S'left'
p8004
sg59
g63
sS'trial_loop.thisN'
p8005
I116
sg33
g6558
sg64
g65
sS'trial_loop.thisIndex'
p8006
g60
(g99
S't\x00\x00\x00'
tRp8007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8008
I0
sg6380
g6562
sS'block_loop.thisRepN'
p8009
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8010
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p8011
Nsg70
Vy
sS'block_loop.thisTrialN'
p8012
I0
sg39
F0.86645305237107095
sg34
g753
(S'\x07\xdf\x07\n\x12\x03)\x05[\x18'
tRp8013
sa(dp8014
S'trial_loop.thisTrialN'
p8015
I117
sg6371
g7069
sS'block_loop.thisIndex'
p8016
g6365
sg38
S'right'
p8017
sg59
g63
sS'trial_loop.thisN'
p8018
I117
sg33
g6899
sg64
g65
sS'trial_loop.thisIndex'
p8019
g60
(g99
S'u\x00\x00\x00'
tRp8020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8021
I0
sg6380
g7076
sS'block_loop.thisRepN'
p8022
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8023
I2
sg6385
g6893
sg55
g11
sS'block_loop.thisTrial'
p8024
Nsg70
Vy
sS'block_loop.thisTrialN'
p8025
I0
sg39
F1.783018319245457
sg34
g753
(S'\x07\xdf\x07\n\x12\x03/\x03\xc4\xd8'
tRp8026
sa(dp8027
S'trial_loop.thisTrialN'
p8028
I118
sg6371
g6676
sS'block_loop.thisIndex'
p8029
g6365
sg38
S'right'
p8030
sg59
g63
sS'trial_loop.thisN'
p8031
I118
sg33
g6680
sg64
g65
sS'trial_loop.thisIndex'
p8032
g60
(g99
S'v\x00\x00\x00'
tRp8033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8034
I0
sg6380
g6684
sS'block_loop.thisRepN'
p8035
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8036
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p8037
Nsg70
Vy
sS'block_loop.thisTrialN'
p8038
I0
sg39
F0.96667463039921131
sg34
g753
(S'\x07\xdf\x07\n\x12\x036\x00\xfd\xe8'
tRp8039
sa(dp8040
S'trial_loop.thisTrialN'
p8041
I119
sg6371
g6614
sS'block_loop.thisIndex'
p8042
g6365
sg38
S'right'
p8043
sg59
g63
sS'trial_loop.thisN'
p8044
I119
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p8045
g60
(g99
S'w\x00\x00\x00'
tRp8046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8047
I0
sg6380
g6621
sS'block_loop.thisRepN'
p8048
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8049
I2
sg6385
g6541
sg55
g11
sS'block_loop.thisTrial'
p8050
Nsg70
Vy
sS'block_loop.thisTrialN'
p8051
I0
sg39
F1.2000003991342965
sg34
g753
(S'\x07\xdf\x07\n\x12\x04\x00\x01\x15X'
tRp8052
sa(dp8053
S'trial_loop.thisTrialN'
p8054
I120
sg6371
g6646
sS'block_loop.thisIndex'
p8055
g6365
sg38
S'left'
p8056
sg59
g63
sS'trial_loop.thisN'
p8057
I120
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p8058
g60
(g99
S'x\x00\x00\x00'
tRp8059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8060
I0
sg6380
g6654
sS'block_loop.thisRepN'
p8061
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8062
I2
sg6385
g6650
sg55
g11
sS'block_loop.thisTrial'
p8063
Nsg70
Vy
sS'block_loop.thisTrialN'
p8064
I0
sg39
F1.0167038814361149
sg34
g753
(S'\x07\xdf\x07\n\x12\x04\x06\x04\x80X'
tRp8065
sa(dp8066
S'trial_loop.thisTrialN'
p8067
I121
sg6371
g6992
sS'block_loop.thisIndex'
p8068
g6365
sg38
S'right'
p8069
sg59
g63
sS'trial_loop.thisN'
p8070
I121
sg33
g6996
sg64
g65
sS'trial_loop.thisIndex'
p8071
g60
(g99
S'y\x00\x00\x00'
tRp8072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8073
I0
sg6380
g7000
sS'block_loop.thisRepN'
p8074
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8075
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p8076
Nsg70
Vy
sS'block_loop.thisTrialN'
p8077
I0
sg39
F0.90005126058895257
sg34
g753
(S'\x07\xdf\x07\n\x12\x04\x0c\x05O`'
tRp8078
sa(dp8079
S'trial_loop.thisTrialN'
p8080
I122
sg6371
g7022
sS'block_loop.thisIndex'
p8081
g6365
sg38
S'right'
p8082
sg59
g63
sS'trial_loop.thisN'
p8083
I122
sg33
g7026
sg64
g65
sS'trial_loop.thisIndex'
p8084
g60
(g99
S'z\x00\x00\x00'
tRp8085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8086
I0
sg6380
g7030
sS'block_loop.thisRepN'
p8087
I2
sg6383
g7026
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8088
I2
sg6385
g7033
sg55
g11
sS'block_loop.thisTrial'
p8089
Nsg70
Vy
sS'block_loop.thisTrialN'
p8090
I0
sg39
F0.84999121898727026
sg34
g753
(S'\x07\xdf\x07\n\x12\x04\x12\x046 '
tRp8091
sa(dp8092
S'trial_loop.thisTrialN'
p8093
I123
sg6371
g7069
sS'block_loop.thisIndex'
p8094
g6365
sg38
S'right'
p8095
sg59
g63
sS'trial_loop.thisN'
p8096
I123
sg33
g6899
sg64
g65
sS'trial_loop.thisIndex'
p8097
g60
(g99
S'{\x00\x00\x00'
tRp8098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8099
I0
sg6380
g7076
sS'block_loop.thisRepN'
p8100
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8101
I2
sg6385
g6893
sg55
g11
sS'block_loop.thisTrial'
p8102
Nsg70
Vy
sS'block_loop.thisTrialN'
p8103
I0
sg39
F0.73301073564289254
sg34
g753
(S'\x07\xdf\x07\n\x12\x04\x18\x02eH'
tRp8104
sa(dp8105
S'trial_loop.thisTrialN'
p8106
I124
sg6371
g6372
sS'block_loop.thisIndex'
p8107
g6365
sg38
S'right'
p8108
sg59
g63
sS'trial_loop.thisN'
p8109
I124
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8110
g60
(g99
S'|\x00\x00\x00'
tRp8111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8112
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8113
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8114
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vy
sS'block_loop.thisTrialN'
p8116
I0
sg39
F1.1665929213631898
sg34
g753
(S'\x07\xdf\x07\n\x12\x04\x1d\x0e,\xe8'
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g6505
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'left'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g6512
sS'block_loop.thisRepN'
p8126
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8127
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vy
sS'block_loop.thisTrialN'
p8129
I0
sg39
F0.599938190793182
sg34
g753
(S'\x07\xdf\x07\n\x12\x04$\x02\x1b\x10'
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g7022
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'right'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g7026
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g7030
sS'block_loop.thisRepN'
p8139
I2
sg6383
g7026
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8140
I2
sg6385
g7033
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vy
sS'block_loop.thisTrialN'
p8142
I0
sg39
F1.1333565022832772
sg34
g753
(S'\x07\xdf\x07\n\x12\x04)\x0b\xbf\xd0'
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g7278
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'left'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g6996
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g7285
sS'block_loop.thisRepN'
p8152
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8153
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vy
sS'block_loop.thisTrialN'
p8155
I0
sg39
F1.5499354538515036
sg34
g753
(S'\x07\xdf\x07\n\x12\x04/\x0e8\xa0'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g7570
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'right'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g6650
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g7577
sS'block_loop.thisRepN'
p8165
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8166
I2
sg6385
g6650
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vy
sS'block_loop.thisTrialN'
p8168
I0
sg39
F1.4166362562355062
sg34
g753
(S'\x07\xdf\x07\n\x12\x046\x07\xdb\xb8'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g7140
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'left'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g6959
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g7147
sS'block_loop.thisRepN'
p8178
I2
sg6383
g6959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8179
I2
sg6385
g6953
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vy
sS'block_loop.thisTrialN'
p8181
I0
sg39
F1.5000059870544646
sg34
g753
(S'\x07\xdf\x07\n\x12\x05\x00\x0e\x9e0'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g6629
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'left'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g6633
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g6637
sS'block_loop.thisRepN'
p8191
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8192
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vy
sS'block_loop.thisTrialN'
p8194
I0
sg39
F1.3666087157835136
sg34
g753
(S'\x07\xdf\x07\n\x12\x05\x07\x07\x89\xb0'
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g7155
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'right'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g6558
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g7162
sS'block_loop.thisRepN'
p8204
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8205
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vy
sS'block_loop.thisTrialN'
p8207
I0
sg39
F0.76674607591485255
sg34
g753
(S'\x07\xdf\x07\n\x12\x05\r\r\x94\x90'
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g7140
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'left'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g6959
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g7147
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8218
I2
sg6385
g6953
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vy
sS'block_loop.thisTrialN'
p8220
I0
sg39
F0.89999766219989397
sg34
g753
(S'\x07\xdf\x07\n\x12\x05\x13\n\x93\x08'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g6426
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'right'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8231
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vy
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.94998899522397551
sg34
g753
(S'\x07\xdf\x07\n\x12\x05\x19\t\xb8H'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g6392
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'right'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8244
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vy
sS'block_loop.thisTrialN'
p8246
I0
sg39
F0.83332981712737819
sg34
g753
(S'\x07\xdf\x07\n\x12\x05\x1f\tV\xa0'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g6646
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'left'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g6654
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6385
g6650
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vy
sS'block_loop.thisTrialN'
p8259
I0
sg39
F0.73321315509747365
sg34
g753
(S'\x07\xdf\x07\n\x12\x05%\x07GH'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g6906
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'left'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6687
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g6913
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vy
sS'block_loop.thisTrialN'
p8272
I0
sg39
F1.1832135542354081
sg34
g753
(S'\x07\xdf\x07\n\x12\x05+\x03\xcc\xa8'
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g7278
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'left'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g7002
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g7285
sS'block_loop.thisRepN'
p8282
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vy
sS'block_loop.thisTrialN'
p8285
I0
sg39
F0.73364165712700924
sg34
g753
(S'\x07\xdf\x07\n\x12\x051\x06\xfd\x10'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g7125
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'right'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6770
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g7132
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6770
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6385
g6777
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vy
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.73331350953230867
sg34
g753
(S'\x07\xdf\x07\n\x12\x057\x03\x82p'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g7235
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'left'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g7242
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vy
sS'block_loop.thisTrialN'
p8311
I0
sg39
F0.86657051267320639
sg34
g753
(S'\x07\xdf\x07\n\x12\x06\x01\x00\x07\xd0'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g6629
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'left'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6633
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g6637
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vy
sS'block_loop.thisTrialN'
p8324
I0
sg39
F0.96661019829116412
sg34
g753
(S'\x07\xdf\x07\n\x12\x06\x06\r\xb7\xb8'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g7438
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'left'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g7026
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g7445
sS'block_loop.thisRepN'
p8334
I2
sg6383
g7026
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6385
g7033
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vy
sS'block_loop.thisTrialN'
p8337
I0
sg39
F2.6499118477513548
sg34
g753
(S'\x07\xdf\x07\n\x12\x06\x0c\r\xcf('
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g7084
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'right'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g7063
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g7091
sS'block_loop.thisRepN'
p8347
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vy
sS'block_loop.thisTrialN'
p8350
I0
sg39
F1.2503441130720603
sg34
g753
(S'\x07\xdf\x07\n\x12\x06\x14\x08\xd9\xa0'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g7570
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'right'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g7577
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6385
g6650
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vy
sS'block_loop.thisTrialN'
p8363
I0
sg39
F1.1166503400672809
sg34
g753
(S'\x07\xdf\x07\n\x12\x06\x1a\r:\xb8'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g6992
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'right'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g7002
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g7000
sS'block_loop.thisRepN'
p8373
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vy
sS'block_loop.thisTrialN'
p8376
I0
sg39
F0.833271942268766
sg34
g753
(S'\x07\xdf\x07\n\x12\x06!\x002\xc8'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g7052
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'left'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g7056
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g7060
sS'block_loop.thisRepN'
p8386
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vy
sS'block_loop.thisTrialN'
p8389
I0
sg39
F0.98321743156702723
sg34
g753
(S'\x07\xdf\x07\n\x12\x06&\ri\x98'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g7125
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'right'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6770
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g7132
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6770
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6385
g6777
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vy
sS'block_loop.thisTrialN'
p8402
I0
sg39
F0.88333312426402699
sg34
g753
(S'\x07\xdf\x07\n\x12\x06,\r\xbf\x88'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g6426
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'right'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vy
sS'block_loop.thisTrialN'
p8415
I0
sg39
F1.4502951902868517
sg34
g753
(S'\x07\xdf\x07\n\x12\x062\x0cg\xc8'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g6949
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'right'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6959
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g6957
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6385
g6953
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vy
sS'block_loop.thisTrialN'
p8428
I0
sg39
F1.1165314542740816
sg34
g753
(S'\x07\xdf\x07\n\x12\x069\x04\x9f\x98'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g6599
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'left'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g6606
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vy
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.83324685366096674
sg34
g753
(S'\x07\xdf\x07\n\x12\x07\x03\x06\xd9\xe8'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6505
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'left'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6512
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vy
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.58339082806196529
sg34
g753
(S'\x07\xdf\x07\n\x12\x07\t\x04\xcex'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g6520
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'right'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g6528
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vy
sS'block_loop.thisTrialN'
p8467
I0
sg39
F0.83324343248750665
sg34
g753
(S'\x07\xdf\x07\n\x12\x07\x0e\x0e4\xb8'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g6443
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'right'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vy
sS'block_loop.thisTrialN'
p8480
I0
sg39
F0.83324371758499183
sg34
g753
(S'\x07\xdf\x07\n\x12\x07\x14\x0c%`'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g7084
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'right'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g7056
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g7091
sS'block_loop.thisRepN'
p8490
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vy
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.78373391478089616
sg34
g753
(S'\x07\xdf\x07\n\x12\x07\x1a\n\x19\xf0'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g6949
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'right'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6959
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g6957
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6385
g6953
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vy
sS'block_loop.thisTrialN'
p8506
I0
sg39
F1.4332243879543967
sg34
g753
(S'\x07\xdf\x07\n\x12\x07 \x07V\xe8'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g7663
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'left'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g7670
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vy
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.98327388093457557
sg34
g753
(S'\x07\xdf\x07\n\x12\x07&\x0eS\xf8'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g6749
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'left'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g6757
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6385
g6753
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vy
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.99991561104616267
sg34
g753
(S'\x07\xdf\x07\n\x12\x07,\x0e\xa9\xe8'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g7235
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'left'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g7242
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vy
sS'block_loop.thisTrialN'
p8545
I0
sg39
F1.0998931453359546
sg34
g753
(S'\x07\xdf\x07\n\x12\x072\x0f:p'
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g6906
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'left'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6680
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g6913
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vy
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.88371487024414819
sg34
g753
(S'\x07\xdf\x07\n\x12\x079\x01\xf7\xe8'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g7332
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'right'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g7339
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vy
sS'block_loop.thisTrialN'
p8571
I0
sg39
F0.96647135565217468
sg34
g753
(S'\x07\xdf\x07\n\x12\x08\x03\x00\xa0('
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g6766
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'left'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6777
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g6774
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6770
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6385
g6777
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vy
sS'block_loop.thisTrialN'
p8584
I0
sg39
F1.6166423573231441
sg34
g753
(S'\x07\xdf\x07\n\x12\x08\t\x00\xb7\x98'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g6719
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'right'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6723
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g6727
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vy
sS'block_loop.thisTrialN'
p8597
I0
sg39
F0.76658043407951482
sg34
g753
(S'\x07\xdf\x07\n\x12\x08\x0f\n\x93\x08'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g7084
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'right'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g7063
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g7091
sS'block_loop.thisRepN'
p8607
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vy
sS'block_loop.thisTrialN'
p8610
I0
sg39
F1.099972687628906
sg34
g753
(S'\x07\xdf\x07\n\x12\x08\x15\x07\x91\x80'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g7438
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'left'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g7026
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g7445
sS'block_loop.thisRepN'
p8620
I2
sg6383
g7026
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6385
g7033
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vy
sS'block_loop.thisTrialN'
p8623
I0
sg39
F1.5000376329153369
sg34
g753
(S'\x07\xdf\x07\n\x12\x08\x1b\t\x918'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g6520
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'right'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g6528
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vy
sS'block_loop.thisTrialN'
p8636
I0
sg39
F0.83335433553656912
sg34
g753
(S'\x07\xdf\x07\n\x12\x08"\x02|\xb8'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g6426
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'right'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vy
sS'block_loop.thisTrialN'
p8649
I0
sg39
F1.233322347565263
sg34
g753
(S'\x07\xdf\x07\n\x12\x08(\x00qH'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6372
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'right'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vy
sS'block_loop.thisTrialN'
p8662
I0
sg39
F0.93334270354534965
sg34
g753
(S'\x07\xdf\x07\n\x12\x08.\x04\x93\xe0'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g7570
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'right'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g7577
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6385
g6650
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vy
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.91659235116821947
sg34
g753
(S'\x07\xdf\x07\n\x12\x084\x03\xf3\xb8'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g7332
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'right'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g7339
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vy
sS'block_loop.thisTrialN'
p8688
I0
sg39
F1.5499551256034465
sg34
g753
(S'\x07\xdf\x07\n\x12\x08:\x03S\x90'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g6796
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'right'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g6803
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6385
g6753
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vy
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.86666488005357678
sg34
g753
(S'\x07\xdf\x07\n\x12\t\x04\x0c<\xd0'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g6934
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'right'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6640
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g6941
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vy
sS'block_loop.thisTrialN'
p8714
I0
sg39
F1.333229177595058
sg34
g753
(S'\x07\xdf\x07\n\x12\t\n\n\xa6\x90'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g7022
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'right'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g7026
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g7030
sS'block_loop.thisRepN'
p8724
I2
sg6383
g7026
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6385
g7033
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vy
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.83318869370486937
sg34
g753
(S'\x07\xdf\x07\n\x12\t\x11\x00\xf6\x18'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g7250
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'left'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6723
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g7257
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vy
sS'block_loop.thisTrialN'
p8740
I0
sg39
F0.76657957878705929
sg34
g753
(S'\x07\xdf\x07\n\x12\t\x16\x0e,\xe8'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g7125
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'right'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6770
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g7132
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6770
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6385
g6777
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vy
sS'block_loop.thisTrialN'
p8753
I0
sg39
F1.3666663055410027
sg34
g753
(S'\x07\xdf\x07\n\x12\t\x1c\x0b+`'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g6796
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'right'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6753
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g6803
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6385
g6753
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vy
sS'block_loop.thisTrialN'
p8766
I0
sg39
F1.549863894299051
sg34
g753
(S'\x07\xdf\x07\n\x12\t#\x01\xf4\x00'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g6889
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'left'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6893
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g6897
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6385
g6893
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vy
sS'block_loop.thisTrialN'
p8779
I0
sg39
F2.0496691724838456
sg34
g753
(S'\x07\xdf\x07\n\x12\t)\n\xd9X'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g7663
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'left'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g7670
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vy
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.91667388914356707
sg34
g753
(S'\x07\xdf\x07\n\x12\t0\x0c\x1d\x90'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g7140
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'left'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6959
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g7147
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6385
g6953
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vy
sS'block_loop.thisTrialN'
p8805
I0
sg39
F1.0499046632903628
sg34
g753
(S'\x07\xdf\x07\n\x12\t6\x0b}h'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6906
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'left'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6680
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6913
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vy
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.9504166419574176
sg34
g753
(S'\x07\xdf\x07\n\x12\n\x00\x0c\x87\x08'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g6571
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'left'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g6578
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vy
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.91659349155816017
sg34
g753
(S'\x07\xdf\x07\n\x12\n\x06\x0cc\xe0'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6796
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'right'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g6803
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6385
g6753
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vy
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.91659149587576394
sg34
g753
(S'\x07\xdf\x07\n\x12\n\x0c\x0b\x858'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6949
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'right'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6959
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6957
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6385
g6953
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vy
sS'block_loop.thisTrialN'
p8857
I0
sg39
F0.6666456644597929
sg34
g753
(S'\x07\xdf\x07\n\x12\n\x12\n\xe8\xf8'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g6766
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'left'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6770
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g6774
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6770
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6385
g6777
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vy
sS'block_loop.thisTrialN'
p8870
I0
sg39
F1.3332402964115317
sg34
g753
(S'\x07\xdf\x07\n\x12\n\x18\x06=\xa8'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g6889
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'left'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6899
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g6897
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6385
g6893
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vy
sS'block_loop.thisTrialN'
p8883
I0
sg39
F1.3997764262858254
sg34
g753
(S'\x07\xdf\x07\n\x12\n\x1e\x0b\xcb\x88'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g7250
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'left'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6723
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g7257
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vy
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.99995495454277261
sg34
g753
(S'\x07\xdf\x07\n\x12\n%\x03K\xc0'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6906
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'left'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6687
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6913
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6680
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6385
g6687
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vy
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.76658727642643498
sg34
g753
(S'\x07\xdf\x07\n\x12\n+\x03\xa1\xb0'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g6719
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'right'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6730
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g6727
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6723
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6385
g6730
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vy
sS'block_loop.thisTrialN'
p8922
I0
sg39
F0.79997736323275603
sg34
g753
(S'\x07\xdf\x07\n\x12\n1\x00\xa0('
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g6392
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'left'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vy
sS'block_loop.thisTrialN'
p8935
I0
sg39
F1.5332030626341293
sg34
g753
(S'\x07\xdf\x07\n\x12\n6\rY\xf8'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g6889
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'left'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6899
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g6897
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6385
g6893
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vy
sS'block_loop.thisTrialN'
p8948
I0
sg39
F1.5164527102533611
sg34
g753
(S'\x07\xdf\x07\n\x12\x0b\x01\x06\xc2x'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g6992
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'right'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g7002
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g7000
sS'block_loop.thisRepN'
p8958
I2
sg6383
g7002
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6385
g6996
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vy
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.8333232598779432
sg34
g753
(S'\x07\xdf\x07\n\x12\x0b\x07\x0f.\xb8'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g6443
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'right'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vy
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.83325968306235154
sg34
g753
(S'\x07\xdf\x07\n\x12\x0b\r\r#H'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g6490
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'right'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g6497
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vy
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.96658653517079074
sg34
g753
(S'\x07\xdf\x07\n\x12\x0b\x13\x0b\x13\xf0'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6554
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'left'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6565
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6562
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6385
g6565
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vy
sS'block_loop.thisTrialN'
p9000
I0
sg39
F1.6332008388708346
sg34
g753
(S'\x07\xdf\x07\n\x12\x0b\x19\x0b+`'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g7069
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'right'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6899
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g7076
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6899
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6385
g6893
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vy
sS'block_loop.thisTrialN'
p9013
I0
sg39
F0.83327051678134012
sg34
g753
(S'\x07\xdf\x07\n\x12\x0b \x06\x03\x10'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g7235
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'left'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g7242
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vy
sS'block_loop.thisTrialN'
p9026
I0
sg39
F1.2332208527404873
sg34
g753
(S'\x07\xdf\x07\n\x12\x0b&\x03\xf3\xb8'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g6460
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'left'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g6468
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vy
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.9832735958370904
sg34
g753
(S'\x07\xdf\x07\n\x12\x0b,\x08\x16P'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g6949
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'right'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6959
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g6957
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6385
g6953
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vy
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.76660979915686767
sg34
g753
(S'\x07\xdf\x07\n\x12\x0b2\x08l@'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g7052
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'left'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g7056
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g7060
sS'block_loop.thisRepN'
p9062
I2
sg6383
g7056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6385
g7063
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vy
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.74991047928415355
sg34
g753
(S'\x07\xdf\x07\n\x12\x0b8\x050 '
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g7022
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'right'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g7026
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g7030
sS'block_loop.thisRepN'
p9075
I2
sg6383
g7026
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6385
g7033
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vy
sS'block_loop.thisTrialN'
p9078
I0
sg39
F0.94999811835441506
sg34
g753
(S'\x07\xdf\x07\n\x12\x0c\x02\x01\xf0\x18'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6614
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'right'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6621
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6547
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6385
g6541
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vy
sS'block_loop.thisTrialN'
p9091
I0
sg39
F0.75002936507735285
sg34
g753
(S'\x07\xdf\x07\n\x12\x0c\x08\x01\xcc\xf0'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vy
sa(dp9099
g64
g65
sg43
I59
sg56
g57
sg58
Vn
sg42
I541
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp9100
g64
g65
sg43
I59
sg55
g11
sg56
g57
sg45
F1.71
sg42
I541
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I00
sg48
I25
sg47
g417
sg51
F30.41
sg46
F1.4999999999999998
sg66
g67
sg68
g69
sg50
I0
sg70
Vy
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I219300176
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00@\x9a\x99\x99?\n\xd7#>33\xb3?\x00\x00\x80?\xecQ8>\xecQ8>\xcd\xcc\xcc>\x00\x00\xc0?\xaeGa>\xecQ\xb8>\xb8\x1e\x85?H\xe1\xba?\xa4p\xbd?q=\n?\\\x8f\xc2?H\xe1\xfa?=\n\xd7?\x9a\x99\xd9?\xecQ8>\xcd\xccL>\\\x8f\xc2?\x14\xae\xc7?\x00\x00\x00@\n\xd7#>\x8f\xc2\xf5=\x9a\x99\x99>\x8f\xc2\xf5=H\xe1\xba?\n\xd7#>\xb8\x1e\x85>\xaeG\x01@\xcd\xcc\xcc=\x14\xae\xc7?\xecQ\xb8>)\\\x8f?\x00\x00\x80?\xa4p\xbd?\xaeGa>\x00\x00\xc0?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'o\x12)AT\xe3\xb5@u\x938@\xa2E(AD\x8b\x80@B`E@\xcb\xa1\xc9@\xd5xCA\x87\x16a@!\xb0j@\x0e-R@\x96C3@b\x10@@\xd5x\x9bA\xfc\xa9\x19@D\x8b\xb8@^\xba\xf9?!\xb0Z@^\xba\xb9?\xbaIt@\xaa\xf1\xa6@\xee|\xbf@\xbaI\xc4@\xee|w@\x98n\x96@w\xbe\x83@b\x10@@\x87\x16\xa9@\xaa\xf1jA\xdb\xf9\x1e@\xe9&Q@\xee|\xa7@\xc9vv@\xb6\xf3\xdd?!\xb0J@\xcb\xa1\x89@\xa2EXA\xdb\xf9.@!\xb0Z@\xdb\xf9\xee?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00`A\x00\x00\xc8A\x00\x00\x98A\x00\x00\x08B\x00\x00\xe0A\x00\x00\x14B\x00\x00PA\x00\x00\x00@\x00\x00pA\x00\x00\x10A\x00\x00\xa8A\x00\x00\xf0A\x00\x000A\x00\x00\x80?\x00\x00\xb0A\x00\x00\xe8A\x00\x00\x0cB\x00\x00\x04B\x00\x00\x00B\x00\x00\x80A\x00\x00\x88A\x00\x00\xd0A\x00\x00\x00A\x00\x00\x1cB\x00\x00@A\x00\x00\xc0A\x00\x00\xe0@\x00\x00\x80@\x00\x00@@\x00\x00\xd8A\x00\x00\xc0@\x00\x00\xa0A\x00\x00\xa0@\x00\x00\x18B\x00\x00 A\x00\x00\x10B\x00\x00\x00\x00\x00\x00\xb8A\x00\x00\x90A\x00\x00\xf8A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'ff\xa6?\x9a\x99\x99?\x9a\x99\xd9?\x9a\x99\xd9?33\xb3?\xcd\xcc\x8c?33\xb3?33\xf3?ff\xe6?\x00\x00\xc0?\xcd\xcc\x8c?ff\xa6?\xcd\xcc\xcc?\x9a\x99\xd9?ff\xe6?\x9a\x99\x99?\xcd\xcc\xcc?\x00\x00\x80?\xcd\xcc\xcc?\xcd\xcc\xcc?ff\xa6?\x00\x00\xc0?\x00\x00\xc0?\x00\x00\xc0?\x9a\x99\x99?\xcd\xcc\x8c?\x00\x00\xc0?ff\xe6?\xcd\xcc\xcc?\x00\x00\xc0?ff\xa6?\x00\x00\x00@ff\xe6?\x9a\x99\xd9?\xcd\xcc\x8c?\xcd\xcc\xcc?\x00\x00\xc0?\x9a\x99\xd9?33\xf3?33\xb3?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'$\x00\x00\x00\r\x00\x00\x00\x07\x00\x00\x00\x1c\x00\x00\x00\x1b\x00\x00\x00 \x00\x00\x00\x1e\x00\x00\x00\x1a\x00\x00\x00\x16\x00\x00\x00\t\x00\x00\x00"\x00\x00\x00\x0c\x00\x00\x00\x18\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00&\x00\x00\x00\x02\x00\x00\x00\x1f\x00\x00\x00\n\x00\x00\x00\x0e\x00\x00\x00%\x00\x00\x00\x19\x00\x00\x00\x01\x00\x00\x00\x15\x00\x00\x00\x1d\x00\x00\x00\x04\x00\x00\x00\x0f\x00\x00\x00\x0b\x00\x00\x00\'\x00\x00\x00\x12\x00\x00\x00\x11\x00\x00\x00\x03\x00\x00\x00\x10\x00\x00\x00#\x00\x00\x00\x05\x00\x00\x00!\x00\x00\x00\x17\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g201
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g278
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g236
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g341
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g299
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g362
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g194
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g117
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g208
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g166
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g250
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g313
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g180
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g110
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g257
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g306
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g348
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g334
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g327
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g215
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g222
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g285
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g159
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g376
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g187
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g271
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g152
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g131
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g124
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g292
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g145
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g243
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g138
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g369
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g173
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g355
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g103
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g264
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g229
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g320
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I219300176
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xc0@33\xa3@\x00\x00\xc0@33\x83@33\x93@ff\xa6@\x00\x00\x80@33\xa3@\x00\x00\xc0@33\xa3@\x00\x00\x90@\x9a\x99\x99@33\xa3@\xcd\xcc\x9c@\x9a\x99\x99@\x00\x00\x80@\x00\x00\xc0@33\xa3@\xcd\xcc\xbc@\x00\x00\xc0@33\xa3@ff\xa6@\x00\x00\xc0@\xcd\xcc\x9c@\x00\x00\xc0@\x00\x00\xa0@\x9a\x99\xa9@ff\x96@\x00\x00\xc0@\x00\x00\xc0@33\xa3@\x00\x00\xc0@\x9a\x99\x89@ff\xa6@\x00\x00\xa0@\x9a\x99\x99@\x00\x00\xb0@\xcd\xcc\xac@\xcd\xcc\xac@ff\xb6@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'\xe6\x0f\x11@\xaa\x11\x99@m\xf5\xbf?\xbc~\x17@\x1c\x00\x0cA#\x9b9@\xe7%\x9a@\xccw\x97@\xcb\xe2\x9d?\xfc\xbb\x9b@w\x02\xb8@l\xdf\x1d@\x8cz\xb7?\xec\x99\xa1@\xbc\x11\xc9@\x99D\xcc@\xf1\x9a\x99?\xf2\x13\xf1?\x06F\xe4?\x7f\x8e\x88?\xecE\xa4?\xa6\xc0\x9b?\xce\x98)@\xd1\x9e\xd9?C\xa5Y?%D\xa4?\xebg\xa6?!\xadZ@J6s?U\xce\x8c?\x0e\x04@?V\xe8\xee?|V\xd5?A4\xb3?iw\x97?\xd5W\x95?\xb9F\x84?Yg\xa6?#\xf2\x8e?\x8063@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'\xcd\xccl@ffF@33s@\x9a\x99y@ffF@ff\x86@ff\x86@\xcd\xccL@ffF@\x9a\x99Y@\xcd\xccL@ff\x86@333@\x00\x00\x80@ff\x86@33S@\xcd\xccl@fff@\x00\x00`@\x00\x00`@33S@\x00\x00\x80@\x00\x00`@\xcd\xccL@\x9a\x99Y@\x00\x00`@333@\x9a\x99Y@ffF@\x9a\x999@\xcd\xcc,@\xcd\xccl@\xcd\xccL@\x00\x00`@\x00\x00@@33\x83@\x9a\x999@ff\x86@\xcd\xccl@33s@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'@\xa8\x94\r\xa0i8\r\x80`8\r`Q\xb5\x04\x00Q\xb5\x04 P\xb5\x04\xe0e8\r`k8\r`P\xb5\x04\x00k8\r S\xb5\x04\x80Q\xb5\x04\xc0P\xb5\x04\xa0j8\r\x80R\xb5\x04\xa0P\xb5\x04\x807:\r\x00=:\r\xe0;:\r\x806:\r\x00<:\r\x803:\r`6:\r\xc06:\r@P\xb5\x04\xa05:\r\xa06:\r@<:\r\x00;:\r\x80T\xb5\x04`\xaa\x94\r\xe0\xab\x94\r@\xaa\x94\r\xe0\xa4\x94\r\xe0\xaa\x94\r\xe0\xa7\x94\r@\xa4\x94\r\xa0\xa7\x94\r \xa5\x94\r\xa0\xab\x94\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'T\xe3\x8d@/\xdd\\@\xbaI4@\xa8\xc6\x1b@\xfc\xa9I@b\x10 @\xbaI$@\xa8\xc6\xbb?\x83\xc0:@B`\xd5?+\x87\xa6?\x96C#@^\xba\xf9?\xb6\xf3\xbd?u\x93\xc8?\xa0\x1ao?\xf0\xa7f?P\x8dw?\xc5 \xa0?\x83\xc0*?\xb6\xf3]?\xa6\x9bD?\x83\xc0j?^\xba\xd9?\xd3M"?\xf0\xa7f?\xe9&\x91?\x83\xc0\x8a?\xd3M"?\xb6\xf3]?P\x8d\x97?\x06\x81\x15?\x0e-\xa2?\xd3Mb?+\x87\x86?u\x93\x88?\xf8S\xb3?\xf6(|?m\xe7;?9\xb4H?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I219300176
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'Hu\xc0\r`v\xc0\r\x98u\xc0\rPf\xab\rHu\xc0\r\xa0\xfa\xbf\r\xb0f\xab\r`v\xc0\r\xe8u\xc0\r\x80f\xab\r\x98u\xc0\r\xc0u\xc0\r\xe8u\xc0\r\x80f\xab\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'\xc8 \xeb\x04h#\xeb\x04\xe8!\xeb\x04\xd8+\xeb\x04@-\xeb\x04\xb0,\xeb\x04\x10!\xeb\x04(*\xe4\x04\xe8$\xe4\x04(-\xe4\x04\xc8&\xe4\x04\x08&\xe4\x04P \xe4\x04H%\xe4\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g778
sg83
g779
sg84
g783
sg85
g784
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g744
sg83
g789
sg84
g749
sg85
g793
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g778
sg83
g798
sg84
g783
sg85
g802
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g807
sg83
g808
sg84
g812
sg85
g813
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g756
sg83
g818
sg84
g761
sg85
g822
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g827
sg83
g828
sg84
g832
sg85
g833
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g838
sg83
g839
sg84
g843
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g767
sg83
g849
sg84
g772
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g807
sg83
g858
sg84
g812
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g827
sg83
g867
sg84
g832
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g838
sg83
g876
sg84
g843
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I219300176
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I219300176
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'\x80\x84\xc2\r v\xc2\r\x90\x90\xc2\r\xd0\x84\xc2\r v\xc2\r\xf8\x84\xc2\r\xd0\x84\xc2\r \x85\xc2\rH\x85\xc2\r@\x84\x93\r \x90\xc2\r\x00\x91\xc2\r`\x80\x93\r \x90\xc2\r\x88\x86\xc2\r v\xc2\r8\x91\xc2\r@\x84\x93\rPv\xc2\r@\x84\x93\r8\x91\xc2\r\x80v\xc2\rX\x90\xc2\rPv\xc2\rp\x85\xc2\rH\x85\xc2\r\xb0v\xc2\r v\xc2\r\xa0\x81\x93\r@\x84\x93\rPv\xc2\r\xd0w\xc2\rPv\xc2\rX\x90\xc2\rH\x85\xc2\r`\x80\x93\r\x98\x85\xc2\r`\x80\x93\r\x80\x84\xc2\rH\x85\xc2\r \x85\xc2\r\xd0w\xc2\r\xa8\x84\xc2\r\xd0\x84\xc2\rPv\xc2\r`\x86\xc2\r v\xc2\r`\x80\x93\r\x80\x84\xc2\r@\x84\x93\r\xd8\x86\xc2\r\x90\x90\xc2\rH\x85\xc2\r \x90\xc2\rp\x85\xc2\r \x90\xc2\r\x10w\xc2\r\xe8\x85\xc2\r\xc0\x85\xc2\rp\x85\xc2\r\xa0w\xc2\rp\x85\xc2\r \x85\xc2\r\x80\x84\xc2\r@\x84\x93\r\x80v\xc2\r\xc0\x85\xc2\r v\xc2\r\xa0\x81\x93\rpw\xc2\r\xa0\x83\x93\rPv\xc2\r\x98\x85\xc2\r\xb0v\xc2\r \x90\xc2\rX\x90\xc2\r\xc0\x85\xc2\r v\xc2\r\xe8\x85\xc2\r\xa0\x83\x93\r\x80\x84\xc2\r\xa0\x81\x93\r\xa8\x84\xc2\rp\x85\xc2\r\xa8\x84\xc2\r\xd8\x86\xc2\rp\x85\xc2\r\xa8\x84\xc2\rX\x90\xc2\r8\x86\xc2\r\x98\x85\xc2\r\xd0\x84\xc2\r\xb0v\xc2\r\x80\x84\xc2\r\xd0w\xc2\r\xa0\x81\x93\r\xb0\x86\xc2\r\x10w\xc2\r\xa0\x83\x93\r\x88\x86\xc2\r v\xc2\r \x85\xc2\rH\x85\xc2\rX\x90\xc2\r\x80v\xc2\r\xa0\x83\x93\r\xb0v\xc2\r\xa8\x84\xc2\r\xc8\x90\xc2\rp\x91\xc2\r\xc0\x85\xc2\r\xb0v\xc2\r\xe8\x85\xc2\r`\x80\x93\r\xe8\x85\xc2\r\x10w\xc2\r\xa0\x83\x93\r\xf8\x84\xc2\r`\x80\x93\rX\x90\xc2\r\x80\x81\x93\r\xa0\x81\x93\r0x\xc2\r\x80\x84\xc2\r \x85\xc2\r\x98\x85\xc2\rPv\xc2\r@\x84\x93\r\xd8\x86\xc2\r\x80v\xc2\r\xe0\x85\x93\rp\x85\xc2\r\x80v\xc2\r\xa0\x83\x93\r \x85\xc2\r \x90\xc2\r\x80\x84\xc2\r\xe8\x85\xc2\rpw\xc2\r\xa0\x81\x93\r\xa8\x84\xc2\rp\x85\xc2\r\x98\x85\xc2\r\xb0v\xc2\r\x98\x85\xc2\r`\x80\x93\r`\x86\xc2\r\xa0\x83\x93\r\x80\x84\xc2\r\xe8\x85\xc2\rH\x85\xc2\rX\x90\xc2\r\xe8\x85\xc2\r\xf8\x84\xc2\r \x85\xc2\r\x98\x85\xc2\r v\xc2\r\xd0\x84\xc2\rX\x90\xc2\rPv\xc2\r \x85\xc2\r\xa8\x84\xc2\r\xc0\x85\xc2\r\xa8\x84\xc2\r\xe8\x85\xc2\r\xd0\x84\xc2\r\x98\x85\xc2\r\xa0\x81\x93\r@\x84\x93\r\xb0v\xc2\r\x88\x86\xc2\rX\x90\xc2\r\xb0v\xc2\r\xf8\x84\xc2\r\xe8\x85\xc2\r`\x86\xc2\r\xb0v\xc2\rPv\xc2\r\xf8\x84\xc2\r\xa0\x83\x93\r\xa0\x81\x93\r\x80v\xc2\r`\x80\x93\r \x90\xc2\r`\x80\x93\r v\xc2\r@\x84\x93\r \x85\xc2\r\xf8\x84\xc2\r \x90\xc2\r\x98\x85\xc2\r\x00\x91\xc2\r\xa0\x81\x93\r\xc0\x85\xc2\r\xf8\x84\xc2\r\xb0v\xc2\r\xd0\x84\xc2\r\x80v\xc2\r\xd8\x86\xc2\r@w\xc2\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'\x00k\x92\r\x00l\x92\r\x00\x8b\xab\r\xc0\x8c\xab\r\xc0\x87\xab\r\xa0\x86\xab\r@\x8c\xab\r\x00\x8c\xab\r`\x87\xab\r\xe0\x8b\xab\r`\x8c\xab\r\xc0\x81\xab\r@\x8d\xab\r\xe0\x8c\xab\r`j8\r\xa0\xb1:\r\x00\x8a\xab\r \x8b\xab\r\xa0\x8c\xab\r@\x8b\xab\r\x80\x8b\xab\r\xe0\x8d\xab\r\x80\x86\xab\r\xe0\x88\xab\r \x8e\xab\r\xc0\x8d\xab\r\x00=\x95\r\xc0<\x95\r@;\x95\r@:\x95\r\x80<\x95\r\x00;\x95\r\x80=\x95\r\xc0:\x95\r\xc0;\x95\r\xa06\x95\r@=\x95\r\xe06\x95\r@<\x95\r\xa0\x91\x95\r\x00?\x95\r\x00:\x95\r@6\x95\r\x006\x95\r`5\x95\r\xc09\x95\r 7\x95\r\xc0>\x95\r\xc07\x95\r\x80;\x95\r@?\x95\r\x80:\x95\r\xc08\x95\r\x806\x95\r\x808\x95\r`0\x95\r\xa00\x95\r@0\x95\r\x009\x95\r\x00<\x95\r\xc05\x95\r\x00>\x95\r\x800\x95\r@9\x95\r@8\x95\r@>\x95\r`7\x95\r\x001\x95\r\xc00\x95\r\xe00\x95\r\x809\x95\r 0\x95\r\x80>\x95\r e\x92\r \xa2\x94\r\xc0\xae\x94\r@\xae\x94\r \xae\x94\r\xa0\xa2\x94\r\x00\xaf\x94\r`\xae\x94\r`\xaf\x94\r\x80\xaf\x94\r@\xa2\x94\r\x00\xac\x94\r\xa0\xaf\x94\r`\xa0\x94\r\xe0\xaf\x94\r\x00\xa2\x94\r\x00\xa1\x94\r`\xa1\x94\r \xaf\x94\r\xa0\xa1\x94\r\x80\xa1\x94\r`\xa2\x94\r\xc0\xa1\x94\r\xa0\xae\x94\r\x80\xa2\x94\r\x00\xa3\x94\r`\xa3\x94\r\x80\xa3\x94\r \xa1\x94\r\xc0\xa2\x94\r@\xaf\x94\r\xa0\xa3\x94\r\xe0\xae\x94\r\xe0\xa2\x94\r\xe0\xa1\x94\r\xc0\xaf\x94\r\x008\x95\r\x00\xa4\x94\r@\xa3\x94\r@\xa1\x94\r\xe0\xa3\x94\r\xc0\x00\xb6\x04 \xa3\x94\r \xa4\x94\r\x80\xae\x94\r\xc0=\x95\r\xc0\xa3\x94\r\x00\x0c\xb6\x04\x00\x08\xb6\x04\x80\xac\x94\r`\xd5\x93\r\xc0\xdf\x93\r\xe0\xde\x93\r \xa6\x94\r\x80\xd5\x93\r\xc0\xf8\xc5\x04\x00\xde\x93\r\x80\x8c\xab\r\xa0\x8a\xab\r\x00\x8f\xab\r\xe0\x8e\xab\r\x00\x8e\xab\r\xc0\x8b\xab\r \x8f\xab\r \x8c\xab\r\xc0\x88\xab\r \x8d\xab\r@\x8e\xab\r`\x8b\xab\r\xa0\x8e\xab\r`\x8a\xab\r@\x8f\xab\r\x80\x8d\xab\r\xe0\x8f\xab\r\xa0\x8d\xab\r\x80\x8f\xab\r`\x8f\xab\r`\xdd\x93\r\x80e\x92\r\xc0\xe17\r`\x8e\xab\r\x80\xe07\r\x80\x8e\xab\r\xa0\xe37\r\x00\xe47\r\x00\x8d\xab\r\x80\x05\xb7\x04`\x05\xb7\x04\xc0\x04\xb7\x04\xe0\x05\xb7\x04\xa0\x05\xb7\x04\x00\x05\xb7\x04\xc0\x06\xb7\x04\xa0\xbf:\r\xa0\x00\xb7\x04@\x92\xbb\x1f \x92\xbb\x1f\xc0\x90\xbb\x1f@\x91\xbb\x1f\x00\x92\xbb\x1f\xe0\x90\xbb\x1f \x90\xbb\x1f\xc0\x92\xbb\x1f\xa0\x92\xbb\x1f\x80\x92\xbb\x1f`\x92\xbb\x1f`\x91\xbb\x1f \x91\xbb\x1f\xe0\x92\xbb\x1f\x00\x93\xbb\x1f`\x93\xbb\x1f@\x93\xbb\x1f\x80\x90\xbb\x1f\x80\x93\xbb\x1f\xe0\x93\xbb\x1f\xc0\x93\xbb\x1f\xe0\x91\xbb\x1f@\x94\xbb\x1f \x94\xbb\x1f\x00\x89\xab\r\xa0\x81\xab\r \x88\xab\r`\x8d\xab\r\x00\x86\xab\r\x00\x88\xab\r\xe0\x80\xab\r\xc0\x8a\xab\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\xa2\x93\xd9?z\xcb\xcc?l\x00\xc0?\xc8\xed\xee?R\x13\xb1?g\x8f\xd9?3\x98)@,1\x13@\xc4\xc9\xec?Z\x00\x00@\x18\xa9\n@q\xa7\xaa?\xa3\x97\x19@\xc9\xfc\xdf?\xe6\x8a\xc8?\xd80\xd3?-[\xa6?\xacu\xb7?6A\xe4?7\xbb\x0b@\xea\x1d\xc2?%\xa9\n@g\x88\xc8?\x053\xd3?`\x1e\x82?\xaaT\xb5?\x9ev\x07@_c\x86?\\d\xa6?]\xb2\xea?\xb0\xed\x8e?\x8a\xb9\xbb?\xaa\xaa\xaa?F\x89\x88?J\xac\x8a?\xed\x1f\xc2?\x8e\xb8\x9b?\xa0\x1f\xe2?\xf1^f?\x0eQ\xc1?\xb9\x88\x08@FS\xd5?11\xb3?\xcf\x85\xa8?\xae{\x97?\xc2\xdc\x9d?_\xb9\xbb?\xb7\x0e\xf1?UA\xc4?\x98G\xa4?\xb4\x97\t@\x0c\x88\x88?\x01\x87\x08@xU\x95?m\x96\x99?\xef>D?!\x97j?\x9d\xed\xae?\x7f\xfa\xff?\x02\x93Y?\xc8\xb8\x9b?R\x1b\x82?kA\x84?\xff\'s?#w\x97?\xb4\xa8\n@\x8d \x12@x\xfa\x7f?\x90\xdb\x9d?\xcb#\x82?Q\x96Y?a\xef\x8e?Bcf?*\xb7{?\x0e\xb5;?p\xc8\xbb?5\xa7\xea?\xb4\xda]?T\xa7\xea?\x97t\xf7?Oq\x86?~\xd5]?\x9f\x0c\xf1?8\xf3\x7f?w\xca\xcc?5\xab\x8a?TOU?\xbd\xa9\x8a?\x9dB\x84?\xa0\xa9*?\xcd\xb5{?\xdb\xba\xfb?\xd7\x1e\x82?\xc9\xe8n?\x86\xa9*@\xa4\xb8;?\xe2\xbc\x9b?\x1c\x9e\xaa?\x8d\xcc\xcc?A\x87\xe8?4(s?\x9c3\x93?iVU?\xc3\xb5{?nw\x17@f\xedn?a\xceL?^\xdd\x9d?\xc9\xacj?\x87ED?\x18\x88\xe8?\xde\xb0Y?\xa7\xc8\xcc?\x0cw\xb7?Kef?\x0c\x94j?|;3?\xadSf?\r\xda\xbd?- \xa2?Q\xec\x8e?\x10\xed\x8e?\xa9\x97Y?\xb7\x83H?\xe3\xebn?\x0f\xda\xdd?\xa3\x89H?L\xean?\xfbd\x16@i\x10!@9\xcbL?\xa0\xe9n?3\x85\xc8?\x1c\rQ?e\x83H?\xe1\xdd\xfd?\x10D\xe4?\x04#\xa2?\xa6cf?\xc7\xfd\x7f?Ne\x86?\x06c\x86?\xd8R\xb5?.SU?573?b\xe9n?N\xcd\x8c?\x95/3?j\xba;?\x036s?\xa1O\xd5?\xc3\x9aY?\x15)3?\xaf\x02Q?\xe9\xd8]?\xe4\xa7*?\xfcd\x86?u\x8b\xa8?k\xcaL?\x81<D?Tpw?\x88!\x82?3"\x12@y\xd9]?\xd5\xc8\x8c?r\xeen?L\xeen?\x1a\xe9.?\x14\x9bY?b\xfd??\x03\x12\xd1?\x02;D?;z7?\xe0\x0c"?\xee\x95\x88?\x8e\x11\xd1?\xb5\xb9;?\x9btw?\x1cb7?\xe6\xdd\x1d?\xf7ND?\xfeS%@\x17\x0e\x91?mgf?\x00VU?C3\x93?\x04\xd1L?\xb3\xee\x8e?b>U?H53?\xfa\x83H?\x0e\xec.?\x10Y\x15?a\xff\x0f@/\x0eb?bUU?\x7f4\x93?\xbd\xde]?*\x96\xb9?\rb\x86?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'`"\xe4\x048#\xe4\x04\x88!\xea\x04\x18.\xea\x04\xe0)\xea\x04\xe8\'\xea\x04 #\xea\x04\xf8)\xea\x040%\xea\x04\xb0,\xea\x04\xf8,\xea\x04\x80 \xea\x048&\xea\x04\xf0%\xea\x04\xd0!\xea\x04\xb0&\xea\x048)\xea\x04\xa8"\xea\x04\x98)\xea\x04\xd8%\xea\x04\x00(\xea\x04x(\xea\x04@!\xea\x04h&\xea\x04\x80/\xea\x04\x90.\xea\x04H.\xea\x04\xc0"\xea\x04\x98/\xea\x04\x90+\xea\x04\xf0(\xea\x04\xc8 \xea\x04\x98 \xea\x04P&\xea\x04@*\xea\x04\x88*\xea\x04h \xea\x04`+\xea\x04\xb8-\xea\x04\xa8.\xea\x04\x80)\xea\x04\xd8"\xea\x04\xb8*\xea\x04\x10\'\xea\x04\x00.\xea\x04\xc0.\xea\x04\xa0!\xea\x04`(\xea\x04\xc8/\xea\x04\x98&\xea\x04 &\xea\x04@\'\xea\x04\xd8.\xea\x04\xf8#\xea\x04\xb0/\xea\x04\x80&\xea\x04\x88-\xea\x04  \xea\x04\xf8&\xea\x04\xa0$\xea\x04\xd0-\xea\x04P/\xea\x04h)\xea\x04\x08/\xea\x040(\xea\x04\xb0)\xea\x040"\xea\x04X-\xea\x04(-\xea\x04p\'\xea\x04\xe8-\xea\x04\x80#\xea\x04\xe8*\xea\x04\xe0&\xea\x04\x18+\xea\x04x+\xea\x040.\xea\x048/\xea\x04\xc8&\xea\x04\x98,\xea\x04\xa0-\xea\x04(!\xea\x04\xa8+\xea\x04X*\xea\x048 \xea\x04\xa0\'\xea\x04X\'\xea\x04\xe0#\xea\x04@$\xea\x04 )\xea\x04\x00+\xea\x04\x10!\xea\x04\x80,\xea\x04\xd0\'\xea\x04P)\xea\x04p$\xea\x04`.\xea\x04\x90"\xea\x04\xd0*\xea\x040+\xea\x04x%\xea\x04\xc8,\xea\x04\xe8$\xea\x04\xe8DP\x02X\xf7a\x03 \xfca\x03\xc8\x0c\x07\x05\x10\r\x07\x05\x00\x0e\x07\x05\xa8\x0e\x07\x05\x10\x01\x07\x05\x00\x08\x07\x058\x0f\x07\x05\xf0\x0e\x07\x05\xb0\x0c\x07\x05`\x0b\x07\x058&\xeb\x04\xc8#\xeb\x04\xa0\'\xeb\x04\xa8(\xeb\x04\x98#\xeb\x04\xf8#\xeb\x04\x08#\xeb\x04\xd0\'\xeb\x04\xa8"\xeb\x04\xd0!\xeb\x04p$\xeb\x04\xc0%\xeb\x04\xe8*\xeb\x04\xb0#\xeb\x048#\xeb\x04\xc0+\xeb\x04\x98/\xeb\x04\x08)\xeb\x04\xe8\'\xeb\x04\x98)\xeb\x04\xf0\x0e\xf3\x04`\x05\xf3\x04\x90\x0b\xf3\x04\xa8\x0e\xf3\x04p-\xea\x04\xf0+\xea\x04 ,\xea\x04h,\xea\x04H%\xea\x04\xa8%\xea\x04x"\xea\x04\x18"\xea\x04\x08&\xea\x04P \xea\x04\x10$\xea\x048#\xea\x04\x98#\xea\x04\xb0 \xea\x04\x00"\xea\x04\x18%\xea\x04\xc8#\xea\x04H"\xea\x04\x88$\xea\x04p!\xea\x04\xb8!\xea\x04\xb8\'\xea\x04\xa0*\xea\x04\xd8(\xea\x04`%\xea\x04\xe0 \xea\x04\xf0"\xea\x04P#\xea\x04\x88\'\xea\x04H(\xea\x04X!\xea\x04\xb8$\xea\x04\xc0%\xea\x04h#\xea\x04\x08,\xea\x04\xc0(\xea\x04\xd8+\xea\x04p*\xea\x04\xc8)\xea\x04($\xea\x04\xe0,\xea\x04\x00%\xea\x04\xe8!\xea\x04X$\xea\x04\x08)\xea\x04(*\xea\x04h/\xea\x04\x08#\xea\x04\xf0.\xea\x04H+\xea\x048,\xea\x04\x10-\xea\x040.\xeb\x04\x80 \xeb\x04\xf0(\xeb\x04X\'\xeb\x04\x80#\xeb\x04\x88!\xeb\x04@!\xeb\x04\x00(\xeb\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g943
sg895
g933
sg909
g937
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g984
sg895
g980
sg909
g991
sg904
g988
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g954
sg895
g997
sg909
g961
sg904
g1004
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g1016
sg895
g1012
sg909
g1023
sg904
g1020
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1033
sg895
g1029
sg909
g1040
sg904
g1037
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1050
sg895
g1046
sg909
g1057
sg904
g1054
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1067
sg895
g1063
sg909
g1074
sg904
g1071
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1090
sg895
g1080
sg909
g1084
sg904
g1088
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g1101
sg895
g1097
sg909
g1108
sg904
g1105
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1067
sg895
g1114
sg909
g1074
sg904
g1121
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g1033
sg895
g1129
sg909
g1040
sg904
g1136
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g1167
sg895
g1157
sg909
g1161
sg904
g1165
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1050
sg895
g1174
sg909
g1057
sg904
g1181
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1193
sg895
g1189
sg909
g1200
sg904
g1197
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1050
sg895
g1046
sg909
g1057
sg904
g1054
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1167
sg895
g1219
sg909
g1161
sg904
g1226
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1238
sg895
g1234
sg909
g1245
sg904
g1242
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g1255
sg895
g1251
sg909
g1262
sg904
g1259
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1193
sg895
g1189
sg909
g1200
sg904
g1197
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1167
sg895
g1157
sg909
g1161
sg904
g1165
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1033
sg895
g1029
sg909
g1040
sg904
g1037
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1311
sg895
g1307
sg909
g1318
sg904
g1315
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g920
sg895
g1324
sg909
g927
sg904
g1331
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1343
sg895
g1339
sg909
g1350
sg904
g1347
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g1050
sg895
g1174
sg909
g1057
sg904
g1181
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1193
sg895
g1189
sg909
g1200
sg904
g1197
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1238
sg895
g1382
sg909
g1245
sg904
g1389
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1193
sg895
g1397
sg909
g1200
sg904
g1404
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1255
sg895
g1251
sg909
g1262
sg904
g1259
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g1033
sg895
g1129
sg909
g1040
sg904
g1136
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1101
sg895
g1438
sg909
g1108
sg904
g1445
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1457
sg895
g1453
sg909
g1464
sg904
g1461
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1101
sg895
g1438
sg909
g1108
sg904
g1445
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1033
sg895
g1129
sg909
g1040
sg904
g1136
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g1016
sg895
g1509
sg909
g1023
sg904
g1516
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g1238
sg895
g1234
sg909
g1245
sg904
g1242
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g943
sg895
g933
sg909
g937
sg904
g941
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g954
sg895
g997
sg909
g961
sg904
g1004
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1193
sg895
g1397
sg909
g1200
sg904
g1404
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g954
sg895
g997
sg909
g961
sg904
g1004
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g920
sg895
g1324
sg909
g927
sg904
g1331
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1101
sg895
g1097
sg909
g1108
sg904
g1105
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g900
sg895
g1615
sg909
g910
sg904
g1622
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1050
sg895
g1174
sg909
g1057
sg904
g1181
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g1653
sg895
g1643
sg909
g1647
sg904
g1651
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g943
sg895
g1660
sg909
g937
sg904
g1667
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g1033
sg895
g1029
sg909
g1040
sg904
g1037
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g1067
sg895
g1114
sg909
g1074
sg904
g1121
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g1167
sg895
g1219
sg909
g1161
sg904
g1226
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1067
sg895
g1063
sg909
g1074
sg904
g1071
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g984
sg895
g1727
sg909
g991
sg904
g1734
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g1746
sg895
g1742
sg909
g1753
sg904
g1750
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1653
sg895
g1643
sg909
g1647
sg904
g1651
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g1167
sg895
g1157
sg909
g1161
sg904
g1165
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1193
sg895
g1397
sg909
g1200
sg904
g1404
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1167
sg895
g1157
sg909
g1161
sg904
g1165
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g1016
sg895
g1509
sg909
g1023
sg904
g1516
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g900
sg895
g1615
sg909
g910
sg904
g1622
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1050
sg895
g1046
sg909
g1057
sg904
g1054
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g1238
sg895
g1382
sg909
g1245
sg904
g1389
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g1653
sg895
g1643
sg909
g1647
sg904
g1651
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g920
sg895
g1324
sg909
g927
sg904
g1331
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g1343
sg895
g1339
sg909
g1350
sg904
g1347
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1067
sg895
g1114
sg909
g1074
sg904
g1121
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1090
sg895
g1915
sg909
g1084
sg904
g1922
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1193
sg895
g1397
sg909
g1200
sg904
g1404
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1457
sg895
g1943
sg909
g1464
sg904
g1950
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1311
sg895
g1958
sg909
g1318
sg904
g1965
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1067
sg895
g1063
sg909
g1074
sg904
g1071
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1255
sg895
g1986
sg909
g1262
sg904
g1993
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g1653
sg895
g1643
sg909
g1647
sg904
g1651
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g1746
sg895
g2027
sg909
g1753
sg904
g2034
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1090
sg895
g1915
sg909
g1084
sg904
g1922
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g900
sg895
g1615
sg909
g910
sg904
g1622
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g1343
sg895
g2068
sg909
g1350
sg904
g2075
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g943
sg895
g1660
sg909
g937
sg904
g1667
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1167
sg895
g1219
sg909
g1161
sg904
g1226
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g943
sg895
g933
sg909
g937
sg904
g941
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1653
sg895
g2122
sg909
g1647
sg904
g2129
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1167
sg895
g1219
sg909
g1161
sg904
g1226
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g943
sg895
g1660
sg909
g937
sg904
g1667
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1255
sg895
g1986
sg909
g1262
sg904
g1993
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1457
sg895
g1943
sg909
g1464
sg904
g1950
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g1311
sg895
g1958
sg909
g1318
sg904
g1965
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g900
sg895
g1615
sg909
g910
sg904
g1622
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g1238
sg895
g1234
sg909
g1245
sg904
g1242
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1343
sg895
g1339
sg909
g1350
sg904
g1347
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1101
sg895
g1438
sg909
g1108
sg904
g1445
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g984
sg895
g1727
sg909
g991
sg904
g1734
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g1090
sg895
g1915
sg909
g1084
sg904
g1922
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1033
sg895
g1029
sg909
g1040
sg904
g1037
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g920
sg895
g1324
sg909
g927
sg904
g1331
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g1016
sg895
g1012
sg909
g1023
sg904
g1020
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1033
sg895
g1129
sg909
g1040
sg904
g1136
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1255
sg895
g1986
sg909
g1262
sg904
g1993
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g1238
sg895
g1382
sg909
g1245
sg904
g1389
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g1090
sg895
g1080
sg909
g1084
sg904
g1088
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1311
sg895
g1307
sg909
g1318
sg904
g1315
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g943
sg895
g933
sg909
g937
sg904
g941
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1050
sg895
g1174
sg909
g1057
sg904
g1181
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1255
sg895
g1251
sg909
g1262
sg904
g1259
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1653
sg895
g2122
sg909
g1647
sg904
g2129
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g1311
sg895
g1958
sg909
g1318
sg904
g1965
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1746
sg895
g1742
sg909
g1753
sg904
g1750
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1101
sg895
g1438
sg909
g1108
sg904
g1445
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g1746
sg895
g2027
sg909
g1753
sg904
g2034
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g984
sg895
g1727
sg909
g991
sg904
g1734
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1090
sg895
g1915
sg909
g1084
sg904
g1922
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g984
sg895
g980
sg909
g991
sg904
g988
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1101
sg895
g1097
sg909
g1108
sg904
g1105
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1255
sg895
g1251
sg909
g1262
sg904
g1259
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g1746
sg895
g2027
sg909
g1753
sg904
g2034
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1343
sg895
g2068
sg909
g1350
sg904
g2075
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1457
sg895
g1453
sg909
g1464
sg904
g1461
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1016
sg895
g1509
sg909
g1023
sg904
g1516
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g1457
sg895
g1943
sg909
g1464
sg904
g1950
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g1193
sg895
g1189
sg909
g1200
sg904
g1197
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1050
sg895
g1174
sg909
g1057
sg904
g1181
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g1653
sg895
g1643
sg909
g1647
sg904
g1651
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1238
sg895
g1382
sg909
g1245
sg904
g1389
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1343
sg895
g2068
sg909
g1350
sg904
g2075
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1167
sg895
g1219
sg909
g1161
sg904
g1226
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1238
sg895
g1234
sg909
g1245
sg904
g1242
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1090
sg895
g1080
sg909
g1084
sg904
g1088
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1016
sg895
g1012
sg909
g1023
sg904
g1020
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1067
sg895
g1114
sg909
g1074
sg904
g1121
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g900
sg895
g1615
sg909
g910
sg904
g1622
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g1746
sg895
g2027
sg909
g1753
sg904
g2034
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1067
sg895
g1063
sg909
g1074
sg904
g1071
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1343
sg895
g1339
sg909
g1350
sg904
g1347
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g943
sg895
g933
sg909
g937
sg904
g941
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1167
sg895
g1157
sg909
g1161
sg904
g1165
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1457
sg895
g1943
sg909
g1464
sg904
g1950
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1311
sg895
g1307
sg909
g1318
sg904
g1315
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g1457
sg895
g1453
sg909
g1464
sg904
g1461
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1101
sg895
g1097
sg909
g1108
sg904
g1105
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g1090
sg895
g1080
sg909
g1084
sg904
g1088
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g1746
sg895
g1742
sg909
g1753
sg904
g1750
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g1033
sg895
g1129
sg909
g1040
sg904
g1136
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1255
sg895
g1251
sg909
g1262
sg904
g1259
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g1746
sg895
g1742
sg909
g1753
sg904
g1750
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g984
sg895
g1727
sg909
g991
sg904
g1734
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1016
sg895
g1012
sg909
g1023
sg904
g1020
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1457
sg895
g1943
sg909
g1464
sg904
g1950
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1255
sg895
g1986
sg909
g1262
sg904
g1993
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g1193
sg895
g1397
sg909
g1200
sg904
g1404
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1016
sg895
g1509
sg909
g1023
sg904
g1516
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g943
sg895
g1660
sg909
g937
sg904
g1667
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1653
sg895
g2122
sg909
g1647
sg904
g2129
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g943
sg895
g1660
sg909
g937
sg904
g1667
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1746
sg895
g2027
sg909
g1753
sg904
g2034
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1457
sg895
g1453
sg909
g1464
sg904
g1461
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g1343
sg895
g2068
sg909
g1350
sg904
g2075
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1050
sg895
g1046
sg909
g1057
sg904
g1054
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1311
sg895
g1958
sg909
g1318
sg904
g1965
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1033
sg895
g1029
sg909
g1040
sg904
g1037
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1255
sg895
g1986
sg909
g1262
sg904
g1993
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g1311
sg895
g1958
sg909
g1318
sg904
g1965
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g984
sg895
g980
sg909
g991
sg904
g988
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g1746
sg895
g1742
sg909
g1753
sg904
g1750
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g954
sg895
g997
sg909
g961
sg904
g1004
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g1311
sg895
g1307
sg909
g1318
sg904
g1315
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1193
sg895
g1189
sg909
g1200
sg904
g1197
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g984
sg895
g1727
sg909
g991
sg904
g1734
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1090
sg895
g1915
sg909
g1084
sg904
g1922
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1343
sg895
g1339
sg909
g1350
sg904
g1347
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1238
sg895
g1234
sg909
g1245
sg904
g1242
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g1101
sg895
g1438
sg909
g1108
sg904
g1445
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1067
sg895
g1063
sg909
g1074
sg904
g1071
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g1101
sg895
g1097
sg909
g1108
sg904
g1105
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g920
sg895
g1324
sg909
g927
sg904
g1331
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g1050
sg895
g1046
sg909
g1057
sg904
g1054
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g1016
sg895
g1012
sg909
g1023
sg904
g1020
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g984
sg895
g980
sg909
g991
sg904
g988
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1067
sg895
g1114
sg909
g1074
sg904
g1121
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1457
sg895
g1453
sg909
g1464
sg904
g1461
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1090
sg895
g1080
sg909
g1084
sg904
g1088
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1343
sg895
g2068
sg909
g1350
sg904
g2075
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g1653
sg895
g2122
sg909
g1647
sg904
g2129
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g984
sg895
g980
sg909
g991
sg904
g988
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g1311
sg895
g1307
sg909
g1318
sg904
g1315
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g954
sg895
g997
sg909
g961
sg904
g1004
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1238
sg895
g1382
sg909
g1245
sg904
g1389
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g1653
sg895
g2122
sg909
g1647
sg904
g2129
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1016
sg895
g1509
sg909
g1023
sg904
g1516
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I219300176
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'\xa0\xdf\x93\rhH9\r \x87\xab\r\x104\xc3\x1f0I9\r\xc0\x8e\xab\r@4\xc3\x1f@H9\r\xf0L9\r \x87\xab\r\xd0I9\r(L9\r\xf0\x9b9\r\xa0\x8f\xab\r\x08\x9d9\r\xc0\x8f\xab\r\x88K9\r\xc0\x8e\xab\r\x005\xc3\x1fp4\xc3\x1f\xf0L9\rp4\xc3\x1fhH9\r\x80I9\r\xc0\x8e\xab\r\x88K9\r\xa0\x8f\xab\r\xa04\xc3\x1f\xf05\xc3\x1f\xa04\xc3\x1f\x80I9\r@H9\r\xa0\x8f\xab\r\xc0\x8e\xab\r\xd0\x9c9\rHJ9\r\x10A9\r(L9\r\xc8G9\r(\x9c9\r\xc0\x8e\xab\r\x80I9\r\xf0L9\r@4\xc3\x1f\xd04\xc3\x1f\x10A9\r \x87\xab\r\x08N9\rhH9\r@H9\r\xa04\xc3\x1f(\x9c9\r\xf0\x9b9\r\x10A9\rHJ9\r\xf0L9\rXI9\r\xf0\x9b9\rpO9\r \x87\xab\r@4\xc3\x1f\x08N9\r@4\xc3\x1f\x80N9\r\x98\x9c9\r\x80N9\r\xa04\xc3\x1fp4\xc3\x1f \x87\xab\r\x98\x9c9\r\xd0\x9c9\r@H9\r\x10A9\r\xa04\xc3\x1f\xa0\x8f\xab\r\xf0\x9b9\r@H9\r\x80N9\r\xd0\x9c9\r\xd04\xc3\x1fHJ9\r\x80N9\r\x08N9\r(\x9c9\r@H9\r(\x9c9\rp4\xc3\x1f\xa0\xdf\x93\r\xc05\xc3\x1fp4\xc3\x1f\x88K9\rpO9\r\x80I9\r\xf0\x9b9\r \x87\xab\r@4\xc3\x1f\x80N9\r\xc0\x8f\xab\r@\x9d9\rHJ9\r@\x9d9\r\xa04\xc3\x1f@4\xc3\x1f\xf0\x9b9\r(\x9c9\r\x104\xc3\x1f\xd0I9\r\xd04\xc3\x1f\x80N9\r\xa04\xc3\x1f(L9\r\x10A9\r\xa0\x8f\xab\r\x08N9\r@\xde\x93\r05\xc3\x1f@\x9d9\r\x08\x9d9\rhH9\r\xf05\xc3\x1f\xf0L9\r\x08\x9d9\r\x80I9\r(\x9c9\r\xc0\x8f\xab\r\x104\xc3\x1f\xc0\x8e\xab\r\xd0\x9c9\r\x08N9\r \x87\xab\r\x905\xc3\x1f\x88K9\r\x104\xc3\x1f\xd0I9\r\x104\xc3\x1f\xc0\x8f\xab\r@4\xc3\x1f\x10A9\r\xc0\x8e\xab\r\x08N9\r\xd0I9\r\x905\xc3\x1f@H9\r\xd0I9\r`\x9c9\r\xa04\xc3\x1f\x80I9\r0I9\r\x80I9\r\x80N9\rhH9\r(\x9c9\r05\xc3\x1fHJ9\rp4\xc3\x1fhH9\rp4\xc3\x1f\xf0\x9b9\rHJ9\r@4\xc3\x1f\xd0I9\r\x80N9\rhH9\rp4\xc3\x1f\xc0\x8f\xab\r@H9\r\x88K9\rHJ9\r(L9\r\x08N9\r\xa0\x8f\xab\r`5\xc3\x1f\xd0I9\r\xf0L9\r\x10A9\r\xf0\x9b9\r\x88K9\r 6\xc3\x1fHJ9\r\xa0\xdf\x93\r\x08N9\r\xd0I9\r@4\xc3\x1f\x10A9\r`\x9c9\rpO9\r\xf0L9\r\xf0\x9b9\r\x80N9\rpO9\r\xc0\x8e\xab\r\x104\xc3\x1f@\xde\x93\r\xc0\x8f\xab\r\xf0L9\r\x104\xc3\x1fhH9\r\xa04\xc3\x1f 6\xc3\x1f\xc8G9\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S' \x97\xbb\x1f\xa0\x97\xbb\x1f\xe0\x95\xbb\x1f\xc0\x95\xbb\x1f@\x96\xbb\x1f \x96\xbb\x1f\xe0\x97\xbb\x1f\xa0\x96\xbb\x1f@\x97\xbb\x1f\xe0\x98\xbb\x1f@\x95\xbb\x1f\x80\x98\xbb\x1f`\x97\xbb\x1f\x80\x95\xbb\x1f\x00\x98\xbb\x1f \x98\xbb\x1f@\x98\xbb\x1f\xa0\x95\xbb\x1f\xc0\x96\xbb\x1f\x00\x99\xbb\x1f\x80\x99\xbb\x1f\xe0\x99\xbb\x1f\x00\x9a\xbb\x1f\xc0\x97\xbb\x1f\x00\x97\xbb\x1f\xc0\x99\xbb\x1f\x80\x96\xbb\x1f`\x98\xbb\x1f`\x96\xbb\x1f@\x99\xbb\x1f\xa0\x9a\xbb\x1f\xa0\x98\xbb\x1f \x99\xbb\x1f \x9a\xbb\x1f`\x9a\xbb\x1f \x9b\xbb\x1f\x80\x9b\xbb\x1f\xe0\x96\xbb\x1f@\x9b\xbb\x1f\xe0\x9b\xbb\x1f`\x99\xbb\x1f \x9c\xbb\x1f\x80\x9c\xbb\x1f@\x9c\xbb\x1f\xc0\x9c\xbb\x1f`\x9c\xbb\x1f\xa0\x9c\xbb\x1f@\x9a\xbb\x1f\x00\x96\xbb\x1f\x00\x9d\xbb\x1f\xe0\x9c\xbb\x1f\xc0\x9b\xbb\x1f`\x9d\xbb\x1f\x00\x9e\xbb\x1f@\x9d\xbb\x1f\xa0\x99\xbb\x1f\x80\x97\xbb\x1f\xa0\x9b\xbb\x1f\x80\x9a\xbb\x1f\x00\x9c\xbb\x1f\xc0\x9e\xbb\x1f\xe0\x9d\xbb\x1f \x9d\xbb\x1f\x80\x9e\xbb\x1f\xe0\x9e\xbb\x1f\xa0\x9e\xbb\x1f\xc0\x9a\xbb\x1f@\x9f\xbb\x1f \x9e\xbb\x1f`\x9e\xbb\x1f\x00\x9b\xbb\x1f\xe0\x9f\xbb\x1f\x80\x9f\xbb\x1f\xc0\x98\xbb\x1f@\x9e\xbb\x1f\xe0\x9a\xbb\x1f\x00\x9f\xbb\x1f`\x9b\xbb\x1f\xa0\x9f\xbb\x1f\x80\x9d\xbb\x1f\xc0\x9d\xbb\x1f\xa0\x9d\xbb\x1f\x80\x85\xab\r@\x8a\xab\r R\xe1\x1f\xa0P\xe1\x1f`Q\xe1\x1f\x00Q\xe1\x1f@P\xe1\x1f\xc0Q\xe1\x1f@R\xe1\x1f\xa0Q\xe1\x1f\xc0P\xe1\x1f\xa0R\xe1\x1f\xc0R\xe1\x1f\x80R\xe1\x1f`P\xe1\x1f\xe0R\xe1\x1f@S\xe1\x1f`S\xe1\x1f P\xe1\x1f\xa0S\xe1\x1f\x80S\xe1\x1f\xe0S\xe1\x1f\x00T\xe1\x1f@Q\xe1\x1f@T\xe1\x1f`T\xe1\x1f\x80T\xe1\x1f\x00S\xe1\x1f\x80P\xe1\x1f\xa0T\xe1\x1f\x00U\xe1\x1f\xe0T\xe1\x1f@U\xe1\x1f`U\xe1\x1f\x80U\xe1\x1f`R\xe1\x1f\xc0U\xe1\x1f\xa0U\xe1\x1f Q\xe1\x1f V\xe1\x1f\x00V\xe1\x1f\xc0T\xe1\x1f@V\xe1\x1f`V\xe1\x1f\xc0V\xe1\x1f\xc0S\xe1\x1f\xe0U\xe1\x1f\xe0V\xe1\x1f`W\xe1\x1f\x80V\xe1\x1f\xc0W\xe1\x1f\xe0Q\xe1\x1f\xe0P\xe1\x1f\x00R\xe1\x1f\xa0W\xe1\x1f\xe0W\xe1\x1f\x80Q\xe1\x1f`X\xe1\x1f@X\xe1\x1f\xa0X\xe1\x1f\x80X\xe1\x1f U\xe1\x1f\xc0X\xe1\x1f\xe0X\xe1\x1f\x00Y\xe1\x1f Y\xe1\x1f\x80Y\xe1\x1f`Y\xe1\x1f\xa0V\xe1\x1f\xe0Y\xe1\x1f\x00Z\xe1\x1f Z\xe1\x1f\xa0Z\xe1\x1f`Z\xe1\x1f@Z\xe1\x1f X\xe1\x1f\xc0Z\xe1\x1f@W\xe1\x1f\x00[\xe1\x1f\xe0Z\xe1\x1f@[\xe1\x1f [\xe1\x1f W\xe1\x1f`[\xe1\x1f`\x9f\xbb\x1f\xa0[\xe1\x1f\x80[\xe1\x1f\x00\\\xe1\x1f\xc0\\\xe1\x1f\x00W\xe1\x1f\xe0[\xe1\x1f\x80\\\xe1\x1f\xa0\\\xe1\x1f\x00]\xe1\x1f`]\xe1\x1f\xe0\\\xe1\x1f S\xe1\x1f`\x86\xab\r\xa0Y\xe1\x1f\xc0]\xe1\x1f \\\xe1\x1f\xe0]\xe1\x1f T\xe1\x1f@]\xe1\x1f\xc0[\xe1\x1f@^\xe1\x1f _\xe1\x1f\xc0^\xe1\x1f`\\\xe1\x1f\x00_\xe1\x1f\x80Z\xe1\x1f\xe0^\xe1\x1f ]\xe1\x1f ^\xe1\x1f\xa0_\xe1\x1f\xa0^\xe1\x1f\x80_\xe1\x1f\xc0_\xe1\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'!Yf?t\x0e\x91?\x14\xba;?Ibf?ur7?\x13\x04@?c\xfb??\xb2\xf5.?\xd9\xcd\x8c?\xb9\xa1*?\xef\xce]?M\x81\xf7?#\x83H?}ff?\x1ccf?\xcd\xe8n?\xdc\xd0\x1d?\x93\xbd;?\t\xd2]?utw?\xc0RU?\xdd\x0eQ?\x0c\x88\x88?\x99\xfe\x7f?\x1d\xdb]?E\xcb\xcc?\xde\xcaL?iA\xa4?\\G\x84?\x8c`f?\xb5\xean?\xffb&?he\x86?\xc2\xa5*?\xf2\xbd;?\r\x0f\xd1?&\xcc\x8c?~B\xa4?\xd10s?\xadGD?\xe2\xb6{?\x1c\xb5{?\xb5\x82H?\x9b\xccL?\x06\xedn?\x08\r\x80?\xe4\x0f\x91?\xdc\x06\xf1?\xdf\xfd??tCD?\x01\x99Y?\xa0\xb2;?\xb1\xe6n?\x02 b?\xf6\xc8L?HTU?\xb5\x99\xd9?:5s?\xe9b\xa6?\x00\xfc??<\xa9*?\\\xden?[\xdf\x1d?\x9c\xbb\xbb?e\xa4j?\xebqw?X\xccL?\x055s?\xa0?D?\x1d\xaf;?1\x86\x88?\xb3\xcc\x8c?\xaa\xc8L?\xe4g&?\xf5\xb8;?\x12\xcfL?\xf2\xab*?\xd7\xaa\xca?\x19\xb4\x8a??13?\xbf\x1e\x82?zU\xd5?\x8c\xf0??\x9f\xbc;?\x92\xabj?.\x11\x91?\x02\xcd\x8c?#\x0f\x91?\t\x1fb?1`&?\xc2\xdc\xbd?\xcbvw?\xe5\x98Y?\x1a\x03\xa0?\x08\x18"?q\x1b\x82?\xd2w\xd7?U\xee.?\xb3\xff\x7f?A1\x93?9\xcbL?\xd2C\xa4?\x8c\xb6;?\xc7g&?\x16\xbc\x9b?\x94\xa9\xca?$\x06Q?\xcab\xe6?:\xa8\xaa?4:b?Zc\xa6?Gc&?\xe1\xfa??C\xce??\x96\x0eQ?\xd0\xadj?\x13\x00@?\xd6\xda]?\xbc\xb8;?|vH?+\xa8j?\x18oU?e\xfa??f\xd0L?\xad\x83H?\xa5\xa7*?\x0b\xb6;?\xe0BD?<\x94*?\xc1&b?N\xb8{?9\xec\x8e?\xd6\xb7{?\x080s?\xb3v\x97?\xe42s?g b?\xb5\xec\x8e?\xd3\xa9\x8a?6K\xb5?\xb8\x02Q?g\xc9\xcc?tCD?B\xca;?5\xa8*?e\xff\xbf?\x8fDD?\x12\xa3*?\xfcef?4?\xb3?\x83D\x84?\xc4\xcbL?{\'b?.\xbd\x9b?\x9b\x99Y?\xd0u\xf7?RR\x95?\x86qw?\x9a\x88\xe8?\xd9\x0b\xc0?\x9d\xb4\xfb?L\xca\x8c?3\x82H?\xfe\xd9\x9d?\xe8\xa9j?\x8dpw?\xa9^\x86?\xf9\xa4*?\xd8PU?\x14\xe0n?\xedU\x95?\xc5f\x86?\x18P\x95?f\xeb\xae?B\rQ?\r\xb7\xca?\xe1t\x97?\x8ec&?C\xfc??\x00Wf?\x84\xe4\x8e?fwf?~"\x82?\xc2t7?E\xe9.?^SU?1\xdb]?C\xab\x8a?\xb0e\xe6?\xc1\xb2{?D\xd9\xfd?\xf6B\x84?t?\x93?\xc4<D?\xb9c\x86?X\xc8L?-\nQ?q\x86H?0VU?\xfdb\x86?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'\xd0\x04\x07\x05h\t\x07\x05 #\xe4\x04\xa0!\xe4\x04\xb0#\xe4\x04\xe0/\xe4\x04  \xe4\x04\xc8 \xe4\x04\x18%\xe4\x04H"\xe4\x040%\xe4\x04\xf8&\xe4\x04\x88$\xe4\x04\x00%\xe4\x04\xe0 \xe4\x04\xc8,\xe4\x04\x10!\xe4\x04\xd0*\xe4\x04\x80&\xe4\x04@$\xe4\x04\x88\'\xe4\x04\xb8$\xe4\x04P#\xe4\x04X\'\xe4\x04\xc8#\xe4\x04@!\xe4\x04\x00+\xe4\x04\x00.\xe4\x04\xb0 \xe4\x04\x80 \xe4\x040(\xe4\x04\xd8"\xe4\x04($\xe4\x04\x98&\xe4\x04\x08,\xe4\x04\xe0)\xe4\x04\xa8+\xe4\x04\xb0/\xe4\x04`.\xe4\x04\xd0!\xe4\x04\x98/\xe4\x04\x18(\xe4\x04p!\xe4\x04\xf8#\xe4\x04\xe8\'\xe4\x04\xe8-\xe4\x04X-\xe4\x04\xf0(\xe4\x04\x98)\xe4\x04\xd0-\xe4\x04\x00(\xe4\x04\xf8,\xe4\x04\x10\'\xe4\x04\xc0%\xe4\x04\x10$\xe4\x04 /\xe4\x04\xa8%\xe4\x04\x00"\xe4\x04\xa0$\xe4\x040\x08\xf3\x04\x88\x01\xf3\x04\xa8\x02\xf3\x04x\x0b\xf3\x04\xa0\x07\xf3\x04P\x06\xf3\x04X\x07\xf3\x04x\x05\xf3\x04p\x04\xf3\x04\xb0\x0f\xf3\x04\x90\x0e\xf3\x04\x80\x03\xf3\x04\x90\x05\xf3\x04@\n\xf3\x04\xe8\x07\xf3\x04\xc8\x0c\xf3\x04\x00\x0e\xf3\x04\x18\x02\xf3\x04H\x08\xf3\x04\xa8\x05\xf3\x04P\t\xf3\x04x\x08\xf3\x04 \t\xf3\x04\xf8\x00\xf3\x04\x80\t\xf3\x04\xb8\x04\xf3\x04@\x04\xf3\x04\x00\x05\xf3\x04p\n\xf3\x04X\x01\xf3\x040\x02\xf3\x04\xd0\n\xf3\x04\xb0\t\xf3\x040\x0b\xf3\x04\x18\x0e\xf3\x04\x10\x07\xf3\x04P\x0f\xf3\x04\xe8\r\xf3\x04 \x06\xf3\x04\x10\x01\xf3\x04h\x06\xf3\x04\x18\x08\xf3\x04\x08\x06\xf3\x04\x80\x06\xf3\x04\x08\x03\xf3\x04\xc8\x06\xf3\x04\xc0\x05\xf3\x04\xd8\x08\xf3\x04\xb8\x07\xf3\x04\xc8\x03\xf3\x04H\x0b\xf3\x04\xe0\x0f\xf3\x04h\t\xf3\x04p\x07\xf3\x04\x98\t\xf3\x04\x10\r\xf3\x04\xa0\x04\xf3\x04(\r\xf3\x04\xd8\x0e\xf3\x04@\x07\xf3\x04\xa8\x08\xf3\x04\x88\x04\xf3\x04\xc0\x0b\xf3\x048\x03\xf3\x04(\n\xf3\x04\xd8\x05\xf3\x04(\x04\xf3\x04@\r\xf3\x04\x90\x08\xf3\x04\x98\x0f\xf3\x048\x0f\xf3\x04\x88\n\xf3\x04\xf8\t\xf3\x04\xc8\x0f\xf3\x04`\x08\xf3\x04\xe0\t\xf3\x04\xa0\x01\xf3\x04\xa0\r\xf3\x04\xf0%\xe4\x04 &\xe4\x04\xa0-\xe4\x04@\'\xe4\x04\x90(\xe4\x048)\xe4\x04h)\xe4\x04H.\xe4\x048,\xe4\x04\x80,\xe4\x04\xf0.\xe4\x04\x10*\xe4\x04X$\xe4\x04p*\xe4\x04P)\xe4\x04P/\xe4\x04\x18.\xe4\x04\xd8(\xe4\x04\x88-\xe4\x04\xc0(\xe4\x04\xe8*\xe4\x048 \xe4\x04\xe0,\xe4\x04\x90+\xe4\x04P,\xe4\x04@*\xe4\x04\xf0"\xe4\x04X*\xe4\x04\xb0&\xe4\x04\xb0,\xe4\x04p$\xe4\x04h \xe4\x04x(\xe4\x04x.\xe4\x048&\xe4\x04`+\xe4\x04\xb8-\xe4\x04\xb0)\xe4\x04\xf8 \xe4\x04\xa8(\xe4\x04 )\xe4\x040.\xe4\x04\x08/\xe4\x04\x18+\xe4\x04P&\xe4\x04x%\xe4\x04\xf8)\xe4\x04\xb8\'\xe4\x040+\xe4\x04\xd0\'\xe4\x04x+\xe4\x04\x98,\xe4\x04`%\xe4\x04\x80#\xe4\x04\xf0+\xe4\x04\xc0+\xe4\x04\xb8*\xe4\x04\x88!\xe4\x04H+\xe4\x04\xc8)\xe4\x04\x88*\xe4\x04h#\xe4\x04`(\xe4\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3646
sg3633
g3634
sg3648
g3638
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3648
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3646
sg3633
g3634
sg3648
g3638
sg3642
g3643
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3688
sg3633
g3684
sg3648
g3695
sg3642
g3692
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3711
sg3633
g3701
sg3648
g3705
sg3642
g3709
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3722
sg3633
g3718
sg3648
g3729
sg3642
g3726
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3739
sg3633
g3735
sg3648
g3746
sg3642
g3743
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3711
sg3633
g3752
sg3648
g3705
sg3642
g3759
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3771
sg3633
g3767
sg3648
g3778
sg3642
g3775
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3646
sg3633
g3634
sg3648
g3638
sg3642
g3643
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3801
sg3633
g3797
sg3648
g3808
sg3642
g3805
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3824
sg3633
g3814
sg3648
g3818
sg3642
g3822
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3835
sg3633
g3831
sg3648
g3842
sg3642
g3839
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3852
sg3633
g3848
sg3648
g3859
sg3642
g3856
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3875
sg3633
g3865
sg3648
g3869
sg3642
g3873
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3886
sg3633
g3882
sg3648
g3893
sg3642
g3890
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3824
sg3633
g3814
sg3648
g3818
sg3642
g3822
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3722
sg3633
g3912
sg3648
g3729
sg3642
g3919
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3739
sg3633
g3735
sg3648
g3746
sg3642
g3743
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3944
sg3633
g3940
sg3648
g3951
sg3642
g3948
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3771
sg3633
g3957
sg3648
g3778
sg3642
g3964
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3944
sg3633
g3972
sg3648
g3951
sg3642
g3979
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3658
sg3633
g3654
sg3648
g3665
sg3642
g3662
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g4004
sg3633
g4000
sg3648
g4011
sg3642
g4008
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3722
sg3633
g3718
sg3648
g3729
sg3642
g3726
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g3824
sg3633
g4030
sg3648
g3818
sg3642
g4037
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3852
sg3633
g3848
sg3648
g3859
sg3642
g3856
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g4062
sg3633
g4058
sg3648
g4069
sg3642
g4066
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g4085
sg3633
g4075
sg3648
g4079
sg3642
g4083
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g4062
sg3633
g4058
sg3648
g4069
sg3642
g4066
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g4004
sg3633
g4000
sg3648
g4011
sg3642
g4008
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g3711
sg3633
g3701
sg3648
g3705
sg3642
g3709
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g3852
sg3633
g4131
sg3648
g3859
sg3642
g4138
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g3722
sg3633
g3718
sg3648
g3729
sg3642
g3726
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g3852
sg3633
g3848
sg3648
g3859
sg3642
g3856
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g4176
sg3633
g4172
sg3648
g4183
sg3642
g4180
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g4193
sg3633
g4189
sg3648
g4200
sg3642
g4197
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3824
sg3633
g4030
sg3648
g3818
sg3642
g4037
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g4176
sg3633
g4172
sg3648
g4183
sg3642
g4180
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g3875
sg3633
g3865
sg3648
g3869
sg3642
g3873
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g3722
sg3633
g3912
sg3648
g3729
sg3642
g3919
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g4004
sg3633
g4258
sg3648
g4011
sg3642
g4265
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3771
sg3633
g3957
sg3648
g3778
sg3642
g3964
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3739
sg3633
g3735
sg3648
g3746
sg3642
g3743
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3688
sg3633
g3684
sg3648
g3695
sg3642
g3692
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g4193
sg3633
g4189
sg3648
g4200
sg3642
g4197
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g3646
sg3633
g3634
sg3648
g3638
sg3642
g3643
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g4085
sg3633
g4338
sg3648
g4079
sg3642
g4345
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g3658
sg3633
g4353
sg3648
g3665
sg3642
g4360
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g3711
sg3633
g3701
sg3648
g3705
sg3642
g3709
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g4062
sg3633
g4381
sg3648
g4069
sg3642
g4388
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3875
sg3633
g4396
sg3648
g3869
sg3642
g4403
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3835
sg3633
g3831
sg3648
g3842
sg3642
g3839
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g4193
sg3633
g4189
sg3648
g4200
sg3642
g4197
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g4176
sg3633
g4172
sg3648
g4183
sg3642
g4180
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3771
sg3633
g3957
sg3648
g3778
sg3642
g3964
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g4473
sg3633
g4463
sg3648
g4467
sg3642
g4471
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3835
sg3633
g3831
sg3648
g3842
sg3642
g3839
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3886
sg3633
g4493
sg3648
g3893
sg3642
g4500
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g3646
sg3633
g4508
sg3648
g3638
sg3642
g4515
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3739
sg3633
g4523
sg3648
g3746
sg3642
g4530
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g4085
sg3633
g4075
sg3648
g4079
sg3642
g4083
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g3739
sg3633
g4523
sg3648
g3746
sg3642
g4530
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g4473
sg3633
g4564
sg3648
g4467
sg3642
g4571
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3801
sg3633
g3797
sg3648
g3808
sg3642
g3805
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g4473
sg3633
g4564
sg3648
g4467
sg3642
g4571
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g4062
sg3633
g4058
sg3648
g4069
sg3642
g4066
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3944
sg3633
g3972
sg3648
g3951
sg3642
g3979
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3646
sg3633
g4508
sg3648
g3638
sg3642
g4515
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3801
sg3633
g3797
sg3648
g3808
sg3642
g3805
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g3852
sg3633
g4131
sg3648
g3859
sg3642
g4138
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g3711
sg3633
g3752
sg3648
g3705
sg3642
g3759
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g4193
sg3633
g4683
sg3648
g4200
sg3642
g4690
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g4062
sg3633
g4058
sg3648
g4069
sg3642
g4066
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g3852
sg3633
g4131
sg3648
g3859
sg3642
g4138
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g3835
sg3633
g4724
sg3648
g3842
sg3642
g4731
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g3711
sg3633
g3701
sg3648
g3705
sg3642
g3709
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g4473
sg3633
g4463
sg3648
g4467
sg3642
g4471
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3852
sg3633
g3848
sg3648
g3859
sg3642
g3856
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g3688
sg3633
g3684
sg3648
g3695
sg3642
g3692
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g4176
sg3633
g4791
sg3648
g4183
sg3642
g4798
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g4473
sg3633
g4564
sg3648
g4467
sg3642
g4571
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g4085
sg3633
g4075
sg3648
g4079
sg3642
g4083
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3875
sg3633
g3865
sg3648
g3869
sg3642
g3873
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3711
sg3633
g3752
sg3648
g3705
sg3642
g3759
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g3875
sg3633
g4396
sg3648
g3869
sg3642
g4403
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g3944
sg3633
g3972
sg3648
g3951
sg3642
g3979
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g3646
sg3633
g4508
sg3648
g3638
sg3642
g4515
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g4062
sg3633
g4381
sg3648
g4069
sg3642
g4388
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g3944
sg3633
g3972
sg3648
g3951
sg3642
g3979
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3824
sg3633
g4030
sg3648
g3818
sg3642
g4037
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3886
sg3633
g4493
sg3648
g3893
sg3642
g4500
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g4004
sg3633
g4258
sg3648
g4011
sg3642
g4265
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3835
sg3633
g3831
sg3648
g3842
sg3642
g3839
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g3646
sg3633
g4508
sg3648
g3638
sg3642
g4515
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g3739
sg3633
g3735
sg3648
g3746
sg3642
g3743
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g4473
sg3633
g4564
sg3648
g4467
sg3642
g4571
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3886
sg3633
g3882
sg3648
g3893
sg3642
g3890
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g4004
sg3633
g4258
sg3648
g4011
sg3642
g4265
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g4176
sg3633
g4172
sg3648
g4183
sg3642
g4180
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g4004
sg3633
g4258
sg3648
g4011
sg3642
g4265
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g4062
sg3633
g4058
sg3648
g4069
sg3642
g4066
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3739
sg3633
g3735
sg3648
g3746
sg3642
g3743
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3835
sg3633
g4724
sg3648
g3842
sg3642
g4731
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3875
sg3633
g4396
sg3648
g3869
sg3642
g4403
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g3688
sg3633
g5118
sg3648
g3695
sg3642
g5125
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g3801
sg3633
g3797
sg3648
g3808
sg3642
g3805
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3688
sg3633
g5118
sg3648
g3695
sg3642
g5125
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g4473
sg3633
g4463
sg3648
g4467
sg3642
g4471
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g4062
sg3633
g4381
sg3648
g4069
sg3642
g4388
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g3824
sg3633
g3814
sg3648
g3818
sg3642
g3822
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g4193
sg3633
g4683
sg3648
g4200
sg3642
g4690
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g3852
sg3633
g3848
sg3648
g3859
sg3642
g3856
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g4085
sg3633
g4075
sg3648
g4079
sg3642
g4083
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3658
sg3633
g4353
sg3648
g3665
sg3642
g4360
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3771
sg3633
g3767
sg3648
g3778
sg3642
g3775
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g4004
sg3633
g4000
sg3648
g4011
sg3642
g4008
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g3875
sg3633
g4396
sg3648
g3869
sg3642
g4403
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3658
sg3633
g3654
sg3648
g3665
sg3642
g3662
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g4085
sg3633
g4338
sg3648
g4079
sg3642
g4345
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g3771
sg3633
g3767
sg3648
g3778
sg3642
g3775
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g3875
sg3633
g4396
sg3648
g3869
sg3642
g4403
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g4004
sg3633
g4000
sg3648
g4011
sg3642
g4008
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3875
sg3633
g3865
sg3648
g3869
sg3642
g3873
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3886
sg3633
g4493
sg3648
g3893
sg3642
g4500
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3688
sg3633
g3684
sg3648
g3695
sg3642
g3692
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g3722
sg3633
g3718
sg3648
g3729
sg3642
g3726
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3852
sg3633
g4131
sg3648
g3859
sg3642
g4138
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g4085
sg3633
g4338
sg3648
g4079
sg3642
g4345
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g3646
sg3633
g3634
sg3648
g3638
sg3642
g3643
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3944
sg3633
g3940
sg3648
g3951
sg3642
g3948
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g3824
sg3633
g3814
sg3648
g3818
sg3642
g3822
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3688
sg3633
g3684
sg3648
g3695
sg3642
g3692
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g3801
sg3633
g3797
sg3648
g3808
sg3642
g3805
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3688
sg3633
g5118
sg3648
g3695
sg3642
g5125
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3886
sg3633
g3882
sg3648
g3893
sg3642
g3890
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3739
sg3633
g4523
sg3648
g3746
sg3642
g4530
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g4193
sg3633
g4683
sg3648
g4200
sg3642
g4690
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3722
sg3633
g3912
sg3648
g3729
sg3642
g3919
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g4085
sg3633
g4338
sg3648
g4079
sg3642
g4345
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3801
sg3633
g5575
sg3648
g3808
sg3642
g5582
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3944
sg3633
g3972
sg3648
g3951
sg3642
g3979
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3711
sg3633
g3752
sg3648
g3705
sg3642
g3759
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g3801
sg3633
g5575
sg3648
g3808
sg3642
g5582
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3722
sg3633
g3912
sg3648
g3729
sg3642
g3919
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g4062
sg3633
g4381
sg3648
g4069
sg3642
g4388
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g4004
sg3633
g4258
sg3648
g4011
sg3642
g4265
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g3711
sg3633
g3752
sg3648
g3705
sg3642
g3759
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g4004
sg3633
g4000
sg3648
g4011
sg3642
g4008
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g4473
sg3633
g4463
sg3648
g4467
sg3642
g4471
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g3658
sg3633
g4353
sg3648
g3665
sg3642
g4360
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3875
sg3633
g3865
sg3648
g3869
sg3642
g3873
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3771
sg3633
g3767
sg3648
g3778
sg3642
g3775
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g4176
sg3633
g4172
sg3648
g4183
sg3642
g4180
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3944
sg3633
g3940
sg3648
g3951
sg3642
g3948
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3658
sg3633
g3654
sg3648
g3665
sg3642
g3662
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g3944
sg3633
g3940
sg3648
g3951
sg3642
g3948
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g3835
sg3633
g4724
sg3648
g3842
sg3642
g4731
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g4176
sg3633
g4791
sg3648
g4183
sg3642
g4798
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g3739
sg3633
g4523
sg3648
g3746
sg3642
g4530
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3801
sg3633
g5575
sg3648
g3808
sg3642
g5582
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g4473
sg3633
g4564
sg3648
g4467
sg3642
g4571
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3658
sg3633
g4353
sg3648
g3665
sg3642
g4360
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3944
sg3633
g3940
sg3648
g3951
sg3642
g3948
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3886
sg3633
g4493
sg3648
g3893
sg3642
g4500
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3711
sg3633
g3701
sg3648
g3705
sg3642
g3709
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3824
sg3633
g4030
sg3648
g3818
sg3642
g4037
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g4176
sg3633
g4791
sg3648
g4183
sg3642
g4798
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g3824
sg3633
g4030
sg3648
g3818
sg3642
g4037
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g4085
sg3633
g4075
sg3648
g4079
sg3642
g4083
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g3852
sg3633
g4131
sg3648
g3859
sg3642
g4138
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3835
sg3633
g3831
sg3648
g3842
sg3642
g3839
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3801
sg3633
g5575
sg3648
g3808
sg3642
g5582
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3771
sg3633
g3767
sg3648
g3778
sg3642
g3775
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g4193
sg3633
g4189
sg3648
g4200
sg3642
g4197
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3835
sg3633
g4724
sg3648
g3842
sg3642
g4731
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g3824
sg3633
g3814
sg3648
g3818
sg3642
g3822
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g4193
sg3633
g4683
sg3648
g4200
sg3642
g4690
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g4176
sg3633
g4791
sg3648
g4183
sg3642
g4798
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3646
sg3633
g4508
sg3648
g3638
sg3642
g4515
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g4085
sg3633
g4338
sg3648
g4079
sg3642
g4345
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g3801
sg3633
g5575
sg3648
g3808
sg3642
g5582
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g3739
sg3633
g4523
sg3648
g3746
sg3642
g4530
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g4193
sg3633
g4683
sg3648
g4200
sg3642
g4690
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3722
sg3633
g3718
sg3648
g3729
sg3642
g3726
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3886
sg3633
g3882
sg3648
g3893
sg3642
g3890
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3771
sg3633
g3957
sg3648
g3778
sg3642
g3964
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g3835
sg3633
g4724
sg3648
g3842
sg3642
g4731
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g4473
sg3633
g4463
sg3648
g4467
sg3642
g4471
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g3886
sg3633
g3882
sg3648
g3893
sg3642
g3890
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3722
sg3633
g3912
sg3648
g3729
sg3642
g3919
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3688
sg3633
g5118
sg3648
g3695
sg3642
g5125
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g3658
sg3633
g3654
sg3648
g3665
sg3642
g3662
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g3886
sg3633
g4493
sg3648
g3893
sg3642
g4500
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3771
sg3633
g3957
sg3648
g3778
sg3642
g3964
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g3688
sg3633
g5118
sg3648
g3695
sg3642
g5125
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g3658
sg3633
g4353
sg3648
g3665
sg3642
g4360
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g4062
sg3633
g4381
sg3648
g4069
sg3642
g4388
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g4193
sg3633
g4189
sg3648
g4200
sg3642
g4197
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g4176
sg3633
g4791
sg3648
g4183
sg3642
g4798
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I219300176
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'`\xeb\t `\xa6\n \x88\xa6\n \xb0\xa6\n \x88\xd2\n  \xe1\n \xb0\xa6\n  \xe1\n \x88\xd2\n @\xe1\n \x80\xec\t `\xe1\n \x88\xa6\n  \xe1\n `\xeb\t \x90\xeb\t \xd8\xa6\n \xb0\xec\t \x88\xa6\n \xc0\xd2\n `\xa6\n \x88\xd2\n \x80\xe1\n 0\xd3\n \xc0\xe1\n \xc0\xeb\t \x90\xeb\t (\xa7\n `\xeb\t  \xe1\n \x90\xeb\t \xf8\xd2\n `\xe1\n \xa0\xe1\n \x10\xed\t h\xd3\n \xf8\xd2\n \xd8\xa6\n \xb8\xa8\n \x88\xa6\n `\xa6\n @\xed\t @\xe1\n \xf0\xeb\t P\xec\t \xc8\xa7\n P\xa7\n \xd8\xd3\n \x00\xa7\n \xd8\xa6\n \xe0\xec\t x\xa7\n `\xe1\n `\xeb\t `\xe1\n \xc0\xeb\t (\xa7\n \x88\xa6\n \xb0\xa6\n \xa0\xd3\n \x80\xec\t @\xed\t \xc0\xd2\n \xa0\xa7\n \xd8\xd3\n `\xa6\n \x88\xa6\n `\xeb\t \x80\xec\t `\xe1\n  \xe1\n x\xa7\n \x80\xe1\n \xf0\xeb\t \xc8\xa7\n @\xe1\n P\xa7\n \xb0\xa6\n \x90\xa8\n  \xe1\n P\xa7\n \xa0\xa7\n \xd8\xa6\n \x00\xa7\n \x80\xe1\n \x00\xa7\n \xc0\xeb\t \x00\xa7\n \x88\xd2\n p\xed\t @\xe1\n \x80\xe1\n \xc0\xe1\n \xd8\xa6\n \xc0\xd2\n \x80\xec\t @\xe1\n 0\xd3\n `\xeb\t (\xa7\n \x88\xa6\n \x80\xe1\n \xa0\xa7\n \xc0\xd2\n \x88\xd2\n \xa0\xe1\n \x90\xeb\t \xd8\xa6\n (\xa7\n \xf0\xeb\t `\xa6\n \xc8\xa7\n `\xa6\n `\xeb\t \xc0\xeb\t @\xe1\n `\xe1\n P\xa7\n \xc0\xd2\n \x90\xeb\t \x00\xa7\n @\xed\t \xf0\xeb\t P\xa7\n `\xeb\t \x88\xd2\n \xf0\xeb\t @\xed\t \xb0\xec\t x\xa7\n \xd8\xa6\n `\xe1\n x\xa7\n \xb0\xa6\n `\xa6\n \x00\xa7\n h\xd3\n \xa0\xa7\n \xc0\xeb\t \xb0\xa6\n \xd8\xa6\n \xf0\xeb\t \xd8\xd3\n \x00\xa7\n \xa0\xa7\n \xc8\xa7\n \xc0\xeb\t \xb0\xa6\n x\xa7\n  \xec\t P\xec\t @\xe1\n \x88\xd2\n \xc8\xa7\n x\xa7\n @\xe1\n (\xa7\n @\xa8\n \xc0\xd2\n \x18\xa8\n \xe0\xec\t \x80\xe1\n \xd8\xd3\n \xf0\xeb\t @\xe1\n \xb0\xa6\n `\xeb\t \x00\xa7\n `\xa6\n (\xa7\n \x90\xa8\n \xf0\xeb\t \x80\xe1\n \xc0\xeb\t \xc0\xe1\n \x10\xed\t @\xe1\n x\xa7\n \xc0\xd2\n \x88\xa6\n (\xa7\n x\xa7\n \xc0\xeb\t P\xa7\n \x80\xe1\n h\xd3\n \xa0\xd3\n `\xa6\n P\xa7\n \xa0\xa7\n \x88\xd2\n  \xe1\n 0\xd3\n P\xa7\n \xb0\xa6\n  \xe1\n x\xa7\n \xc8\xa7\n \xf0\xeb\t \x80\xec\t '
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'@\xe4\n \x80\xe3\n \xe0\xe2\n \xa0\xe2\n @\xe3\n `\xe4\n `\xe2\n \x80\xe2\n \x00\xe3\n \x00\xe5\n `\xe3\n @\xe2\n \x00\xe4\n \x80\xe4\n \xe0\xe1\n \xa0\xe3\n @\xe5\n \xa0\xe5\n  \xe5\n \xe0\xe3\n `\xe5\n \xc0\xe5\n  \xe6\n @\xe6\n \xc0\xe3\n \x80\xe6\n `\xe6\n \xc0\xe6\n \xa0\xe6\n \x00\xe7\n \xe0\xe6\n @\xe7\n  \xe7\n \xe0\xe5\n `\xe7\n \x80\xe7\n \xe0\xe7\n \x00\xe8\n  \xe8\n  \xe2\n \x80\xe5\n @\xe8\n `\xe8\n \x80\xe8\n \xa0\xe8\n \x00\xe9\n \xe0\xe8\n \xe0\xe4\n  \xe9\n @\xe9\n \xa0\xe9\n \xc0\xe9\n \xa0\xe4\n  \xe3\n  \xea\n \x00\xea\n `\xea\n \x80\xea\n \xc0\xe4\n \xc0\xea\n \xa0\xea\n \x00\xeb\n \xe0\xea\n \xe0\xe9\n `\xeb\n @\xeb\n \xa0\xeb\n \x80\xeb\n \xe0\xeb\n \xc0\xeb\n `\xe9\n \x00\xec\n `\xec\n @\xec\n \xc0\xe2\n \x80\xec\n \xa0\xec\n \x00\xed\n \xe0\xec\n \xc0\xe7\n `\xed\n @\xed\n  \xeb\n \xc0\xed\n \xe0\xed\n \x80\xe9\n \xc0\xe8\n \x00\xee\n `\xee\n \x80\xee\n \xa0\xe7\n \xc0\xee\n \xe0\xee\n \x00\xef\n  \xe4\n  \xec\n @\xee\n `\xef\n \x80\xed\n \xa0\xee\n  \xef\n \x80\xef\n \xa0\xed\n \xa0\xef\n @\xea\n  \xee\n \xc0\xec\n \xe0\xef\n \x00\xe6\n `^\xe1\x1f\xc0\x9f\xbb\x1f\x80W\xe1\x1f \xf0\x1b @\xf2\x1b \x80\xf0\x1b \x80\xf1\x1b \xc0\xef\n `\xf1\x1b @\xf1\x1b `\xf2\x1b  \xf2\x1b \xe0\xf1\x1b \xa0\xf1\x1b `\xf3\x1b \xa0\xf0\x1b @\xf0\x1b \xc0\xf1\x1b \xe0\xf0\x1b \xa0\xf3\x1b \xc0\xf3\x1b \x80\xf2\x1b  \xf3\x1b \xc0\xf0\x1b `\xf0\x1b \xe0\xf3\x1b \x80\xf4\x1b \xa0\xf2\x1b \xe0\xf2\x1b  \xf5\x1b  \xf4\x1b \x00\xf2\x1b \x80\xf5\x1b \xa0\xf5\x1b \x80\xf3\x1b `\xf4\x1b  \xf1\x1b  \xf6\x1b \x00\xf4\x1b `\xf6\x1b \x80\xf6\x1b \x00\xf1\x1b \xa0\xf4\x1b \x00\xf6\x1b  \xf7\x1b \xa0\xf6\x1b \xc0\xf4\x1b @\xf6\x1b @\xf7\x1b \xc0\xf6\x1b \xc0\xf5\x1b `\xf7\x1b \xc0\xf7\x1b `\xf5\x1b @\xf8\x1b \x00\xf3\x1b \xc0\xf2\x1b \x00\xf5\x1b \xe0\xf8\x1b  \xf8\x1b \x80\xf7\x1b \xe0\xf6\x1b \xe0\xf5\x1b \x80\xf9\x1b \xc0\xf8\x1b @\xf3\x1b \xe0\xf7\x1b \xa0\xf8\x1b @\xf5\x1b \x00\xf7\x1b \x00\xf8\x1b \x00\xfa\x1b  \xfa\x1b `\xf9\x1b `\xf8\x1b  \xf9\x1b \x00\xfb\x1b \xa0\xfa\x1b `\xfa\x1b \xa0\xf9\x1b @\xfa\x1b \x00\xf9\x1b \xe0\xfa\x1b `\xfb\x1b \xc0\xfb\x1b \x80\xfb\x1b  \xfb\x1b @\xf9\x1b \xc0\xf9\x1b \xc0\xfa\x1b @\xfb\x1b '
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'R\x84\x88?d\xc9\x8c?\x04&3?\x04\xd4]?\xd2u7?FI3?=\xb7{?\xfd\x92\x19?\xdc\x00@?\xd5QU?\x84gf?c,Q?{\x14b?+\x1b"?\xa2\x0bQ?M/3?\x8a\xee\x8e?\xe8u\xd7?p\xd3]?%.s?)\xaa\x8a?\x84nw?\x1e\xd9\x1d?\x7f\xfa\x8e?\xfc\xda]?4>D?\x85,3?<4\x93?\xd9\xb8{?\x1coU?\xbe03?\xf3\x14b?\xb6\xfc??f`&?[\x18\x82?{f\x86?\xdf\x18b?\x9a\x0e\xd1?kb\x86?\x7fl7?\x0e\xaaj?t\xdb]?\xb6\xc9\x8c?\x92\xe9n?\x8b\xe6n?\xb2\x0eQ?P\xf4.?E\xae;?\x82\xb9\xdb?\x92pw?\xd3q\xf7?\xb9Is?V\x93\x99?I\xba{?\xf5\xd9\x1d?8\xa3j?\xd2 \xe2?J\xc6\x8c?pu\x97?Qu7?E\xeb.?.\xde]?\xaf\x00\xa0?2t7?\xdc\xcc\x8c?\xd9\xeb\x8e?=\x0bQ?\xcf\x85H?\xc2\x00\x80?\x98\xb5{?\xeb\xfc??\xbbT\x95?\xe0\xec.?\xacs\x97?\\\x87\x88?\x9bB\x84?\xbf{\xa8?\xfdA\xa4?\xb3\x00\xa0?\xa5\x93Y?~\xa1;?\xa7\xb1;?\xdb\xec\xce?\xb4\xe1\x9d?\xd3\xfc??\x82c\x86?\xd8\xd9\xbd?\xb1t\xb7?H\xbe;?\xc5\x86\x88?\x17,s?\xc7\xa5*?\xfa\x99Y?h\xbb{?\xa61\x93?\xd1\x85\x88?\x8e\xfc\xbf?\xb7\x84\xa8?\xea\xca\x0c@\x17*s?\xb0(s?-t\xb7?(\xaf*?\x96CD?\x13\x02@?8f\xa6?\xdd\xd7]?C\xe6n?\x87\xbc{?P\xb8\x9b?$Ks?[\xdf]?\xbe\xd6]?\xc2\x1e\x82?\x89\xfc\xbf?\tt\x97?\xde\xcf]?\xf29\xe4?\xfdww?\x9d\x99\x99?Z#\x82?\xc2if?\x06\x99Y?\x97\xa6;?\xebR\x95?\x8d\x95\x19?\xd3\x11\x91?Id\xc6?VT\xb5?2\x00\xc0?\t\xed\xae?yID??ff?{2s?\x1aUU?\xdb\xb3;?\x8bs\x97?\xf1\xcf;?o\xba;?\x91\xd7]?\xc4sw?(\x98)@G\x0b\xa0?f\xee\x8e?OQU?#\xb4{?\x1f"b?F\xa3\xb9?\x81\xea\x8e?\xaaOU?\x1aY\x15?qOU?vOU?\xc9\xa2H?\xe6s\xb7?\xd6\xb7{?x\xfa\x7f?L\xc9\x8c?#;b?\xabjw?#\xee\xce?\x9e>D?\xe8\xcb\x8c?<\x01\xc0?\xb6VU?\x82\xdd\x9d?\x8c\xefn?\xcc\xa5j?\xeed\xc6?\xc0\xdd]?A\xa7\xaa?\xdbKU?\x8f>D?\xec\xee\xae?\xf1a\xc6?\xc8-\x03@$\xabj?Gc\x86?\x81Ns?\xdf\xa5j?\xbe\xa5j?J\xa9*?\x9e\xa7\xaa?\xe0+\xb3?\x0c\xfd\x7f?\x10?D?Q\xcbL?\xff?\xc4?\x1f\x1b\xc2?\xacTU?\x82PU?7rw?\xba\x0c\xd1?7QU?.\xda\x9d?\xd2\xb7{?\x8a@D?"\xfa??\x143s?\xed\x01@?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S"\x88\x07\xf3\x04\xb8\r\xf3\x04\x98\t\x07\x05\xc8\x06\x07\x05 \x0c\x07\x05\xc0\x08\x07\x05H\x02\x07\x05\xd8\x05\x07\x05\x18\x0b\x07\x05\xc8\x0f\x07\x05\x00\x05\x07\x05\x90\x0e\x07\x05@\x07\x07\x05@\x01\x07\x05h\x0f\x07\x05\xc8\t\x07\x05h\x03\x07\x05\x80\x0c\x07\x05\xe0\x00\x07\x05H\x08\x07\x05\x08\x0f\x07\x058\x99\xf2\x04\xa0\x9a\xf2\x04\x00\x9b\xf2\x04\xa8\x95\xf2\x04\xb8\x94\xf2\x04\xe0\x96\xf2\x04\xa0\x97\xf2\x04p\x97\xf2\x04P\x90\xf2\x04@\x9a\xf2\x04\xc0\x92\xf2\x04\x80\x90\xf2\x04\xb0\x90\xf2\x04\x98\x93\xf2\x04`\x92\xf2\x04x\x92\xf2\x040\x98\xf2\x04`\x95\xf2\x04\xa0\x94\xf2\x04\x88\x94\xf2\x04\x18\x92\xf2\x04\x80\x9c\xf2\x04\xa8\x98\xf2\x04\xb0\x93\xf2\x04\x08\x93\xf2\x04\xa8\x92\xf2\x04@\x97\xf2\x04\xc8\x93\xf2\x04(\x94\xf2\x04H\x9e\xf2\x04\x88\x9a\xf2\x04\xe8\x91\xf2\x04\xc0\x95\xf2\x04 \x96\xf2\x04\x18\x9e\xf2\x04(\x91\xf2\x04@\x94\xf2\x04 \x90\xf2\x04\x10\x94\xf2\x04@\x9d\xf2\x04\x18\x95\xf2\x04\xb8\x97\xf2\x04\xa0\x9d\xf2\x04\xe0\x9c\xf2\x048\x9c\xf2\x04\xc8\x90\xf2\x04\xf0\x92\xf2\x04p\x9a\xf2\x04p\x91\xf2\x04\x98\x96\xf2\x04x\x9e\xf2\x04X\x91\xf2\x04\x98\x9c\xf2\x04\xb0\x99\xf2\x04\xd8\x9b\xf2\x04\xe0\x93\xf2\x04\xe8\x94\xf2\x04H\x95\xf2\x04\x08\x96\xf2\x04\xe8\x97\xf2\x04\x18\x9b\xf2\x04H\x9b\xf2\x040\x9e\xf2\x04\xe8\x9d\xf2\x04\xb8\x91\xf2\x04\x18\x98\xf2\x04\xd8\x98\xf2\x04@\x91\xf2\x04\xa0\x91\xf2\x04\xe0\x90\xf2\x04\xf8\x9c\xf2\x04X\x94\xf2\x04\x00\x92\xf2\x048\x9f\xf2\x04\xd0\x97\xf2\x04\x90\x9b\xf2\x04h\x9f\xf2\x04\x08\x9f\xf2\x04\xd0\x9d\xf2\x04\x90\x98\xf2\x04\xe0\x9f\xf2\x04\xc8\x99\xf2\x04H\x98\xf2\x04P\x9f\xf2\x04\x88\x9d\xf2\x04X\x9a\xf2\x04\x00\x95\xf2\x04\xf0\x9e\xf2\x04\x10\x97\xf2\x04\xd8\x9e\xf2\x04\xb0\x96\xf2\x04\xf8\x96\xf2\x04\xd8\x95\xf2\x04h\x9c\xf2\x04p\x9d\xf2\x04\xf0\x95\xf2\x04\x10\x91\xf2\x04x\x9b\xf2\x04\xd8\x92\xf2\x04\xa8\x9e\xf2\x04\x08\x99\xf2\x04x\x98\xf2\x04\xb0\x9c\xf2\x04\x98\x99\xf2\x04\xb8\x9a\xf2\x04\xf0\x98\xf2\x04(\x9d\xf2\x04\xc0\x9b\xf2\x04`\x98\xf2\x04\xc8\x9f\xf2\x04\x80\x93\xf2\x04(\x97\xf2\x04\xd0\x91\xf2\x04H\x92\xf2\x04\xf8\x93\xf2\x04P\x93\xf2\x04\xc0\x9e\xf2\x048\x96\xf2\x04\xc8\x96\xf2\x04\x88\x97\xf2\x040\x92\xf2\x04X\x9d\xf2\x04x\x95\xf2\x04P\x9c\xf2\x04\x80\x99\xf2\x04\x88\x91\xf2\x040\x9b\xf2\x04 \x99\xf2\x04\x80\x9f\xf2\x04h\x99\xf2\x04 \x9c\xf2\x04 \x93\xf2\x04`\x9b\xf2\x04\x90\x95\xf2\x04\x98\x9f\xf2\x04\x10\x9a\xf2\x04\xc8\x9c\xf2\x04\x90\x9e\xf2\x04`\x9e\xf2\x040\x95\xf2\x04(\x9a\xf2\x04\x98\x90\xf2\x04\xf0\x9b\xf2\x04P\x96\xf2\x04\xc0\x98\xf2\x04\xb0\x9f\xf2\x04\x08\x9c\xf2\x04\x10\x9d\xf2\x04\xe8\x9a\xf2\x04\xb8\x9d\xf2\x04\xa8\x9b\xf2\x04X\x97\xf2\x04\x80\x96\xf2\x04 \x9f\xf2\x048\x93\xf2\x04h\x93\xf2\x04\x90%\xea\x04('\xea\x04@-\xea\x04\xa8(\xea\x04\x18(\xea\x04\xb0#\xea\x04\xc0+\xea\x04\xd0$\xea\x04 /\xea\x04\xf8\x0c\x07\x05H\x0b\x07\x05\xe8\x01\x07\x05P\t\x07\x05\x88\x04\x07\x05`\x0e\x07\x05\xe0\x06\x07\x05@\x04\x07\x05\xe8\x07\x07\x05(\r\x07\x05\xf8\x06\x07\x05x\x05\x07\x05\x18\x05\x07\x05\x00\x0b\x07\x05"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6464
sg6371
g6490
sg6385
g6471
sg6380
g6497
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6447
sg6371
g6505
sg6385
g6454
sg6380
g6512
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6547
sg6371
g6537
sg6385
g6541
sg6380
g6545
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6558
sg6371
g6554
sg6385
g6565
sg6380
g6562
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6413
sg6371
g6571
sg6385
g6420
sg6380
g6578
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6464
sg6371
g6490
sg6385
g6471
sg6380
g6497
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6376
sg6371
g6599
sg6385
g6386
sg6380
g6606
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6547
sg6371
g6614
sg6385
g6541
sg6380
g6621
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6633
sg6371
g6629
sg6385
g6640
sg6380
g6637
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6656
sg6371
g6646
sg6385
g6650
sg6380
g6654
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6413
sg6371
g6571
sg6385
g6420
sg6380
g6578
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6680
sg6371
g6676
sg6385
g6687
sg6380
g6684
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6723
sg6371
g6719
sg6385
g6730
sg6380
g6727
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6558
sg6371
g6554
sg6385
g6565
sg6380
g6562
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6759
sg6371
g6749
sg6385
g6753
sg6380
g6757
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6770
sg6371
g6766
sg6385
g6777
sg6380
g6774
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6547
sg6371
g6614
sg6385
g6541
sg6380
g6621
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6759
sg6371
g6796
sg6385
g6753
sg6380
g6803
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6376
sg6371
g6599
sg6385
g6386
sg6380
g6606
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6547
sg6371
g6537
sg6385
g6541
sg6380
g6545
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6558
sg6371
g6554
sg6385
g6565
sg6380
g6562
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6464
sg6371
g6490
sg6385
g6471
sg6380
g6497
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6899
sg6371
g6889
sg6385
g6893
sg6380
g6897
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6680
sg6371
g6906
sg6385
g6687
sg6380
g6913
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6413
sg6371
g6571
sg6385
g6420
sg6380
g6578
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6633
sg6371
g6934
sg6385
g6640
sg6380
g6941
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6959
sg6371
g6949
sg6385
g6953
sg6380
g6957
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g7002
sg6371
g6992
sg6385
g6996
sg6380
g7000
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g7026
sg6371
g7022
sg6385
g7033
sg6380
g7030
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g7056
sg6371
g7052
sg6385
g7063
sg6380
g7060
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6899
sg6371
g7069
sg6385
g6893
sg6380
g7076
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g7056
sg6371
g7084
sg6385
g7063
sg6380
g7091
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6656
sg6371
g6646
sg6385
g6650
sg6380
g6654
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6633
sg6371
g6934
sg6385
g6640
sg6380
g6941
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6770
sg6371
g7125
sg6385
g6777
sg6380
g7132
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6959
sg6371
g7140
sg6385
g6953
sg6380
g7147
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6558
sg6371
g7155
sg6385
g6565
sg6380
g7162
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6558
sg6371
g7155
sg6385
g6565
sg6380
g7162
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6770
sg6371
g7125
sg6385
g6777
sg6380
g7132
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6759
sg6371
g6749
sg6385
g6753
sg6380
g6757
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6413
sg6371
g6571
sg6385
g6420
sg6380
g6578
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6430
sg6371
g7235
sg6385
g6437
sg6380
g7242
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6723
sg6371
g7250
sg6385
g6730
sg6380
g7257
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6547
sg6371
g6537
sg6385
g6541
sg6380
g6545
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g7002
sg6371
g7278
sg6385
g6996
sg6380
g7285
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6680
sg6371
g6676
sg6385
g6687
sg6380
g6684
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g7002
sg6371
g7278
sg6385
g6996
sg6380
g7285
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g7056
sg6371
g7084
sg6385
g7063
sg6380
g7091
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6396
sg6371
g7332
sg6385
g6403
sg6380
g7339
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6376
sg6371
g6599
sg6385
g6386
sg6380
g6606
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6547
sg6371
g6614
sg6385
g6541
sg6380
g6621
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6558
sg6371
g7155
sg6385
g6565
sg6380
g7162
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6464
sg6371
g6490
sg6385
g6471
sg6380
g6497
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6959
sg6371
g7140
sg6385
g6953
sg6380
g7147
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6723
sg6371
g6719
sg6385
g6730
sg6380
g6727
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g7026
sg6371
g7438
sg6385
g7033
sg6380
g7445
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g7056
sg6371
g7052
sg6385
g7063
sg6380
g7060
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6899
sg6371
g6889
sg6385
g6893
sg6380
g6897
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6430
sg6371
g7235
sg6385
g6437
sg6380
g7242
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6633
sg6371
g6629
sg6385
g6640
sg6380
g6637
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6899
sg6371
g7069
sg6385
g6893
sg6380
g7076
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g7002
sg6371
g7278
sg6385
g6996
sg6380
g7285
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6633
sg6371
g6629
sg6385
g6640
sg6380
g6637
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6656
sg6371
g7570
sg6385
g6650
sg6380
g7577
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6723
sg6371
g7250
sg6385
g6730
sg6380
g7257
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6656
sg6371
g6646
sg6385
g6650
sg6380
g6654
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6770
sg6371
g6766
sg6385
g6777
sg6380
g6774
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6656
sg6371
g7570
sg6385
g6650
sg6380
g7577
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6447
sg6371
g6505
sg6385
g6454
sg6380
g6512
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g7026
sg6371
g7438
sg6385
g7033
sg6380
g7445
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6524
sg6371
g7663
sg6385
g6531
sg6380
g7670
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6723
sg6371
g7250
sg6385
g6730
sg6380
g7257
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6759
sg6371
g6749
sg6385
g6753
sg6380
g6757
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6633
sg6371
g6934
sg6385
g6640
sg6380
g6941
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6680
sg6371
g6676
sg6385
g6687
sg6380
g6684
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6547
sg6371
g6537
sg6385
g6541
sg6380
g6545
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6524
sg6371
g7663
sg6385
g6531
sg6380
g7670
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6558
sg6371
g7155
sg6385
g6565
sg6380
g7162
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6376
sg6371
g6599
sg6385
g6386
sg6380
g6606
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6759
sg6371
g6749
sg6385
g6753
sg6380
g6757
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6723
sg6371
g6719
sg6385
g6730
sg6380
g6727
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g7002
sg6371
g6992
sg6385
g6996
sg6380
g7000
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6680
sg6371
g6676
sg6385
g6687
sg6380
g6684
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6447
sg6371
g6505
sg6385
g6454
sg6380
g6512
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6547
sg6371
g6537
sg6385
g6541
sg6380
g6545
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6633
sg6371
g6934
sg6385
g6640
sg6380
g6941
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6759
sg6371
g6796
sg6385
g6753
sg6380
g6803
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g7026
sg6371
g7438
sg6385
g7033
sg6380
g7445
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6396
sg6371
g7332
sg6385
g6403
sg6380
g7339
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g7056
sg6371
g7052
sg6385
g7063
sg6380
g7060
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6396
sg6371
g7332
sg6385
g6403
sg6380
g7339
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6770
sg6371
g6766
sg6385
g6777
sg6380
g6774
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6524
sg6371
g7663
sg6385
g6531
sg6380
g7670
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6558
sg6371
g6554
sg6385
g6565
sg6380
g6562
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6899
sg6371
g7069
sg6385
g6893
sg6380
g7076
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6680
sg6371
g6676
sg6385
g6687
sg6380
g6684
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6547
sg6371
g6614
sg6385
g6541
sg6380
g6621
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6656
sg6371
g6646
sg6385
g6650
sg6380
g6654
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g7002
sg6371
g6992
sg6385
g6996
sg6380
g7000
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g7026
sg6371
g7022
sg6385
g7033
sg6380
g7030
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6899
sg6371
g7069
sg6385
g6893
sg6380
g7076
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6447
sg6371
g6505
sg6385
g6454
sg6380
g6512
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g7026
sg6371
g7022
sg6385
g7033
sg6380
g7030
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g7002
sg6371
g7278
sg6385
g6996
sg6380
g7285
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6656
sg6371
g7570
sg6385
g6650
sg6380
g7577
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6959
sg6371
g7140
sg6385
g6953
sg6380
g7147
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6633
sg6371
g6629
sg6385
g6640
sg6380
g6637
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6558
sg6371
g7155
sg6385
g6565
sg6380
g7162
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6959
sg6371
g7140
sg6385
g6953
sg6380
g7147
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6656
sg6371
g6646
sg6385
g6650
sg6380
g6654
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6680
sg6371
g6906
sg6385
g6687
sg6380
g6913
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g7002
sg6371
g7278
sg6385
g6996
sg6380
g7285
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6770
sg6371
g7125
sg6385
g6777
sg6380
g7132
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6430
sg6371
g7235
sg6385
g6437
sg6380
g7242
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6633
sg6371
g6629
sg6385
g6640
sg6380
g6637
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g7026
sg6371
g7438
sg6385
g7033
sg6380
g7445
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g7056
sg6371
g7084
sg6385
g7063
sg6380
g7091
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6656
sg6371
g7570
sg6385
g6650
sg6380
g7577
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g7002
sg6371
g6992
sg6385
g6996
sg6380
g7000
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g7056
sg6371
g7052
sg6385
g7063
sg6380
g7060
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6770
sg6371
g7125
sg6385
g6777
sg6380
g7132
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6959
sg6371
g6949
sg6385
g6953
sg6380
g6957
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6376
sg6371
g6599
sg6385
g6386
sg6380
g6606
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6447
sg6371
g6505
sg6385
g6454
sg6380
g6512
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g7056
sg6371
g7084
sg6385
g7063
sg6380
g7091
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6959
sg6371
g6949
sg6385
g6953
sg6380
g6957
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6524
sg6371
g7663
sg6385
g6531
sg6380
g7670
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6759
sg6371
g6749
sg6385
g6753
sg6380
g6757
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6430
sg6371
g7235
sg6385
g6437
sg6380
g7242
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6680
sg6371
g6906
sg6385
g6687
sg6380
g6913
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6396
sg6371
g7332
sg6385
g6403
sg6380
g7339
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6770
sg6371
g6766
sg6385
g6777
sg6380
g6774
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6723
sg6371
g6719
sg6385
g6730
sg6380
g6727
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g7056
sg6371
g7084
sg6385
g7063
sg6380
g7091
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g7026
sg6371
g7438
sg6385
g7033
sg6380
g7445
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6656
sg6371
g7570
sg6385
g6650
sg6380
g7577
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6396
sg6371
g7332
sg6385
g6403
sg6380
g7339
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6759
sg6371
g6796
sg6385
g6753
sg6380
g6803
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6633
sg6371
g6934
sg6385
g6640
sg6380
g6941
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g7026
sg6371
g7022
sg6385
g7033
sg6380
g7030
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6723
sg6371
g7250
sg6385
g6730
sg6380
g7257
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6770
sg6371
g7125
sg6385
g6777
sg6380
g7132
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6759
sg6371
g6796
sg6385
g6753
sg6380
g6803
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6899
sg6371
g6889
sg6385
g6893
sg6380
g6897
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6524
sg6371
g7663
sg6385
g6531
sg6380
g7670
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6959
sg6371
g7140
sg6385
g6953
sg6380
g7147
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6680
sg6371
g6906
sg6385
g6687
sg6380
g6913
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6413
sg6371
g6571
sg6385
g6420
sg6380
g6578
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6759
sg6371
g6796
sg6385
g6753
sg6380
g6803
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6959
sg6371
g6949
sg6385
g6953
sg6380
g6957
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6770
sg6371
g6766
sg6385
g6777
sg6380
g6774
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6899
sg6371
g6889
sg6385
g6893
sg6380
g6897
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6723
sg6371
g7250
sg6385
g6730
sg6380
g7257
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6680
sg6371
g6906
sg6385
g6687
sg6380
g6913
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6723
sg6371
g6719
sg6385
g6730
sg6380
g6727
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6899
sg6371
g6889
sg6385
g6893
sg6380
g6897
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g7002
sg6371
g6992
sg6385
g6996
sg6380
g7000
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6464
sg6371
g6490
sg6385
g6471
sg6380
g6497
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6558
sg6371
g6554
sg6385
g6565
sg6380
g6562
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6899
sg6371
g7069
sg6385
g6893
sg6380
g7076
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6430
sg6371
g7235
sg6385
g6437
sg6380
g7242
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6959
sg6371
g6949
sg6385
g6953
sg6380
g6957
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g7056
sg6371
g7052
sg6385
g7063
sg6380
g7060
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g7026
sg6371
g7022
sg6385
g7033
sg6380
g7030
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6547
sg6371
g6614
sg6385
g6541
sg6380
g6621
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.