ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E1_infer_design1_2015_Jul_01_1022
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xbb\r\xd2%\x1d\x00N@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_01_1022
p67
sVparticipant
p68
VE1
p69
sVglasses
p70
Vn
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F11.683733287565701
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F26.482914372579216
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P3\x00'
tbsg70
Vn
sa(dp96
g64
g65
sg20
F21.050000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F1.0799999999999992
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x07\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p103
sg21
F1.8999999999999999
sg70
Vn
sa(dp104
g64
g65
sg20
F16.134
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F0.51999999999999913
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\r\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p110
sg21
F1.3999999999999999
sg70
Vn
sa(dp111
g64
g65
sg20
F9.734
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F1.1399999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'!\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V44-crunch.png
p117
sg21
F1.2
sg70
Vn
sa(dp118
g64
g65
sg20
F3.0840000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'\x1d\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V40-sardines.png
p124
sg21
F2
sg70
Vn
sa(dp125
g64
g65
sg20
F4.5839999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0.059999999999999165
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\x19\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p131
sg21
F1.2
sg70
Vn
sa(dp132
g64
g65
sg20
F2.2010000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S' \x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p138
sg21
F1.3
sg70
Vn
sa(dp139
g64
g65
sg20
F10.217000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F1.0399999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x0c\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V18-mms.png
p145
sg21
F1.3
sg70
Vn
sa(dp146
g64
g65
sg20
F9.3339999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F1.1199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\x1c\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p152
sg21
F1.7
sg70
Vn
sa(dp153
g64
g65
sg20
F6.7839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F0.41999999999999882
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x15\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V29-beans.png
p159
sg21
F1.8
sg70
Vn
sa(dp160
g64
g65
sg20
F4.9669999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F0.43999999999999906
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x03\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V4-corn.png
p166
sg21
F1.6000000000000001
sg70
Vn
sa(dp167
g64
g65
sg20
F6.8840000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0.67999999999999883
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x12\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p173
sg21
F1.8999999999999999
sg70
Vn
sa(dp174
g64
g65
sg20
F4.3170000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0.37999999999999945
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x0b\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p180
sg21
F1.1000000000000001
sg70
Vn
sa(dp181
g64
g65
sg20
F4.1840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F0.55999999999999961
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x1a\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V35-raisins.png
p187
sg21
F1
sg70
Vn
sa(dp188
g64
g65
sg20
F7.4009999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0.39999999999999925
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\t\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p194
sg21
F1.2
sg70
Vn
sa(dp195
g64
g65
sg20
F2.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x05\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p201
sg21
F1.8
sg70
Vn
sa(dp202
g64
g65
sg20
F6.5170000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F0.69999999999999973
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\x13\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p208
sg21
F1.1000000000000001
sg70
Vn
sa(dp209
g64
g65
sg20
F4.5010000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F1.02
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'#\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p215
sg21
F1.1000000000000001
sg70
Vn
sa(dp216
g64
g65
sg20
F3.5339999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F0.5999999999999992
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\n\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p222
sg21
F1.6000000000000001
sg70
Vn
sa(dp223
g64
g65
sg20
F4.9340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\x0e\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p229
sg21
F2
sg70
Vn
sa(dp230
g64
g65
sg20
F2.9169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F0.55999999999999872
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S"'\x00\x00\x00"
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V51-mars.png
p236
sg21
F2
sg70
Vn
sa(dp237
g64
g65
sg20
F4.351
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F0.77999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x14\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p243
sg21
F2
sg70
Vn
sa(dp244
g64
g65
sg20
F3.6509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F0.35999999999999899
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\x04\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p250
sg21
F1.5
sg70
Vn
sa(dp251
g64
g65
sg20
F2.6840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F0.83999999999999964
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'\x06\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V7-olives.png
p257
sg21
F1.2
sg70
Vn
sa(dp258
g64
g65
sg20
F9.0839999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F0.7799999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\x1b\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p264
sg21
F1.1000000000000001
sg70
Vn
sa(dp265
g64
g65
sg20
F2.7669999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F0.49999999999999867
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x16\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p271
sg21
F1.8999999999999999
sg70
Vn
sa(dp272
g64
g65
sg20
F5.0510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F0.51999999999999913
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x10\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V22-daim.png
p278
sg21
F1.6000000000000001
sg70
Vn
sa(dp279
g64
g65
sg20
F5.5170000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F0.37999999999999856
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'"\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p285
sg21
F1.8999999999999999
sg70
Vn
sa(dp286
g64
g65
sg20
F2.2839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0.37999999999999901
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'%\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p292
sg21
F1.6000000000000001
sg70
Vn
sa(dp293
g64
g65
sg20
F7.3840000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0.61999999999999944
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x02\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p299
sg21
F1.2
sg70
Vn
sa(dp300
g64
g65
sg20
F5.1840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F1.0600000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\x00\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p306
sg21
F1
sg70
Vn
sa(dp307
g64
g65
sg20
F5.6840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F0.55999999999999917
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x11\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p313
sg21
F1.5
sg70
Vn
sa(dp314
g64
g65
sg20
F4.2169999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F0.91999999999999904
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'\x1e\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p320
sg21
F2
sg70
Vn
sa(dp321
g64
g65
sg20
F3.117
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'&\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V50-polo.png
p327
sg21
F1.3
sg70
Vn
sa(dp328
g64
g65
sg20
F6.4340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F0.619999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\x08\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p334
sg21
F1.8
sg70
Vn
sa(dp335
g64
g65
sg20
F3.0169999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F0.51999999999999957
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x18\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p341
sg21
F1.1000000000000001
sg70
Vn
sa(dp342
g64
g65
sg20
F6.8170000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F1.1799999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x01\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p348
sg21
F1.5
sg70
Vn
sa(dp349
g64
g65
sg20
F4.5010000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F0.5399999999999987
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'$\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V48-twix.png
p355
sg21
F1.8999999999999999
sg70
Vn
sa(dp356
g64
g65
sg20
F5.3499999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F1.1800000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x17\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p362
sg21
F1
sg70
Vn
sa(dp363
g64
g65
sg20
F2.1339999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F1.3
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'\x1f\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p369
sg21
F1.3
sg70
Vn
sa(dp370
g64
g65
sg20
F7.4669999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0.75999999999999934
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x0f\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p376
sg21
F1.5
sg70
Vn
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F2.5667736163632071
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vn
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p381
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'left'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F1.1334235002714195
sg27
F3.3340000000000001
sg70
Vn
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'7-olives.png'
p390
sg26
F5.9999999999999982
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'left'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F1.9833451553895429
sg27
F4.4509999999999996
sg70
Vn
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p399
sg26
F4.6000000000000005
sg28
F4
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'right'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F2.4333561031457975
sg27
F6.601
sg70
Vn
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'51-mars.png'
p408
sg26
F4.7000000000000011
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'right'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F1.9333586690263473
sg27
F2.0840000000000001
sg70
Vn
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'35-raisins.png'
p417
sg26
F3.4999999999999996
sg28
F4
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'left'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F3.7171296465244268
sg27
F7.1669999999999998
sg70
Vn
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p426
sg26
F5.2999999999999998
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'right'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F2.2333959028019308
sg27
F2.367
sg70
Vn
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'40-sardines.png'
p435
sg26
F4.6000000000000005
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'right'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F2.866705078846735
sg27
F1.784
sg70
Vn
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p444
sg26
F3.1000000000000001
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'right'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F6.2004958991528838
sg27
F4.5839999999999996
sg70
Vn
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'29-beans.png'
p453
sg26
F3.0999999999999996
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'right'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F2.9999586608159916
sg27
F3.4169999999999998
sg70
Vn
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'5-pineapple.png'
p462
sg26
F4.3000000000000007
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'left'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F3.5333681342740419
sg27
F5.0010000000000003
sg70
Vn
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'18-mms.png'
p471
sg26
F5.8999999999999977
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'left'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F1.3167647783307075
sg27
F1.5669999999999999
sg70
Vn
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p480
sg26
F5.2000000000000002
sg28
F4
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'left'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F2.4666737751053915
sg27
F1.734
sg70
Vn
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p489
sg26
F4.2000000000000002
sg28
F4
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'left'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F3.0001428340092389
sg27
F2.7509999999999999
sg70
Vn
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p498
sg26
F3.9000000000000004
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'left'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F3.5999863723236558
sg27
F2.8010000000000002
sg70
Vn
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'22-daim.png'
p507
sg26
F5.2000000000000011
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'right'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F3.9171354625195818
sg27
F2.7010000000000001
sg70
Vn
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p516
sg26
F4.8000000000000007
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'right'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F7.0833785688546413
sg27
F1.6339999999999999
sg70
Vn
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p525
sg26
F2.6999999999999993
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'left'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F4.3505283432850774
sg27
F1.8839999999999999
sg70
Vn
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'48-twix.png'
p534
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'left'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F1.8333902578660854
sg27
F2.351
sg70
Vn
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p543
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'right'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F1.2001668962657277
sg27
F1.1339999999999999
sg70
Vn
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p552
sg26
F3.0999999999999992
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F2.9334858226557117
sg27
F2.4009999999999998
sg70
Vn
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'38-maltesers.png'
p561
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'left'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F1.1664857245814346
sg27
F1.1339999999999999
sg70
Vn
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p570
sg26
F5.2999999999999998
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'left'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F3.0000946524778556
sg27
F1.9510000000000001
sg70
Vn
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'46-pistachios.png'
p579
sg26
F4.5000000000000018
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'left'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F1.5668631370790536
sg27
F3.1669999999999998
sg70
Vn
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p588
sg26
F5.2999999999999998
sg28
F4
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'right'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F7.4333104874940545
sg27
F3.2839999999999998
sg70
Vn
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p597
sg26
F3.4000000000000004
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'right'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F2.2501656418344282
sg27
F1.117
sg70
Vn
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p606
sg26
F5.6999999999999984
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'right'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F1.8668165520948605
sg27
F1.4510000000000001
sg70
Vn
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p615
sg26
F5.9999999999999982
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'right'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F0.96644968821692601
sg27
F1.034
sg70
Vn
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'49-yorkie.png'
p624
sg26
F4.1000000000000014
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'right'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F1.2499726306086814
sg27
F1.4510000000000001
sg70
Vn
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p633
sg26
F5.4999999999999991
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'left'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F0.88336477011944226
sg27
F1.401
sg70
Vn
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'50-polo.png'
p642
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'right'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F0.93336494117920665
sg27
F1.0009999999999999
sg70
Vn
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p651
sg26
F5.0000000000000009
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'left'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F0.88332229054503841
sg27
F1.901
sg70
Vn
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'25-kitkat.png'
p660
sg26
F3
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'left'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F4.5001277238243347
sg27
F3.7349999999999999
sg70
Vn
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'4-corn.png'
p669
sg26
F3.2999999999999998
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'right'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F3.0832864822577903
sg27
F1.034
sg70
Vn
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p678
sg26
F3.1000000000000001
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'left'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F9.1831801977887153
sg27
F1.7010000000000001
sg70
Vn
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p687
sg26
F4.8000000000000016
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'left'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F1.3500972753763563
sg27
F1.2010000000000001
sg70
Vn
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p696
sg26
F3.8000000000000007
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'right'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F1.2000559932121178
sg27
F1.085
sg70
Vn
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p705
sg26
F4.7000000000000011
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'right'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F1.6834601638511231
sg27
F2.3010000000000002
sg70
Vn
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'44-crunch.png'
p714
sg26
F3.2999999999999994
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'right'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F1.6834273776021291
sg27
F2.2010000000000001
sg70
Vn
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'31-hobnobs.png'
p723
sg26
F4.6000000000000014
sg28
F3
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'right'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F1.6501319432727541
sg27
F1.8009999999999999
sg70
Vn
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p732
sg26
F4.0999999999999996
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'left'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F2.2001691770474281
sg27
F2.367
sg70
Vn
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F223.41115211451415
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F3.8334874762222171
sg66
g67
sg68
g69
sg70
Vn
sa(dp743
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p744
sg83
S'37-nakd_cashew_cookie.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'9-yu_mango_pieces.png'
p749
sg33
g749
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\x01\n$7\x01\xf4\x00'
tRp754
sa(dp755
g64
g65
sg82
S'12-topic.png'
p756
sg83
S'12-topic.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'39-mackerel.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\x01\n%\x03\x07;\x90'
tRp765
sa(dp766
g64
g65
sg82
S'32-hovis_crackers.png'
p767
sg83
S'24-food_doctor_apple_walnut_bar.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p772
sg33
g772
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\x01\n%\x0c\x03\xadh'
tRp776
sa(dp777
g64
g65
sg82
S'53-cheestrings.png'
p778
sg83
S'47-picnic.png'
p779
sg56
g57
sS'practice_loop.thisN'
p780
I3
sS'practice_loop.thisTrialN'
p781
I3
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p782
I0
sg84
S'47-picnic.png'
p783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p784
sS'practice_loop.thisIndex'
p785
g60
(g99
S'\x03\x00\x00\x00'
tRp786
sg34
g753
(S'\x07\xdf\x07\x01\n%\x19\x05\xfb@'
tRp787
sa(dp788
g64
g65
sg82
S'11-snickers.png'
p789
sg83
S'54-frubes_yogurt.png'
p790
sg56
g57
sS'practice_loop.thisN'
p791
I4
sS'practice_loop.thisTrialN'
p792
I4
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p793
I0
sg84
S'54-frubes_yogurt.png'
p794
sg33
g789
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p795
sS'practice_loop.thisIndex'
p796
g60
(g99
S'\x04\x00\x00\x00'
tRp797
sg34
g753
(S'\x07\xdf\x07\x01\n%!\x02t\xe8'
tRp798
sa(dp799
g64
g65
sg82
g767
sg83
S'32-hovis_crackers.png'
p800
sg56
g57
sS'practice_loop.thisN'
p801
I5
sS'practice_loop.thisTrialN'
p802
I5
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p803
I0
sg84
g772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p804
sS'practice_loop.thisIndex'
p805
g60
(g99
S'\x05\x00\x00\x00'
tRp806
sg34
g753
(S"\x07\xdf\x07\x01\n%'\x0c\xc9p"
tRp807
sa(dp808
g64
g65
sg82
g744
sg83
S'9-yu_mango_pieces.png'
p809
sg56
g57
sS'practice_loop.thisN'
p810
I6
sS'practice_loop.thisTrialN'
p811
I6
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p812
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p813
sS'practice_loop.thisIndex'
p814
g60
(g99
S'\x06\x00\x00\x00'
tRp815
sg34
g753
(S'\x07\xdf\x07\x01\n%.\n\xb60'
tRp816
sa(dp817
g64
g65
sg82
S'52-aero_mousse.png'
p818
sg83
S'14-discos_salt_vinegar.png'
p819
sg56
g57
sS'practice_loop.thisN'
p820
I7
sS'practice_loop.thisTrialN'
p821
I7
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p822
I0
sg84
S'14-discos_salt_vinegar.png'
p823
sg33
g818
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p824
sS'practice_loop.thisIndex'
p825
g60
(g99
S'\x07\x00\x00\x00'
tRp826
sg34
g753
(S'\x07\xdf\x07\x01\n%5\t\xd3\xa0'
tRp827
sa(dp828
g64
g65
sg82
g778
sg83
S'53-cheestrings.png'
p829
sg56
g57
sS'practice_loop.thisN'
p830
I8
sS'practice_loop.thisTrialN'
p831
I8
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p832
I0
sg84
g783
sg33
g783
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p833
sS'practice_loop.thisIndex'
p834
g60
(g99
S'\x08\x00\x00\x00'
tRp835
sg34
g753
(S'\x07\xdf\x07\x01\n&\x00\x0f#\x00'
tRp836
sa(dp837
g64
g65
sg82
g756
sg83
S'39-mackerel.png'
p838
sg56
g57
sS'practice_loop.thisN'
p839
I9
sS'practice_loop.thisTrialN'
p840
I9
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p841
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p842
sS'practice_loop.thisIndex'
p843
g60
(g99
S'\t\x00\x00\x00'
tRp844
sg34
g753
(S'\x07\xdf\x07\x01\n&\x07\t}\xb0'
tRp845
sa(dp846
g64
g65
sg82
g789
sg83
S'11-snickers.png'
p847
sg56
g57
sS'practice_loop.thisN'
p848
I10
sS'practice_loop.thisTrialN'
p849
I10
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p850
I0
sg84
g794
sg33
g789
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p851
sS'practice_loop.thisIndex'
p852
g60
(g99
S'\n\x00\x00\x00'
tRp853
sg34
g753
(S'\x07\xdf\x07\x01\n&\x0e\x05\x82('
tRp854
sa(dp855
g64
g65
sg82
S'15-walnut_whip.png'
p856
sg83
S'15-walnut_whip.png'
p857
sg56
g57
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p860
I0
sg84
S'28-maple_pecan.png'
p861
sg33
g861
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\x01\n&\x14\x0b\x8d\x08'
tRp865
sa(dp866
g64
g65
sg82
g818
sg83
S'52-aero_mousse.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g823
sg33
g818
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\x01\n&\x1c\x05f\xd0'
tRp874
sa(dp875
g64
g65
sg82
g856
sg83
S'28-maple_pecan.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g861
sg33
g856
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\x01\n&"\x07\xdf\xa0'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F165.54608292697321
sg66
g67
sg68
g69
sg70
Vn
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vn
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'17-jacobs_mini_cheddars_redo.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'left'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'17-jacobs_mini_cheddars_redo.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'8-liquorice_catherine_wheels.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'8-liquorice_catherine_wheels.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vn
sS'block_loop.thisTrialN'
p912
I0
sg39
F3.5665301428225575
sg34
g753
(S'\x07\xdf\x07\x01\n,/\n\xe8\xf8'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'43-mrporky_pork_crackles_redo.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'right'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'18-mms.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'18-mms.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vn
sS'block_loop.thisTrialN'
p929
I0
sg39
F2.5832186289762831
sg34
g753
(S'\x07\xdf\x07\x01\n,8\x04\xbe\xd8'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'41-peanuts_redo.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'left'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'41-peanuts_redo.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'45-chewy_nougat_redo.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p943
I0
sg909
S'45-chewy_nougat_redo.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vn
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.7999839204831005
sg34
g753
(S'\x07\xdf\x07\x01\n-\x03\x0eW\xe0'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'10-bounty_redo.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'left'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'10-bounty_redo.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'4-corn.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p960
I0
sg909
S'4-corn.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vn
sS'block_loop.thisTrialN'
p963
I0
sg39
F2.1665475908093867
sg34
g753
(S'\x07\xdf\x07\x01\n-\n\x0b\xc7\xa0'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'13-mccoys_steak_crisps.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'left'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'13-mccoys_steak_crisps.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'3-ellas_strawberries_apples.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p977
I0
sg909
S'3-ellas_strawberries_apples.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vn
sS'block_loop.thisTrialN'
p980
I0
sg39
F1.8003573986306947
sg34
g753
(S'\x07\xdf\x07\x01\n-\x11\x0e\xb5\xa0'
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
S'26-walkers_smoky_bacon.png'
p984
sS'block_loop.thisIndex'
p985
g889
sg38
S'left'
p986
sg59
g63
sS'trial_loop.thisN'
p987
I5
sg33
S'26-walkers_smoky_bacon.png'
p988
sg64
g65
sS'trial_loop.thisIndex'
p989
g60
(g99
S'\x05\x00\x00\x00'
tRp990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p991
I0
sg904
S'44-crunch.png'
p992
sS'block_loop.thisRepN'
p993
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p994
I0
sg909
S'44-crunch.png'
p995
sg55
g11
sS'block_loop.thisTrial'
p996
Nsg70
Vn
sS'block_loop.thisTrialN'
p997
I0
sg39
F3.1998033965410286
sg34
g753
(S'\x07\xdf\x07\x01\n-\x18\x0c)H'
tRp998
sa(dp999
S'trial_loop.thisTrialN'
p1000
I6
sg895
S'35-raisins.png'
p1001
sS'block_loop.thisIndex'
p1002
g889
sg38
S'right'
p1003
sg59
g63
sS'trial_loop.thisN'
p1004
I6
sg33
S'49-yorkie.png'
p1005
sg64
g65
sS'trial_loop.thisIndex'
p1006
g60
(g99
S'\x06\x00\x00\x00'
tRp1007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1008
I0
sg904
S'49-yorkie.png'
p1009
sS'block_loop.thisRepN'
p1010
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1011
I0
sg909
S'35-raisins.png'
p1012
sg55
g11
sS'block_loop.thisTrial'
p1013
Nsg70
Vn
sS'block_loop.thisTrialN'
p1014
I0
sg39
F1.7999950392977553
sg34
g753
(S'\x07\xdf\x07\x01\n-!\x00\x84\xd0'
tRp1015
sa(dp1016
S'trial_loop.thisTrialN'
p1017
I7
sg895
S'20-fruit_pastilles.png'
p1018
sS'block_loop.thisIndex'
p1019
g889
sg38
S'left'
p1020
sg59
g63
sS'trial_loop.thisN'
p1021
I7
sg33
S'2-steamed_puddings.png'
p1022
sg64
g65
sS'trial_loop.thisIndex'
p1023
g60
(g99
S'\x07\x00\x00\x00'
tRp1024
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1025
I0
sg904
S'2-steamed_puddings.png'
p1026
sS'block_loop.thisRepN'
p1027
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1028
I0
sg909
S'20-fruit_pastilles.png'
p1029
sg55
g11
sS'block_loop.thisTrial'
p1030
Nsg70
Vn
sS'block_loop.thisTrialN'
p1031
I0
sg39
F3.8166062639411393
sg34
g753
(S"\x07\xdf\x07\x01\n-'\r6\xd0"
tRp1032
sa(dp1033
S'trial_loop.thisTrialN'
p1034
I8
sg895
S'25-kitkat.png'
p1035
sS'block_loop.thisIndex'
p1036
g889
sg38
S'right'
p1037
sg59
g63
sS'trial_loop.thisN'
p1038
I8
sg33
S'25-kitkat.png'
p1039
sg64
g65
sS'trial_loop.thisIndex'
p1040
g60
(g99
S'\x08\x00\x00\x00'
tRp1041
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1042
I0
sg904
S'31-hobnobs.png'
p1043
sS'block_loop.thisRepN'
p1044
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1045
I0
sg909
S'31-hobnobs.png'
p1046
sg55
g11
sS'block_loop.thisTrial'
p1047
Nsg70
Vn
sS'block_loop.thisTrialN'
p1048
I0
sg39
F2.7168602290821582
sg34
g753
(S'\x07\xdf\x07\x01\n-0\n\xdd@'
tRp1049
sa(dp1050
S'trial_loop.thisTrialN'
p1051
I9
sg895
S'22-daim.png'
p1052
sS'block_loop.thisIndex'
p1053
g889
sg38
S'left'
p1054
sg59
g63
sS'trial_loop.thisN'
p1055
I9
sg33
S'22-daim.png'
p1056
sg64
g65
sS'trial_loop.thisIndex'
p1057
g60
(g99
S'\t\x00\x00\x00'
tRp1058
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1059
I0
sg904
S'7-olives.png'
p1060
sS'block_loop.thisRepN'
p1061
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1062
I0
sg909
S'7-olives.png'
p1063
sg55
g11
sS'block_loop.thisTrial'
p1064
Nsg70
Vn
sS'block_loop.thisTrialN'
p1065
I0
sg39
F2.483298399346495
sg34
g753
(S'\x07\xdf\x07\x01\n-8\x07\x18h'
tRp1066
sa(dp1067
S'trial_loop.thisTrialN'
p1068
I10
sg895
g933
sS'block_loop.thisIndex'
p1069
g889
sg38
S'left'
p1070
sg59
g63
sS'trial_loop.thisN'
p1071
I10
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1072
g60
(g99
S'\n\x00\x00\x00'
tRp1073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1074
I0
sg904
g941
sS'block_loop.thisRepN'
p1075
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1076
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1077
Nsg70
Vn
sS'block_loop.thisTrialN'
p1078
I0
sg39
F1.5499941840043903
sg34
g753
(S'\x07\xdf\x07\x01\n.\x03\x0f\x03\xc0'
tRp1079
sa(dp1080
S'trial_loop.thisTrialN'
p1081
I11
sg895
S'27-hartleys_raspberries_jelly.png'
p1082
sS'block_loop.thisIndex'
p1083
g889
sg38
S'right'
p1084
sg59
g63
sS'trial_loop.thisN'
p1085
I11
sg33
S'51-mars.png'
p1086
sg64
g65
sS'trial_loop.thisIndex'
p1087
g60
(g99
S'\x0b\x00\x00\x00'
tRp1088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1089
I0
sg904
S'51-mars.png'
p1090
sS'block_loop.thisRepN'
p1091
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1092
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p1093
sg55
g11
sS'block_loop.thisTrial'
p1094
Nsg70
Vn
sS'block_loop.thisTrialN'
p1095
I0
sg39
F1.4831963343258394
sg34
g753
(S'\x07\xdf\x07\x01\n.\n\x08\xa6\xd8'
tRp1096
sa(dp1097
S'trial_loop.thisTrialN'
p1098
I12
sg895
S'2-steamed_puddings.png'
p1099
sS'block_loop.thisIndex'
p1100
g889
sg38
S'left'
p1101
sg59
g63
sS'trial_loop.thisN'
p1102
I12
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1103
g60
(g99
S'\x0c\x00\x00\x00'
tRp1104
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1105
I0
sg904
S'20-fruit_pastilles.png'
p1106
sS'block_loop.thisRepN'
p1107
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1108
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1109
Nsg70
Vn
sS'block_loop.thisTrialN'
p1110
I0
sg39
F1.2832275810478677
sg34
g753
(S'\x07\xdf\x07\x01\n.\x11\x01W\xc0'
tRp1111
sa(dp1112
S'trial_loop.thisTrialN'
p1113
I13
sg895
S'1-treacle_cookies.png'
p1114
sS'block_loop.thisIndex'
p1115
g889
sg38
S'left'
p1116
sg59
g63
sS'trial_loop.thisN'
p1117
I13
sg33
S'1-treacle_cookies.png'
p1118
sg64
g65
sS'trial_loop.thisIndex'
p1119
g60
(g99
S'\r\x00\x00\x00'
tRp1120
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1121
I0
sg904
S'21-nakd_banana_crunch.png'
p1122
sS'block_loop.thisRepN'
p1123
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1124
I0
sg909
S'21-nakd_banana_crunch.png'
p1125
sg55
g11
sS'block_loop.thisTrial'
p1126
Nsg70
Vn
sS'block_loop.thisTrialN'
p1127
I0
sg39
F1.6502645137597938
sg34
g753
(S'\x07\xdf\x07\x01\n.\x17\x061\xf0'
tRp1128
sa(dp1129
S'trial_loop.thisTrialN'
p1130
I14
sg895
S'19-caramello_redo.png'
p1131
sS'block_loop.thisIndex'
p1132
g889
sg38
S'left'
p1133
sg59
g63
sS'trial_loop.thisN'
p1134
I14
sg33
S'30-spaghetti_hoops.png'
p1135
sg64
g65
sS'trial_loop.thisIndex'
p1136
g60
(g99
S'\x0e\x00\x00\x00'
tRp1137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1138
I0
sg904
S'30-spaghetti_hoops.png'
p1139
sS'block_loop.thisRepN'
p1140
I0
sg907
S'19-caramello_redo.png'
p1141
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1142
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p1143
Nsg70
Vn
sS'block_loop.thisTrialN'
p1144
I0
sg39
F1.0833209790944238
sg34
g753
(S'\x07\xdf\x07\x01\n.\x1e\x01D8'
tRp1145
sa(dp1146
S'trial_loop.thisTrialN'
p1147
I15
sg895
S'29-beans.png'
p1148
sS'block_loop.thisIndex'
p1149
g889
sg38
S'right'
p1150
sg59
g63
sS'trial_loop.thisN'
p1151
I15
sg33
S'29-beans.png'
p1152
sg64
g65
sS'trial_loop.thisIndex'
p1153
g60
(g99
S'\x0f\x00\x00\x00'
tRp1154
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1155
I0
sg904
S'46-pistachios.png'
p1156
sS'block_loop.thisRepN'
p1157
I0
sg907
S'46-pistachios.png'
p1158
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1159
I0
sg909
g1152
sg55
g11
sS'block_loop.thisTrial'
p1160
Nsg70
Vn
sS'block_loop.thisTrialN'
p1161
I0
sg39
F3.5329564530175048
sg34
g753
(S'\x07\xdf\x07\x01\n.$\x03\x05p'
tRp1162
sa(dp1163
S'trial_loop.thisTrialN'
p1164
I16
sg895
S'3-ellas_strawberries_apples.png'
p1165
sS'block_loop.thisIndex'
p1166
g889
sg38
S'right'
p1167
sg59
g63
sS'trial_loop.thisN'
p1168
I16
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1169
g60
(g99
S'\x10\x00\x00\x00'
tRp1170
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1171
I0
sg904
S'13-mccoys_steak_crisps.png'
p1172
sS'block_loop.thisRepN'
p1173
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1174
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1175
Nsg70
Vn
sS'block_loop.thisTrialN'
p1176
I0
sg39
F1.0666142466798192
sg34
g753
(S'\x07\xdf\x07\x01\n.,\x0b\xa0\x90'
tRp1177
sa(dp1178
S'trial_loop.thisTrialN'
p1179
I17
sg895
S'16-skips_prawn.png'
p1180
sS'block_loop.thisIndex'
p1181
g889
sg38
S'right'
p1182
sg59
g63
sS'trial_loop.thisN'
p1183
I17
sg33
S'16-skips_prawn.png'
p1184
sg64
g65
sS'trial_loop.thisIndex'
p1185
g60
(g99
S'\x11\x00\x00\x00'
tRp1186
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1187
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1188
sS'block_loop.thisRepN'
p1189
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1190
I0
sg909
S'42-mrkipling_lemon_slices.png'
p1191
sg55
g11
sS'block_loop.thisTrial'
p1192
Nsg70
Vn
sS'block_loop.thisTrialN'
p1193
I0
sg39
F2.566438911519981
sg34
g753
(S"\x07\xdf\x07\x01\n.2\r'0"
tRp1194
sa(dp1195
S'trial_loop.thisTrialN'
p1196
I18
sg895
g916
sS'block_loop.thisIndex'
p1197
g889
sg38
S'right'
p1198
sg59
g63
sS'trial_loop.thisN'
p1199
I18
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1200
g60
(g99
S'\x12\x00\x00\x00'
tRp1201
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1202
I0
sg904
g924
sS'block_loop.thisRepN'
p1203
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1204
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1205
Nsg70
Vn
sS'block_loop.thisTrialN'
p1206
I0
sg39
F1.6833663666684515
sg34
g753
(S'\x07\xdf\x07\x01\n.:\x07\x00\xf8'
tRp1207
sa(dp1208
S'trial_loop.thisTrialN'
p1209
I19
sg895
S'7-olives.png'
p1210
sS'block_loop.thisIndex'
p1211
g889
sg38
S'right'
p1212
sg59
g63
sS'trial_loop.thisN'
p1213
I19
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p1214
g60
(g99
S'\x13\x00\x00\x00'
tRp1215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1216
I0
sg904
S'22-daim.png'
p1217
sS'block_loop.thisRepN'
p1218
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1219
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p1220
Nsg70
Vn
sS'block_loop.thisTrialN'
p1221
I0
sg39
F1.883199983578379
sg34
g753
(S'\x07\xdf\x07\x01\n/\x05\x02\xca\xd8'
tRp1222
sa(dp1223
S'trial_loop.thisTrialN'
p1224
I20
sg895
g1035
sS'block_loop.thisIndex'
p1225
g889
sg38
S'left'
p1226
sg59
g63
sS'trial_loop.thisN'
p1227
I20
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p1228
g60
(g99
S'\x14\x00\x00\x00'
tRp1229
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1230
I0
sg904
g1043
sS'block_loop.thisRepN'
p1231
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1232
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p1233
Nsg70
Vn
sS'block_loop.thisTrialN'
p1234
I0
sg39
F1.6999325458546082
sg34
g753
(S'\x07\xdf\x07\x01\n/\x0c\x01o0'
tRp1235
sa(dp1236
S'trial_loop.thisTrialN'
p1237
I21
sg895
S'18-mms.png'
p1238
sS'block_loop.thisIndex'
p1239
g889
sg38
S'left'
p1240
sg59
g63
sS'trial_loop.thisN'
p1241
I21
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1242
g60
(g99
S'\x15\x00\x00\x00'
tRp1243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1244
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1245
sS'block_loop.thisRepN'
p1246
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1247
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1248
Nsg70
Vn
sS'block_loop.thisTrialN'
p1249
I0
sg39
F1.4333064961247146
sg34
g753
(S'\x07\xdf\x07\x01\n/\x12\x0c\xb5\xe8'
tRp1250
sa(dp1251
S'trial_loop.thisTrialN'
p1252
I22
sg895
g1018
sS'block_loop.thisIndex'
p1253
g889
sg38
S'right'
p1254
sg59
g63
sS'trial_loop.thisN'
p1255
I22
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1256
g60
(g99
S'\x16\x00\x00\x00'
tRp1257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1258
I0
sg904
g1026
sS'block_loop.thisRepN'
p1259
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1260
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1261
Nsg70
Vn
sS'block_loop.thisTrialN'
p1262
I0
sg39
F1.1999057466600789
sg34
g753
(S'\x07\xdf\x07\x01\n/\x19\x04\xaf8'
tRp1263
sa(dp1264
S'trial_loop.thisTrialN'
p1265
I23
sg895
g984
sS'block_loop.thisIndex'
p1266
g889
sg38
S'right'
p1267
sg59
g63
sS'trial_loop.thisN'
p1268
I23
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1269
g60
(g99
S'\x17\x00\x00\x00'
tRp1270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1271
I0
sg904
g992
sS'block_loop.thisRepN'
p1272
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1273
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1274
Nsg70
Vn
sS'block_loop.thisTrialN'
p1275
I0
sg39
F3.466964289787029
sg34
g753
(S'\x07\xdf\x07\x01\n/\x1f\x08\x1a8'
tRp1276
sa(dp1277
S'trial_loop.thisTrialN'
p1278
I24
sg895
g1082
sS'block_loop.thisIndex'
p1279
g889
sg38
S'right'
p1280
sg59
g63
sS'trial_loop.thisN'
p1281
I24
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p1282
g60
(g99
S'\x18\x00\x00\x00'
tRp1283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1284
I0
sg904
g1090
sS'block_loop.thisRepN'
p1285
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1286
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p1287
Nsg70
Vn
sS'block_loop.thisTrialN'
p1288
I0
sg39
F0.84995073509617214
sg34
g753
(S'\x07\xdf\x07\x01\n/(\x00\x80\xe8'
tRp1289
sa(dp1290
S'trial_loop.thisTrialN'
p1291
I25
sg895
g1035
sS'block_loop.thisIndex'
p1292
g889
sg38
S'left'
p1293
sg59
g63
sS'trial_loop.thisN'
p1294
I25
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p1295
g60
(g99
S'\x19\x00\x00\x00'
tRp1296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1297
I0
sg904
g1043
sS'block_loop.thisRepN'
p1298
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1299
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p1300
Nsg70
Vn
sS'block_loop.thisTrialN'
p1301
I0
sg39
F1.0332914429600351
sg34
g753
(S'\x07\xdf\x07\x01\n/-\r\xf68'
tRp1302
sa(dp1303
S'trial_loop.thisTrialN'
p1304
I26
sg895
g1210
sS'block_loop.thisIndex'
p1305
g889
sg38
S'right'
p1306
sg59
g63
sS'trial_loop.thisN'
p1307
I26
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p1308
g60
(g99
S'\x1a\x00\x00\x00'
tRp1309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1310
I0
sg904
g1217
sS'block_loop.thisRepN'
p1311
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1312
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p1313
Nsg70
Vn
sS'block_loop.thisTrialN'
p1314
I0
sg39
F1.2999060887768792
sg34
g753
(S'\x07\xdf\x07\x01\n/3\x0e\xff\xd8'
tRp1315
sa(dp1316
S'trial_loop.thisTrialN'
p1317
I27
sg895
g933
sS'block_loop.thisIndex'
p1318
g889
sg38
S'left'
p1319
sg59
g63
sS'trial_loop.thisN'
p1320
I27
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1321
g60
(g99
S'\x1b\x00\x00\x00'
tRp1322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1323
I0
sg904
g941
sS'block_loop.thisRepN'
p1324
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1325
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1326
Nsg70
Vn
sS'block_loop.thisTrialN'
p1327
I0
sg39
F1.5666393352885279
sg34
g753
(S'\x07\xdf\x07\x01\n/:\x04\xd6H'
tRp1328
sa(dp1329
S'trial_loop.thisTrialN'
p1330
I28
sg895
S'21-nakd_banana_crunch.png'
p1331
sS'block_loop.thisIndex'
p1332
g889
sg38
S'right'
p1333
sg59
g63
sS'trial_loop.thisN'
p1334
I28
sg33
g1125
sg64
g65
sS'trial_loop.thisIndex'
p1335
g60
(g99
S'\x1c\x00\x00\x00'
tRp1336
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1337
I0
sg904
S'1-treacle_cookies.png'
p1338
sS'block_loop.thisRepN'
p1339
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1340
I0
sg909
g1125
sg55
g11
sS'block_loop.thisTrial'
p1341
Nsg70
Vn
sS'block_loop.thisTrialN'
p1342
I0
sg39
F1.449973314844101
sg34
g753
(S'\x07\xdf\x07\x01\n0\x04\r\xf68'
tRp1343
sa(dp1344
S'trial_loop.thisTrialN'
p1345
I29
sg895
g1018
sS'block_loop.thisIndex'
p1346
g889
sg38
S'right'
p1347
sg59
g63
sS'trial_loop.thisN'
p1348
I29
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1349
g60
(g99
S'\x1d\x00\x00\x00'
tRp1350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1351
I0
sg904
g1026
sS'block_loop.thisRepN'
p1352
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1353
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1354
Nsg70
Vn
sS'block_loop.thisTrialN'
p1355
I0
sg39
F1.0499420111027575
sg34
g753
(S'\x07\xdf\x07\x01\n0\x0b\x06.\x08'
tRp1356
sa(dp1357
S'trial_loop.thisTrialN'
p1358
I30
sg895
g1131
sS'block_loop.thisIndex'
p1359
g889
sg38
S'left'
p1360
sg59
g63
sS'trial_loop.thisN'
p1361
I30
sg33
g1141
sg64
g65
sS'trial_loop.thisIndex'
p1362
g60
(g99
S'\x1e\x00\x00\x00'
tRp1363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1364
I0
sg904
g1139
sS'block_loop.thisRepN'
p1365
I0
sg907
g1141
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1366
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p1367
Nsg70
Vn
sS'block_loop.thisTrialN'
p1368
I0
sg39
F1.9166385370153876
sg34
g753
(S'\x07\xdf\x07\x01\n0\x11\x07v('
tRp1369
sa(dp1370
S'trial_loop.thisTrialN'
p1371
I31
sg895
S'36-fig_rolls.png'
p1372
sS'block_loop.thisIndex'
p1373
g889
sg38
S'right'
p1374
sg59
g63
sS'trial_loop.thisN'
p1375
I31
sg33
S'36-fig_rolls.png'
p1376
sg64
g65
sS'trial_loop.thisIndex'
p1377
g60
(g99
S'\x1f\x00\x00\x00'
tRp1378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1379
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1380
sS'block_loop.thisRepN'
p1381
I0
sg907
S'34-hula_hoops_bbq_beef_redo.png'
p1382
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1383
I0
sg909
g1376
sg55
g11
sS'block_loop.thisTrial'
p1384
Nsg70
Vn
sS'block_loop.thisTrialN'
p1385
I0
sg39
F2.4998930883166395
sg34
g753
(S'\x07\xdf\x07\x01\n0\x18\x06\x93\x98'
tRp1386
sa(dp1387
S'trial_loop.thisTrialN'
p1388
I32
sg895
S'50-polo.png'
p1389
sS'block_loop.thisIndex'
p1390
g889
sg38
S'right'
p1391
sg59
g63
sS'trial_loop.thisN'
p1392
I32
sg33
S'48-twix.png'
p1393
sg64
g65
sS'trial_loop.thisIndex'
p1394
g60
(g99
S' \x00\x00\x00'
tRp1395
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1396
I0
sg904
S'48-twix.png'
p1397
sS'block_loop.thisRepN'
p1398
I0
sg907
g1393
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1399
I0
sg909
S'50-polo.png'
p1400
sg55
g11
sS'block_loop.thisTrial'
p1401
Nsg70
Vn
sS'block_loop.thisTrialN'
p1402
I0
sg39
F2.0165941187742646
sg34
g753
(S'\x07\xdf\x07\x01\n0\x1f\x0e\xbdp'
tRp1403
sa(dp1404
S'trial_loop.thisTrialN'
p1405
I33
sg895
S'33-ambrosia_rice.png'
p1406
sS'block_loop.thisIndex'
p1407
g889
sg38
S'right'
p1408
sg59
g63
sS'trial_loop.thisN'
p1409
I33
sg33
S'23-crunchie_redo.png'
p1410
sg64
g65
sS'trial_loop.thisIndex'
p1411
g60
(g99
S'!\x00\x00\x00'
tRp1412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1413
I0
sg904
S'23-crunchie_redo.png'
p1414
sS'block_loop.thisRepN'
p1415
I0
sg907
g1410
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1416
I0
sg909
S'33-ambrosia_rice.png'
p1417
sg55
g11
sS'block_loop.thisTrial'
p1418
Nsg70
Vn
sS'block_loop.thisTrialN'
p1419
I0
sg39
F2.2169104062986662
sg34
g753
(S"\x07\xdf\x07\x01\n0'\x00Bh"
tRp1420
sa(dp1421
S'trial_loop.thisTrialN'
p1422
I34
sg895
g1238
sS'block_loop.thisIndex'
p1423
g889
sg38
S'left'
p1424
sg59
g63
sS'trial_loop.thisN'
p1425
I34
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p1426
g60
(g99
S'"\x00\x00\x00'
tRp1427
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1428
I0
sg904
g1245
sS'block_loop.thisRepN'
p1429
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1430
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1431
Nsg70
Vn
sS'block_loop.thisTrialN'
p1432
I0
sg39
F1.0333259397966685
sg34
g753
(S'\x07\xdf\x07\x01\n0.\x04"\x98'
tRp1433
sa(dp1434
S'trial_loop.thisTrialN'
p1435
I35
sg895
g1389
sS'block_loop.thisIndex'
p1436
g889
sg38
S'right'
p1437
sg59
g63
sS'trial_loop.thisN'
p1438
I35
sg33
g1393
sg64
g65
sS'trial_loop.thisIndex'
p1439
g60
(g99
S'#\x00\x00\x00'
tRp1440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1441
I0
sg904
g1397
sS'block_loop.thisRepN'
p1442
I0
sg907
g1393
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1443
I0
sg909
g1400
sg55
g11
sS'block_loop.thisTrial'
p1444
Nsg70
Vn
sS'block_loop.thisTrialN'
p1445
I0
sg39
F0.96663072533465311
sg34
g753
(S'\x07\xdf\x07\x01\n04\x050 '
tRp1446
sa(dp1447
S'trial_loop.thisTrialN'
p1448
I36
sg895
S'44-crunch.png'
p1449
sS'block_loop.thisIndex'
p1450
g889
sg38
S'right'
p1451
sg59
g63
sS'trial_loop.thisN'
p1452
I36
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1453
g60
(g99
S'$\x00\x00\x00'
tRp1454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1455
I0
sg904
S'26-walkers_smoky_bacon.png'
p1456
sS'block_loop.thisRepN'
p1457
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1458
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1459
Nsg70
Vn
sS'block_loop.thisTrialN'
p1460
I0
sg39
F1.1999547834848272
sg34
g753
(S'\x07\xdf\x07\x01\n0:\x05\t\x10'
tRp1461
sa(dp1462
S'trial_loop.thisTrialN'
p1463
I37
sg895
g1052
sS'block_loop.thisIndex'
p1464
g889
sg38
S'left'
p1465
sg59
g63
sS'trial_loop.thisN'
p1466
I37
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p1467
g60
(g99
S'%\x00\x00\x00'
tRp1468
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1469
I0
sg904
g1060
sS'block_loop.thisRepN'
p1470
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1471
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p1472
Nsg70
Vn
sS'block_loop.thisTrialN'
p1473
I0
sg39
F1.0832648148234512
sg34
g753
(S'\x07\xdf\x07\x01\n1\x04\x08\xb2\x90'
tRp1474
sa(dp1475
S'trial_loop.thisTrialN'
p1476
I38
sg895
S'4-corn.png'
p1477
sS'block_loop.thisIndex'
p1478
g889
sg38
S'right'
p1479
sg59
g63
sS'trial_loop.thisN'
p1480
I38
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p1481
g60
(g99
S'&\x00\x00\x00'
tRp1482
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1483
I0
sg904
S'10-bounty_redo.png'
p1484
sS'block_loop.thisRepN'
p1485
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1486
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1487
Nsg70
Vn
sS'block_loop.thisTrialN'
p1488
I0
sg39
F1.3502392540931396
sg34
g753
(S'\x07\xdf\x07\x01\n1\n\ns\xc8'
tRp1489
sa(dp1490
S'trial_loop.thisTrialN'
p1491
I39
sg895
S'49-yorkie.png'
p1492
sS'block_loop.thisIndex'
p1493
g889
sg38
S'left'
p1494
sg59
g63
sS'trial_loop.thisN'
p1495
I39
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1496
g60
(g99
S"'\x00\x00\x00"
tRp1497
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1498
I0
sg904
S'35-raisins.png'
p1499
sS'block_loop.thisRepN'
p1500
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1501
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1502
Nsg70
Vn
sS'block_loop.thisTrialN'
p1503
I0
sg39
F1.3832527266758916
sg34
g753
(S'\x07\xdf\x07\x01\n1\x11\x01\x01\xd0'
tRp1504
sa(dp1505
S'trial_loop.thisTrialN'
p1506
I40
sg895
g933
sS'block_loop.thisIndex'
p1507
g889
sg38
S'left'
p1508
sg59
g63
sS'trial_loop.thisN'
p1509
I40
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p1510
g60
(g99
S'(\x00\x00\x00'
tRp1511
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1512
I0
sg904
g941
sS'block_loop.thisRepN'
p1513
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1514
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1515
Nsg70
Vn
sS'block_loop.thisTrialN'
p1516
I0
sg39
F1.0000022807826099
sg34
g753
(S'\x07\xdf\x07\x01\n1\x17\x07GH'
tRp1517
sa(dp1518
S'trial_loop.thisTrialN'
p1519
I41
sg895
S'48-twix.png'
p1520
sS'block_loop.thisIndex'
p1521
g889
sg38
S'left'
p1522
sg59
g63
sS'trial_loop.thisN'
p1523
I41
sg33
g1393
sg64
g65
sS'trial_loop.thisIndex'
p1524
g60
(g99
S')\x00\x00\x00'
tRp1525
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1526
I0
sg904
S'50-polo.png'
p1527
sS'block_loop.thisRepN'
p1528
I0
sg907
g1393
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1529
I0
sg909
g1400
sg55
g11
sS'block_loop.thisTrial'
p1530
Nsg70
Vn
sS'block_loop.thisTrialN'
p1531
I0
sg39
F0.84999093388978508
sg34
g753
(S'\x07\xdf\x07\x01\n1\x1d\x07\xd7\xd0'
tRp1532
sa(dp1533
S'trial_loop.thisTrialN'
p1534
I42
sg895
S'31-hobnobs.png'
p1535
sS'block_loop.thisIndex'
p1536
g889
sg38
S'right'
p1537
sg59
g63
sS'trial_loop.thisN'
p1538
I42
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p1539
g60
(g99
S'*\x00\x00\x00'
tRp1540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1541
I0
sg904
S'25-kitkat.png'
p1542
sS'block_loop.thisRepN'
p1543
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1544
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p1545
Nsg70
Vn
sS'block_loop.thisTrialN'
p1546
I0
sg39
F0.96668204294201132
sg34
g753
(S'\x07\xdf\x07\x01\n1#\x06\n\xe0'
tRp1547
sa(dp1548
S'trial_loop.thisTrialN'
p1549
I43
sg895
g1372
sS'block_loop.thisIndex'
p1550
g889
sg38
S'left'
p1551
sg59
g63
sS'trial_loop.thisN'
p1552
I43
sg33
g1382
sg64
g65
sS'trial_loop.thisIndex'
p1553
g60
(g99
S'+\x00\x00\x00'
tRp1554
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1555
I0
sg904
g1380
sS'block_loop.thisRepN'
p1556
I0
sg907
g1382
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1557
I0
sg909
g1376
sg55
g11
sS'block_loop.thisTrial'
p1558
Nsg70
Vn
sS'block_loop.thisTrialN'
p1559
I0
sg39
F1.6333838716736864
sg34
g753
(S'\x07\xdf\x07\x01\n1)\x06"P'
tRp1560
sa(dp1561
S'trial_loop.thisTrialN'
p1562
I44
sg895
g1114
sS'block_loop.thisIndex'
p1563
g889
sg38
S'right'
p1564
sg59
g63
sS'trial_loop.thisN'
p1565
I44
sg33
g1118
sg64
g65
sS'trial_loop.thisIndex'
p1566
g60
(g99
S',\x00\x00\x00'
tRp1567
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1568
I0
sg904
g1122
sS'block_loop.thisRepN'
p1569
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1570
I0
sg909
g1125
sg55
g11
sS'block_loop.thisTrial'
p1571
Nsg70
Vn
sS'block_loop.thisTrialN'
p1572
I0
sg39
F1.7832101900803536
sg34
g753
(S'\x07\xdf\x07\x01\n10\x00\xf6\x18'
tRp1573
sa(dp1574
S'trial_loop.thisTrialN'
p1575
I45
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1576
sS'block_loop.thisIndex'
p1577
g889
sg38
S'right'
p1578
sg59
g63
sS'trial_loop.thisN'
p1579
I45
sg33
g1376
sg64
g65
sS'trial_loop.thisIndex'
p1580
g60
(g99
S'-\x00\x00\x00'
tRp1581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1582
I0
sg904
S'36-fig_rolls.png'
p1583
sS'block_loop.thisRepN'
p1584
I0
sg907
g1382
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1585
I0
sg909
g1376
sg55
g11
sS'block_loop.thisTrial'
p1586
Nsg70
Vn
sS'block_loop.thisTrialN'
p1587
I0
sg39
F1.2332305460649877
sg34
g753
(S'\x07\xdf\x07\x01\n16\rm\x80'
tRp1588
sa(dp1589
S'trial_loop.thisTrialN'
p1590
I46
sg895
S'6-sour_patch_kids.png'
p1591
sS'block_loop.thisIndex'
p1592
g889
sg38
S'right'
p1593
sg59
g63
sS'trial_loop.thisN'
p1594
I46
sg33
S'38-maltesers.png'
p1595
sg64
g65
sS'trial_loop.thisIndex'
p1596
g60
(g99
S'.\x00\x00\x00'
tRp1597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1598
I0
sg904
S'38-maltesers.png'
p1599
sS'block_loop.thisRepN'
p1600
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1601
I0
sg909
S'6-sour_patch_kids.png'
p1602
sg55
g11
sS'block_loop.thisTrial'
p1603
Nsg70
Vn
sS'block_loop.thisTrialN'
p1604
I0
sg39
F2.13305030722222
sg34
g753
(S'\x07\xdf\x07\x01\n2\x01\x02M\xd8'
tRp1605
sa(dp1606
S'trial_loop.thisTrialN'
p1607
I47
sg895
g1576
sS'block_loop.thisIndex'
p1608
g889
sg38
S'right'
p1609
sg59
g63
sS'trial_loop.thisN'
p1610
I47
sg33
g1382
sg64
g65
sS'trial_loop.thisIndex'
p1611
g60
(g99
S'/\x00\x00\x00'
tRp1612
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1613
I0
sg904
g1583
sS'block_loop.thisRepN'
p1614
I0
sg907
g1382
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1615
I0
sg909
g1376
sg55
g11
sS'block_loop.thisTrial'
p1616
Nsg70
Vn
sS'block_loop.thisTrialN'
p1617
I0
sg39
F0.98336425694378704
sg34
g753
(S'\x07\xdf\x07\x01\n2\x08\x04\xc2\xc0'
tRp1618
sa(dp1619
S'trial_loop.thisTrialN'
p1620
I48
sg895
g1406
sS'block_loop.thisIndex'
p1621
g889
sg38
S'right'
p1622
sg59
g63
sS'trial_loop.thisN'
p1623
I48
sg33
g1410
sg64
g65
sS'trial_loop.thisIndex'
p1624
g60
(g99
S'0\x00\x00\x00'
tRp1625
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1626
I0
sg904
g1414
sS'block_loop.thisRepN'
p1627
I0
sg907
g1410
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1628
I0
sg909
g1417
sg55
g11
sS'block_loop.thisTrial'
p1629
Nsg70
Vn
sS'block_loop.thisTrialN'
p1630
I0
sg39
F0.89996059948043694
sg34
g753
(S'\x07\xdf\x07\x01\n2\x0e\x05\x14\xc8'
tRp1631
sa(dp1632
S'trial_loop.thisTrialN'
p1633
I49
sg895
S'5-pineapple.png'
p1634
sS'block_loop.thisIndex'
p1635
g889
sg38
S'right'
p1636
sg59
g63
sS'trial_loop.thisN'
p1637
I49
sg33
S'40-sardines.png'
p1638
sg64
g65
sS'trial_loop.thisIndex'
p1639
g60
(g99
S'1\x00\x00\x00'
tRp1640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1641
I0
sg904
S'40-sardines.png'
p1642
sS'block_loop.thisRepN'
p1643
I0
sg907
g1638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1644
I0
sg909
S'5-pineapple.png'
p1645
sg55
g11
sS'block_loop.thisTrial'
p1646
Nsg70
Vn
sS'block_loop.thisTrialN'
p1647
I0
sg39
F3.5332555206341567
sg34
g753
(S'\x07\xdf\x07\x01\n2\x14\x03\xfb\x88'
tRp1648
sa(dp1649
S'trial_loop.thisTrialN'
p1650
I50
sg895
g1131
sS'block_loop.thisIndex'
p1651
g889
sg38
S'left'
p1652
sg59
g63
sS'trial_loop.thisN'
p1653
I50
sg33
g1135
sg64
g65
sS'trial_loop.thisIndex'
p1654
g60
(g99
S'2\x00\x00\x00'
tRp1655
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1656
I0
sg904
g1139
sS'block_loop.thisRepN'
p1657
I0
sg907
g1141
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1658
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p1659
Nsg70
Vn
sS'block_loop.thisTrialN'
p1660
I0
sg39
F3.6331931412305494
sg34
g753
(S'\x07\xdf\x07\x01\n2\x1c\x0c\x9a\x90'
tRp1661
sa(dp1662
S'trial_loop.thisTrialN'
p1663
I51
sg895
g1165
sS'block_loop.thisIndex'
p1664
g889
sg38
S'right'
p1665
sg59
g63
sS'trial_loop.thisN'
p1666
I51
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1667
g60
(g99
S'3\x00\x00\x00'
tRp1668
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1669
I0
sg904
g1172
sS'block_loop.thisRepN'
p1670
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1671
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1672
Nsg70
Vn
sS'block_loop.thisTrialN'
p1673
I0
sg39
F1.266573306632381
sg34
g753
(S'\x07\xdf\x07\x01\n2%\x07\x9d8'
tRp1674
sa(dp1675
S'trial_loop.thisTrialN'
p1676
I52
sg895
g1406
sS'block_loop.thisIndex'
p1677
g889
sg38
S'right'
p1678
sg59
g63
sS'trial_loop.thisN'
p1679
I52
sg33
g1410
sg64
g65
sS'trial_loop.thisIndex'
p1680
g60
(g99
S'4\x00\x00\x00'
tRp1681
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1682
I0
sg904
g1414
sS'block_loop.thisRepN'
p1683
I0
sg907
g1410
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1684
I0
sg909
g1417
sg55
g11
sS'block_loop.thisTrial'
p1685
Nsg70
Vn
sS'block_loop.thisTrialN'
p1686
I0
sg39
F0.96666636256304628
sg34
g753
(S'\x07\xdf\x07\x01\n2+\x0c<\xd0'
tRp1687
sa(dp1688
S'trial_loop.thisTrialN'
p1689
I53
sg895
S'42-mrkipling_lemon_slices.png'
p1690
sS'block_loop.thisIndex'
p1691
g889
sg38
S'left'
p1692
sg59
g63
sS'trial_loop.thisN'
p1693
I53
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p1694
g60
(g99
S'5\x00\x00\x00'
tRp1695
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1696
I0
sg904
S'16-skips_prawn.png'
p1697
sS'block_loop.thisRepN'
p1698
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1699
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p1700
Nsg70
Vn
sS'block_loop.thisTrialN'
p1701
I0
sg39
F1.4169202136636159
sg34
g753
(S'\x07\xdf\x07\x01\n21\x0c\x15\xc0'
tRp1702
sa(dp1703
S'trial_loop.thisTrialN'
p1704
I54
sg895
g1372
sS'block_loop.thisIndex'
p1705
g889
sg38
S'right'
p1706
sg59
g63
sS'trial_loop.thisN'
p1707
I54
sg33
g1382
sg64
g65
sS'trial_loop.thisIndex'
p1708
g60
(g99
S'6\x00\x00\x00'
tRp1709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1710
I0
sg904
g1380
sS'block_loop.thisRepN'
p1711
I0
sg907
g1382
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1712
I0
sg909
g1376
sg55
g11
sS'block_loop.thisTrial'
p1713
Nsg70
Vn
sS'block_loop.thisTrialN'
p1714
I0
sg39
F2.4498789474646401
sg34
g753
(S'\x07\xdf\x07\x01\n28\x03\xd4x'
tRp1715
sa(dp1716
S'trial_loop.thisTrialN'
p1717
I55
sg895
g1099
sS'block_loop.thisIndex'
p1718
g889
sg38
S'left'
p1719
sg59
g63
sS'trial_loop.thisN'
p1720
I55
sg33
g1029
sg64
g65
sS'trial_loop.thisIndex'
p1721
g60
(g99
S'7\x00\x00\x00'
tRp1722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1723
I0
sg904
g1106
sS'block_loop.thisRepN'
p1724
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1725
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1726
Nsg70
Vn
sS'block_loop.thisTrialN'
p1727
I0
sg39
F1.2833339225353484
sg34
g753
(S'\x07\xdf\x07\x01\n3\x03\x0bF\xb8'
tRp1728
sa(dp1729
S'trial_loop.thisTrialN'
p1730
I56
sg895
g1052
sS'block_loop.thisIndex'
p1731
g889
sg38
S'left'
p1732
sg59
g63
sS'trial_loop.thisN'
p1733
I56
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p1734
g60
(g99
S'8\x00\x00\x00'
tRp1735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1736
I0
sg904
g1060
sS'block_loop.thisRepN'
p1737
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1738
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p1739
Nsg70
Vn
sS'block_loop.thisTrialN'
p1740
I0
sg39
F0.94994965172463708
sg34
g753
(S'\x07\xdf\x07\x01\n3\n\x00\xa0('
tRp1741
sa(dp1742
S'trial_loop.thisTrialN'
p1743
I57
sg895
S'38-maltesers.png'
p1744
sS'block_loop.thisIndex'
p1745
g889
sg38
S'left'
p1746
sg59
g63
sS'trial_loop.thisN'
p1747
I57
sg33
g1595
sg64
g65
sS'trial_loop.thisIndex'
p1748
g60
(g99
S'9\x00\x00\x00'
tRp1749
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1750
I0
sg904
S'6-sour_patch_kids.png'
p1751
sS'block_loop.thisRepN'
p1752
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1753
I0
sg909
g1602
sg55
g11
sS'block_loop.thisTrial'
p1754
Nsg70
Vn
sS'block_loop.thisTrialN'
p1755
I0
sg39
F2.0830658165432396
sg34
g753
(S'\x07\xdf\x07\x01\n3\x10\x00y\x18'
tRp1756
sa(dp1757
S'trial_loop.thisTrialN'
p1758
I58
sg895
g1492
sS'block_loop.thisIndex'
p1759
g889
sg38
S'left'
p1760
sg59
g63
sS'trial_loop.thisN'
p1761
I58
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1762
g60
(g99
S':\x00\x00\x00'
tRp1763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1764
I0
sg904
g1499
sS'block_loop.thisRepN'
p1765
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1766
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1767
Nsg70
Vn
sS'block_loop.thisTrialN'
p1768
I0
sg39
F3.2168120475498654
sg34
g753
(S'\x07\xdf\x07\x01\n3\x17\x026h'
tRp1769
sa(dp1770
S'trial_loop.thisTrialN'
p1771
I59
sg895
g1690
sS'block_loop.thisIndex'
p1772
g889
sg38
S'left'
p1773
sg59
g63
sS'trial_loop.thisN'
p1774
I59
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p1775
g60
(g99
S';\x00\x00\x00'
tRp1776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1777
I0
sg904
g1697
sS'block_loop.thisRepN'
p1778
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1779
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p1780
Nsg70
Vn
sS'block_loop.thisTrialN'
p1781
I0
sg39
F1.216521247770288
sg34
g753
(S'\x07\xdf\x07\x01\n3\x1f\x06\x0e\xc8'
tRp1782
sa(dp1783
S'trial_loop.thisTrialN'
p1784
I60
sg895
g1331
sS'block_loop.thisIndex'
p1785
g889
sg38
S'right'
p1786
sg59
g63
sS'trial_loop.thisN'
p1787
I60
sg33
g1118
sg64
g65
sS'trial_loop.thisIndex'
p1788
g60
(g99
S'<\x00\x00\x00'
tRp1789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1790
I0
sg904
g1338
sS'block_loop.thisRepN'
p1791
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1792
I0
sg909
g1125
sg55
g11
sS'block_loop.thisTrial'
p1793
Nsg70
Vn
sS'block_loop.thisTrialN'
p1794
I0
sg39
F1.1166685863254315
sg34
g753
(S'\x07\xdf\x07\x01\n3%\t\xf6\xc8'
tRp1795
sa(dp1796
S'trial_loop.thisTrialN'
p1797
I61
sg895
S'45-chewy_nougat_redo.png'
p1798
sS'block_loop.thisIndex'
p1799
g889
sg38
S'right'
p1800
sg59
g63
sS'trial_loop.thisN'
p1801
I61
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1802
g60
(g99
S'=\x00\x00\x00'
tRp1803
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1804
I0
sg904
S'41-peanuts_redo.png'
p1805
sS'block_loop.thisRepN'
p1806
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1807
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1808
Nsg70
Vn
sS'block_loop.thisTrialN'
p1809
I0
sg39
F0.93321897109308338
sg34
g753
(S'\x07\xdf\x07\x01\n3+\x0c1\x18'
tRp1810
sa(dp1811
S'trial_loop.thisTrialN'
p1812
I62
sg895
g1099
sS'block_loop.thisIndex'
p1813
g889
sg38
S'left'
p1814
sg59
g63
sS'trial_loop.thisN'
p1815
I62
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1816
g60
(g99
S'>\x00\x00\x00'
tRp1817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1818
I0
sg904
g1106
sS'block_loop.thisRepN'
p1819
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1820
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1821
Nsg70
Vn
sS'block_loop.thisTrialN'
p1822
I0
sg39
F2.9173404478542579
sg34
g753
(S'\x07\xdf\x07\x01\n31\x0b\x94\xd8'
tRp1823
sa(dp1824
S'trial_loop.thisTrialN'
p1825
I63
sg895
g916
sS'block_loop.thisIndex'
p1826
g889
sg38
S'right'
p1827
sg59
g63
sS'trial_loop.thisN'
p1828
I63
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p1829
g60
(g99
S'?\x00\x00\x00'
tRp1830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1831
I0
sg904
g924
sS'block_loop.thisRepN'
p1832
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1833
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1834
Nsg70
Vn
sS'block_loop.thisTrialN'
p1835
I0
sg39
F1.1003550038094545
sg34
g753
(S'\x07\xdf\x07\x01\n39\n\xe8\xf8'
tRp1836
sa(dp1837
S'trial_loop.thisTrialN'
p1838
I64
sg895
g1449
sS'block_loop.thisIndex'
p1839
g889
sg38
S'right'
p1840
sg59
g63
sS'trial_loop.thisN'
p1841
I64
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1842
g60
(g99
S'@\x00\x00\x00'
tRp1843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1844
I0
sg904
g1456
sS'block_loop.thisRepN'
p1845
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1846
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1847
Nsg70
Vn
sS'block_loop.thisTrialN'
p1848
I0
sg39
F3.2499421251413878
sg34
g753
(S'\x07\xdf\x07\x01\n4\x03\x0c\xe4\xc8'
tRp1849
sa(dp1850
S'trial_loop.thisTrialN'
p1851
I65
sg895
g950
sS'block_loop.thisIndex'
p1852
g889
sg38
S'right'
p1853
sg59
g63
sS'trial_loop.thisN'
p1854
I65
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1855
g60
(g99
S'A\x00\x00\x00'
tRp1856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1857
I0
sg904
g958
sS'block_loop.thisRepN'
p1858
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1859
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1860
Nsg70
Vn
sS'block_loop.thisTrialN'
p1861
I0
sg39
F2.6499312344049031
sg34
g753
(S'\x07\xdf\x07\x01\n4\x0c\x01\xf7\xe8'
tRp1862
sa(dp1863
S'trial_loop.thisTrialN'
p1864
I66
sg895
g1082
sS'block_loop.thisIndex'
p1865
g889
sg38
S'right'
p1866
sg59
g63
sS'trial_loop.thisN'
p1867
I66
sg33
g1093
sg64
g65
sS'trial_loop.thisIndex'
p1868
g60
(g99
S'B\x00\x00\x00'
tRp1869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1870
I0
sg904
g1090
sS'block_loop.thisRepN'
p1871
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1872
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p1873
Nsg70
Vn
sS'block_loop.thisTrialN'
p1874
I0
sg39
F1.2999961796886055
sg34
g753
(S'\x07\xdf\x07\x01\n4\x13\x0c\x83 '
tRp1875
sa(dp1876
S'trial_loop.thisTrialN'
p1877
I67
sg895
g1114
sS'block_loop.thisIndex'
p1878
g889
sg38
S'left'
p1879
sg59
g63
sS'trial_loop.thisN'
p1880
I67
sg33
g1125
sg64
g65
sS'trial_loop.thisIndex'
p1881
g60
(g99
S'C\x00\x00\x00'
tRp1882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1883
I0
sg904
g1122
sS'block_loop.thisRepN'
p1884
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1885
I0
sg909
g1125
sg55
g11
sS'block_loop.thisTrial'
p1886
Nsg70
Vn
sS'block_loop.thisTrialN'
p1887
I0
sg39
F0.84999692094334023
sg34
g753
(S'\x07\xdf\x07\x01\n4\x1a\x02U\xa8'
tRp1888
sa(dp1889
S'trial_loop.thisTrialN'
p1890
I68
sg895
g1035
sS'block_loop.thisIndex'
p1891
g889
sg38
S'left'
p1892
sg59
g63
sS'trial_loop.thisN'
p1893
I68
sg33
g1046
sg64
g65
sS'trial_loop.thisIndex'
p1894
g60
(g99
S'D\x00\x00\x00'
tRp1895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1896
I0
sg904
g1043
sS'block_loop.thisRepN'
p1897
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1898
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p1899
Nsg70
Vn
sS'block_loop.thisTrialN'
p1900
I0
sg39
F1.233438952573124
sg34
g753
(S'\x07\xdf\x07\x01\n4 \x00\x88\xb8'
tRp1901
sa(dp1902
S'trial_loop.thisTrialN'
p1903
I69
sg895
g967
sS'block_loop.thisIndex'
p1904
g889
sg38
S'left'
p1905
sg59
g63
sS'trial_loop.thisN'
p1906
I69
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p1907
g60
(g99
S'E\x00\x00\x00'
tRp1908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1909
I0
sg904
g975
sS'block_loop.thisRepN'
p1910
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1911
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1912
Nsg70
Vn
sS'block_loop.thisTrialN'
p1913
I0
sg39
F0.88334424307686277
sg34
g753
(S'\x07\xdf\x07\x01\n4&\x04l\xd0'
tRp1914
sa(dp1915
S'trial_loop.thisTrialN'
p1916
I70
sg895
g1535
sS'block_loop.thisIndex'
p1917
g889
sg38
S'right'
p1918
sg59
g63
sS'trial_loop.thisN'
p1919
I70
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p1920
g60
(g99
S'F\x00\x00\x00'
tRp1921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1922
I0
sg904
g1542
sS'block_loop.thisRepN'
p1923
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1924
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p1925
Nsg70
Vn
sS'block_loop.thisTrialN'
p1926
I0
sg39
F0.95001493912604928
sg34
g753
(S'\x07\xdf\x07\x01\n4,\x03S\x90'
tRp1927
sa(dp1928
S'trial_loop.thisTrialN'
p1929
I71
sg895
g1052
sS'block_loop.thisIndex'
p1930
g889
sg38
S'left'
p1931
sg59
g63
sS'trial_loop.thisN'
p1932
I71
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p1933
g60
(g99
S'G\x00\x00\x00'
tRp1934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1935
I0
sg904
g1060
sS'block_loop.thisRepN'
p1936
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1937
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p1938
Nsg70
Vn
sS'block_loop.thisTrialN'
p1939
I0
sg39
F0.91653533160297229
sg34
g753
(S'\x07\xdf\x07\x01\n42\x02\xf1\xe8'
tRp1940
sa(dp1941
S'trial_loop.thisTrialN'
p1942
I72
sg895
g1576
sS'block_loop.thisIndex'
p1943
g889
sg38
S'left'
p1944
sg59
g63
sS'trial_loop.thisN'
p1945
I72
sg33
g1376
sg64
g65
sS'trial_loop.thisIndex'
p1946
g60
(g99
S'H\x00\x00\x00'
tRp1947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1948
I0
sg904
g1583
sS'block_loop.thisRepN'
p1949
I0
sg907
g1382
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1950
I0
sg909
g1376
sg55
g11
sS'block_loop.thisTrial'
p1951
Nsg70
Vn
sS'block_loop.thisTrialN'
p1952
I0
sg39
F1.7833236590131492
sg34
g753
(S'\x07\xdf\x07\x01\n48\x02Q\xc0'
tRp1953
sa(dp1954
S'trial_loop.thisTrialN'
p1955
I73
sg895
S'46-pistachios.png'
p1956
sS'block_loop.thisIndex'
p1957
g889
sg38
S'left'
p1958
sg59
g63
sS'trial_loop.thisN'
p1959
I73
sg33
g1158
sg64
g65
sS'trial_loop.thisIndex'
p1960
g60
(g99
S'I\x00\x00\x00'
tRp1961
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1962
I0
sg904
S'29-beans.png'
p1963
sS'block_loop.thisRepN'
p1964
I0
sg907
g1158
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1965
I0
sg909
g1152
sg55
g11
sS'block_loop.thisTrial'
p1966
Nsg70
Vn
sS'block_loop.thisTrialN'
p1967
I0
sg39
F1.6169747813873983
sg34
g753
(S'\x07\xdf\x07\x01\n5\x02\x0e\xcd\x10'
tRp1968
sa(dp1969
S'trial_loop.thisTrialN'
p1970
I74
sg895
S'8-liquorice_catherine_wheels.png'
p1971
sS'block_loop.thisIndex'
p1972
g889
sg38
S'right'
p1973
sg59
g63
sS'trial_loop.thisN'
p1974
I74
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1975
g60
(g99
S'J\x00\x00\x00'
tRp1976
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1977
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1978
sS'block_loop.thisRepN'
p1979
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1980
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1981
Nsg70
Vn
sS'block_loop.thisTrialN'
p1982
I0
sg39
F3.6998678286499853
sg34
g753
(S'\x07\xdf\x07\x01\n5\t\tbX'
tRp1983
sa(dp1984
S'trial_loop.thisTrialN'
p1985
I75
sg895
g967
sS'block_loop.thisIndex'
p1986
g889
sg38
S'left'
p1987
sg59
g63
sS'trial_loop.thisN'
p1988
I75
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p1989
g60
(g99
S'K\x00\x00\x00'
tRp1990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1991
I0
sg904
g975
sS'block_loop.thisRepN'
p1992
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1993
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1994
Nsg70
Vn
sS'block_loop.thisTrialN'
p1995
I0
sg39
F0.9333312996350287
sg34
g753
(S'\x07\xdf\x07\x01\n5\x12\x05[\x18'
tRp1996
sa(dp1997
S'trial_loop.thisTrialN'
p1998
I76
sg895
g1477
sS'block_loop.thisIndex'
p1999
g889
sg38
S'right'
p2000
sg59
g63
sS'trial_loop.thisN'
p2001
I76
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2002
g60
(g99
S'L\x00\x00\x00'
tRp2003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2004
I0
sg904
g1484
sS'block_loop.thisRepN'
p2005
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2006
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2007
Nsg70
Vn
sS'block_loop.thisTrialN'
p2008
I0
sg39
F1.0165926932850198
sg34
g753
(S'\x07\xdf\x07\x01\n5\x18\x04\xba\xf0'
tRp2009
sa(dp2010
S'trial_loop.thisTrialN'
p2011
I77
sg895
g1744
sS'block_loop.thisIndex'
p2012
g889
sg38
S'left'
p2013
sg59
g63
sS'trial_loop.thisN'
p2014
I77
sg33
g1595
sg64
g65
sS'trial_loop.thisIndex'
p2015
g60
(g99
S'M\x00\x00\x00'
tRp2016
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2017
I0
sg904
g1751
sS'block_loop.thisRepN'
p2018
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2019
I0
sg909
g1602
sg55
g11
sS'block_loop.thisTrial'
p2020
Nsg70
Vn
sS'block_loop.thisTrialN'
p2021
I0
sg39
F0.88296563316725951
sg34
g753
(S'\x07\xdf\x07\x01\n5\x1e\x05\x89\xf8'
tRp2022
sa(dp2023
S'trial_loop.thisTrialN'
p2024
I78
sg895
g1798
sS'block_loop.thisIndex'
p2025
g889
sg38
S'right'
p2026
sg59
g63
sS'trial_loop.thisN'
p2027
I78
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2028
g60
(g99
S'N\x00\x00\x00'
tRp2029
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2030
I0
sg904
g1805
sS'block_loop.thisRepN'
p2031
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2032
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2033
Nsg70
Vn
sS'block_loop.thisTrialN'
p2034
I0
sg39
F0.81662793137547851
sg34
g753
(S'\x07\xdf\x07\x01\n5$\x046 '
tRp2035
sa(dp2036
S'trial_loop.thisTrialN'
p2037
I79
sg895
S'23-crunchie_redo.png'
p2038
sS'block_loop.thisIndex'
p2039
g889
sg38
S'left'
p2040
sg59
g63
sS'trial_loop.thisN'
p2041
I79
sg33
g1410
sg64
g65
sS'trial_loop.thisIndex'
p2042
g60
(g99
S'O\x00\x00\x00'
tRp2043
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2044
I0
sg904
S'33-ambrosia_rice.png'
p2045
sS'block_loop.thisRepN'
p2046
I0
sg907
g1410
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2047
I0
sg909
g1417
sg55
g11
sS'block_loop.thisTrial'
p2048
Nsg70
Vn
sS'block_loop.thisTrialN'
p2049
I0
sg39
F2.1998501525840766
sg34
g753
(S'\x07\xdf\x07\x01\n5*\x01\xec0'
tRp2050
sa(dp2051
S'trial_loop.thisTrialN'
p2052
I80
sg895
g1018
sS'block_loop.thisIndex'
p2053
g889
sg38
S'right'
p2054
sg59
g63
sS'trial_loop.thisN'
p2055
I80
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p2056
g60
(g99
S'P\x00\x00\x00'
tRp2057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2058
I0
sg904
g1026
sS'block_loop.thisRepN'
p2059
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2060
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2061
Nsg70
Vn
sS'block_loop.thisTrialN'
p2062
I0
sg39
F2.4832410946837626
sg34
g753
(S'\x07\xdf\x07\x01\n51\x05\x8d\xe0'
tRp2063
sa(dp2064
S'trial_loop.thisTrialN'
p2065
I81
sg895
g950
sS'block_loop.thisIndex'
p2066
g889
sg38
S'left'
p2067
sg59
g63
sS'trial_loop.thisN'
p2068
I81
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2069
g60
(g99
S'Q\x00\x00\x00'
tRp2070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2071
I0
sg904
g958
sS'block_loop.thisRepN'
p2072
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2073
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2074
Nsg70
Vn
sS'block_loop.thisTrialN'
p2075
I0
sg39
F1.4499901356148257
sg34
g753
(S'\x07\xdf\x07\x01\n58\ry8'
tRp2076
sa(dp2077
S'trial_loop.thisTrialN'
p2078
I82
sg895
S'40-sardines.png'
p2079
sS'block_loop.thisIndex'
p2080
g889
sg38
S'left'
p2081
sg59
g63
sS'trial_loop.thisN'
p2082
I82
sg33
g1645
sg64
g65
sS'trial_loop.thisIndex'
p2083
g60
(g99
S'R\x00\x00\x00'
tRp2084
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2085
I0
sg904
S'5-pineapple.png'
p2086
sS'block_loop.thisRepN'
p2087
I0
sg907
g1638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2088
I0
sg909
g1645
sg55
g11
sS'block_loop.thisTrial'
p2089
Nsg70
Vn
sS'block_loop.thisTrialN'
p2090
I0
sg39
F1.8832082514145441
sg34
g753
(S'\x07\xdf\x07\x01\n6\x03\x05r\x88'
tRp2091
sa(dp2092
S'trial_loop.thisTrialN'
p2093
I83
sg895
g1210
sS'block_loop.thisIndex'
p2094
g889
sg38
S'right'
p2095
sg59
g63
sS'trial_loop.thisN'
p2096
I83
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p2097
g60
(g99
S'S\x00\x00\x00'
tRp2098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2099
I0
sg904
g1217
sS'block_loop.thisRepN'
p2100
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2101
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p2102
Nsg70
Vn
sS'block_loop.thisTrialN'
p2103
I0
sg39
F1.0833400806477584
sg34
g753
(S'\x07\xdf\x07\x01\n6\n\x04U`'
tRp2104
sa(dp2105
S'trial_loop.thisTrialN'
p2106
I84
sg895
g1956
sS'block_loop.thisIndex'
p2107
g889
sg38
S'left'
p2108
sg59
g63
sS'trial_loop.thisN'
p2109
I84
sg33
g1158
sg64
g65
sS'trial_loop.thisIndex'
p2110
g60
(g99
S'T\x00\x00\x00'
tRp2111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2112
I0
sg904
g1963
sS'block_loop.thisRepN'
p2113
I0
sg907
g1158
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2114
I0
sg909
g1152
sg55
g11
sS'block_loop.thisTrial'
p2115
Nsg70
Vn
sS'block_loop.thisTrialN'
p2116
I0
sg39
F1.1999048913658044
sg34
g753
(S'\x07\xdf\x07\x01\n6\x10\x06\x16\x98'
tRp2117
sa(dp2118
S'trial_loop.thisTrialN'
p2119
I85
sg895
g1114
sS'block_loop.thisIndex'
p2120
g889
sg38
S'left'
p2121
sg59
g63
sS'trial_loop.thisN'
p2122
I85
sg33
g1125
sg64
g65
sS'trial_loop.thisIndex'
p2123
g60
(g99
S'U\x00\x00\x00'
tRp2124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2125
I0
sg904
g1122
sS'block_loop.thisRepN'
p2126
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2127
I0
sg909
g1125
sg55
g11
sS'block_loop.thisTrial'
p2128
Nsg70
Vn
sS'block_loop.thisTrialN'
p2129
I0
sg39
F1.2001338249183391
sg34
g753
(S'\x07\xdf\x07\x01\n6\x16\t\x81\x98'
tRp2130
sa(dp2131
S'trial_loop.thisTrialN'
p2132
I86
sg895
g1492
sS'block_loop.thisIndex'
p2133
g889
sg38
S'left'
p2134
sg59
g63
sS'trial_loop.thisN'
p2135
I86
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2136
g60
(g99
S'V\x00\x00\x00'
tRp2137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2138
I0
sg904
g1499
sS'block_loop.thisRepN'
p2139
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2140
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2141
Nsg70
Vn
sS'block_loop.thisTrialN'
p2142
I0
sg39
F1.3497830975766192
sg34
g753
(S'\x07\xdf\x07\x01\n6\x1c\r+\x18'
tRp2143
sa(dp2144
S'trial_loop.thisTrialN'
p2145
I87
sg895
S'51-mars.png'
p2146
sS'block_loop.thisIndex'
p2147
g889
sg38
S'left'
p2148
sg59
g63
sS'trial_loop.thisN'
p2149
I87
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p2150
g60
(g99
S'W\x00\x00\x00'
tRp2151
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2152
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p2153
sS'block_loop.thisRepN'
p2154
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2155
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p2156
Nsg70
Vn
sS'block_loop.thisTrialN'
p2157
I0
sg39
F1.066704337592455
sg34
g753
(S'\x07\xdf\x07\x01\n6#\x03\xb9 '
tRp2158
sa(dp2159
S'trial_loop.thisTrialN'
p2160
I88
sg895
g1018
sS'block_loop.thisIndex'
p2161
g889
sg38
S'right'
p2162
sg59
g63
sS'trial_loop.thisN'
p2163
I88
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p2164
g60
(g99
S'X\x00\x00\x00'
tRp2165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2166
I0
sg904
g1026
sS'block_loop.thisRepN'
p2167
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2168
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2169
Nsg70
Vn
sS'block_loop.thisTrialN'
p2170
I0
sg39
F1.3669742111915184
sg34
g753
(S'\x07\xdf\x07\x01\n6)\x05;\xd8'
tRp2171
sa(dp2172
S'trial_loop.thisTrialN'
p2173
I89
sg895
g1449
sS'block_loop.thisIndex'
p2174
g889
sg38
S'left'
p2175
sg59
g63
sS'trial_loop.thisN'
p2176
I89
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2177
g60
(g99
S'Y\x00\x00\x00'
tRp2178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2179
I0
sg904
g1456
sS'block_loop.thisRepN'
p2180
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2181
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2182
Nsg70
Vn
sS'block_loop.thisTrialN'
p2183
I0
sg39
F2.0333162464712586
sg34
g753
(S'\x07\xdf\x07\x01\n6/\x0bF\xb8'
tRp2184
sa(dp2185
S'trial_loop.thisTrialN'
p2186
I90
sg895
g1956
sS'block_loop.thisIndex'
p2187
g889
sg38
S'left'
p2188
sg59
g63
sS'trial_loop.thisN'
p2189
I90
sg33
g1158
sg64
g65
sS'trial_loop.thisIndex'
p2190
g60
(g99
S'Z\x00\x00\x00'
tRp2191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2192
I0
sg904
g1963
sS'block_loop.thisRepN'
p2193
I0
sg907
g1158
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2194
I0
sg909
g1152
sg55
g11
sS'block_loop.thisTrial'
p2195
Nsg70
Vn
sS'block_loop.thisTrialN'
p2196
I0
sg39
F0.83344841782127332
sg34
g753
(S'\x07\xdf\x07\x01\n66\x0cLp'
tRp2197
sa(dp2198
S'trial_loop.thisTrialN'
p2199
I91
sg895
g1520
sS'block_loop.thisIndex'
p2200
g889
sg38
S'left'
p2201
sg59
g63
sS'trial_loop.thisN'
p2202
I91
sg33
g1393
sg64
g65
sS'trial_loop.thisIndex'
p2203
g60
(g99
S'[\x00\x00\x00'
tRp2204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2205
I0
sg904
g1527
sS'block_loop.thisRepN'
p2206
I0
sg907
g1393
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2207
I0
sg909
g1400
sg55
g11
sS'block_loop.thisTrial'
p2208
Nsg70
Vn
sS'block_loop.thisTrialN'
p2209
I0
sg39
F0.83325768737722683
sg34
g753
(S'\x07\xdf\x07\x01\n7\x00\nA\x00'
tRp2210
sa(dp2211
S'trial_loop.thisTrialN'
p2212
I92
sg895
g1238
sS'block_loop.thisIndex'
p2213
g889
sg38
S'left'
p2214
sg59
g63
sS'trial_loop.thisN'
p2215
I92
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2216
g60
(g99
S'\\\x00\x00\x00'
tRp2217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2218
I0
sg904
g1245
sS'block_loop.thisRepN'
p2219
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2220
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2221
Nsg70
Vn
sS'block_loop.thisTrialN'
p2222
I0
sg39
F0.76668905634869589
sg34
g753
(S'\x07\xdf\x07\x01\n7\x06\x08p('
tRp2223
sa(dp2224
S'trial_loop.thisTrialN'
p2225
I93
sg895
g1180
sS'block_loop.thisIndex'
p2226
g889
sg38
S'right'
p2227
sg59
g63
sS'trial_loop.thisN'
p2228
I93
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p2229
g60
(g99
S']\x00\x00\x00'
tRp2230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2231
I0
sg904
g1188
sS'block_loop.thisRepN'
p2232
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2233
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p2234
Nsg70
Vn
sS'block_loop.thisTrialN'
p2235
I0
sg39
F1.1834533215032934
sg34
g753
(S'\x07\xdf\x07\x01\n7\x0c\x054\x08'
tRp2236
sa(dp2237
S'trial_loop.thisTrialN'
p2238
I94
sg895
g1406
sS'block_loop.thisIndex'
p2239
g889
sg38
S'right'
p2240
sg59
g63
sS'trial_loop.thisN'
p2241
I94
sg33
g1410
sg64
g65
sS'trial_loop.thisIndex'
p2242
g60
(g99
S'^\x00\x00\x00'
tRp2243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2244
I0
sg904
g1414
sS'block_loop.thisRepN'
p2245
I0
sg907
g1410
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2246
I0
sg909
g1417
sg55
g11
sS'block_loop.thisTrial'
p2247
Nsg70
Vn
sS'block_loop.thisTrialN'
p2248
I0
sg39
F1.1500184743390491
sg34
g753
(S'\x07\xdf\x07\x01\n7\x12\x08\x9f\x08'
tRp2249
sa(dp2250
S'trial_loop.thisTrialN'
p2251
I95
sg895
g1114
sS'block_loop.thisIndex'
p2252
g889
sg38
S'right'
p2253
sg59
g63
sS'trial_loop.thisN'
p2254
I95
sg33
g1118
sg64
g65
sS'trial_loop.thisIndex'
p2255
g60
(g99
S'_\x00\x00\x00'
tRp2256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2257
I0
sg904
g1122
sS'block_loop.thisRepN'
p2258
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2259
I0
sg909
g1125
sg55
g11
sS'block_loop.thisTrial'
p2260
Nsg70
Vn
sS'block_loop.thisTrialN'
p2261
I0
sg39
F2.2998707366468807
sg34
g753
(S'\x07\xdf\x07\x01\n7\x18\x0bVX'
tRp2262
sa(dp2263
S'trial_loop.thisTrialN'
p2264
I96
sg895
g1180
sS'block_loop.thisIndex'
p2265
g889
sg38
S'right'
p2266
sg59
g63
sS'trial_loop.thisN'
p2267
I96
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p2268
g60
(g99
S'`\x00\x00\x00'
tRp2269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2270
I0
sg904
g1188
sS'block_loop.thisRepN'
p2271
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2272
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p2273
Nsg70
Vn
sS'block_loop.thisTrialN'
p2274
I0
sg39
F2.3664864088159447
sg34
g753
(S'\x07\xdf\x07\x01\n7 \x01$\xf8'
tRp2275
sa(dp2276
S'trial_loop.thisTrialN'
p2277
I97
sg895
g1971
sS'block_loop.thisIndex'
p2278
g889
sg38
S'right'
p2279
sg59
g63
sS'trial_loop.thisN'
p2280
I97
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2281
g60
(g99
S'a\x00\x00\x00'
tRp2282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2283
I0
sg904
g1978
sS'block_loop.thisRepN'
p2284
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2285
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2286
Nsg70
Vn
sS'block_loop.thisTrialN'
p2287
I0
sg39
F0.99991846202283341
sg34
g753
(S"\x07\xdf\x07\x01\n7'\x07f\x88"
tRp2288
sa(dp2289
S'trial_loop.thisTrialN'
p2290
I98
sg895
g916
sS'block_loop.thisIndex'
p2291
g889
sg38
S'right'
p2292
sg59
g63
sS'trial_loop.thisN'
p2293
I98
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2294
g60
(g99
S'b\x00\x00\x00'
tRp2295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2296
I0
sg904
g924
sS'block_loop.thisRepN'
p2297
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2298
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2299
Nsg70
Vn
sS'block_loop.thisTrialN'
p2300
I0
sg39
F1.0002041300413111
sg34
g753
(S'\x07\xdf\x07\x01\n7-\x07\xb8\x90'
tRp2301
sa(dp2302
S'trial_loop.thisTrialN'
p2303
I99
sg895
g1634
sS'block_loop.thisIndex'
p2304
g889
sg38
S'left'
p2305
sg59
g63
sS'trial_loop.thisN'
p2306
I99
sg33
g1638
sg64
g65
sS'trial_loop.thisIndex'
p2307
g60
(g99
S'c\x00\x00\x00'
tRp2308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2309
I0
sg904
g1642
sS'block_loop.thisRepN'
p2310
I0
sg907
g1638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2311
I0
sg909
g1645
sg55
g11
sS'block_loop.thisTrial'
p2312
Nsg70
Vn
sS'block_loop.thisTrialN'
p2313
I0
sg39
F1.3832937807619601
sg34
g753
(S'\x07\xdf\x07\x01\n73\x08I\x18'
tRp2314
sa(dp2315
S'trial_loop.thisTrialN'
p2316
I100
sg895
g1535
sS'block_loop.thisIndex'
p2317
g889
sg38
S'right'
p2318
sg59
g63
sS'trial_loop.thisN'
p2319
I100
sg33
g1046
sg64
g65
sS'trial_loop.thisIndex'
p2320
g60
(g99
S'd\x00\x00\x00'
tRp2321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2322
I0
sg904
g1542
sS'block_loop.thisRepN'
p2323
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2324
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p2325
Nsg70
Vn
sS'block_loop.thisTrialN'
p2326
I0
sg39
F0.89992923872068786
sg34
g753
(S'\x07\xdf\x07\x01\n79\x0e\x92x'
tRp2327
sa(dp2328
S'trial_loop.thisTrialN'
p2329
I101
sg895
g1520
sS'block_loop.thisIndex'
p2330
g889
sg38
S'left'
p2331
sg59
g63
sS'trial_loop.thisN'
p2332
I101
sg33
g1393
sg64
g65
sS'trial_loop.thisIndex'
p2333
g60
(g99
S'e\x00\x00\x00'
tRp2334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2335
I0
sg904
g1527
sS'block_loop.thisRepN'
p2336
I0
sg907
g1393
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2337
I0
sg909
g1400
sg55
g11
sS'block_loop.thisTrial'
p2338
Nsg70
Vn
sS'block_loop.thisTrialN'
p2339
I0
sg39
F0.78335017311201227
sg34
g753
(S'\x07\xdf\x07\x01\n8\x03\r\xb7\xb8'
tRp2340
sa(dp2341
S'trial_loop.thisTrialN'
p2342
I102
sg895
g1449
sS'block_loop.thisIndex'
p2343
g889
sg38
S'right'
p2344
sg59
g63
sS'trial_loop.thisN'
p2345
I102
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2346
g60
(g99
S'f\x00\x00\x00'
tRp2347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2348
I0
sg904
g1456
sS'block_loop.thisRepN'
p2349
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2350
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2351
Nsg70
Vn
sS'block_loop.thisTrialN'
p2352
I0
sg39
F3.7332539240860569
sg34
g753
(S'\x07\xdf\x07\x01\n8\t\n\xf0\xc8'
tRp2353
sa(dp2354
S'trial_loop.thisTrialN'
p2355
I103
sg895
g1148
sS'block_loop.thisIndex'
p2356
g889
sg38
S'right'
p2357
sg59
g63
sS'trial_loop.thisN'
p2358
I103
sg33
g1158
sg64
g65
sS'trial_loop.thisIndex'
p2359
g60
(g99
S'g\x00\x00\x00'
tRp2360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2361
I0
sg904
g1156
sS'block_loop.thisRepN'
p2362
I0
sg907
g1158
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2363
I0
sg909
g1152
sg55
g11
sS'block_loop.thisTrial'
p2364
Nsg70
Vn
sS'block_loop.thisTrialN'
p2365
I0
sg39
F0.81667212153843138
sg34
g753
(S'\x07\xdf\x07\x01\n8\x12\x07f\x88'
tRp2366
sa(dp2367
S'trial_loop.thisTrialN'
p2368
I104
sg895
g2146
sS'block_loop.thisIndex'
p2369
g889
sg38
S'left'
p2370
sg59
g63
sS'trial_loop.thisN'
p2371
I104
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p2372
g60
(g99
S'h\x00\x00\x00'
tRp2373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2374
I0
sg904
g2153
sS'block_loop.thisRepN'
p2375
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2376
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p2377
Nsg70
Vn
sS'block_loop.thisTrialN'
p2378
I0
sg39
F2.9165367570922172
sg34
g753
(S'\x07\xdf\x07\x01\n8\x18\x05\x1c\x98'
tRp2379
sa(dp2380
S'trial_loop.thisTrialN'
p2381
I105
sg895
g1798
sS'block_loop.thisIndex'
p2382
g889
sg38
S'right'
p2383
sg59
g63
sS'trial_loop.thisN'
p2384
I105
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2385
g60
(g99
S'i\x00\x00\x00'
tRp2386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2387
I0
sg904
g1805
sS'block_loop.thisRepN'
p2388
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2389
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2390
Nsg70
Vn
sS'block_loop.thisTrialN'
p2391
I0
sg39
F1.1166129922503387
sg34
g753
(S'\x07\xdf\x07\x01\n8 \x0428'
tRp2392
sa(dp2393
S'trial_loop.thisTrialN'
p2394
I106
sg895
g1744
sS'block_loop.thisIndex'
p2395
g889
sg38
S'left'
p2396
sg59
g63
sS'trial_loop.thisN'
p2397
I106
sg33
g1595
sg64
g65
sS'trial_loop.thisIndex'
p2398
g60
(g99
S'j\x00\x00\x00'
tRp2399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2400
I0
sg904
g1751
sS'block_loop.thisRepN'
p2401
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2402
I0
sg909
g1602
sg55
g11
sS'block_loop.thisTrial'
p2403
Nsg70
Vn
sS'block_loop.thisTrialN'
p2404
I0
sg39
F1.0497125073552525
sg34
g753
(S'\x07\xdf\x07\x01\n8&\x06pp'
tRp2405
sa(dp2406
S'trial_loop.thisTrialN'
p2407
I107
sg895
g2079
sS'block_loop.thisIndex'
p2408
g889
sg38
S'left'
p2409
sg59
g63
sS'trial_loop.thisN'
p2410
I107
sg33
g1645
sg64
g65
sS'trial_loop.thisIndex'
p2411
g60
(g99
S'k\x00\x00\x00'
tRp2412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2413
I0
sg904
g2086
sS'block_loop.thisRepN'
p2414
I0
sg907
g1638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2415
I0
sg909
g1645
sg55
g11
sS'block_loop.thisTrial'
p2416
Nsg70
Vn
sS'block_loop.thisTrialN'
p2417
I0
sg39
F1.9832832891625003
sg34
g753
(S'\x07\xdf\x07\x01\n8,\x07\xb8\x90'
tRp2418
sa(dp2419
S'trial_loop.thisTrialN'
p2420
I108
sg895
g1210
sS'block_loop.thisIndex'
p2421
g889
sg38
S'right'
p2422
sg59
g63
sS'trial_loop.thisN'
p2423
I108
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p2424
g60
(g99
S'l\x00\x00\x00'
tRp2425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2426
I0
sg904
g1217
sS'block_loop.thisRepN'
p2427
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2428
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p2429
Nsg70
Vn
sS'block_loop.thisTrialN'
p2430
I0
sg39
F0.96669800842119002
sg34
g753
(S'\x07\xdf\x07\x01\n83\x08\x06\xb0'
tRp2431
sa(dp2432
S'trial_loop.thisTrialN'
p2433
I109
sg895
S'30-spaghetti_hoops.png'
p2434
sS'block_loop.thisIndex'
p2435
g889
sg38
S'right'
p2436
sg59
g63
sS'trial_loop.thisN'
p2437
I109
sg33
g1141
sg64
g65
sS'trial_loop.thisIndex'
p2438
g60
(g99
S'm\x00\x00\x00'
tRp2439
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2440
I0
sg904
S'19-caramello_redo.png'
p2441
sS'block_loop.thisRepN'
p2442
I0
sg907
g1141
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2443
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p2444
Nsg70
Vn
sS'block_loop.thisTrialN'
p2445
I0
sg39
F2.3331604690201857
sg34
g753
(S'\x07\xdf\x07\x01\n89\x08\x1e '
tRp2446
sa(dp2447
S'trial_loop.thisTrialN'
p2448
I110
sg895
g896
sS'block_loop.thisIndex'
p2449
g889
sg38
S'left'
p2450
sg59
g63
sS'trial_loop.thisN'
p2451
I110
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2452
g60
(g99
S'n\x00\x00\x00'
tRp2453
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2454
I0
sg904
g905
sS'block_loop.thisRepN'
p2455
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2456
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2457
Nsg70
Vn
sS'block_loop.thisTrialN'
p2458
I0
sg39
F1.5500169918304891
sg34
g753
(S'\x07\xdf\x07\x01\n9\x04\r\xa8\x18'
tRp2459
sa(dp2460
S'trial_loop.thisTrialN'
p2461
I111
sg895
g2434
sS'block_loop.thisIndex'
p2462
g889
sg38
S'right'
p2463
sg59
g63
sS'trial_loop.thisN'
p2464
I111
sg33
g1141
sg64
g65
sS'trial_loop.thisIndex'
p2465
g60
(g99
S'o\x00\x00\x00'
tRp2466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2467
I0
sg904
g2441
sS'block_loop.thisRepN'
p2468
I0
sg907
g1141
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2469
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p2470
Nsg70
Vn
sS'block_loop.thisTrialN'
p2471
I0
sg39
F3.5332723414057909
sg34
g753
(S'\x07\xdf\x07\x01\n9\x0b\x07K0'
tRp2472
sa(dp2473
S'trial_loop.thisTrialN'
p2474
I112
sg895
g1634
sS'block_loop.thisIndex'
p2475
g889
sg38
S'right'
p2476
sg59
g63
sS'trial_loop.thisN'
p2477
I112
sg33
g1638
sg64
g65
sS'trial_loop.thisIndex'
p2478
g60
(g99
S'p\x00\x00\x00'
tRp2479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2480
I0
sg904
g1642
sS'block_loop.thisRepN'
p2481
I0
sg907
g1638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2482
I0
sg909
g1645
sg55
g11
sS'block_loop.thisTrial'
p2483
Nsg70
Vn
sS'block_loop.thisTrialN'
p2484
I0
sg39
F1.64988419326437
sg34
g753
(S'\x07\xdf\x07\x01\n9\x14\x00\xa4\x10'
tRp2485
sa(dp2486
S'trial_loop.thisTrialN'
p2487
I113
sg895
g1001
sS'block_loop.thisIndex'
p2488
g889
sg38
S'right'
p2489
sg59
g63
sS'trial_loop.thisN'
p2490
I113
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2491
g60
(g99
S'q\x00\x00\x00'
tRp2492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2493
I0
sg904
g1009
sS'block_loop.thisRepN'
p2494
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2495
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2496
Nsg70
Vn
sS'block_loop.thisTrialN'
p2497
I0
sg39
F1.6003353320593305
sg34
g753
(S'\x07\xdf\x07\x01\n9\x1a\x0b7\x18'
tRp2498
sa(dp2499
S'trial_loop.thisTrialN'
p2500
I114
sg895
g950
sS'block_loop.thisIndex'
p2501
g889
sg38
S'left'
p2502
sg59
g63
sS'trial_loop.thisN'
p2503
I114
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2504
g60
(g99
S'r\x00\x00\x00'
tRp2505
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2506
I0
sg904
g958
sS'block_loop.thisRepN'
p2507
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2508
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2509
Nsg70
Vn
sS'block_loop.thisTrialN'
p2510
I0
sg39
F1.249906202816419
sg34
g753
(S'\x07\xdf\x07\x01\n9!\x05\x91\xc8'
tRp2511
sa(dp2512
S'trial_loop.thisTrialN'
p2513
I115
sg895
g1082
sS'block_loop.thisIndex'
p2514
g889
sg38
S'right'
p2515
sg59
g63
sS'trial_loop.thisN'
p2516
I115
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p2517
g60
(g99
S's\x00\x00\x00'
tRp2518
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2519
I0
sg904
g1090
sS'block_loop.thisRepN'
p2520
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2521
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p2522
Nsg70
Vn
sS'block_loop.thisTrialN'
p2523
I0
sg39
F1.0166534191212122
sg34
g753
(S"\x07\xdf\x07\x01\n9'\t\xf2\xe0"
tRp2524
sa(dp2525
S'trial_loop.thisTrialN'
p2526
I116
sg895
g1492
sS'block_loop.thisIndex'
p2527
g889
sg38
S'left'
p2528
sg59
g63
sS'trial_loop.thisN'
p2529
I116
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p2530
g60
(g99
S't\x00\x00\x00'
tRp2531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2532
I0
sg904
g1499
sS'block_loop.thisRepN'
p2533
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2534
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2535
Nsg70
Vn
sS'block_loop.thisTrialN'
p2536
I0
sg39
F0.63325985412120644
sg34
g753
(S'\x07\xdf\x07\x01\n9-\n\x83h'
tRp2537
sa(dp2538
S'trial_loop.thisTrialN'
p2539
I117
sg895
g1971
sS'block_loop.thisIndex'
p2540
g889
sg38
S'right'
p2541
sg59
g63
sS'trial_loop.thisN'
p2542
I117
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2543
g60
(g99
S'u\x00\x00\x00'
tRp2544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2545
I0
sg904
g1978
sS'block_loop.thisRepN'
p2546
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2547
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2548
Nsg70
Vn
sS'block_loop.thisTrialN'
p2549
I0
sg39
F0.91662399702636321
sg34
g753
(S'\x07\xdf\x07\x01\n93\x05\x99\x98'
tRp2550
sa(dp2551
S'trial_loop.thisTrialN'
p2552
I118
sg895
g1052
sS'block_loop.thisIndex'
p2553
g889
sg38
S'left'
p2554
sg59
g63
sS'trial_loop.thisN'
p2555
I118
sg33
g1063
sg64
g65
sS'trial_loop.thisIndex'
p2556
g60
(g99
S'v\x00\x00\x00'
tRp2557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2558
I0
sg904
g1060
sS'block_loop.thisRepN'
p2559
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2560
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p2561
Nsg70
Vn
sS'block_loop.thisTrialN'
p2562
I0
sg39
F0.70001779010453902
sg34
g753
(S'\x07\xdf\x07\x01\n99\x04\xbe\xd8'
tRp2563
sa(dp2564
S'trial_loop.thisTrialN'
p2565
I119
sg895
g1148
sS'block_loop.thisIndex'
p2566
g889
sg38
S'right'
p2567
sg59
g63
sS'trial_loop.thisN'
p2568
I119
sg33
g1158
sg64
g65
sS'trial_loop.thisIndex'
p2569
g60
(g99
S'w\x00\x00\x00'
tRp2570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2571
I0
sg904
g1156
sS'block_loop.thisRepN'
p2572
I0
sg907
g1158
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2573
I0
sg909
g1152
sg55
g11
sS'block_loop.thisTrial'
p2574
Nsg70
Vn
sS'block_loop.thisTrialN'
p2575
I0
sg39
F1.1503263799868364
sg34
g753
(S'\x07\xdf\x07\x01\n:\x03\x00\xcb '
tRp2576
sa(dp2577
S'trial_loop.thisTrialN'
p2578
I120
sg895
g1591
sS'block_loop.thisIndex'
p2579
g889
sg38
S'right'
p2580
sg59
g63
sS'trial_loop.thisN'
p2581
I120
sg33
g1595
sg64
g65
sS'trial_loop.thisIndex'
p2582
g60
(g99
S'x\x00\x00\x00'
tRp2583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2584
I0
sg904
g1599
sS'block_loop.thisRepN'
p2585
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2586
I0
sg909
g1602
sg55
g11
sS'block_loop.thisTrial'
p2587
Nsg70
Vn
sS'block_loop.thisTrialN'
p2588
I0
sg39
F0.86636381675270968
sg34
g753
(S'\x07\xdf\x07\x01\n:\t\x03~\x88'
tRp2589
sa(dp2590
S'trial_loop.thisTrialN'
p2591
I121
sg895
g1148
sS'block_loop.thisIndex'
p2592
g889
sg38
S'right'
p2593
sg59
g63
sS'trial_loop.thisN'
p2594
I121
sg33
g1158
sg64
g65
sS'trial_loop.thisIndex'
p2595
g60
(g99
S'y\x00\x00\x00'
tRp2596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2597
I0
sg904
g1156
sS'block_loop.thisRepN'
p2598
I0
sg907
g1158
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2599
I0
sg909
g1152
sg55
g11
sS'block_loop.thisTrial'
p2600
Nsg70
Vn
sS'block_loop.thisTrialN'
p2601
I0
sg39
F1.4499162952788538
sg34
g753
(S'\x07\xdf\x07\x01\n:\x0f\x01\xec0'
tRp2602
sa(dp2603
S'trial_loop.thisTrialN'
p2604
I122
sg895
g1165
sS'block_loop.thisIndex'
p2605
g889
sg38
S'right'
p2606
sg59
g63
sS'trial_loop.thisN'
p2607
I122
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2608
g60
(g99
S'z\x00\x00\x00'
tRp2609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2610
I0
sg904
g1172
sS'block_loop.thisRepN'
p2611
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2612
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2613
Nsg70
Vn
sS'block_loop.thisTrialN'
p2614
I0
sg39
F1.3998936014922947
sg34
g753
(S'\x07\xdf\x07\x01\n:\x15\tf@'
tRp2615
sa(dp2616
S'trial_loop.thisTrialN'
p2617
I123
sg895
g2146
sS'block_loop.thisIndex'
p2618
g889
sg38
S'left'
p2619
sg59
g63
sS'trial_loop.thisN'
p2620
I123
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p2621
g60
(g99
S'{\x00\x00\x00'
tRp2622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2623
I0
sg904
g2153
sS'block_loop.thisRepN'
p2624
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2625
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p2626
Nsg70
Vn
sS'block_loop.thisTrialN'
p2627
I0
sg39
F0.76666225715416658
sg34
g753
(S'\x07\xdf\x07\x01\n:\x1c\x00\xa7\xf8'
tRp2628
sa(dp2629
S'trial_loop.thisTrialN'
p2630
I124
sg895
g1690
sS'block_loop.thisIndex'
p2631
g889
sg38
S'left'
p2632
sg59
g63
sS'trial_loop.thisN'
p2633
I124
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p2634
g60
(g99
S'|\x00\x00\x00'
tRp2635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2636
I0
sg904
g1697
sS'block_loop.thisRepN'
p2637
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2638
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p2639
Nsg70
Vn
sS'block_loop.thisTrialN'
p2640
I0
sg39
F1.2502608645081636
sg34
g753
(S'\x07\xdf\x07\x01\n:!\x0c\xe8\xb0'
tRp2641
sa(dp2642
S'trial_loop.thisTrialN'
p2643
I125
sg895
g1131
sS'block_loop.thisIndex'
p2644
g889
sg38
S'left'
p2645
sg59
g63
sS'trial_loop.thisN'
p2646
I125
sg33
g1141
sg64
g65
sS'trial_loop.thisIndex'
p2647
g60
(g99
S'}\x00\x00\x00'
tRp2648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2649
I0
sg904
g1139
sS'block_loop.thisRepN'
p2650
I0
sg907
g1141
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2651
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vn
sS'block_loop.thisTrialN'
p2653
I0
sg39
F1.1999847187562409
sg34
g753
(S'\x07\xdf\x07\x01\n:(\x02\x07\x88'
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g896
sS'block_loop.thisIndex'
p2657
g889
sg38
S'left'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g905
sS'block_loop.thisRepN'
p2663
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2664
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vn
sS'block_loop.thisTrialN'
p2666
I0
sg39
F0.91652193200570764
sg34
g753
(S'\x07\xdf\x07\x01\n:.\x05r\x88'
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g1082
sS'block_loop.thisIndex'
p2670
g889
sg38
S'right'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g1090
sS'block_loop.thisRepN'
p2676
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2677
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vn
sS'block_loop.thisTrialN'
p2679
I0
sg39
F0.86667514357486652
sg34
g753
(S'\x07\xdf\x07\x01\n:4\x04\xd6H'
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g1099
sS'block_loop.thisIndex'
p2683
g889
sg38
S'left'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g1106
sS'block_loop.thisRepN'
p2689
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2690
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vn
sS'block_loop.thisTrialN'
p2692
I0
sg39
F1.0499365942441727
sg34
g753
(S'\x07\xdf\x07\x01\n::\x03@\x08'
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g1372
sS'block_loop.thisIndex'
p2696
g889
sg38
S'right'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g1382
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g1380
sS'block_loop.thisRepN'
p2702
I0
sg907
g1382
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2703
I0
sg909
g1376
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vn
sS'block_loop.thisTrialN'
p2705
I0
sg39
F2.750259724116404
sg34
g753
(S'\x07\xdf\x07\x01\n;\x04\x04\x88('
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g2038
sS'block_loop.thisIndex'
p2709
g889
sg38
S'left'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g1417
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g2045
sS'block_loop.thisRepN'
p2715
I0
sg907
g1410
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2716
I0
sg909
g1417
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vn
sS'block_loop.thisTrialN'
p2718
I0
sg39
F2.3998459901558817
sg34
g753
(S'\x07\xdf\x07\x01\n;\x0c\x01@P'
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g967
sS'block_loop.thisIndex'
p2722
g889
sg38
S'left'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g975
sS'block_loop.thisRepN'
p2728
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vn
sS'block_loop.thisTrialN'
p2731
I0
sg39
F1.3333386551594231
sg34
g753
(S'\x07\xdf\x07\x01\n;\x13\x07\xbcx'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g1591
sS'block_loop.thisIndex'
p2735
g889
sg38
S'right'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g1602
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g1599
sS'block_loop.thisRepN'
p2741
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg909
g1602
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vn
sS'block_loop.thisTrialN'
p2744
I0
sg39
F1.4996824010249838
sg34
g753
(S'\x07\xdf\x07\x01\n;\x19\rN@'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g2434
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1141
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g2441
sS'block_loop.thisRepN'
p2754
I0
sg907
g1141
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vn
sS'block_loop.thisTrialN'
p2757
I0
sg39
F1.0666601474295021
sg34
g753
(S'\x07\xdf\x07\x01\n; \x06=\xa8'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g896
sS'block_loop.thisIndex'
p2761
g889
sg38
S'left'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g905
sS'block_loop.thisRepN'
p2767
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vn
sS'block_loop.thisTrialN'
p2770
I0
sg39
F0.91698835204260831
sg34
g753
(S'\x07\xdf\x07\x01\n;&\x07\xc0`'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g1744
sS'block_loop.thisIndex'
p2774
g889
sg38
S'left'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g1595
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g1751
sS'block_loop.thisRepN'
p2780
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg909
g1602
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vn
sS'block_loop.thisTrialN'
p2783
I0
sg39
F1.7663426624940257
sg34
g753
(S'\x07\xdf\x07\x01\n;,\x07 8'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1956
sS'block_loop.thisIndex'
p2787
g889
sg38
S'left'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g1158
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1963
sS'block_loop.thisRepN'
p2793
I0
sg907
g1158
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg909
g1152
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vn
sS'block_loop.thisTrialN'
p2796
I0
sg39
F0.75001938665263879
sg34
g753
(S'\x07\xdf\x07\x01\n;3\x03\xdcH'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g984
sS'block_loop.thisIndex'
p2800
g889
sg38
S'left'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g992
sS'block_loop.thisRepN'
p2806
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vn
sS'block_loop.thisTrialN'
p2809
I0
sg39
F4.5499211989617834
sg34
g753
(S'\x07\xdf\x07\x01\n;9\x00\xa0('
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g1001
sS'block_loop.thisIndex'
p2813
g889
sg38
S'right'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g1009
sS'block_loop.thisRepN'
p2819
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vn
sS'block_loop.thisTrialN'
p2822
I0
sg39
F0.78331653156874381
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x00\x06\tq\xf8'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1477
sS'block_loop.thisIndex'
p2826
g889
sg38
S'right'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1484
sS'block_loop.thisRepN'
p2832
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vn
sS'block_loop.thisTrialN'
p2835
I0
sg39
F1.3833165885880589
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x00\x0c\x06\xae\xf0'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g896
sS'block_loop.thisIndex'
p2839
g889
sg38
S'left'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g905
sS'block_loop.thisRepN'
p2845
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vn
sS'block_loop.thisTrialN'
p2848
I0
sg39
F0.88328978939262015
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x00\x12\r6\xd0'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1576
sS'block_loop.thisIndex'
p2852
g889
sg38
S'left'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1376
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1583
sS'block_loop.thisRepN'
p2858
I0
sg907
g1382
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g1376
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vn
sS'block_loop.thisTrialN'
p2861
I0
sg39
F2.7999422962002427
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x00\x18\x0b\xdf\x10'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g1956
sS'block_loop.thisIndex'
p2865
g889
sg38
S'left'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g1158
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g1963
sS'block_loop.thisRepN'
p2871
I0
sg907
g1158
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g1152
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vn
sS'block_loop.thisTrialN'
p2874
I0
sg39
F0.75001197410801979
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x00 \tJ\xe8'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g1449
sS'block_loop.thisIndex'
p2878
g889
sg38
S'right'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g1456
sS'block_loop.thisRepN'
p2884
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vn
sS'block_loop.thisTrialN'
p2887
I0
sg39
F0.96657969282387057
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x00&\x06\x0e\xc8'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1744
sS'block_loop.thisIndex'
p2891
g889
sg38
S'left'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g1595
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1751
sS'block_loop.thisRepN'
p2897
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g1602
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vn
sS'block_loop.thisTrialN'
p2900
I0
sg39
F0.68306615866003995
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x00,\x05\xe7\xb8'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1180
sS'block_loop.thisIndex'
p2904
g889
sg38
S'left'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1188
sS'block_loop.thisRepN'
p2910
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vn
sS'block_loop.thisTrialN'
p2913
I0
sg39
F0.96652181796616787
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x002\x01\xb5\x80'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1389
sS'block_loop.thisIndex'
p2917
g889
sg38
S'right'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1393
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1397
sS'block_loop.thisRepN'
p2923
I0
sg907
g1393
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g1400
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vn
sS'block_loop.thisTrialN'
p2926
I0
sg39
F0.83327251246464584
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x008\x01\x92X'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g1406
sS'block_loop.thisIndex'
p2930
g889
sg38
S'right'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g1410
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g1414
sS'block_loop.thisRepN'
p2936
I0
sg907
g1410
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g1417
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vn
sS'block_loop.thisTrialN'
p2939
I0
sg39
F0.83333922535439342
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x01\x01\x0f\x03\xc0'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1576
sS'block_loop.thisIndex'
p2943
g889
sg38
S'left'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1382
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1583
sS'block_loop.thisRepN'
p2949
I0
sg907
g1382
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g1376
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vn
sS'block_loop.thisTrialN'
p2952
I0
sg39
F1.8999700077092712
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x01\x07\x0c\xf8P'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1238
sS'block_loop.thisIndex'
p2956
g889
sg38
S'left'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1245
sS'block_loop.thisRepN'
p2962
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vn
sS'block_loop.thisTrialN'
p2965
I0
sg39
F0.81705671850068029
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x01\x0e\x0b\xd7@'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g984
sS'block_loop.thisIndex'
p2969
g889
sg38
S'left'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g992
sS'block_loop.thisRepN'
p2975
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vn
sS'block_loop.thisTrialN'
p2978
I0
sg39
F1.0499605424611218
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x01\x14\t\x8dP'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g2146
sS'block_loop.thisIndex'
p2982
g889
sg38
S'left'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g2153
sS'block_loop.thisRepN'
p2988
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vn
sS'block_loop.thisTrialN'
p2991
I0
sg39
F0.81657946474661003
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x01\x1a\n\xd5p'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g1001
sS'block_loop.thisIndex'
p2995
g889
sg38
S'right'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g1009
sS'block_loop.thisRepN'
p3001
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vn
sS'block_loop.thisTrialN'
p3004
I0
sg39
F0.86667942004260112
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x01 \x08\x8b\x80'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1520
sS'block_loop.thisIndex'
p3008
g889
sg38
S'left'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g1393
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1527
sS'block_loop.thisRepN'
p3014
I0
sg907
g1393
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g1400
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vn
sS'block_loop.thisTrialN'
p3017
I0
sg39
F0.88325700314271671
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x01&\x06\xf9('
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g984
sS'block_loop.thisIndex'
p3021
g889
sg38
S'left'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g992
sS'block_loop.thisRepN'
p3027
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vn
sS'block_loop.thisTrialN'
p3030
I0
sg39
F1.0499497087439522
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x01,\x05\xa1h'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1238
sS'block_loop.thisIndex'
p3034
g889
sg38
S'left'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1245
sS'block_loop.thisRepN'
p3040
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vn
sS'block_loop.thisTrialN'
p3043
I0
sg39
F0.84999207428063528
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x012\x06\xe9\x88'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g1099
sS'block_loop.thisIndex'
p3047
g889
sg38
S'left'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1029
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g1106
sS'block_loop.thisRepN'
p3053
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vn
sS'block_loop.thisTrialN'
p3056
I0
sg39
F0.98329754405312997
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x018\x05\x18\xb0'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g1372
sS'block_loop.thisIndex'
p3060
g889
sg38
S'right'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g1382
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g1380
sS'block_loop.thisRepN'
p3066
I0
sg907
g1382
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g1376
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vn
sS'block_loop.thisTrialN'
p3069
I0
sg39
F0.99998774079358554
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x02\x02\x05n\xa0'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1131
sS'block_loop.thisIndex'
p3073
g889
sg38
S'left'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1141
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1139
sS'block_loop.thisRepN'
p3079
I0
sg907
g1141
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vn
sS'block_loop.thisTrialN'
p3082
I0
sg39
F0.91666162993806211
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x02\x08\x05\xff('
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1389
sS'block_loop.thisIndex'
p3086
g889
sg38
S'right'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g1393
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1397
sS'block_loop.thisRepN'
p3092
I0
sg907
g1393
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g1400
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vn
sS'block_loop.thisTrialN'
p3095
I0
sg39
F1.1164148492634922
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x02\x0e\x05$h'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1492
sS'block_loop.thisIndex'
p3099
g889
sg38
S'left'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1499
sS'block_loop.thisRepN'
p3105
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vn
sS'block_loop.thisTrialN'
p3108
I0
sg39
F0.6836634385990692
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x02\x14\x07\x9d8'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1165
sS'block_loop.thisIndex'
p3112
g889
sg38
S'right'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1172
sS'block_loop.thisRepN'
p3118
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vn
sS'block_loop.thisTrialN'
p3121
I0
sg39
F1.4165840833311449
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x02\x1a\x030h'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g2038
sS'block_loop.thisIndex'
p3125
g889
sg38
S'left'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1410
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g2045
sS'block_loop.thisRepN'
p3131
I0
sg907
g1410
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g1417
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vn
sS'block_loop.thisTrialN'
p3134
I0
sg39
F1.0999487394110474
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x02 \t\xee\xf8'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1634
sS'block_loop.thisIndex'
p3138
g889
sg38
S'right'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g1638
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1642
sS'block_loop.thisRepN'
p3144
I0
sg907
g1638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g1645
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vn
sS'block_loop.thisTrialN'
p3147
I0
sg39
F1.2333269091286638
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x02&\x0c-0'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g1331
sS'block_loop.thisIndex'
p3151
g889
sg38
S'right'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1125
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g1338
sS'block_loop.thisRepN'
p3157
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g1125
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vn
sS'block_loop.thisTrialN'
p3160
I0
sg39
F1.149933515187513
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x02-\x00\xcf\x08'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1798
sS'block_loop.thisIndex'
p3164
g889
sg38
S'right'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1805
sS'block_loop.thisRepN'
p3170
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vn
sS'block_loop.thisTrialN'
p3173
I0
sg39
F1.0003617891370595
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x023\x03\xc4\xd8'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g2079
sS'block_loop.thisIndex'
p3177
g889
sg38
S'left'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1638
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g2086
sS'block_loop.thisRepN'
p3183
I0
sg907
g1638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g1645
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vn
sS'block_loop.thisTrialN'
p3186
I0
sg39
F0.96665324806235731
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x029\x04\x16\xe0'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g1331
sS'block_loop.thisIndex'
p3190
g889
sg38
S'right'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g1125
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g1338
sS'block_loop.thisRepN'
p3196
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g1125
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vn
sS'block_loop.thisTrialN'
p3199
I0
sg39
F2.9499487964303626
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x03\x03\x04.P'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1535
sS'block_loop.thisIndex'
p3203
g889
sg38
S'right'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1046
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1542
sS'block_loop.thisRepN'
p3209
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vn
sS'block_loop.thisTrialN'
p3212
I0
sg39
F0.75001425489153917
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x03\x0b\x03\xfb\x88'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1520
sS'block_loop.thisIndex'
p3216
g889
sg38
S'left'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1393
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1527
sS'block_loop.thisRepN'
p3222
I0
sg907
g1393
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g1400
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vn
sS'block_loop.thisTrialN'
p3225
I0
sg39
F0.71654633637899678
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x03\x11\x00\xbfh'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1035
sS'block_loop.thisIndex'
p3229
g889
sg38
S'right'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1043
sS'block_loop.thisRepN'
p3235
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vn
sS'block_loop.thisTrialN'
p3238
I0
sg39
F1.1170340817334363
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x03\x16\x0c\r\xf0'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1180
sS'block_loop.thisIndex'
p3242
g889
sg38
S'left'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1188
sS'block_loop.thisRepN'
p3248
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vn
sS'block_loop.thisTrialN'
p3251
I0
sg39
F1.2831466132656715
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x03\x1c\x0eH@'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g967
sS'block_loop.thisIndex'
p3255
g889
sg38
S'left'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g975
sS'block_loop.thisRepN'
p3261
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vn
sS'block_loop.thisTrialN'
p3264
I0
sg39
F0.83328363127930061
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x03#\x03\xe00'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1331
sS'block_loop.thisIndex'
p3268
g889
sg38
S'left'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1118
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1338
sS'block_loop.thisRepN'
p3274
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g1125
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vn
sS'block_loop.thisTrialN'
p3277
I0
sg39
F1.0665737627896306
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x03)\x01\xd4\xc0'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g2038
sS'block_loop.thisIndex'
p3281
g889
sg38
S'left'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g1410
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g2045
sS'block_loop.thisRepN'
p3287
I0
sg907
g1410
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g1417
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vn
sS'block_loop.thisTrialN'
p3290
I0
sg39
F0.88294254024458496
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x03/\x03Wx'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g1210
sS'block_loop.thisIndex'
p3294
g889
sg38
S'right'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g1217
sS'block_loop.thisRepN'
p3300
I0
sg907
g1056
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g1063
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vn
sS'block_loop.thisTrialN'
p3303
I0
sg39
F0.9333923105696158
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x035\x02>8'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1690
sS'block_loop.thisIndex'
p3307
g889
sg38
S'right'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1697
sS'block_loop.thisRepN'
p3313
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vn
sS'block_loop.thisTrialN'
p3316
I0
sg39
F1.033248678286327
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x03;\x01\xa1\xf8'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g1634
sS'block_loop.thisIndex'
p3320
g889
sg38
S'right'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1638
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g1642
sS'block_loop.thisRepN'
p3326
I0
sg907
g1638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g1645
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vn
sS'block_loop.thisTrialN'
p3329
I0
sg39
F0.83330387322530441
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x04\x05\x02\xab\x98'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g1389
sS'block_loop.thisIndex'
p3333
g889
sg38
S'right'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1393
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g1397
sS'block_loop.thisRepN'
p3339
I0
sg907
g1393
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g1400
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vn
sS'block_loop.thisTrialN'
p3342
I0
sg39
F0.76656332820948592
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x04\x0b\x00\xa0('
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g2079
sS'block_loop.thisIndex'
p3346
g889
sg38
S'left'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1638
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g2086
sS'block_loop.thisRepN'
p3352
I0
sg907
g1638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g1645
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vn
sS'block_loop.thisTrialN'
p3355
I0
sg39
F1.6499540422310019
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x04\x10\x0c\xe0\xe0'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g2038
sS'block_loop.thisIndex'
p3359
g889
sg38
S'left'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1410
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g2045
sS'block_loop.thisRepN'
p3365
I0
sg907
g1410
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g1417
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vn
sS'block_loop.thisTrialN'
p3368
I0
sg39
F0.80042838798817684
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x04\x17\x07\xf3('
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g2079
sS'block_loop.thisIndex'
p3372
g889
sg38
S'left'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1638
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g2086
sS'block_loop.thisRepN'
p3378
I0
sg907
g1638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g1645
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vn
sS'block_loop.thisTrialN'
p3381
I0
sg39
F0.7499914470654403
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x04\x1d\x05j\xb8'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g1477
sS'block_loop.thisIndex'
p3385
g889
sg38
S'right'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g1484
sS'block_loop.thisRepN'
p3391
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vn
sS'block_loop.thisTrialN'
p3394
I0
sg39
F2.7998542009736411
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x04#\x02.\x98'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g1001
sS'block_loop.thisIndex'
p3398
g889
sg38
S'right'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g1009
sS'block_loop.thisRepN'
p3404
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vn
sS'block_loop.thisTrialN'
p3407
I0
sg39
F1.049969950689956
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x04*\x0e\xdc\xb0'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g933
sS'block_loop.thisIndex'
p3411
g889
sg38
S'left'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g941
sS'block_loop.thisRepN'
p3417
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vn
sS'block_loop.thisTrialN'
p3420
I0
sg39
F1.1500010833715351
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x041\x00\xe2\x90'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1477
sS'block_loop.thisIndex'
p3424
g889
sg38
S'right'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1484
sS'block_loop.thisRepN'
p3430
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vn
sS'block_loop.thisTrialN'
p3433
I0
sg39
F1.4337044926851377
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x047\x03\x99\xe0'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g2434
sS'block_loop.thisIndex'
p3437
g889
sg38
S'right'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g1141
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g2441
sS'block_loop.thisRepN'
p3443
I0
sg907
g1141
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vn
sS'block_loop.thisTrialN'
p3446
I0
sg39
F1.6333245713267388
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x05\x01\n\xd5p'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g1165
sS'block_loop.thisIndex'
p3450
g889
sg38
S'right'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g1172
sS'block_loop.thisRepN'
p3456
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vn
sS'block_loop.thisTrialN'
p3459
I0
sg39
F0.81666613448396674
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x05\x08\x05\xa98'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g2146
sS'block_loop.thisIndex'
p3463
g889
sg38
S'left'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g2153
sS'block_loop.thisRepN'
p3469
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vn
sS'block_loop.thisTrialN'
p3472
I0
sg39
F0.93330393024461955
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x05\x0e\x03_H'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g950
sS'block_loop.thisIndex'
p3476
g889
sg38
S'left'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g958
sS'block_loop.thisRepN'
p3482
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vn
sS'block_loop.thisTrialN'
p3485
I0
sg39
F3.7332288354782577
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x05\x14\x02\xfd\xa0'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1971
sS'block_loop.thisIndex'
p3489
g889
sg38
S'right'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1978
sS'block_loop.thisRepN'
p3495
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vn
sS'block_loop.thisTrialN'
p3498
I0
sg39
F2.7168821816139825
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x05\x1c\x0e\xb1\xb8'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g1690
sS'block_loop.thisIndex'
p3502
g889
sg38
S'right'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g1697
sS'block_loop.thisRepN'
p3508
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vn
sS'block_loop.thisTrialN'
p3511
I0
sg39
F1.0832154929003082
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x05$\n\xae`'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g1148
sS'block_loop.thisIndex'
p3515
g889
sg38
S'right'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1158
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g1156
sS'block_loop.thisRepN'
p3521
I0
sg907
g1158
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g1152
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vn
sS'block_loop.thisTrialN'
p3524
I0
sg39
F2.0832240458348679
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x05*\x0cs\x80'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1798
sS'block_loop.thisIndex'
p3528
g889
sg38
S'right'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1805
sS'block_loop.thisRepN'
p3534
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vn
sS'block_loop.thisTrialN'
p3537
I0
sg39
F1.6832212518766028
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x051\x0ekh'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g1591
sS'block_loop.thisIndex'
p3541
g889
sg38
S'right'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g1595
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g1599
sS'block_loop.thisRepN'
p3547
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g1602
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vn
sS'block_loop.thisTrialN'
p3550
I0
sg39
F1.2996831422797186
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x058\no\xe0'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1535
sS'block_loop.thisIndex'
p3554
g889
sg38
S'left'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1542
sS'block_loop.thisRepN'
p3560
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vn
sS'block_loop.thisTrialN'
p3563
I0
sg39
F3.4002764878687231
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x06\x03\x00FP'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1591
sS'block_loop.thisIndex'
p3567
g889
sg38
S'right'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1595
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1599
sS'block_loop.thisRepN'
p3573
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g1602
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vn
sS'block_loop.thisTrialN'
p3576
I0
sg39
F0.63304203938423598
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x06\x0b\x06\xf9('
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g2434
sS'block_loop.thisIndex'
p3580
g889
sg38
S'right'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1135
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g2441
sS'block_loop.thisRepN'
p3586
I0
sg907
g1141
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vn
sS'block_loop.thisTrialN'
p3589
I0
sg39
F0.53329400884013012
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x06\x11\x01\xd4\xc0'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g916
sS'block_loop.thisIndex'
p3593
g889
sg38
S'right'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g924
sS'block_loop.thisRepN'
p3599
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vn
sS'block_loop.thisTrialN'
p3602
I0
sg39
F0.79989611035307462
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x06\x16\n\x83h'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1971
sS'block_loop.thisIndex'
p3606
g889
sg38
S'right'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1978
sS'block_loop.thisRepN'
p3612
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vn
sS'block_loop.thisTrialN'
p3615
I0
sg39
F2.0499696655915614
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x06\x1c\x07\xfe\xe0'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F61.298899978561167
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vn
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vn
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'38-maltesers.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'left'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'38-maltesers.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'6-sour_patch_kids.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'6-sour_patch_kids.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vn
sS'block_loop.thisTrialN'
p3650
I0
sg39
F2.0829252633157012
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x089\t\x99\x08'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'18-mms.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'left'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'18-mms.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vn
sS'block_loop.thisTrialN'
p3667
I0
sg39
F1.733349431856368
sg34
g753
(S'\x07\xdf\x07\x01\x0b\t\x04\x0bRp'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'7-olives.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'right'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'7-olives.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'22-daim.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
S'22-daim.png'
p3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3682
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vn
sS'block_loop.thisTrialN'
p3684
I0
sg39
F0.93337064313527662
sg34
g753
(S'\x07\xdf\x07\x01\x0b\t\x0b\x07\x95h'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'29-beans.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'right'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'29-beans.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'46-pistachios.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
S'46-pistachios.png'
p3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3699
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vn
sS'block_loop.thisTrialN'
p3701
I0
sg39
F1.8498452489020565
sg34
g753
(S'\x07\xdf\x07\x01\x0b\t\x11\x073\xc0'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'10-bounty_redo.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'left'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'10-bounty_redo.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'4-corn.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3715
I1
sg3647
S'4-corn.png'
p3716
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vn
sS'block_loop.thisTrialN'
p3718
I0
sg39
F1.0833024477360595
sg34
g753
(S'\x07\xdf\x07\x01\x0b\t\x18\x05_\x00'
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
S'46-pistachios.png'
p3722
sS'block_loop.thisIndex'
p3723
g3627
sg38
S'left'
p3724
sg59
g63
sS'trial_loop.thisN'
p3725
I5
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p3726
g60
(g99
S'\x05\x00\x00\x00'
tRp3727
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3728
I0
sg3642
S'29-beans.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3731
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p3732
Nsg70
Vn
sS'block_loop.thisTrialN'
p3733
I0
sg39
F0.74994184004390263
sg34
g753
(S'\x07\xdf\x07\x01\x0b\t\x1e\x07 8'
tRp3734
sa(dp3735
S'trial_loop.thisTrialN'
p3736
I6
sg3633
S'33-ambrosia_rice.png'
p3737
sS'block_loop.thisIndex'
p3738
g3627
sg38
S'right'
p3739
sg59
g63
sS'trial_loop.thisN'
p3740
I6
sg33
S'23-crunchie_redo.png'
p3741
sg64
g65
sS'trial_loop.thisIndex'
p3742
g60
(g99
S'\x06\x00\x00\x00'
tRp3743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3744
I0
sg3642
S'23-crunchie_redo.png'
p3745
sS'block_loop.thisRepN'
p3746
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3747
I1
sg3647
S'33-ambrosia_rice.png'
p3748
sg55
g11
sS'block_loop.thisTrial'
p3749
Nsg70
Vn
sS'block_loop.thisTrialN'
p3750
I0
sg39
F2.5999148127712033
sg34
g753
(S'\x07\xdf\x07\x01\x0b\t$\x03\xe00'
tRp3751
sa(dp3752
S'trial_loop.thisTrialN'
p3753
I7
sg3633
S'16-skips_prawn.png'
p3754
sS'block_loop.thisIndex'
p3755
g3627
sg38
S'left'
p3756
sg59
g63
sS'trial_loop.thisN'
p3757
I7
sg33
S'42-mrkipling_lemon_slices.png'
p3758
sg64
g65
sS'trial_loop.thisIndex'
p3759
g60
(g99
S'\x07\x00\x00\x00'
tRp3760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3761
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p3762
sS'block_loop.thisRepN'
p3763
I1
sg3645
S'16-skips_prawn.png'
p3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3765
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p3766
Nsg70
Vn
sS'block_loop.thisTrialN'
p3767
I0
sg39
F3.0329835373113383
sg34
g753
(S'\x07\xdf\x07\x01\x0b\t+\ry8'
tRp3768
sa(dp3769
S'trial_loop.thisTrialN'
p3770
I8
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p3771
sS'block_loop.thisIndex'
p3772
g3627
sg38
S'left'
p3773
sg59
g63
sS'trial_loop.thisN'
p3774
I8
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p3775
sg64
g65
sS'trial_loop.thisIndex'
p3776
g60
(g99
S'\x08\x00\x00\x00'
tRp3777
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3778
I0
sg3642
S'36-fig_rolls.png'
p3779
sS'block_loop.thisRepN'
p3780
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3781
I1
sg3647
S'36-fig_rolls.png'
p3782
sg55
g11
sS'block_loop.thisTrial'
p3783
Nsg70
Vn
sS'block_loop.thisTrialN'
p3784
I0
sg39
F3.5999475990201972
sg34
g753
(S'\x07\xdf\x07\x01\x0b\t3\x0ew '
tRp3785
sa(dp3786
S'trial_loop.thisTrialN'
p3787
I9
sg3633
g3754
sS'block_loop.thisIndex'
p3788
g3627
sg38
S'left'
p3789
sg59
g63
sS'trial_loop.thisN'
p3790
I9
sg33
g3764
sg64
g65
sS'trial_loop.thisIndex'
p3791
g60
(g99
S'\t\x00\x00\x00'
tRp3792
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3793
I0
sg3642
g3762
sS'block_loop.thisRepN'
p3794
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3795
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p3796
Nsg70
Vn
sS'block_loop.thisTrialN'
p3797
I0
sg39
F1.0831271125753119
sg34
g753
(S'\x07\xdf\x07\x01\x0b\n\x00\t\x04\x98'
tRp3798
sa(dp3799
S'trial_loop.thisTrialN'
p3800
I10
sg3633
S'6-sour_patch_kids.png'
p3801
sS'block_loop.thisIndex'
p3802
g3627
sg38
S'right'
p3803
sg59
g63
sS'trial_loop.thisN'
p3804
I10
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p3805
g60
(g99
S'\n\x00\x00\x00'
tRp3806
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3807
I0
sg3642
S'38-maltesers.png'
p3808
sS'block_loop.thisRepN'
p3809
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3810
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3811
Nsg70
Vn
sS'block_loop.thisTrialN'
p3812
I0
sg39
F0.86642539788317663
sg34
g753
(S'\x07\xdf\x07\x01\x0b\n\x06\n\xc5\xd0'
tRp3813
sa(dp3814
S'trial_loop.thisTrialN'
p3815
I11
sg3633
S'1-treacle_cookies.png'
p3816
sS'block_loop.thisIndex'
p3817
g3627
sg38
S'right'
p3818
sg59
g63
sS'trial_loop.thisN'
p3819
I11
sg33
S'1-treacle_cookies.png'
p3820
sg64
g65
sS'trial_loop.thisIndex'
p3821
g60
(g99
S'\x0b\x00\x00\x00'
tRp3822
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3823
I0
sg3642
S'21-nakd_banana_crunch.png'
p3824
sS'block_loop.thisRepN'
p3825
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3826
I1
sg3647
S'21-nakd_banana_crunch.png'
p3827
sg55
g11
sS'block_loop.thisTrial'
p3828
Nsg70
Vn
sS'block_loop.thisTrialN'
p3829
I0
sg39
F1.2999417260052724
sg34
g753
(S'\x07\xdf\x07\x01\x0b\n\x0c\t3x'
tRp3830
sa(dp3831
S'trial_loop.thisTrialN'
p3832
I12
sg3633
S'26-walkers_smoky_bacon.png'
p3833
sS'block_loop.thisIndex'
p3834
g3627
sg38
S'left'
p3835
sg59
g63
sS'trial_loop.thisN'
p3836
I12
sg33
S'26-walkers_smoky_bacon.png'
p3837
sg64
g65
sS'trial_loop.thisIndex'
p3838
g60
(g99
S'\x0c\x00\x00\x00'
tRp3839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3840
I0
sg3642
S'44-crunch.png'
p3841
sS'block_loop.thisRepN'
p3842
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3843
I1
sg3647
S'44-crunch.png'
p3844
sg55
g11
sS'block_loop.thisTrial'
p3845
Nsg70
Vn
sS'block_loop.thisTrialN'
p3846
I0
sg39
F1.3499219402165181
sg34
g753
(S'\x07\xdf\x07\x01\x0b\n\x12\x0eH@'
tRp3847
sa(dp3848
S'trial_loop.thisTrialN'
p3849
I13
sg3633
S'25-kitkat.png'
p3850
sS'block_loop.thisIndex'
p3851
g3627
sg38
S'left'
p3852
sg59
g63
sS'trial_loop.thisN'
p3853
I13
sg33
S'25-kitkat.png'
p3854
sg64
g65
sS'trial_loop.thisIndex'
p3855
g60
(g99
S'\r\x00\x00\x00'
tRp3856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3857
I0
sg3642
S'31-hobnobs.png'
p3858
sS'block_loop.thisRepN'
p3859
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3860
I1
sg3647
S'31-hobnobs.png'
p3861
sg55
g11
sS'block_loop.thisTrial'
p3862
Nsg70
Vn
sS'block_loop.thisTrialN'
p3863
I0
sg39
F2.0333339225353484
sg34
g753
(S'\x07\xdf\x07\x01\x0b\n\x19\x04\xd6H'
tRp3864
sa(dp3865
S'trial_loop.thisTrialN'
p3866
I14
sg3633
g3833
sS'block_loop.thisIndex'
p3867
g3627
sg38
S'left'
p3868
sg59
g63
sS'trial_loop.thisN'
p3869
I14
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p3870
g60
(g99
S'\x0e\x00\x00\x00'
tRp3871
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3872
I0
sg3642
g3841
sS'block_loop.thisRepN'
p3873
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3874
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p3875
Nsg70
Vn
sS'block_loop.thisTrialN'
p3876
I0
sg39
F1.2833932228832055
sg34
g753
(S'\x07\xdf\x07\x01\x0b\n \x05\xd8\x18'
tRp3877
sa(dp3878
S'trial_loop.thisTrialN'
p3879
I15
sg3633
S'45-chewy_nougat_redo.png'
p3880
sS'block_loop.thisIndex'
p3881
g3627
sg38
S'right'
p3882
sg59
g63
sS'trial_loop.thisN'
p3883
I15
sg33
S'41-peanuts_redo.png'
p3884
sg64
g65
sS'trial_loop.thisIndex'
p3885
g60
(g99
S'\x0f\x00\x00\x00'
tRp3886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3887
I0
sg3642
S'41-peanuts_redo.png'
p3888
sS'block_loop.thisRepN'
p3889
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3890
I1
sg3647
S'45-chewy_nougat_redo.png'
p3891
sg55
g11
sS'block_loop.thisTrial'
p3892
Nsg70
Vn
sS'block_loop.thisTrialN'
p3893
I0
sg39
F0.88332400113176845
sg34
g753
(S'\x07\xdf\x07\x01\x0b\n&\n\xb2H'
tRp3894
sa(dp3895
S'trial_loop.thisTrialN'
p3896
I16
sg3633
S'19-caramello_redo.png'
p3897
sS'block_loop.thisIndex'
p3898
g3627
sg38
S'left'
p3899
sg59
g63
sS'trial_loop.thisN'
p3900
I16
sg33
S'30-spaghetti_hoops.png'
p3901
sg64
g65
sS'trial_loop.thisIndex'
p3902
g60
(g99
S'\x10\x00\x00\x00'
tRp3903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3904
I0
sg3642
S'30-spaghetti_hoops.png'
p3905
sS'block_loop.thisRepN'
p3906
I1
sg3645
S'19-caramello_redo.png'
p3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3908
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p3909
Nsg70
Vn
sS'block_loop.thisTrialN'
p3910
I0
sg39
F1.116660318488357
sg34
g753
(S'\x07\xdf\x07\x01\x0b\n,\t^p'
tRp3911
sa(dp3912
S'trial_loop.thisTrialN'
p3913
I17
sg3633
S'48-twix.png'
p3914
sS'block_loop.thisIndex'
p3915
g3627
sg38
S'left'
p3916
sg59
g63
sS'trial_loop.thisN'
p3917
I17
sg33
S'48-twix.png'
p3918
sg64
g65
sS'trial_loop.thisIndex'
p3919
g60
(g99
S'\x11\x00\x00\x00'
tRp3920
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3921
I0
sg3642
S'50-polo.png'
p3922
sS'block_loop.thisRepN'
p3923
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3924
I1
sg3647
S'50-polo.png'
p3925
sg55
g11
sS'block_loop.thisTrial'
p3926
Nsg70
Vn
sS'block_loop.thisTrialN'
p3927
I0
sg39
F1.5999684111611714
sg34
g753
(S'\x07\xdf\x07\x01\x0b\n2\x0b\xd7@'
tRp3928
sa(dp3929
S'trial_loop.thisTrialN'
p3930
I18
sg3633
S'23-crunchie_redo.png'
p3931
sS'block_loop.thisIndex'
p3932
g3627
sg38
S'left'
p3933
sg59
g63
sS'trial_loop.thisN'
p3934
I18
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p3935
g60
(g99
S'\x12\x00\x00\x00'
tRp3936
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3937
I0
sg3642
S'33-ambrosia_rice.png'
p3938
sS'block_loop.thisRepN'
p3939
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3940
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p3941
Nsg70
Vn
sS'block_loop.thisTrialN'
p3942
I0
sg39
F0.66709184255250875
sg34
g753
(S'\x07\xdf\x07\x01\x0b\n9\x061\xf0'
tRp3943
sa(dp3944
S'trial_loop.thisTrialN'
p3945
I19
sg3633
S'51-mars.png'
p3946
sS'block_loop.thisIndex'
p3947
g3627
sg38
S'left'
p3948
sg59
g63
sS'trial_loop.thisN'
p3949
I19
sg33
S'51-mars.png'
p3950
sg64
g65
sS'trial_loop.thisIndex'
p3951
g60
(g99
S'\x13\x00\x00\x00'
tRp3952
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3953
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p3954
sS'block_loop.thisRepN'
p3955
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3956
I1
sg3647
S'27-hartleys_raspberries_jelly.png'
p3957
sg55
g11
sS'block_loop.thisTrial'
p3958
Nsg70
Vn
sS'block_loop.thisTrialN'
p3959
I0
sg39
F2.283181110102305
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0b\x03\x01\x86\xa0'
tRp3960
sa(dp3961
S'trial_loop.thisTrialN'
p3962
I20
sg3633
g3816
sS'block_loop.thisIndex'
p3963
g3627
sg38
S'left'
p3964
sg59
g63
sS'trial_loop.thisN'
p3965
I20
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p3966
g60
(g99
S'\x14\x00\x00\x00'
tRp3967
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3968
I0
sg3642
g3824
sS'block_loop.thisRepN'
p3969
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3970
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p3971
Nsg70
Vn
sS'block_loop.thisTrialN'
p3972
I0
sg39
F3.0999404715748824
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0b\n\x06Y\x00'
tRp3973
sa(dp3974
S'trial_loop.thisTrialN'
p3975
I21
sg3633
g3771
sS'block_loop.thisIndex'
p3976
g3627
sg38
S'left'
p3977
sg59
g63
sS'trial_loop.thisN'
p3978
I21
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p3979
g60
(g99
S'\x15\x00\x00\x00'
tRp3980
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3981
I0
sg3642
g3779
sS'block_loop.thisRepN'
p3982
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3983
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p3984
Nsg70
Vn
sS'block_loop.thisTrialN'
p3985
I0
sg39
F1.3666329490970384
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0b\x12\x08\x87\x98'
tRp3986
sa(dp3987
S'trial_loop.thisTrialN'
p3988
I22
sg3633
g3688
sS'block_loop.thisIndex'
p3989
g3627
sg38
S'right'
p3990
sg59
g63
sS'trial_loop.thisN'
p3991
I22
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p3992
g60
(g99
S'\x16\x00\x00\x00'
tRp3993
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3994
I0
sg3642
g3696
sS'block_loop.thisRepN'
p3995
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3996
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p3997
Nsg70
Vn
sS'block_loop.thisTrialN'
p3998
I0
sg39
F0.98333517696664785
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0b\x18\x0e\x92x'
tRp3999
sa(dp4000
S'trial_loop.thisTrialN'
p4001
I23
sg3633
g3634
sS'block_loop.thisIndex'
p4002
g3627
sg38
S'left'
p4003
sg59
g63
sS'trial_loop.thisN'
p4004
I23
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p4005
g60
(g99
S'\x17\x00\x00\x00'
tRp4006
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4007
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4008
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4009
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4010
Nsg70
Vn
sS'block_loop.thisTrialN'
p4011
I0
sg39
F0.91667075306850165
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0b\x1e\x0e\xe8h'
tRp4012
sa(dp4013
S'trial_loop.thisTrialN'
p4014
I24
sg3633
S'3-ellas_strawberries_apples.png'
p4015
sS'block_loop.thisIndex'
p4016
g3627
sg38
S'right'
p4017
sg59
g63
sS'trial_loop.thisN'
p4018
I24
sg33
S'13-mccoys_steak_crisps.png'
p4019
sg64
g65
sS'trial_loop.thisIndex'
p4020
g60
(g99
S'\x18\x00\x00\x00'
tRp4021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4022
I0
sg3642
S'13-mccoys_steak_crisps.png'
p4023
sS'block_loop.thisRepN'
p4024
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4025
I1
sg3647
S'3-ellas_strawberries_apples.png'
p4026
sg55
g11
sS'block_loop.thisTrial'
p4027
Nsg70
Vn
sS'block_loop.thisTrialN'
p4028
I0
sg39
F0.86670422355291521
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0b$\x0e\r\xa8'
tRp4029
sa(dp4030
S'trial_loop.thisTrialN'
p4031
I25
sg3633
S'5-pineapple.png'
p4032
sS'block_loop.thisIndex'
p4033
g3627
sg38
S'right'
p4034
sg59
g63
sS'trial_loop.thisN'
p4035
I25
sg33
S'40-sardines.png'
p4036
sg64
g65
sS'trial_loop.thisIndex'
p4037
g60
(g99
S'\x19\x00\x00\x00'
tRp4038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4039
I0
sg3642
S'40-sardines.png'
p4040
sS'block_loop.thisRepN'
p4041
I1
sg3645
g4036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4042
I1
sg3647
S'5-pineapple.png'
p4043
sg55
g11
sS'block_loop.thisTrial'
p4044
Nsg70
Vn
sS'block_loop.thisTrialN'
p4045
I0
sg39
F1.1332655560772764
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0b*\x0c{P'
tRp4046
sa(dp4047
S'trial_loop.thisTrialN'
p4048
I26
sg3633
S'27-hartleys_raspberries_jelly.png'
p4049
sS'block_loop.thisIndex'
p4050
g3627
sg38
S'right'
p4051
sg59
g63
sS'trial_loop.thisN'
p4052
I26
sg33
g3957
sg64
g65
sS'trial_loop.thisIndex'
p4053
g60
(g99
S'\x1a\x00\x00\x00'
tRp4054
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4055
I0
sg3642
S'51-mars.png'
p4056
sS'block_loop.thisRepN'
p4057
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4058
I1
sg3647
g3957
sg55
g11
sS'block_loop.thisTrial'
p4059
Nsg70
Vn
sS'block_loop.thisTrialN'
p4060
I0
sg39
F0.58330387322530441
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0b0\x0e\xf4 '
tRp4061
sa(dp4062
S'trial_loop.thisTrialN'
p4063
I27
sg3633
S'31-hobnobs.png'
p4064
sS'block_loop.thisIndex'
p4065
g3627
sg38
S'right'
p4066
sg59
g63
sS'trial_loop.thisN'
p4067
I27
sg33
g3861
sg64
g65
sS'trial_loop.thisIndex'
p4068
g60
(g99
S'\x1b\x00\x00\x00'
tRp4069
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4070
I0
sg3642
S'25-kitkat.png'
p4071
sS'block_loop.thisRepN'
p4072
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4073
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4074
Nsg70
Vn
sS'block_loop.thisTrialN'
p4075
I0
sg39
F0.61654342838028242
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0b6\tR\xb8'
tRp4076
sa(dp4077
S'trial_loop.thisTrialN'
p4078
I28
sg3633
S'30-spaghetti_hoops.png'
p4079
sS'block_loop.thisIndex'
p4080
g3627
sg38
S'right'
p4081
sg59
g63
sS'trial_loop.thisN'
p4082
I28
sg33
g3907
sg64
g65
sS'trial_loop.thisIndex'
p4083
g60
(g99
S'\x1c\x00\x00\x00'
tRp4084
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4085
I0
sg3642
S'19-caramello_redo.png'
p4086
sS'block_loop.thisRepN'
p4087
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4088
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p4089
Nsg70
Vn
sS'block_loop.thisTrialN'
p4090
I0
sg39
F0.7166714943232364
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0c\x00\x03\xef\xd0'
tRp4091
sa(dp4092
S'trial_loop.thisTrialN'
p4093
I29
sg3633
g3671
sS'block_loop.thisIndex'
p4094
g3627
sg38
S'right'
p4095
sg59
g63
sS'trial_loop.thisN'
p4096
I29
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4097
g60
(g99
S'\x1d\x00\x00\x00'
tRp4098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4099
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4100
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4101
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4102
Nsg70
Vn
sS'block_loop.thisTrialN'
p4103
I0
sg39
F0.65001020650197461
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0c\x05\x0f>X'
tRp4104
sa(dp4105
S'trial_loop.thisTrialN'
p4106
I30
sg3633
g3654
sS'block_loop.thisIndex'
p4107
g3627
sg38
S'left'
p4108
sg59
g63
sS'trial_loop.thisN'
p4109
I30
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p4110
g60
(g99
S'\x1e\x00\x00\x00'
tRp4111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4112
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4113
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4114
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4115
Nsg70
Vn
sS'block_loop.thisTrialN'
p4116
I0
sg39
F0.74991475575097866
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0c\x0b\n\x93\x08'
tRp4117
sa(dp4118
S'trial_loop.thisTrialN'
p4119
I31
sg3633
g3850
sS'block_loop.thisIndex'
p4120
g3627
sg38
S'left'
p4121
sg59
g63
sS'trial_loop.thisN'
p4122
I31
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4123
g60
(g99
S'\x1f\x00\x00\x00'
tRp4124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4125
I0
sg3642
g3858
sS'block_loop.thisRepN'
p4126
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4127
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4128
Nsg70
Vn
sS'block_loop.thisTrialN'
p4129
I0
sg39
F1.9165812323526552
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0c\x11\x07\x18h'
tRp4130
sa(dp4131
S'trial_loop.thisTrialN'
p4132
I32
sg3633
S'22-daim.png'
p4133
sS'block_loop.thisIndex'
p4134
g3627
sg38
S'left'
p4135
sg59
g63
sS'trial_loop.thisN'
p4136
I32
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4137
g60
(g99
S' \x00\x00\x00'
tRp4138
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4139
I0
sg3642
S'7-olives.png'
p4140
sS'block_loop.thisRepN'
p4141
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4142
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4143
Nsg70
Vn
sS'block_loop.thisTrialN'
p4144
I0
sg39
F0.71666664765962196
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0c\x18\x06tX'
tRp4145
sa(dp4146
S'trial_loop.thisTrialN'
p4147
I33
sg3633
g4032
sS'block_loop.thisIndex'
p4148
g3627
sg38
S'right'
p4149
sg59
g63
sS'trial_loop.thisN'
p4150
I33
sg33
g4043
sg64
g65
sS'trial_loop.thisIndex'
p4151
g60
(g99
S'!\x00\x00\x00'
tRp4152
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4153
I0
sg3642
g4040
sS'block_loop.thisRepN'
p4154
I1
sg3645
g4036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4155
I1
sg3647
g4043
sg55
g11
sS'block_loop.thisTrial'
p4156
Nsg70
Vn
sS'block_loop.thisTrialN'
p4157
I0
sg39
F1.2000206410821193
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0c\x1e\x02\x80\xa0'
tRp4158
sa(dp4159
S'trial_loop.thisTrialN'
p4160
I34
sg3633
g3914
sS'block_loop.thisIndex'
p4161
g3627
sg38
S'left'
p4162
sg59
g63
sS'trial_loop.thisN'
p4163
I34
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p4164
g60
(g99
S'"\x00\x00\x00'
tRp4165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4166
I0
sg3642
g3922
sS'block_loop.thisRepN'
p4167
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4168
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p4169
Nsg70
Vn
sS'block_loop.thisTrialN'
p4170
I0
sg39
F1.0336691975744543
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0c$\x06* '
tRp4171
sa(dp4172
S'trial_loop.thisTrialN'
p4173
I35
sg3633
g3897
sS'block_loop.thisIndex'
p4174
g3627
sg38
S'left'
p4175
sg59
g63
sS'trial_loop.thisN'
p4176
I35
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p4177
g60
(g99
S'#\x00\x00\x00'
tRp4178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4179
I0
sg3642
g3905
sS'block_loop.thisRepN'
p4180
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4181
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p4182
Nsg70
Vn
sS'block_loop.thisTrialN'
p4183
I0
sg39
F0.64975105258145049
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0c*\x073\xc0'
tRp4184
sa(dp4185
S'trial_loop.thisTrialN'
p4186
I36
sg3633
S'13-mccoys_steak_crisps.png'
p4187
sS'block_loop.thisIndex'
p4188
g3627
sg38
S'left'
p4189
sg59
g63
sS'trial_loop.thisN'
p4190
I36
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p4191
g60
(g99
S'$\x00\x00\x00'
tRp4192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4193
I0
sg3642
S'3-ellas_strawberries_apples.png'
p4194
sS'block_loop.thisRepN'
p4195
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4196
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p4197
Nsg70
Vn
sS'block_loop.thisTrialN'
p4198
I0
sg39
F0.60003597934519348
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0c0\x02I\xf0'
tRp4199
sa(dp4200
S'trial_loop.thisTrialN'
p4201
I37
sg3633
g3737
sS'block_loop.thisIndex'
p4202
g3627
sg38
S'right'
p4203
sg59
g63
sS'trial_loop.thisN'
p4204
I37
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4205
g60
(g99
S'%\x00\x00\x00'
tRp4206
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4207
I0
sg3642
g3745
sS'block_loop.thisRepN'
p4208
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4209
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4210
Nsg70
Vn
sS'block_loop.thisTrialN'
p4211
I0
sg39
F0.53332394411154382
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0c5\x0b\xee\xb0'
tRp4212
sa(dp4213
S'trial_loop.thisTrialN'
p4214
I38
sg3633
S'8-liquorice_catherine_wheels.png'
p4215
sS'block_loop.thisIndex'
p4216
g3627
sg38
S'right'
p4217
sg59
g63
sS'trial_loop.thisN'
p4218
I38
sg33
S'8-liquorice_catherine_wheels.png'
p4219
sg64
g65
sS'trial_loop.thisIndex'
p4220
g60
(g99
S'&\x00\x00\x00'
tRp4221
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4222
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p4223
sS'block_loop.thisRepN'
p4224
I1
sg3645
S'17-jacobs_mini_cheddars_redo.png'
p4225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4226
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p4227
Nsg70
Vn
sS'block_loop.thisTrialN'
p4228
I0
sg39
F0.86666659064121632
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0c;\x05[\x18'
tRp4229
sa(dp4230
S'trial_loop.thisTrialN'
p4231
I39
sg3633
S'21-nakd_banana_crunch.png'
p4232
sS'block_loop.thisIndex'
p4233
g3627
sg38
S'right'
p4234
sg59
g63
sS'trial_loop.thisN'
p4235
I39
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p4236
g60
(g99
S"'\x00\x00\x00"
tRp4237
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4238
I0
sg3642
S'1-treacle_cookies.png'
p4239
sS'block_loop.thisRepN'
p4240
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4241
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p4242
Nsg70
Vn
sS'block_loop.thisTrialN'
p4243
I0
sg39
F1.2166677880513816
sg34
g753
(S'\x07\xdf\x07\x01\x0b\r\x05\x03\xc8\xc0'
tRp4244
sa(dp4245
S'trial_loop.thisTrialN'
p4246
I40
sg3633
S'36-fig_rolls.png'
p4247
sS'block_loop.thisIndex'
p4248
g3627
sg38
S'right'
p4249
sg59
g63
sS'trial_loop.thisN'
p4250
I40
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p4251
g60
(g99
S'(\x00\x00\x00'
tRp4252
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4253
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p4254
sS'block_loop.thisRepN'
p4255
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4256
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p4257
Nsg70
Vn
sS'block_loop.thisTrialN'
p4258
I0
sg39
F1.583646845905605
sg34
g753
(S'\x07\xdf\x07\x01\x0b\r\x0b\x07\xb0\xc0'
tRp4259
sa(dp4260
S'trial_loop.thisTrialN'
p4261
I41
sg3633
g3833
sS'block_loop.thisIndex'
p4262
g3627
sg38
S'left'
p4263
sg59
g63
sS'trial_loop.thisN'
p4264
I41
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p4265
g60
(g99
S')\x00\x00\x00'
tRp4266
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4267
I0
sg3642
g3841
sS'block_loop.thisRepN'
p4268
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4269
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p4270
Nsg70
Vn
sS'block_loop.thisTrialN'
p4271
I0
sg39
F1.133362774435227
sg34
g753
(S'\x07\xdf\x07\x01\x0b\r\x12\x01\xcc\xf0'
tRp4272
sa(dp4273
S'trial_loop.thisTrialN'
p4274
I42
sg3633
g3931
sS'block_loop.thisIndex'
p4275
g3627
sg38
S'left'
p4276
sg59
g63
sS'trial_loop.thisN'
p4277
I42
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4278
g60
(g99
S'*\x00\x00\x00'
tRp4279
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4280
I0
sg3642
g3938
sS'block_loop.thisRepN'
p4281
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4282
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4283
Nsg70
Vn
sS'block_loop.thisTrialN'
p4284
I0
sg39
F0.98333774284674291
sg34
g753
(S'\x07\xdf\x07\x01\x0b\r\x18\x04E\xc0'
tRp4285
sa(dp4286
S'trial_loop.thisTrialN'
p4287
I43
sg3633
g3850
sS'block_loop.thisIndex'
p4288
g3627
sg38
S'left'
p4289
sg59
g63
sS'trial_loop.thisN'
p4290
I43
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4291
g60
(g99
S'+\x00\x00\x00'
tRp4292
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4293
I0
sg3642
g3858
sS'block_loop.thisRepN'
p4294
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4295
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4296
Nsg70
Vn
sS'block_loop.thisTrialN'
p4297
I0
sg39
F0.69999241639743559
sg34
g753
(S'\x07\xdf\x07\x01\x0b\r\x1e\x04\x9b\xb0'
tRp4298
sa(dp4299
S'trial_loop.thisTrialN'
p4300
I44
sg3633
g4232
sS'block_loop.thisIndex'
p4301
g3627
sg38
S'right'
p4302
sg59
g63
sS'trial_loop.thisN'
p4303
I44
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p4304
g60
(g99
S',\x00\x00\x00'
tRp4305
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4306
I0
sg3642
g4239
sS'block_loop.thisRepN'
p4307
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4308
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p4309
Nsg70
Vn
sS'block_loop.thisTrialN'
p4310
I0
sg39
F0.84988630298812495
sg34
g753
(S'\x07\xdf\x07\x01\x0b\r$\x00\xa7\xf8'
tRp4311
sa(dp4312
S'trial_loop.thisTrialN'
p4313
I45
sg3633
g3833
sS'block_loop.thisIndex'
p4314
g3627
sg38
S'left'
p4315
sg59
g63
sS'trial_loop.thisN'
p4316
I45
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p4317
g60
(g99
S'-\x00\x00\x00'
tRp4318
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4319
I0
sg3642
g3841
sS'block_loop.thisRepN'
p4320
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4321
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p4322
Nsg70
Vn
sS'block_loop.thisTrialN'
p4323
I0
sg39
F0.78325922690601146
sg34
g753
(S'\x07\xdf\x07\x01\x0b\r)\x0e\x19`'
tRp4324
sa(dp4325
S'trial_loop.thisTrialN'
p4326
I46
sg3633
S'43-mrporky_pork_crackles_redo.png'
p4327
sS'block_loop.thisIndex'
p4328
g3627
sg38
S'right'
p4329
sg59
g63
sS'trial_loop.thisN'
p4330
I46
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p4331
g60
(g99
S'.\x00\x00\x00'
tRp4332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4333
I0
sg3642
S'18-mms.png'
p4334
sS'block_loop.thisRepN'
p4335
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4336
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4337
Nsg70
Vn
sS'block_loop.thisTrialN'
p4338
I0
sg39
F0.68341397800486448
sg34
g753
(S'\x07\xdf\x07\x01\x0b\r/\x0bVX'
tRp4339
sa(dp4340
S'trial_loop.thisTrialN'
p4341
I47
sg3633
g3771
sS'block_loop.thisIndex'
p4342
g3627
sg38
S'left'
p4343
sg59
g63
sS'trial_loop.thisN'
p4344
I47
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p4345
g60
(g99
S'/\x00\x00\x00'
tRp4346
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4347
I0
sg3642
g3779
sS'block_loop.thisRepN'
p4348
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4349
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p4350
Nsg70
Vn
sS'block_loop.thisTrialN'
p4351
I0
sg39
F1.2166532480623573
sg34
g753
(S'\x07\xdf\x07\x01\x0b\r5\x06\xe5\xa0'
tRp4352
sa(dp4353
S'trial_loop.thisTrialN'
p4354
I48
sg3633
g3722
sS'block_loop.thisIndex'
p4355
g3627
sg38
S'left'
p4356
sg59
g63
sS'trial_loop.thisN'
p4357
I48
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4358
g60
(g99
S'0\x00\x00\x00'
tRp4359
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4360
I0
sg3642
g3729
sS'block_loop.thisRepN'
p4361
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4362
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4363
Nsg70
Vn
sS'block_loop.thisTrialN'
p4364
I0
sg39
F1.283322518622299
sg34
g753
(S'\x07\xdf\x07\x01\x0b\r;\n\xcd\xa0'
tRp4365
sa(dp4366
S'trial_loop.thisTrialN'
p4367
I49
sg3633
g3946
sS'block_loop.thisIndex'
p4368
g3627
sg38
S'left'
p4369
sg59
g63
sS'trial_loop.thisN'
p4370
I49
sg33
g3950
sg64
g65
sS'trial_loop.thisIndex'
p4371
g60
(g99
S'1\x00\x00\x00'
tRp4372
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4373
I0
sg3642
g3954
sS'block_loop.thisRepN'
p4374
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4375
I1
sg3647
g3957
sg55
g11
sS'block_loop.thisTrial'
p4376
Nsg70
Vn
sS'block_loop.thisTrialN'
p4377
I0
sg39
F0.89994634458980727
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0e\x06\x00e\x90'
tRp4378
sa(dp4379
S'trial_loop.thisTrialN'
p4380
I50
sg3633
g4327
sS'block_loop.thisIndex'
p4381
g3627
sg38
S'right'
p4382
sg59
g63
sS'trial_loop.thisN'
p4383
I50
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4384
g60
(g99
S'2\x00\x00\x00'
tRp4385
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4386
I0
sg3642
g4334
sS'block_loop.thisRepN'
p4387
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4388
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4389
Nsg70
Vn
sS'block_loop.thisTrialN'
p4390
I0
sg39
F0.71658824575933977
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0e\x0b\x0e\x8e\x90'
tRp4391
sa(dp4392
S'trial_loop.thisTrialN'
p4393
I51
sg3633
g3634
sS'block_loop.thisIndex'
p4394
g3627
sg38
S'left'
p4395
sg59
g63
sS'trial_loop.thisN'
p4396
I51
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4397
g60
(g99
S'3\x00\x00\x00'
tRp4398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4399
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4400
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4401
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4402
Nsg70
Vn
sS'block_loop.thisTrialN'
p4403
I0
sg39
F0.95008478809268126
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0e\x11\n\x9a\xd8'
tRp4404
sa(dp4405
S'trial_loop.thisTrialN'
p4406
I52
sg3633
S'40-sardines.png'
p4407
sS'block_loop.thisIndex'
p4408
g3627
sg38
S'left'
p4409
sg59
g63
sS'trial_loop.thisN'
p4410
I52
sg33
g4043
sg64
g65
sS'trial_loop.thisIndex'
p4411
g60
(g99
S'4\x00\x00\x00'
tRp4412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4413
I0
sg3642
S'5-pineapple.png'
p4414
sS'block_loop.thisRepN'
p4415
I1
sg3645
g4036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4416
I1
sg3647
g4043
sg55
g11
sS'block_loop.thisTrial'
p4417
Nsg70
Vn
sS'block_loop.thisTrialN'
p4418
I0
sg39
F1.5166212030671886
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0e\x17\ns\xc8'
tRp4419
sa(dp4420
S'trial_loop.thisTrialN'
p4421
I53
sg3633
g4015
sS'block_loop.thisIndex'
p4422
g3627
sg38
S'right'
p4423
sg59
g63
sS'trial_loop.thisN'
p4424
I53
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p4425
g60
(g99
S'5\x00\x00\x00'
tRp4426
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4427
I0
sg3642
g4023
sS'block_loop.thisRepN'
p4428
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4429
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p4430
Nsg70
Vn
sS'block_loop.thisTrialN'
p4431
I0
sg39
F0.83331670262759872
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0e\x1e\x03\x9d\xc8'
tRp4432
sa(dp4433
S'trial_loop.thisTrialN'
p4434
I54
sg3633
S'42-mrkipling_lemon_slices.png'
p4435
sS'block_loop.thisIndex'
p4436
g3627
sg38
S'right'
p4437
sg59
g63
sS'trial_loop.thisN'
p4438
I54
sg33
g3764
sg64
g65
sS'trial_loop.thisIndex'
p4439
g60
(g99
S'6\x00\x00\x00'
tRp4440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4441
I0
sg3642
S'16-skips_prawn.png'
p4442
sS'block_loop.thisRepN'
p4443
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4444
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p4445
Nsg70
Vn
sS'block_loop.thisTrialN'
p4446
I0
sg39
F1.0332201685041582
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0e$\x01\x92X'
tRp4447
sa(dp4448
S'trial_loop.thisTrialN'
p4449
I55
sg3633
g3801
sS'block_loop.thisIndex'
p4450
g3627
sg38
S'right'
p4451
sg59
g63
sS'trial_loop.thisN'
p4452
I55
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4453
g60
(g99
S'7\x00\x00\x00'
tRp4454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4455
I0
sg3642
g3808
sS'block_loop.thisRepN'
p4456
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4457
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4458
Nsg70
Vn
sS'block_loop.thisTrialN'
p4459
I0
sg39
F0.59973919251206098
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0e*\x02\x9b\xf8'
tRp4460
sa(dp4461
S'trial_loop.thisTrialN'
p4462
I56
sg3633
S'20-fruit_pastilles.png'
p4463
sS'block_loop.thisIndex'
p4464
g3627
sg38
S'right'
p4465
sg59
g63
sS'trial_loop.thisN'
p4466
I56
sg33
S'2-steamed_puddings.png'
p4467
sg64
g65
sS'trial_loop.thisIndex'
p4468
g60
(g99
S'8\x00\x00\x00'
tRp4469
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4470
I0
sg3642
S'2-steamed_puddings.png'
p4471
sS'block_loop.thisRepN'
p4472
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4473
I1
sg3647
S'20-fruit_pastilles.png'
p4474
sg55
g11
sS'block_loop.thisTrial'
p4475
Nsg70
Vn
sS'block_loop.thisTrialN'
p4476
I0
sg39
F1.6837407001085012
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0e/\x0c@\xb8'
tRp4477
sa(dp4478
S'trial_loop.thisTrialN'
p4479
I57
sg3633
g4215
sS'block_loop.thisIndex'
p4480
g3627
sg38
S'right'
p4481
sg59
g63
sS'trial_loop.thisN'
p4482
I57
sg33
g4219
sg64
g65
sS'trial_loop.thisIndex'
p4483
g60
(g99
S'9\x00\x00\x00'
tRp4484
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4485
I0
sg3642
g4223
sS'block_loop.thisRepN'
p4486
I1
sg3645
g4225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4487
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p4488
Nsg70
Vn
sS'block_loop.thisTrialN'
p4489
I0
sg39
F0.71669088097587519
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0e6\x07\xcc\x18'
tRp4490
sa(dp4491
S'trial_loop.thisTrialN'
p4492
I58
sg3633
S'4-corn.png'
p4493
sS'block_loop.thisIndex'
p4494
g3627
sg38
S'right'
p4495
sg59
g63
sS'trial_loop.thisN'
p4496
I58
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p4497
g60
(g99
S':\x00\x00\x00'
tRp4498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4499
I0
sg3642
S'10-bounty_redo.png'
p4500
sS'block_loop.thisRepN'
p4501
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4502
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4503
Nsg70
Vn
sS'block_loop.thisTrialN'
p4504
I0
sg39
F0.68333358041854808
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0f\x00\x04\x12\xf8'
tRp4505
sa(dp4506
S'trial_loop.thisTrialN'
p4507
I59
sg3633
g4049
sS'block_loop.thisIndex'
p4508
g3627
sg38
S'right'
p4509
sg59
g63
sS'trial_loop.thisN'
p4510
I59
sg33
g3950
sg64
g65
sS'trial_loop.thisIndex'
p4511
g60
(g99
S';\x00\x00\x00'
tRp4512
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4513
I0
sg3642
g4056
sS'block_loop.thisRepN'
p4514
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4515
I1
sg3647
g3957
sg55
g11
sS'block_loop.thisTrial'
p4516
Nsg70
Vn
sS'block_loop.thisTrialN'
p4517
I0
sg39
F0.61656994247823604
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0f\x05\x0f#\x00'
tRp4518
sa(dp4519
S'trial_loop.thisTrialN'
p4520
I60
sg3633
g4032
sS'block_loop.thisIndex'
p4521
g3627
sg38
S'right'
p4522
sg59
g63
sS'trial_loop.thisN'
p4523
I60
sg33
g4036
sg64
g65
sS'trial_loop.thisIndex'
p4524
g60
(g99
S'<\x00\x00\x00'
tRp4525
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4526
I0
sg3642
g4040
sS'block_loop.thisRepN'
p4527
I1
sg3645
g4036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4528
I1
sg3647
g4043
sg55
g11
sS'block_loop.thisTrial'
p4529
Nsg70
Vn
sS'block_loop.thisTrialN'
p4530
I0
sg39
F0.78332194842641911
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0f\x0b\t\xc0\x18'
tRp4531
sa(dp4532
S'trial_loop.thisTrialN'
p4533
I61
sg3633
g4015
sS'block_loop.thisIndex'
p4534
g3627
sg38
S'right'
p4535
sg59
g63
sS'trial_loop.thisN'
p4536
I61
sg33
g4026
sg64
g65
sS'trial_loop.thisIndex'
p4537
g60
(g99
S'=\x00\x00\x00'
tRp4538
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4539
I0
sg3642
g4023
sS'block_loop.thisRepN'
p4540
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4541
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p4542
Nsg70
Vn
sS'block_loop.thisTrialN'
p4543
I0
sg39
F0.58334834848574246
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0f\x11\x06\xfd\x10'
tRp4544
sa(dp4545
S'trial_loop.thisTrialN'
p4546
I62
sg3633
g4064
sS'block_loop.thisIndex'
p4547
g3627
sg38
S'right'
p4548
sg59
g63
sS'trial_loop.thisN'
p4549
I62
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4550
g60
(g99
S'>\x00\x00\x00'
tRp4551
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4552
I0
sg3642
g4071
sS'block_loop.thisRepN'
p4553
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4554
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4555
Nsg70
Vn
sS'block_loop.thisTrialN'
p4556
I0
sg39
F1.1003592802762796
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0f\x17\x01!\x10'
tRp4557
sa(dp4558
S'trial_loop.thisTrialN'
p4559
I63
sg3633
S'41-peanuts_redo.png'
p4560
sS'block_loop.thisIndex'
p4561
g3627
sg38
S'left'
p4562
sg59
g63
sS'trial_loop.thisN'
p4563
I63
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p4564
g60
(g99
S'?\x00\x00\x00'
tRp4565
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4566
I0
sg3642
S'45-chewy_nougat_redo.png'
p4567
sS'block_loop.thisRepN'
p4568
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4569
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p4570
Nsg70
Vn
sS'block_loop.thisTrialN'
p4571
I0
sg39
F1.0166328920777232
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0f\x1d\x03 \xc8'
tRp4572
sa(dp4573
S'trial_loop.thisTrialN'
p4574
I64
sg3633
g4493
sS'block_loop.thisIndex'
p4575
g3627
sg38
S'right'
p4576
sg59
g63
sS'trial_loop.thisN'
p4577
I64
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4578
g60
(g99
S'@\x00\x00\x00'
tRp4579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4580
I0
sg3642
g4500
sS'block_loop.thisRepN'
p4581
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4582
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4583
Nsg70
Vn
sS'block_loop.thisTrialN'
p4584
I0
sg39
F0.81661652746242908
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0f#\x03\xef\xd0'
tRp4585
sa(dp4586
S'trial_loop.thisTrialN'
p4587
I65
sg3633
S'50-polo.png'
p4588
sS'block_loop.thisIndex'
p4589
g3627
sg38
S'right'
p4590
sg59
g63
sS'trial_loop.thisN'
p4591
I65
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p4592
g60
(g99
S'A\x00\x00\x00'
tRp4593
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4594
I0
sg3642
S'48-twix.png'
p4595
sS'block_loop.thisRepN'
p4596
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4597
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p4598
Nsg70
Vn
sS'block_loop.thisTrialN'
p4599
I0
sg39
F0.88324132276284217
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0f)\x01\xa5\xe0'
tRp4600
sa(dp4601
S'trial_loop.thisTrialN'
p4602
I66
sg3633
g3688
sS'block_loop.thisIndex'
p4603
g3627
sg38
S'right'
p4604
sg59
g63
sS'trial_loop.thisN'
p4605
I66
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4606
g60
(g99
S'B\x00\x00\x00'
tRp4607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4608
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4609
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4610
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4611
Nsg70
Vn
sS'block_loop.thisTrialN'
p4612
I0
sg39
F1.5832870524536702
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0f/\x00N '
tRp4613
sa(dp4614
S'trial_loop.thisTrialN'
p4615
I67
sg3633
S'35-raisins.png'
p4616
sS'block_loop.thisIndex'
p4617
g3627
sg38
S'right'
p4618
sg59
g63
sS'trial_loop.thisN'
p4619
I67
sg33
S'49-yorkie.png'
p4620
sg64
g65
sS'trial_loop.thisIndex'
p4621
g60
(g99
S'C\x00\x00\x00'
tRp4622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4623
I0
sg3642
S'49-yorkie.png'
p4624
sS'block_loop.thisRepN'
p4625
I1
sg3645
g4620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4626
I1
sg3647
S'35-raisins.png'
p4627
sg55
g11
sS'block_loop.thisTrial'
p4628
Nsg70
Vn
sS'block_loop.thisTrialN'
p4629
I0
sg39
F1.1503768423017391
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0f5\t\xb0x'
tRp4630
sa(dp4631
S'trial_loop.thisTrialN'
p4632
I68
sg3633
g3705
sS'block_loop.thisIndex'
p4633
g3627
sg38
S'left'
p4634
sg59
g63
sS'trial_loop.thisN'
p4635
I68
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4636
g60
(g99
S'D\x00\x00\x00'
tRp4637
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4638
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4639
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4640
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4641
Nsg70
Vn
sS'block_loop.thisTrialN'
p4642
I0
sg39
F0.91667046797101648
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x0f;\x0cc\xe0'
tRp4643
sa(dp4644
S'trial_loop.thisTrialN'
p4645
I69
sg3633
g3801
sS'block_loop.thisIndex'
p4646
g3627
sg38
S'right'
p4647
sg59
g63
sS'trial_loop.thisN'
p4648
I69
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p4649
g60
(g99
S'E\x00\x00\x00'
tRp4650
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4651
I0
sg3642
g3808
sS'block_loop.thisRepN'
p4652
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4653
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4654
Nsg70
Vn
sS'block_loop.thisTrialN'
p4655
I0
sg39
F0.58306638673911948
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x10\x05\x0b\xc7\xa0'
tRp4656
sa(dp4657
S'trial_loop.thisTrialN'
p4658
I70
sg3633
g4435
sS'block_loop.thisIndex'
p4659
g3627
sg38
S'right'
p4660
sg59
g63
sS'trial_loop.thisN'
p4661
I70
sg33
g3764
sg64
g65
sS'trial_loop.thisIndex'
p4662
g60
(g99
S'F\x00\x00\x00'
tRp4663
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4664
I0
sg3642
g4442
sS'block_loop.thisRepN'
p4665
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4666
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p4667
Nsg70
Vn
sS'block_loop.thisTrialN'
p4668
I0
sg39
F1.4832083084347687
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x10\x0b\x05\xeb\xa0'
tRp4669
sa(dp4670
S'trial_loop.thisTrialN'
p4671
I71
sg3633
g4232
sS'block_loop.thisIndex'
p4672
g3627
sg38
S'right'
p4673
sg59
g63
sS'trial_loop.thisN'
p4674
I71
sg33
g3827
sg64
g65
sS'trial_loop.thisIndex'
p4675
g60
(g99
S'G\x00\x00\x00'
tRp4676
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4677
I0
sg3642
g4239
sS'block_loop.thisRepN'
p4678
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4679
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p4680
Nsg70
Vn
sS'block_loop.thisTrialN'
p4681
I0
sg39
F1.4333293039508135
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x10\x11\r\xda\xe0'
tRp4682
sa(dp4683
S'trial_loop.thisTrialN'
p4684
I72
sg3633
g4133
sS'block_loop.thisIndex'
p4685
g3627
sg38
S'left'
p4686
sg59
g63
sS'trial_loop.thisN'
p4687
I72
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4688
g60
(g99
S'H\x00\x00\x00'
tRp4689
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4690
I0
sg3642
g4140
sS'block_loop.thisRepN'
p4691
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4692
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4693
Nsg70
Vn
sS'block_loop.thisTrialN'
p4694
I0
sg39
F0.91708813628156349
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x10\x18\x05\x99\x98'
tRp4695
sa(dp4696
S'trial_loop.thisTrialN'
p4697
I73
sg3633
g3654
sS'block_loop.thisIndex'
p4698
g3627
sg38
S'left'
p4699
sg59
g63
sS'trial_loop.thisN'
p4700
I73
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4701
g60
(g99
S'I\x00\x00\x00'
tRp4702
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4703
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4704
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4705
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4706
Nsg70
Vn
sS'block_loop.thisTrialN'
p4707
I0
sg39
F0.71652837521651236
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x10\x1e\x04\xba\xf0'
tRp4708
sa(dp4709
S'trial_loop.thisTrialN'
p4710
I74
sg3633
g4463
sS'block_loop.thisIndex'
p4711
g3627
sg38
S'right'
p4712
sg59
g63
sS'trial_loop.thisN'
p4713
I74
sg33
g4467
sg64
g65
sS'trial_loop.thisIndex'
p4714
g60
(g99
S'J\x00\x00\x00'
tRp4715
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4716
I0
sg3642
g4471
sS'block_loop.thisRepN'
p4717
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4718
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p4719
Nsg70
Vn
sS'block_loop.thisTrialN'
p4720
I0
sg39
F0.89996259516556165
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x10$\x01\x05\xb8'
tRp4721
sa(dp4722
S'trial_loop.thisTrialN'
p4723
I75
sg3633
g3688
sS'block_loop.thisIndex'
p4724
g3627
sg38
S'right'
p4725
sg59
g63
sS'trial_loop.thisN'
p4726
I75
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4727
g60
(g99
S'K\x00\x00\x00'
tRp4728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4729
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4730
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4731
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4732
Nsg70
Vn
sS'block_loop.thisTrialN'
p4733
I0
sg39
F1.0665392659529971
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x10)\x0f.\xb8'
tRp4734
sa(dp4735
S'trial_loop.thisTrialN'
p4736
I76
sg3633
g3771
sS'block_loop.thisIndex'
p4737
g3627
sg38
S'left'
p4738
sg59
g63
sS'trial_loop.thisN'
p4739
I76
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p4740
g60
(g99
S'L\x00\x00\x00'
tRp4741
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4742
I0
sg3642
g3779
sS'block_loop.thisRepN'
p4743
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4744
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p4745
Nsg70
Vn
sS'block_loop.thisTrialN'
p4746
I0
sg39
F1.8833009082072749
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x100\x01o0'
tRp4747
sa(dp4748
S'trial_loop.thisTrialN'
p4749
I77
sg3633
g4064
sS'block_loop.thisIndex'
p4750
g3627
sg38
S'right'
p4751
sg59
g63
sS'trial_loop.thisN'
p4752
I77
sg33
g3861
sg64
g65
sS'trial_loop.thisIndex'
p4753
g60
(g99
S'M\x00\x00\x00'
tRp4754
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4755
I0
sg3642
g4071
sS'block_loop.thisRepN'
p4756
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4757
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4758
Nsg70
Vn
sS'block_loop.thisTrialN'
p4759
I0
sg39
F1.5004148173329668
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x107\x00R\x08'
tRp4760
sa(dp4761
S'trial_loop.thisTrialN'
p4762
I78
sg3633
g3914
sS'block_loop.thisIndex'
p4763
g3627
sg38
S'left'
p4764
sg59
g63
sS'trial_loop.thisN'
p4765
I78
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p4766
g60
(g99
S'N\x00\x00\x00'
tRp4767
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4768
I0
sg3642
g3922
sS'block_loop.thisRepN'
p4769
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4770
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p4771
Nsg70
Vn
sS'block_loop.thisTrialN'
p4772
I0
sg39
F0.69997103406149108
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x11\x01\x08\x7f\xc8'
tRp4773
sa(dp4774
S'trial_loop.thisTrialN'
p4775
I79
sg3633
g3688
sS'block_loop.thisIndex'
p4776
g3627
sg38
S'right'
p4777
sg59
g63
sS'trial_loop.thisN'
p4778
I79
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p4779
g60
(g99
S'O\x00\x00\x00'
tRp4780
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4781
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4782
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4783
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4784
Nsg70
Vn
sS'block_loop.thisTrialN'
p4785
I0
sg39
F0.69993112036627281
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x11\x07\x04M\x90'
tRp4786
sa(dp4787
S'trial_loop.thisTrialN'
p4788
I80
sg3633
g3880
sS'block_loop.thisIndex'
p4789
g3627
sg38
S'right'
p4790
sg59
g63
sS'trial_loop.thisN'
p4791
I80
sg33
g3891
sg64
g65
sS'trial_loop.thisIndex'
p4792
g60
(g99
S'P\x00\x00\x00'
tRp4793
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4794
I0
sg3642
g3888
sS'block_loop.thisRepN'
p4795
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4796
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p4797
Nsg70
Vn
sS'block_loop.thisTrialN'
p4798
I0
sg39
F0.74987341656651552
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x11\r\x00Y\xd8'
tRp4799
sa(dp4800
S'trial_loop.thisTrialN'
p4801
I81
sg3633
g4032
sS'block_loop.thisIndex'
p4802
g3627
sg38
S'right'
p4803
sg59
g63
sS'trial_loop.thisN'
p4804
I81
sg33
g4043
sg64
g65
sS'trial_loop.thisIndex'
p4805
g60
(g99
S'Q\x00\x00\x00'
tRp4806
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4807
I0
sg3642
g4040
sS'block_loop.thisRepN'
p4808
I1
sg3645
g4036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4809
I1
sg3647
g4043
sg55
g11
sS'block_loop.thisTrial'
p4810
Nsg70
Vn
sS'block_loop.thisTrialN'
p4811
I0
sg39
F0.88311416913438734
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x11\x12\x0c!x'
tRp4812
sa(dp4813
S'trial_loop.thisTrialN'
p4814
I82
sg3633
g3801
sS'block_loop.thisIndex'
p4815
g3627
sg38
S'right'
p4816
sg59
g63
sS'trial_loop.thisN'
p4817
I82
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4818
g60
(g99
S'R\x00\x00\x00'
tRp4819
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4820
I0
sg3642
g3808
sS'block_loop.thisRepN'
p4821
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4822
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4823
Nsg70
Vn
sS'block_loop.thisTrialN'
p4824
I0
sg39
F0.64973907847343071
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x11\x18\x0b\x088'
tRp4825
sa(dp4826
S'trial_loop.thisTrialN'
p4827
I83
sg3633
g4493
sS'block_loop.thisIndex'
p4828
g3627
sg38
S'right'
p4829
sg59
g63
sS'trial_loop.thisN'
p4830
I83
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4831
g60
(g99
S'S\x00\x00\x00'
tRp4832
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4833
I0
sg3642
g4500
sS'block_loop.thisRepN'
p4834
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4835
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4836
Nsg70
Vn
sS'block_loop.thisTrialN'
p4837
I0
sg39
F0.95035163965440006
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x11\x1e\x06"P'
tRp4838
sa(dp4839
S'trial_loop.thisTrialN'
p4840
I84
sg3633
g4187
sS'block_loop.thisIndex'
p4841
g3627
sg38
S'left'
p4842
sg59
g63
sS'trial_loop.thisN'
p4843
I84
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p4844
g60
(g99
S'T\x00\x00\x00'
tRp4845
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4846
I0
sg3642
g4194
sS'block_loop.thisRepN'
p4847
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4848
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p4849
Nsg70
Vn
sS'block_loop.thisTrialN'
p4850
I0
sg39
F1.7666203477738236
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x11$\x05\xc0\xa8'
tRp4851
sa(dp4852
S'trial_loop.thisTrialN'
p4853
I85
sg3633
g3931
sS'block_loop.thisIndex'
p4854
g3627
sg38
S'left'
p4855
sg59
g63
sS'trial_loop.thisN'
p4856
I85
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4857
g60
(g99
S'U\x00\x00\x00'
tRp4858
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4859
I0
sg3642
g3938
sS'block_loop.thisRepN'
p4860
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4861
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4862
Nsg70
Vn
sS'block_loop.thisTrialN'
p4863
I0
sg39
F0.88302293782999186
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x11+\x02\xb7P'
tRp4864
sa(dp4865
S'trial_loop.thisTrialN'
p4866
I86
sg3633
S'2-steamed_puddings.png'
p4867
sS'block_loop.thisIndex'
p4868
g3627
sg38
S'left'
p4869
sg59
g63
sS'trial_loop.thisN'
p4870
I86
sg33
g4467
sg64
g65
sS'trial_loop.thisIndex'
p4871
g60
(g99
S'V\x00\x00\x00'
tRp4872
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4873
I0
sg3642
S'20-fruit_pastilles.png'
p4874
sS'block_loop.thisRepN'
p4875
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4876
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p4877
Nsg70
Vn
sS'block_loop.thisTrialN'
p4878
I0
sg39
F0.83326424462757132
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x111\x01\x9e\x10'
tRp4879
sa(dp4880
S'trial_loop.thisTrialN'
p4881
I87
sg3633
g4015
sS'block_loop.thisIndex'
p4882
g3627
sg38
S'right'
p4883
sg59
g63
sS'trial_loop.thisN'
p4884
I87
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p4885
g60
(g99
S'W\x00\x00\x00'
tRp4886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4887
I0
sg3642
g4023
sS'block_loop.thisRepN'
p4888
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4889
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p4890
Nsg70
Vn
sS'block_loop.thisTrialN'
p4891
I0
sg39
F0.66643212619055703
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x116\x0e\xd4\xe0'
tRp4892
sa(dp4893
S'trial_loop.thisTrialN'
p4894
I88
sg3633
g4049
sS'block_loop.thisIndex'
p4895
g3627
sg38
S'right'
p4896
sg59
g63
sS'trial_loop.thisN'
p4897
I88
sg33
g3950
sg64
g65
sS'trial_loop.thisIndex'
p4898
g60
(g99
S'X\x00\x00\x00'
tRp4899
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4900
I0
sg3642
g4056
sS'block_loop.thisRepN'
p4901
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4902
I1
sg3647
g3957
sg55
g11
sS'block_loop.thisTrial'
p4903
Nsg70
Vn
sS'block_loop.thisTrialN'
p4904
I0
sg39
F1.0504953859772286
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x12\x00\n)\x90'
tRp4905
sa(dp4906
S'trial_loop.thisTrialN'
p4907
I89
sg3633
g4588
sS'block_loop.thisIndex'
p4908
g3627
sg38
S'right'
p4909
sg59
g63
sS'trial_loop.thisN'
p4910
I89
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p4911
g60
(g99
S'Y\x00\x00\x00'
tRp4912
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4913
I0
sg3642
g4595
sS'block_loop.thisRepN'
p4914
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4915
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p4916
Nsg70
Vn
sS'block_loop.thisTrialN'
p4917
I0
sg39
F1.8665049401752185
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x12\x06\x0bq\xb0'
tRp4918
sa(dp4919
S'trial_loop.thisTrialN'
p4920
I90
sg3633
g4407
sS'block_loop.thisIndex'
p4921
g3627
sg38
S'left'
p4922
sg59
g63
sS'trial_loop.thisN'
p4923
I90
sg33
g4036
sg64
g65
sS'trial_loop.thisIndex'
p4924
g60
(g99
S'Z\x00\x00\x00'
tRp4925
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4926
I0
sg3642
g4414
sS'block_loop.thisRepN'
p4927
I1
sg3645
g4036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4928
I1
sg3647
g4043
sg55
g11
sS'block_loop.thisTrial'
p4929
Nsg70
Vn
sS'block_loop.thisTrialN'
p4930
I0
sg39
F1.4166850079600408
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x12\r\t\xd7\x88'
tRp4931
sa(dp4932
S'trial_loop.thisTrialN'
p4933
I91
sg3633
g4215
sS'block_loop.thisIndex'
p4934
g3627
sg38
S'right'
p4935
sg59
g63
sS'trial_loop.thisN'
p4936
I91
sg33
g4225
sg64
g65
sS'trial_loop.thisIndex'
p4937
g60
(g99
S'[\x00\x00\x00'
tRp4938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4939
I0
sg3642
g4223
sS'block_loop.thisRepN'
p4940
I1
sg3645
g4225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4941
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p4942
Nsg70
Vn
sS'block_loop.thisTrialN'
p4943
I0
sg39
F1.0000943673794609
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x12\x14\x01\x92X'
tRp4944
sa(dp4945
S'trial_loop.thisTrialN'
p4946
I92
sg3633
g4133
sS'block_loop.thisIndex'
p4947
g3627
sg38
S'left'
p4948
sg59
g63
sS'trial_loop.thisN'
p4949
I92
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4950
g60
(g99
S'\\\x00\x00\x00'
tRp4951
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4952
I0
sg3642
g4140
sS'block_loop.thisRepN'
p4953
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4954
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p4955
Nsg70
Vn
sS'block_loop.thisTrialN'
p4956
I0
sg39
F3.8666007330439243
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x12\x1a\x02&\xc8'
tRp4957
sa(dp4958
S'trial_loop.thisTrialN'
p4959
I93
sg3633
g4079
sS'block_loop.thisIndex'
p4960
g3627
sg38
S'right'
p4961
sg59
g63
sS'trial_loop.thisN'
p4962
I93
sg33
g3907
sg64
g65
sS'trial_loop.thisIndex'
p4963
g60
(g99
S']\x00\x00\x00'
tRp4964
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4965
I0
sg3642
g4086
sS'block_loop.thisRepN'
p4966
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4967
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p4968
Nsg70
Vn
sS'block_loop.thisTrialN'
p4969
I0
sg39
F0.75034240248533024
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x12#\x00\x80\xe8'
tRp4970
sa(dp4971
S'trial_loop.thisTrialN'
p4972
I94
sg3633
S'44-crunch.png'
p4973
sS'block_loop.thisIndex'
p4974
g3627
sg38
S'right'
p4975
sg59
g63
sS'trial_loop.thisN'
p4976
I94
sg33
g3844
sg64
g65
sS'trial_loop.thisIndex'
p4977
g60
(g99
S'^\x00\x00\x00'
tRp4978
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4979
I0
sg3642
S'26-walkers_smoky_bacon.png'
p4980
sS'block_loop.thisRepN'
p4981
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4982
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p4983
Nsg70
Vn
sS'block_loop.thisTrialN'
p4984
I0
sg39
F0.89997913083971071
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x12(\x0c\x83 '
tRp4985
sa(dp4986
S'trial_loop.thisTrialN'
p4987
I95
sg3633
g4187
sS'block_loop.thisIndex'
p4988
g3627
sg38
S'left'
p4989
sg59
g63
sS'trial_loop.thisN'
p4990
I95
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p4991
g60
(g99
S'_\x00\x00\x00'
tRp4992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4993
I0
sg3642
g4194
sS'block_loop.thisRepN'
p4994
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4995
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p4996
Nsg70
Vn
sS'block_loop.thisTrialN'
p4997
I0
sg39
F0.94992997997451312
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x12.\x0bi\xe0'
tRp4998
sa(dp4999
S'trial_loop.thisTrialN'
p5000
I96
sg3633
g3897
sS'block_loop.thisIndex'
p5001
g3627
sg38
S'left'
p5002
sg59
g63
sS'trial_loop.thisN'
p5003
I96
sg33
g3907
sg64
g65
sS'trial_loop.thisIndex'
p5004
g60
(g99
S'`\x00\x00\x00'
tRp5005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5006
I0
sg3642
g3905
sS'block_loop.thisRepN'
p5007
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5008
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p5009
Nsg70
Vn
sS'block_loop.thisTrialN'
p5010
I0
sg39
F1.0332050583201635
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x124\x0bF\xb8'
tRp5011
sa(dp5012
S'trial_loop.thisTrialN'
p5013
I97
sg3633
g3771
sS'block_loop.thisIndex'
p5014
g3627
sg38
S'left'
p5015
sg59
g63
sS'trial_loop.thisN'
p5016
I97
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p5017
g60
(g99
S'a\x00\x00\x00'
tRp5018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5019
I0
sg3642
g3779
sS'block_loop.thisRepN'
p5020
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5021
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p5022
Nsg70
Vn
sS'block_loop.thisTrialN'
p5023
I0
sg39
F0.86662354086911364
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x12:\x0cPX'
tRp5024
sa(dp5025
S'trial_loop.thisTrialN'
p5026
I98
sg3633
g3946
sS'block_loop.thisIndex'
p5027
g3627
sg38
S'left'
p5028
sg59
g63
sS'trial_loop.thisN'
p5029
I98
sg33
g3950
sg64
g65
sS'trial_loop.thisIndex'
p5030
g60
(g99
S'b\x00\x00\x00'
tRp5031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5032
I0
sg3642
g3954
sS'block_loop.thisRepN'
p5033
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5034
I1
sg3647
g3957
sg55
g11
sS'block_loop.thisTrial'
p5035
Nsg70
Vn
sS'block_loop.thisTrialN'
p5036
I0
sg39
F0.63331658858805895
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x13\x04\n\xbe\x00'
tRp5037
sa(dp5038
S'trial_loop.thisTrialN'
p5039
I99
sg3633
g4463
sS'block_loop.thisIndex'
p5040
g3627
sg38
S'right'
p5041
sg59
g63
sS'trial_loop.thisN'
p5042
I99
sg33
g4474
sg64
g65
sS'trial_loop.thisIndex'
p5043
g60
(g99
S'c\x00\x00\x00'
tRp5044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5045
I0
sg3642
g4471
sS'block_loop.thisRepN'
p5046
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5047
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p5048
Nsg70
Vn
sS'block_loop.thisTrialN'
p5049
I0
sg39
F0.83364912668821489
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x13\n\x05\x99\x98'
tRp5050
sa(dp5051
S'trial_loop.thisTrialN'
p5052
I100
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p5053
sS'block_loop.thisIndex'
p5054
g3627
sg38
S'left'
p5055
sg59
g63
sS'trial_loop.thisN'
p5056
I100
sg33
g4225
sg64
g65
sS'trial_loop.thisIndex'
p5057
g60
(g99
S'd\x00\x00\x00'
tRp5058
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5059
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p5060
sS'block_loop.thisRepN'
p5061
I1
sg3645
g4225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5062
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p5063
Nsg70
Vn
sS'block_loop.thisTrialN'
p5064
I0
sg39
F0.81658830277865491
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x13\x10\x03\x8a@'
tRp5065
sa(dp5066
S'trial_loop.thisTrialN'
p5067
I101
sg3633
g4064
sS'block_loop.thisIndex'
p5068
g3627
sg38
S'right'
p5069
sg59
g63
sS'trial_loop.thisN'
p5070
I101
sg33
g3861
sg64
g65
sS'trial_loop.thisIndex'
p5071
g60
(g99
S'e\x00\x00\x00'
tRp5072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5073
I0
sg3642
g4071
sS'block_loop.thisRepN'
p5074
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5075
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5076
Nsg70
Vn
sS'block_loop.thisTrialN'
p5077
I0
sg39
F0.69999669286517019
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x13\x16\x01@P'
tRp5078
sa(dp5079
S'trial_loop.thisTrialN'
p5080
I102
sg3633
g4187
sS'block_loop.thisIndex'
p5081
g3627
sg38
S'left'
p5082
sg59
g63
sS'trial_loop.thisN'
p5083
I102
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p5084
g60
(g99
S'f\x00\x00\x00'
tRp5085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5086
I0
sg3642
g4194
sS'block_loop.thisRepN'
p5087
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5088
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p5089
Nsg70
Vn
sS'block_loop.thisTrialN'
p5090
I0
sg39
F0.65001733394819894
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x13\x1b\x0c\x8e\xd8'
tRp5091
sa(dp5092
S'trial_loop.thisTrialN'
p5093
I103
sg3633
g4049
sS'block_loop.thisIndex'
p5094
g3627
sg38
S'right'
p5095
sg59
g63
sS'trial_loop.thisN'
p5096
I103
sg33
g3950
sg64
g65
sS'trial_loop.thisIndex'
p5097
g60
(g99
S'g\x00\x00\x00'
tRp5098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5099
I0
sg3642
g4056
sS'block_loop.thisRepN'
p5100
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5101
I1
sg3647
g3957
sg55
g11
sS'block_loop.thisTrial'
p5102
Nsg70
Vn
sS'block_loop.thisTrialN'
p5103
I0
sg39
F0.73324594134737708
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x13!\x07\xa8\xf0'
tRp5104
sa(dp5105
S'trial_loop.thisTrialN'
p5106
I104
sg3633
g4407
sS'block_loop.thisIndex'
p5107
g3627
sg38
S'left'
p5108
sg59
g63
sS'trial_loop.thisN'
p5109
I104
sg33
g4036
sg64
g65
sS'trial_loop.thisIndex'
p5110
g60
(g99
S'h\x00\x00\x00'
tRp5111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5112
I0
sg3642
g4414
sS'block_loop.thisRepN'
p5113
I1
sg3645
g4036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5114
I1
sg3647
g4043
sg55
g11
sS'block_loop.thisTrial'
p5115
Nsg70
Vn
sS'block_loop.thisTrialN'
p5116
I0
sg39
F0.74997263060868136
sg34
g753
(S"\x07\xdf\x07\x01\x0b\x13'\x04.P"
tRp5117
sa(dp5118
S'trial_loop.thisTrialN'
p5119
I105
sg3633
g4973
sS'block_loop.thisIndex'
p5120
g3627
sg38
S'right'
p5121
sg59
g63
sS'trial_loop.thisN'
p5122
I105
sg33
g3844
sg64
g65
sS'trial_loop.thisIndex'
p5123
g60
(g99
S'i\x00\x00\x00'
tRp5124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5125
I0
sg3642
g4980
sS'block_loop.thisRepN'
p5126
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5127
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p5128
Nsg70
Vn
sS'block_loop.thisTrialN'
p5129
I0
sg39
F2.0000111188155643
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x13-\x00\xb3\xb0'
tRp5130
sa(dp5131
S'trial_loop.thisTrialN'
p5132
I106
sg3633
g4015
sS'block_loop.thisIndex'
p5133
g3627
sg38
S'right'
p5134
sg59
g63
sS'trial_loop.thisN'
p5135
I106
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p5136
g60
(g99
S'j\x00\x00\x00'
tRp5137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5138
I0
sg3642
g4023
sS'block_loop.thisRepN'
p5139
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5140
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p5141
Nsg70
Vn
sS'block_loop.thisTrialN'
p5142
I0
sg39
F0.68331362357093894
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x134\x01<h'
tRp5143
sa(dp5144
S'trial_loop.thisTrialN'
p5145
I107
sg3633
g3931
sS'block_loop.thisIndex'
p5146
g3627
sg38
S'left'
p5147
sg59
g63
sS'trial_loop.thisN'
p5148
I107
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5149
g60
(g99
S'k\x00\x00\x00'
tRp5150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5151
I0
sg3642
g3938
sS'block_loop.thisRepN'
p5152
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5153
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5154
Nsg70
Vn
sS'block_loop.thisTrialN'
p5155
I0
sg39
F0.7166415590518227
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x139\x0cLp'
tRp5156
sa(dp5157
S'trial_loop.thisTrialN'
p5158
I108
sg3633
g4616
sS'block_loop.thisIndex'
p5159
g3627
sg38
S'right'
p5160
sg59
g63
sS'trial_loop.thisN'
p5161
I108
sg33
g4620
sg64
g65
sS'trial_loop.thisIndex'
p5162
g60
(g99
S'l\x00\x00\x00'
tRp5163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5164
I0
sg3642
g4624
sS'block_loop.thisRepN'
p5165
I1
sg3645
g4620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5166
I1
sg3647
g4627
sg55
g11
sS'block_loop.thisTrial'
p5167
Nsg70
Vn
sS'block_loop.thisTrialN'
p5168
I0
sg39
F0.56666071762538195
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x14\x03\x08X\xb8'
tRp5169
sa(dp5170
S'trial_loop.thisTrialN'
p5171
I109
sg3633
g3816
sS'block_loop.thisIndex'
p5172
g3627
sg38
S'left'
p5173
sg59
g63
sS'trial_loop.thisN'
p5174
I109
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5175
g60
(g99
S'm\x00\x00\x00'
tRp5176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5177
I0
sg3642
g3824
sS'block_loop.thisRepN'
p5178
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5179
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5180
Nsg70
Vn
sS'block_loop.thisTrialN'
p5181
I0
sg39
F2.6165927503043349
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x14\t\x02B '
tRp5182
sa(dp5183
S'trial_loop.thisTrialN'
p5184
I110
sg3633
g4187
sS'block_loop.thisIndex'
p5185
g3627
sg38
S'left'
p5186
sg59
g63
sS'trial_loop.thisN'
p5187
I110
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p5188
g60
(g99
S'n\x00\x00\x00'
tRp5189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5190
I0
sg3642
g4194
sS'block_loop.thisRepN'
p5191
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5192
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p5193
Nsg70
Vn
sS'block_loop.thisTrialN'
p5194
I0
sg39
F0.6499973771005898
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x14\x10\x0c\x15\xc0'
tRp5195
sa(dp5196
S'trial_loop.thisTrialN'
p5197
I111
sg3633
g3671
sS'block_loop.thisIndex'
p5198
g3627
sg38
S'right'
p5199
sg59
g63
sS'trial_loop.thisN'
p5200
I111
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5201
g60
(g99
S'o\x00\x00\x00'
tRp5202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5203
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5204
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5205
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p5206
Nsg70
Vn
sS'block_loop.thisTrialN'
p5207
I0
sg39
F0.61668968356480036
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x14\x16\x07jp'
tRp5208
sa(dp5209
S'trial_loop.thisTrialN'
p5210
I112
sg3633
g4867
sS'block_loop.thisIndex'
p5211
g3627
sg38
S'left'
p5212
sg59
g63
sS'trial_loop.thisN'
p5213
I112
sg33
g4467
sg64
g65
sS'trial_loop.thisIndex'
p5214
g60
(g99
S'p\x00\x00\x00'
tRp5215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5216
I0
sg3642
g4874
sS'block_loop.thisRepN'
p5217
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5218
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p5219
Nsg70
Vn
sS'block_loop.thisTrialN'
p5220
I0
sg39
F0.61655654288097139
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x14\x1c\x02\x07\x88'
tRp5221
sa(dp5222
S'trial_loop.thisTrialN'
p5223
I113
sg3633
g3880
sS'block_loop.thisIndex'
p5224
g3627
sg38
S'right'
p5225
sg59
g63
sS'trial_loop.thisN'
p5226
I113
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5227
g60
(g99
S'q\x00\x00\x00'
tRp5228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5229
I0
sg3642
g3888
sS'block_loop.thisRepN'
p5230
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5231
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5232
Nsg70
Vn
sS'block_loop.thisTrialN'
p5233
I0
sg39
F0.79997223147256591
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x14!\x0b\xe6\xe0'
tRp5234
sa(dp5235
S'trial_loop.thisTrialN'
p5236
I114
sg3633
g4049
sS'block_loop.thisIndex'
p5237
g3627
sg38
S'right'
p5238
sg59
g63
sS'trial_loop.thisN'
p5239
I114
sg33
g3950
sg64
g65
sS'trial_loop.thisIndex'
p5240
g60
(g99
S'r\x00\x00\x00'
tRp5241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5242
I0
sg3642
g4056
sS'block_loop.thisRepN'
p5243
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5244
I1
sg3647
g3957
sg55
g11
sS'block_loop.thisTrial'
p5245
Nsg70
Vn
sS'block_loop.thisTrialN'
p5246
I0
sg39
F0.54996253814624652
sg34
g753
(S"\x07\xdf\x07\x01\x0b\x14'\t^p"
tRp5247
sa(dp5248
S'trial_loop.thisTrialN'
p5249
I115
sg3633
g4616
sS'block_loop.thisIndex'
p5250
g3627
sg38
S'right'
p5251
sg59
g63
sS'trial_loop.thisN'
p5252
I115
sg33
g4627
sg64
g65
sS'trial_loop.thisIndex'
p5253
g60
(g99
S's\x00\x00\x00'
tRp5254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5255
I0
sg3642
g4624
sS'block_loop.thisRepN'
p5256
I1
sg3645
g4620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5257
I1
sg3647
g4627
sg55
g11
sS'block_loop.thisTrial'
p5258
Nsg70
Vn
sS'block_loop.thisTrialN'
p5259
I0
sg39
F0.4999164663377087
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x14-\x03\tX'
tRp5260
sa(dp5261
S'trial_loop.thisTrialN'
p5262
I116
sg3633
g4493
sS'block_loop.thisIndex'
p5263
g3627
sg38
S'right'
p5264
sg59
g63
sS'trial_loop.thisN'
p5265
I116
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5266
g60
(g99
S't\x00\x00\x00'
tRp5267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5268
I0
sg3642
g4500
sS'block_loop.thisRepN'
p5269
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5270
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5271
Nsg70
Vn
sS'block_loop.thisTrialN'
p5272
I0
sg39
F0.60042171669920208
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x142\x0b>\xe8'
tRp5273
sa(dp5274
S'trial_loop.thisTrialN'
p5275
I117
sg3633
g4588
sS'block_loop.thisIndex'
p5276
g3627
sg38
S'right'
p5277
sg59
g63
sS'trial_loop.thisN'
p5278
I117
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p5279
g60
(g99
S'u\x00\x00\x00'
tRp5280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5281
I0
sg3642
g4595
sS'block_loop.thisRepN'
p5282
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5283
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p5284
Nsg70
Vn
sS'block_loop.thisTrialN'
p5285
I0
sg39
F0.56659543022396974
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x148\x05\xa1h'
tRp5286
sa(dp5287
S'trial_loop.thisTrialN'
p5288
I118
sg3633
g3654
sS'block_loop.thisIndex'
p5289
g3627
sg38
S'left'
p5290
sg59
g63
sS'trial_loop.thisN'
p5291
I118
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5292
g60
(g99
S'v\x00\x00\x00'
tRp5293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5294
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5295
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5296
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5297
Nsg70
Vn
sS'block_loop.thisTrialN'
p5298
I0
sg39
F0.78324668260211183
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x15\x01\x0e\xc9('
tRp5299
sa(dp5300
S'trial_loop.thisTrialN'
p5301
I119
sg3633
g4032
sS'block_loop.thisIndex'
p5302
g3627
sg38
S'right'
p5303
sg59
g63
sS'trial_loop.thisN'
p5304
I119
sg33
g4036
sg64
g65
sS'trial_loop.thisIndex'
p5305
g60
(g99
S'w\x00\x00\x00'
tRp5306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5307
I0
sg3642
g4040
sS'block_loop.thisRepN'
p5308
I1
sg3645
g4036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5309
I1
sg3647
g4043
sg55
g11
sS'block_loop.thisTrial'
p5310
Nsg70
Vn
sS'block_loop.thisTrialN'
p5311
I0
sg39
F0.73328043818310107
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x15\x07\x0c\x06 '
tRp5312
sa(dp5313
S'trial_loop.thisTrialN'
p5314
I120
sg3633
g4215
sS'block_loop.thisIndex'
p5315
g3627
sg38
S'right'
p5316
sg59
g63
sS'trial_loop.thisN'
p5317
I120
sg33
g4219
sg64
g65
sS'trial_loop.thisIndex'
p5318
g60
(g99
S'x\x00\x00\x00'
tRp5319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5320
I0
sg3642
g4223
sS'block_loop.thisRepN'
p5321
I1
sg3645
g4225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5322
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p5323
Nsg70
Vn
sS'block_loop.thisTrialN'
p5324
I0
sg39
F0.61667029691216158
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x15\r\x08P\xe8'
tRp5325
sa(dp5326
S'trial_loop.thisTrialN'
p5327
I121
sg3633
g4232
sS'block_loop.thisIndex'
p5328
g3627
sg38
S'right'
p5329
sg59
g63
sS'trial_loop.thisN'
p5330
I121
sg33
g3827
sg64
g65
sS'trial_loop.thisIndex'
p5331
g60
(g99
S'y\x00\x00\x00'
tRp5332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5333
I0
sg3642
g4239
sS'block_loop.thisRepN'
p5334
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5335
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5336
Nsg70
Vn
sS'block_loop.thisTrialN'
p5337
I0
sg39
F0.66663910721035791
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x15\x13\x02\xee\x00'
tRp5338
sa(dp5339
S'trial_loop.thisTrialN'
p5340
I122
sg3633
S'49-yorkie.png'
p5341
sS'block_loop.thisIndex'
p5342
g3627
sg38
S'left'
p5343
sg59
g63
sS'trial_loop.thisN'
p5344
I122
sg33
g4620
sg64
g65
sS'trial_loop.thisIndex'
p5345
g60
(g99
S'z\x00\x00\x00'
tRp5346
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5347
I0
sg3642
S'35-raisins.png'
p5348
sS'block_loop.thisRepN'
p5349
I1
sg3645
g4620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5350
I1
sg3647
g4627
sg55
g11
sS'block_loop.thisTrial'
p5351
Nsg70
Vn
sS'block_loop.thisTrialN'
p5352
I0
sg39
F0.71699707603693241
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x15\x18\r\xbf\x88'
tRp5353
sa(dp5354
S'trial_loop.thisTrialN'
p5355
I123
sg3633
g3850
sS'block_loop.thisIndex'
p5356
g3627
sg38
S'left'
p5357
sg59
g63
sS'trial_loop.thisN'
p5358
I123
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5359
g60
(g99
S'{\x00\x00\x00'
tRp5360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5361
I0
sg3642
g3858
sS'block_loop.thisRepN'
p5362
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5363
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5364
Nsg70
Vn
sS'block_loop.thisTrialN'
p5365
I0
sg39
F0.56668666152745573
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x15\x1e\t\xcb\xd0'
tRp5366
sa(dp5367
S'trial_loop.thisTrialN'
p5368
I124
sg3633
g5053
sS'block_loop.thisIndex'
p5369
g3627
sg38
S'left'
p5370
sg59
g63
sS'trial_loop.thisN'
p5371
I124
sg33
g4225
sg64
g65
sS'trial_loop.thisIndex'
p5372
g60
(g99
S'|\x00\x00\x00'
tRp5373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5374
I0
sg3642
g5060
sS'block_loop.thisRepN'
p5375
I1
sg3645
g4225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5376
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p5377
Nsg70
Vn
sS'block_loop.thisTrialN'
p5378
I0
sg39
F0.71664498022619227
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x15$\x03\xb58'
tRp5379
sa(dp5380
S'trial_loop.thisTrialN'
p5381
I125
sg3633
g3833
sS'block_loop.thisIndex'
p5382
g3627
sg38
S'left'
p5383
sg59
g63
sS'trial_loop.thisN'
p5384
I125
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p5385
g60
(g99
S'}\x00\x00\x00'
tRp5386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5387
I0
sg3642
g3841
sS'block_loop.thisRepN'
p5388
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5389
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p5390
Nsg70
Vn
sS'block_loop.thisTrialN'
p5391
I0
sg39
F0.94997046386470174
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x15)\x0f>X'
tRp5392
sa(dp5393
S'trial_loop.thisTrialN'
p5394
I126
sg3633
g5341
sS'block_loop.thisIndex'
p5395
g3627
sg38
S'left'
p5396
sg59
g63
sS'trial_loop.thisN'
p5397
I126
sg33
g4620
sg64
g65
sS'trial_loop.thisIndex'
p5398
g60
(g99
S'~\x00\x00\x00'
tRp5399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5400
I0
sg3642
g5348
sS'block_loop.thisRepN'
p5401
I1
sg3645
g4620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5402
I1
sg3647
g4627
sg55
g11
sS'block_loop.thisTrial'
p5403
Nsg70
Vn
sS'block_loop.thisTrialN'
p5404
I0
sg39
F0.68330649612471461
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x15/\x0e\xdc\xb0'
tRp5405
sa(dp5406
S'trial_loop.thisTrialN'
p5407
I127
sg3633
g3737
sS'block_loop.thisIndex'
p5408
g3627
sg38
S'right'
p5409
sg59
g63
sS'trial_loop.thisN'
p5410
I127
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5411
g60
(g99
S'\x7f\x00\x00\x00'
tRp5412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5413
I0
sg3642
g3745
sS'block_loop.thisRepN'
p5414
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5415
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5416
Nsg70
Vn
sS'block_loop.thisTrialN'
p5417
I0
sg39
F1.7999879118524404
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x155\n\xaax'
tRp5418
sa(dp5419
S'trial_loop.thisTrialN'
p5420
I128
sg3633
g4079
sS'block_loop.thisIndex'
p5421
g3627
sg38
S'right'
p5422
sg59
g63
sS'trial_loop.thisN'
p5423
I128
sg33
g3907
sg64
g65
sS'trial_loop.thisIndex'
p5424
g60
(g99
S'\x80\x00\x00\x00'
tRp5425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5426
I0
sg3642
g4086
sS'block_loop.thisRepN'
p5427
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5428
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p5429
Nsg70
Vn
sS'block_loop.thisTrialN'
p5430
I0
sg39
F0.59976228543473553
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x16\x00\x08\x1e '
tRp5431
sa(dp5432
S'trial_loop.thisTrialN'
p5433
I129
sg3633
g3816
sS'block_loop.thisIndex'
p5434
g3627
sg38
S'left'
p5435
sg59
g63
sS'trial_loop.thisN'
p5436
I129
sg33
g3827
sg64
g65
sS'trial_loop.thisIndex'
p5437
g60
(g99
S'\x81\x00\x00\x00'
tRp5438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5439
I0
sg3642
g3824
sS'block_loop.thisRepN'
p5440
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5441
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vn
sS'block_loop.thisTrialN'
p5443
I0
sg39
F0.94999412698507513
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x16\x06\x02|\xb8'
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g3705
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'left'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5453
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5454
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vn
sS'block_loop.thisTrialN'
p5456
I0
sg39
F0.71674790053930337
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x16\x0c\x02Y\x90'
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g3671
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'right'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5466
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5467
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vn
sS'block_loop.thisTrialN'
p5469
I0
sg39
F0.74985203423057101
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x16\x11\r\xa8\x18'
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g4247
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'right'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g4254
sS'block_loop.thisRepN'
p5479
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5480
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vn
sS'block_loop.thisTrialN'
p5482
I0
sg39
F1.0000096933263194
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x16\x17\nh\x10'
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g5341
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'left'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g4620
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g5348
sS'block_loop.thisRepN'
p5492
I1
sg3645
g4620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5493
I1
sg3647
g4627
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vn
sS'block_loop.thisTrialN'
p5495
I0
sg39
F0.68337720038562111
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x16\x1d\n\xf8\x98'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g4973
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'right'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g4980
sS'block_loop.thisRepN'
p5505
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5506
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vn
sS'block_loop.thisTrialN'
p5508
I0
sg39
F0.89999024965436547
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x16#\x06\x8b\xc8'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g3946
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'left'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g3950
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g3954
sS'block_loop.thisRepN'
p5518
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5519
I1
sg3647
g3957
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vn
sS'block_loop.thisTrialN'
p5521
I0
sg39
F1.1499899645559708
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x16)\x05r\x88'
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g4232
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'left'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g4239
sS'block_loop.thisRepN'
p5531
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5532
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vn
sS'block_loop.thisTrialN'
p5534
I0
sg39
F0.84999863153007027
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x16/\x08dp'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g3722
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'left'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g3729
sS'block_loop.thisRepN'
p5544
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5545
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vn
sS'block_loop.thisTrialN'
p5547
I0
sg39
F0.69992769919190323
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x165\x06\x93\x98'
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g4079
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'right'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g3907
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g4086
sS'block_loop.thisRepN'
p5557
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5558
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vn
sS'block_loop.thisTrialN'
p5560
I0
sg39
F0.95017060253758245
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x16;\x02eH'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g3754
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'left'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g3764
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g3762
sS'block_loop.thisRepN'
p5570
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5571
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vn
sS'block_loop.thisTrialN'
p5573
I0
sg39
F1.083265385019331
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x17\x05\x02>8'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g3880
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'right'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g3891
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g3888
sS'block_loop.thisRepN'
p5583
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vn
sS'block_loop.thisTrialN'
p5586
I0
sg39
F0.6666316946666484
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x17\x0b\x03\xffp'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g4327
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'right'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g4334
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vn
sS'block_loop.thisTrialN'
p5599
I0
sg39
F0.56667098114667169
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x17\x10\x0e\x96`'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g3801
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'right'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g3808
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vn
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.53301689375712158
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x17\x16\x08\x7f\xc8'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g4247
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'right'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g4254
sS'block_loop.thisRepN'
p5622
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vn
sS'block_loop.thisTrialN'
p5625
I0
sg39
F1.0498439374514419
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x17\x1c\x01\xec0'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g4133
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'left'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g4140
sS'block_loop.thisRepN'
p5635
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vn
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.78336699388273701
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x17"\x034P'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g4215
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'right'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g4225
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g4223
sS'block_loop.thisRepN'
p5648
I1
sg3645
g4225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vn
sS'block_loop.thisTrialN'
p5651
I0
sg39
F0.56665729645192187
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x17(\x00qH'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g4616
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g4620
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g4624
sS'block_loop.thisRepN'
p5661
I1
sg3645
g4620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3647
g4627
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vn
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.5332030626350388
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x17-\t\x99\x08'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g3737
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'right'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g3748
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g3745
sS'block_loop.thisRepN'
p5674
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vn
sS'block_loop.thisTrialN'
p5677
I0
sg39
F1.2166461206170425
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x173\x03\x05p'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g4463
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'right'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g4467
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g4471
sS'block_loop.thisRepN'
p5687
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vn
sS'block_loop.thisTrialN'
p5690
I0
sg39
F1.4665791226289002
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x179\x06\xedp'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g4435
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'right'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g4442
sS'block_loop.thisRepN'
p5700
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vn
sS'block_loop.thisTrialN'
p5703
I0
sg39
F1.0332193132098837
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x18\x03\x0eg\x80'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g4616
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'right'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g4620
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g4624
sS'block_loop.thisRepN'
p5713
I1
sg3645
g4620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g4627
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vn
sS'block_loop.thisTrialN'
p5716
I0
sg39
F0.86708368875497399
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x18\n\x00.\xe0'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g3705
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'left'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vn
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.94993197565963783
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x18\x0f\r\xde\xc8'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g4588
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'right'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g4595
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vn
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.74998831098946539
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x18\x15\r\xb7\xb8'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g4560
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'left'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g4567
sS'block_loop.thisRepN'
p5752
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vn
sS'block_loop.thisTrialN'
p5755
I0
sg39
F1.4832325417501124
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x18\x1b\n{\x98'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g4327
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'right'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g4334
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vn
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.84995786254148697
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x18"\x02\xee\x00'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g4079
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3907
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g4086
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vn
sS'block_loop.thisTrialN'
p5781
I0
sg39
F0.69998215287614585
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x18(\x01\x1d('
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g5053
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'left'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g4219
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g5060
sS'block_loop.thisRepN'
p5791
I1
sg3645
g4225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vn
sS'block_loop.thisTrialN'
p5794
I0
sg39
F1.2166780515726714
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x18-\x0ck\xb0'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g4867
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'left'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g4467
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g4874
sS'block_loop.thisRepN'
p5804
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vn
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.69990318077998381
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x184\x01\x11p'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g3671
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'right'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5817
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vn
sS'block_loop.thisTrialN'
p5820
I0
sg39
F0.76661550111020915
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x189\x0c!x'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g5341
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'left'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g4627
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g5348
sS'block_loop.thisRepN'
p5830
I1
sg3645
g4620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g4627
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vn
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.66665165151425754
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x19\x03\t\x1f\xf0'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g4560
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'left'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g4567
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vn
sS'block_loop.thisTrialN'
p5846
I0
sg39
F1.0497934751374487
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x19\t\x04t\xa0'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g4867
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'left'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g4467
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g4874
sS'block_loop.thisRepN'
p5856
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vn
sS'block_loop.thisTrialN'
p5859
I0
sg39
F0.65036144702025922
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x19\x0f\x05\xbc\xc0'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g4973
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'right'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g4980
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vn
sS'block_loop.thisTrialN'
p5872
I0
sg39
F0.88330546977340418
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x19\x15\x00\xd6\xd8'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g3634
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'left'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vn
sS'block_loop.thisTrialN'
p5885
I0
sg39
F0.71637812866356398
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x19\x1a\x0e\xff\xd8'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g3722
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'left'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g3729
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vn
sS'block_loop.thisTrialN'
p5898
I0
sg39
F0.58328249088845041
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x19 \x0b\x088'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g4064
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'right'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g4071
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vn
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.98333432167237333
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x19&\x05,8'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g3931
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'left'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3748
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g3938
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vn
sS'block_loop.thisTrialN'
p5924
I0
sg39
F1.1332430333495722
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x19,\x05\x82('
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g5053
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'left'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g4225
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g5060
sS'block_loop.thisRepN'
p5934
I1
sg3645
g4225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vn
sS'block_loop.thisTrialN'
p5937
I0
sg39
F0.86702495860390627
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x192\x07\xfa\xf8'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g3914
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'left'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g3922
sS'block_loop.thisRepN'
p5947
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vn
sS'block_loop.thisTrialN'
p5950
I0
sg39
F0.99994725690248742
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x198\x06\xa38'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g4247
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'right'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3782
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g4254
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vn
sS'block_loop.thisTrialN'
p5963
I0
sg39
F1.0999128170860786
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1a\x02\x06\xf9('
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g3816
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'right'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g3824
sS'block_loop.thisRepN'
p5973
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vn
sS'block_loop.thisTrialN'
p5976
I0
sg39
F1.599980955465071
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1a\x08\x08\xf8\xe0'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g4973
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'right'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g4980
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vn
sS'block_loop.thisTrialN'
p5989
I0
sg39
F0.71663386140971852
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1a\x0f\x03\x8e('
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g4133
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'left'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g4140
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g3675
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vn
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.80035283706547489
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1a\x14\x0e\xdc\xb0'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g3946
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'left'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3957
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g3954
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g3957
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vn
sS'block_loop.thisTrialN'
p6015
I0
sg39
F0.58335348024593259
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1a\x1a\x0cX('
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4435
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'right'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g3764
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4442
sS'block_loop.thisRepN'
p6025
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vn
sS'block_loop.thisTrialN'
p6028
I0
sg39
F0.91650454103728407
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1a \x06|('
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g4588
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'right'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g4595
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vn
sS'block_loop.thisTrialN'
p6041
I0
sg39
F0.8332268968124481
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1a&\x05\xdc\x00'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g3880
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'right'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g3888
sS'block_loop.thisRepN'
p6051
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vn
sS'block_loop.thisTrialN'
p6054
I0
sg39
F0.83331869831181393
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1a,\x03\xcc\xa8'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g3850
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'left'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3861
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g3858
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vn
sS'block_loop.thisTrialN'
p6067
I0
sg39
F1.7166746303992113
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1a2\x01\xc18'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g4560
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'left'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g4567
sS'block_loop.thisRepN'
p6077
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vn
sS'block_loop.thisTrialN'
p6080
I0
sg39
F1.0999458884325577
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1a8\r\x07\xf0'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g3897
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'left'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g3905
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vn
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.81666813016909146
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1b\x03\x00\x03\xe8'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g3737
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'right'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g3745
sS'block_loop.thisRepN'
p6103
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vn
sS'block_loop.thisTrialN'
p6106
I0
sg39
F1.1666838675691906
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1b\x08\x0c\xfc8'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g4435
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'right'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g3764
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g4442
sS'block_loop.thisRepN'
p6116
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vn
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.84981360304391274
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1b\x0f\x00\xab\xe0'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g3705
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'left'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g3713
sS'block_loop.thisRepN'
p6129
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vn
sS'block_loop.thisTrialN'
p6132
I0
sg39
F0.88337588893500651
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1b\x14\x0e\x1dH'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g5341
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'left'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g4620
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g5348
sS'block_loop.thisRepN'
p6142
I1
sg3645
g4620
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g4627
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vn
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.61664891457621707
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1b\x1a\x0c\xc9p'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g3654
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'left'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g3662
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vn
sS'block_loop.thisTrialN'
p6158
I0
sg39
F0.58327108697540098
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1b \x07\xa1 '
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g5053
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'left'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g4225
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g5060
sS'block_loop.thisRepN'
p6168
I1
sg3645
g4225
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vn
sS'block_loop.thisTrialN'
p6171
I0
sg39
F0.54990523348351417
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1b&\x01\xc5 '
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g3914
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'left'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g3922
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vn
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.58334093594203296
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1b+\n\xb2H'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g3722
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'left'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g3729
sS'block_loop.thisRepN'
p6194
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vn
sS'block_loop.thisTrialN'
p6197
I0
sg39
F0.51668763085945102
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1b1\x04\xd6H'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g4867
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'left'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g4467
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g4874
sS'block_loop.thisRepN'
p6207
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vn
sS'block_loop.thisTrialN'
p6210
I0
sg39
F0.48331350953139918
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1b6\r\x0b\xd8'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g3754
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'left'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g3764
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g3762
sS'block_loop.thisRepN'
p6220
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vn
sS'block_loop.thisTrialN'
p6223
I0
sg39
F0.7165751312586508
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1c\x00\x05\xc4\x90'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g4493
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'right'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g4500
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vn
sS'block_loop.thisTrialN'
p6236
I0
sg39
F1.1332567180452315
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1c\x06\x02\x0bp'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g4327
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'right'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g4334
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vn
sS'block_loop.thisTrialN'
p6249
I0
sg39
F2.2331130857628523
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1c\x0c\x04\x84@'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g4463
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'right'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g4467
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g4471
sS'block_loop.thisRepN'
p6259
I1
sg3645
g4467
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g4474
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vn
sS'block_loop.thisTrialN'
p6262
I0
sg39
F121.53028195034312
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1c\x13\x08\xa2\xf0'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g3634
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'left'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g3643
sS'block_loop.thisRepN'
p6272
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vn
sS'block_loop.thisTrialN'
p6275
I0
sg39
F0.81640498487831792
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1e\x1a\x01\xf7\xe8'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g4407
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'left'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g4043
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g4414
sS'block_loop.thisRepN'
p6285
I1
sg3645
g4036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g4043
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vn
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.81671146503776981
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1e\x1f\x0e\xf08'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g3754
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'left'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g3764
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g3762
sS'block_loop.thisRepN'
p6298
I1
sg3645
g3764
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g3758
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vn
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.78315716188535589
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1e%\x0c\xa6H'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g3897
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'left'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g3907
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g3905
sS'block_loop.thisRepN'
p6311
I1
sg3645
g3907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g3901
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vn
sS'block_loop.thisTrialN'
p6314
I0
sg39
F0.64992553244883311
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1e+\t\xe3@'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4407
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'left'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g4043
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4414
sS'block_loop.thisRepN'
p6324
I1
sg3645
g4036
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g4043
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vn
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.70000752658233978
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1e1\x04\xf9p'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g4247
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'right'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g4254
sS'block_loop.thisRepN'
p6337
I1
sg3645
g3775
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g3782
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vn
sS'block_loop.thisTrialN'
p6340
I0
sg39
F1.1333813057935913
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1e7\x01\x05\xb8'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g4560
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'left'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g4567
sS'block_loop.thisRepN'
p6350
I1
sg3645
g3884
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g3891
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vn
sS'block_loop.thisTrialN'
p6353
I0
sg39
F1.1332398972735973
sg34
g753
(S'\x07\xdf\x07\x01\x0b\x1f\x01\x03~\x88'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F92.231037858709897
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vn
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vn
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'22-daim.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'left'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'22-daim.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'7-olives.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'7-olives.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vn
sS'block_loop.thisTrialN'
p6388
I0
sg39
F2.9332591698866963
sg34
g753
(S'\x07\xdf\x07\x01\x0b#\x02\x04E\xc0'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'1-treacle_cookies.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'right'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'1-treacle_cookies.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'21-nakd_banana_crunch.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6385
S'21-nakd_banana_crunch.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vn
sS'block_loop.thisTrialN'
p6405
I0
sg39
F2.4998041377957634
sg34
g753
(S'\x07\xdf\x07\x01\x0b#\n\x03\x99\xe0'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'25-kitkat.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'left'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'25-kitkat.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'31-hobnobs.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6419
I2
sg6385
S'31-hobnobs.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vn
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.66658807469957537
sg34
g753
(S'\x07\xdf\x07\x01\x0b#\x11\x0b\xc3\xb8'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'45-chewy_nougat_redo.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'right'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'41-peanuts_redo.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'41-peanuts_redo.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6436
I2
sg6385
S'45-chewy_nougat_redo.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vn
sS'block_loop.thisTrialN'
p6439
I0
sg39
F0.78333050136188831
sg34
g753
(S'\x07\xdf\x07\x01\x0b#\x17\x07V\xe8'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'26-walkers_smoky_bacon.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'left'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
S'44-crunch.png'
p6447
sg64
g65
sS'trial_loop.thisIndex'
p6448
g60
(g99
S'\x04\x00\x00\x00'
tRp6449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6450
I0
sg6380
S'44-crunch.png'
p6451
sS'block_loop.thisRepN'
p6452
I2
sg6383
S'26-walkers_smoky_bacon.png'
p6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6454
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p6455
Nsg70
Vn
sS'block_loop.thisTrialN'
p6456
I0
sg39
F0.78320591361352854
sg34
g753
(S'\x07\xdf\x07\x01\x0b#\x1d\x04U`'
tRp6457
sa(dp6458
S'trial_loop.thisTrialN'
p6459
I5
sg6371
S'40-sardines.png'
p6460
sS'block_loop.thisIndex'
p6461
g6365
sg38
S'left'
p6462
sg59
g63
sS'trial_loop.thisN'
p6463
I5
sg33
S'40-sardines.png'
p6464
sg64
g65
sS'trial_loop.thisIndex'
p6465
g60
(g99
S'\x05\x00\x00\x00'
tRp6466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6467
I0
sg6380
S'5-pineapple.png'
p6468
sS'block_loop.thisRepN'
p6469
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6470
I2
sg6385
S'5-pineapple.png'
p6471
sg55
g11
sS'block_loop.thisTrial'
p6472
Nsg70
Vn
sS'block_loop.thisTrialN'
p6473
I0
sg39
F0.71668802999647596
sg34
g753
(S'\x07\xdf\x07\x01\x0b##\x01\x92X'
tRp6474
sa(dp6475
S'trial_loop.thisTrialN'
p6476
I6
sg6371
S'19-caramello_redo.png'
p6477
sS'block_loop.thisIndex'
p6478
g6365
sg38
S'left'
p6479
sg59
g63
sS'trial_loop.thisN'
p6480
I6
sg33
S'19-caramello_redo.png'
p6481
sg64
g65
sS'trial_loop.thisIndex'
p6482
g60
(g99
S'\x06\x00\x00\x00'
tRp6483
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6484
I0
sg6380
S'30-spaghetti_hoops.png'
p6485
sS'block_loop.thisRepN'
p6486
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6487
I2
sg6385
S'30-spaghetti_hoops.png'
p6488
sg55
g11
sS'block_loop.thisTrial'
p6489
Nsg70
Vn
sS'block_loop.thisTrialN'
p6490
I0
sg39
F0.96663072533374361
sg34
g753
(S'\x07\xdf\x07\x01\x0b#(\r\x1bx'
tRp6491
sa(dp6492
S'trial_loop.thisTrialN'
p6493
I7
sg6371
S'50-polo.png'
p6494
sS'block_loop.thisIndex'
p6495
g6365
sg38
S'right'
p6496
sg59
g63
sS'trial_loop.thisN'
p6497
I7
sg33
S'48-twix.png'
p6498
sg64
g65
sS'trial_loop.thisIndex'
p6499
g60
(g99
S'\x07\x00\x00\x00'
tRp6500
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6501
I0
sg6380
S'48-twix.png'
p6502
sS'block_loop.thisRepN'
p6503
I2
sg6383
g6498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6504
I2
sg6385
S'50-polo.png'
p6505
sg55
g11
sS'block_loop.thisTrial'
p6506
Nsg70
Vn
sS'block_loop.thisTrialN'
p6507
I0
sg39
F1.0665312832134077
sg34
g753
(S'\x07\xdf\x07\x01\x0b#.\x0c\xf8P'
tRp6508
sa(dp6509
S'trial_loop.thisTrialN'
p6510
I8
sg6371
S'43-mrporky_pork_crackles_redo.png'
p6511
sS'block_loop.thisIndex'
p6512
g6365
sg38
S'right'
p6513
sg59
g63
sS'trial_loop.thisN'
p6514
I8
sg33
S'18-mms.png'
p6515
sg64
g65
sS'trial_loop.thisIndex'
p6516
g60
(g99
S'\x08\x00\x00\x00'
tRp6517
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6518
I0
sg6380
S'18-mms.png'
p6519
sS'block_loop.thisRepN'
p6520
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6521
I2
sg6385
S'43-mrporky_pork_crackles_redo.png'
p6522
sg55
g11
sS'block_loop.thisTrial'
p6523
Nsg70
Vn
sS'block_loop.thisTrialN'
p6524
I0
sg39
F1.3665516962182664
sg34
g753
(S'\x07\xdf\x07\x01\x0b#4\x0e{\x08'
tRp6525
sa(dp6526
S'trial_loop.thisTrialN'
p6527
I9
sg6371
S'2-steamed_puddings.png'
p6528
sS'block_loop.thisIndex'
p6529
g6365
sg38
S'left'
p6530
sg59
g63
sS'trial_loop.thisN'
p6531
I9
sg33
S'2-steamed_puddings.png'
p6532
sg64
g65
sS'trial_loop.thisIndex'
p6533
g60
(g99
S'\t\x00\x00\x00'
tRp6534
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6535
I0
sg6380
S'20-fruit_pastilles.png'
p6536
sS'block_loop.thisRepN'
p6537
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6538
I2
sg6385
S'20-fruit_pastilles.png'
p6539
sg55
g11
sS'block_loop.thisTrial'
p6540
Nsg70
Vn
sS'block_loop.thisTrialN'
p6541
I0
sg39
F0.95041778234917729
sg34
g753
(S'\x07\xdf\x07\x01\x0b#;\x05\x82('
tRp6542
sa(dp6543
S'trial_loop.thisTrialN'
p6544
I10
sg6371
S'4-corn.png'
p6545
sS'block_loop.thisIndex'
p6546
g6365
sg38
S'right'
p6547
sg59
g63
sS'trial_loop.thisN'
p6548
I10
sg33
S'10-bounty_redo.png'
p6549
sg64
g65
sS'trial_loop.thisIndex'
p6550
g60
(g99
S'\n\x00\x00\x00'
tRp6551
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6552
I0
sg6380
S'10-bounty_redo.png'
p6553
sS'block_loop.thisRepN'
p6554
I2
sg6383
g6549
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6555
I2
sg6385
S'4-corn.png'
p6556
sg55
g11
sS'block_loop.thisTrial'
p6557
Nsg70
Vn
sS'block_loop.thisTrialN'
p6558
I0
sg39
F0.61659246520684974
sg34
g753
(S'\x07\xdf\x07\x01\x0b$\x05\x05 \x80'
tRp6559
sa(dp6560
S'trial_loop.thisTrialN'
p6561
I11
sg6371
S'51-mars.png'
p6562
sS'block_loop.thisIndex'
p6563
g6365
sg38
S'left'
p6564
sg59
g63
sS'trial_loop.thisN'
p6565
I11
sg33
S'51-mars.png'
p6566
sg64
g65
sS'trial_loop.thisIndex'
p6567
g60
(g99
S'\x0b\x00\x00\x00'
tRp6568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6569
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6570
sS'block_loop.thisRepN'
p6571
I2
sg6383
g6566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6572
I2
sg6385
S'27-hartleys_raspberries_jelly.png'
p6573
sg55
g11
sS'block_loop.thisTrial'
p6574
Nsg70
Vn
sS'block_loop.thisTrialN'
p6575
I0
sg39
F0.55000045615634008
sg34
g753
(S'\x07\xdf\x07\x01\x0b$\n\x0e\xff\xd8'
tRp6576
sa(dp6577
S'trial_loop.thisTrialN'
p6578
I12
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p6579
sS'block_loop.thisIndex'
p6580
g6365
sg38
S'left'
p6581
sg59
g63
sS'trial_loop.thisN'
p6582
I12
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6583
sg64
g65
sS'trial_loop.thisIndex'
p6584
g60
(g99
S'\x0c\x00\x00\x00'
tRp6585
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6586
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p6587
sS'block_loop.thisRepN'
p6588
I2
sg6383
g6583
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6589
I2
sg6385
S'8-liquorice_catherine_wheels.png'
p6590
sg55
g11
sS'block_loop.thisTrial'
p6591
Nsg70
Vn
sS'block_loop.thisTrialN'
p6592
I0
sg39
F0.61650123390336375
sg34
g753
(S'\x07\xdf\x07\x01\x0b$\x10\x08\xaa\xc0'
tRp6593
sa(dp6594
S'trial_loop.thisTrialN'
p6595
I13
sg6371
S'36-fig_rolls.png'
p6596
sS'block_loop.thisIndex'
p6597
g6365
sg38
S'right'
p6598
sg59
g63
sS'trial_loop.thisN'
p6599
I13
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p6600
sg64
g65
sS'trial_loop.thisIndex'
p6601
g60
(g99
S'\r\x00\x00\x00'
tRp6602
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6603
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p6604
sS'block_loop.thisRepN'
p6605
I2
sg6383
g6600
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6606
I2
sg6385
S'36-fig_rolls.png'
p6607
sg55
g11
sS'block_loop.thisTrial'
p6608
Nsg70
Vn
sS'block_loop.thisTrialN'
p6609
I0
sg39
F0.98334629578039312
sg34
g753
(S'\x07\xdf\x07\x01\x0b$\x16\x03\x86X'
tRp6610
sa(dp6611
S'trial_loop.thisTrialN'
p6612
I14
sg6371
g6477
sS'block_loop.thisIndex'
p6613
g6365
sg38
S'left'
p6614
sg59
g63
sS'trial_loop.thisN'
p6615
I14
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p6616
g60
(g99
S'\x0e\x00\x00\x00'
tRp6617
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6618
I0
sg6380
g6485
sS'block_loop.thisRepN'
p6619
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6620
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p6621
Nsg70
Vn
sS'block_loop.thisTrialN'
p6622
I0
sg39
F0.66664480916642788
sg34
g753
(S'\x07\xdf\x07\x01\x0b$\x1c\x03\x9d\xc8'
tRp6623
sa(dp6624
S'trial_loop.thisTrialN'
p6625
I15
sg6371
S'38-maltesers.png'
p6626
sS'block_loop.thisIndex'
p6627
g6365
sg38
S'left'
p6628
sg59
g63
sS'trial_loop.thisN'
p6629
I15
sg33
S'38-maltesers.png'
p6630
sg64
g65
sS'trial_loop.thisIndex'
p6631
g60
(g99
S'\x0f\x00\x00\x00'
tRp6632
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6633
I0
sg6380
S'6-sour_patch_kids.png'
p6634
sS'block_loop.thisRepN'
p6635
I2
sg6383
g6630
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6636
I2
sg6385
S'6-sour_patch_kids.png'
p6637
sg55
g11
sS'block_loop.thisTrial'
p6638
Nsg70
Vn
sS'block_loop.thisTrialN'
p6639
I0
sg39
F0.5501427199696991
sg34
g753
(S'\x07\xdf\x07\x01\x0b$!\x0eoP'
tRp6640
sa(dp6641
S'trial_loop.thisTrialN'
p6642
I16
sg6371
S'46-pistachios.png'
p6643
sS'block_loop.thisIndex'
p6644
g6365
sg38
S'left'
p6645
sg59
g63
sS'trial_loop.thisN'
p6646
I16
sg33
S'46-pistachios.png'
p6647
sg64
g65
sS'trial_loop.thisIndex'
p6648
g60
(g99
S'\x10\x00\x00\x00'
tRp6649
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6650
I0
sg6380
S'29-beans.png'
p6651
sS'block_loop.thisRepN'
p6652
I2
sg6383
g6647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6653
I2
sg6385
S'29-beans.png'
p6654
sg55
g11
sS'block_loop.thisTrial'
p6655
Nsg70
Vn
sS'block_loop.thisTrialN'
p6656
I0
sg39
F1.2165192520860728
sg34
g753
(S"\x07\xdf\x07\x01\x0b$'\x07\xdb\xb8"
tRp6657
sa(dp6658
S'trial_loop.thisTrialN'
p6659
I17
sg6371
S'16-skips_prawn.png'
p6660
sS'block_loop.thisIndex'
p6661
g6365
sg38
S'left'
p6662
sg59
g63
sS'trial_loop.thisN'
p6663
I17
sg33
S'16-skips_prawn.png'
p6664
sg64
g65
sS'trial_loop.thisIndex'
p6665
g60
(g99
S'\x11\x00\x00\x00'
tRp6666
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6667
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p6668
sS'block_loop.thisRepN'
p6669
I2
sg6383
g6664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6670
I2
sg6385
S'42-mrkipling_lemon_slices.png'
p6671
sg55
g11
sS'block_loop.thisTrial'
p6672
Nsg70
Vn
sS'block_loop.thisTrialN'
p6673
I0
sg39
F0.8998730744497152
sg34
g753
(S'\x07\xdf\x07\x01\x0b$-\x0b\xc3\xb8'
tRp6674
sa(dp6675
S'trial_loop.thisTrialN'
p6676
I18
sg6371
S'8-liquorice_catherine_wheels.png'
p6677
sS'block_loop.thisIndex'
p6678
g6365
sg38
S'right'
p6679
sg59
g63
sS'trial_loop.thisN'
p6680
I18
sg33
g6583
sg64
g65
sS'trial_loop.thisIndex'
p6681
g60
(g99
S'\x12\x00\x00\x00'
tRp6682
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6683
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p6684
sS'block_loop.thisRepN'
p6685
I2
sg6383
g6583
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6686
I2
sg6385
g6590
sg55
g11
sS'block_loop.thisTrial'
p6687
Nsg70
Vn
sS'block_loop.thisTrialN'
p6688
I0
sg39
F0.84997496841151587
sg34
g753
(S'\x07\xdf\x07\x01\x0b$3\n\xaax'
tRp6689
sa(dp6690
S'trial_loop.thisTrialN'
p6691
I19
sg6371
S'48-twix.png'
p6692
sS'block_loop.thisIndex'
p6693
g6365
sg38
S'left'
p6694
sg59
g63
sS'trial_loop.thisN'
p6695
I19
sg33
g6498
sg64
g65
sS'trial_loop.thisIndex'
p6696
g60
(g99
S'\x13\x00\x00\x00'
tRp6697
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6698
I0
sg6380
S'50-polo.png'
p6699
sS'block_loop.thisRepN'
p6700
I2
sg6383
g6498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6701
I2
sg6385
g6505
sg55
g11
sS'block_loop.thisTrial'
p6702
Nsg70
Vn
sS'block_loop.thisTrialN'
p6703
I0
sg39
F0.90000051317656471
sg34
g753
(S'\x07\xdf\x07\x01\x0b$9\t\x18 '
tRp6704
sa(dp6705
S'trial_loop.thisTrialN'
p6706
I20
sg6371
g6426
sS'block_loop.thisIndex'
p6707
g6365
sg38
S'right'
p6708
sg59
g63
sS'trial_loop.thisN'
p6709
I20
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p6710
g60
(g99
S'\x14\x00\x00\x00'
tRp6711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6712
I0
sg6380
g6434
sS'block_loop.thisRepN'
p6713
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6714
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6715
Nsg70
Vn
sS'block_loop.thisTrialN'
p6716
I0
sg39
F0.90000478964338981
sg34
g753
(S'\x07\xdf\x07\x01\x0b%\x03\x07\xfe\xe0'
tRp6717
sa(dp6718
S'trial_loop.thisTrialN'
p6719
I21
sg6371
S'30-spaghetti_hoops.png'
p6720
sS'block_loop.thisIndex'
p6721
g6365
sg38
S'right'
p6722
sg59
g63
sS'trial_loop.thisN'
p6723
I21
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p6724
g60
(g99
S'\x15\x00\x00\x00'
tRp6725
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6726
I0
sg6380
S'19-caramello_redo.png'
p6727
sS'block_loop.thisRepN'
p6728
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6729
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p6730
Nsg70
Vn
sS'block_loop.thisTrialN'
p6731
I0
sg39
F0.56656093338733626
sg34
g753
(S'\x07\xdf\x07\x01\x0b%\t\x06\xe5\xa0'
tRp6732
sa(dp6733
S'trial_loop.thisTrialN'
p6734
I22
sg6371
g6443
sS'block_loop.thisIndex'
p6735
g6365
sg38
S'left'
p6736
sg59
g63
sS'trial_loop.thisN'
p6737
I22
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p6738
g60
(g99
S'\x16\x00\x00\x00'
tRp6739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6740
I0
sg6380
g6451
sS'block_loop.thisRepN'
p6741
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6742
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p6743
Nsg70
Vn
sS'block_loop.thisTrialN'
p6744
I0
sg39
F1.0332389849609172
sg34
g753
(S'\x07\xdf\x07\x01\x0b%\x0f\x00\xcb '
tRp6745
sa(dp6746
S'trial_loop.thisTrialN'
p6747
I23
sg6371
S'33-ambrosia_rice.png'
p6748
sS'block_loop.thisIndex'
p6749
g6365
sg38
S'right'
p6750
sg59
g63
sS'trial_loop.thisN'
p6751
I23
sg33
S'33-ambrosia_rice.png'
p6752
sg64
g65
sS'trial_loop.thisIndex'
p6753
g60
(g99
S'\x17\x00\x00\x00'
tRp6754
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6755
I0
sg6380
S'23-crunchie_redo.png'
p6756
sS'block_loop.thisRepN'
p6757
I2
sg6383
S'23-crunchie_redo.png'
p6758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6759
I2
sg6385
g6752
sg55
g11
sS'block_loop.thisTrial'
p6760
Nsg70
Vn
sS'block_loop.thisTrialN'
p6761
I0
sg39
F0.91672691733947431
sg34
g753
(S'\x07\xdf\x07\x01\x0b%\x15\x01\xd8\xa8'
tRp6762
sa(dp6763
S'trial_loop.thisTrialN'
p6764
I24
sg6371
g6692
sS'block_loop.thisIndex'
p6765
g6365
sg38
S'left'
p6766
sg59
g63
sS'trial_loop.thisN'
p6767
I24
sg33
g6505
sg64
g65
sS'trial_loop.thisIndex'
p6768
g60
(g99
S'\x18\x00\x00\x00'
tRp6769
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6770
I0
sg6380
g6699
sS'block_loop.thisRepN'
p6771
I2
sg6383
g6498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6772
I2
sg6385
g6505
sg55
g11
sS'block_loop.thisTrial'
p6773
Nsg70
Vn
sS'block_loop.thisTrialN'
p6774
I0
sg39
F0.6999998289411451
sg34
g753
(S'\x07\xdf\x07\x01\x0b%\x1b\x018\x80'
tRp6775
sa(dp6776
S'trial_loop.thisTrialN'
p6777
I25
sg6371
g6748
sS'block_loop.thisIndex'
p6778
g6365
sg38
S'right'
p6779
sg59
g63
sS'trial_loop.thisN'
p6780
I25
sg33
g6758
sg64
g65
sS'trial_loop.thisIndex'
p6781
g60
(g99
S'\x19\x00\x00\x00'
tRp6782
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6783
I0
sg6380
g6756
sS'block_loop.thisRepN'
p6784
I2
sg6383
g6758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6785
I2
sg6385
g6752
sg55
g11
sS'block_loop.thisTrial'
p6786
Nsg70
Vn
sS'block_loop.thisTrialN'
p6787
I0
sg39
F0.88326242000130151
sg34
g753
(S'\x07\xdf\x07\x01\x0b% \x0cH\x88'
tRp6788
sa(dp6789
S'trial_loop.thisTrialN'
p6790
I26
sg6371
g6692
sS'block_loop.thisIndex'
p6791
g6365
sg38
S'left'
p6792
sg59
g63
sS'trial_loop.thisN'
p6793
I26
sg33
g6505
sg64
g65
sS'trial_loop.thisIndex'
p6794
g60
(g99
S'\x1a\x00\x00\x00'
tRp6795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6796
I0
sg6380
g6699
sS'block_loop.thisRepN'
p6797
I2
sg6383
g6498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6798
I2
sg6385
g6505
sg55
g11
sS'block_loop.thisTrial'
p6799
Nsg70
Vn
sS'block_loop.thisTrialN'
p6800
I0
sg39
F0.90001476806719438
sg34
g753
(S'\x07\xdf\x07\x01\x0b%&\n\xf0\xc8'
tRp6801
sa(dp6802
S'trial_loop.thisTrialN'
p6803
I27
sg6371
S'23-crunchie_redo.png'
p6804
sS'block_loop.thisIndex'
p6805
g6365
sg38
S'left'
p6806
sg59
g63
sS'trial_loop.thisN'
p6807
I27
sg33
g6758
sg64
g65
sS'trial_loop.thisIndex'
p6808
g60
(g99
S'\x1b\x00\x00\x00'
tRp6809
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6810
I0
sg6380
S'33-ambrosia_rice.png'
p6811
sS'block_loop.thisRepN'
p6812
I2
sg6383
g6758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6813
I2
sg6385
g6752
sg55
g11
sS'block_loop.thisTrial'
p6814
Nsg70
Vn
sS'block_loop.thisTrialN'
p6815
I0
sg39
F0.53336984486122674
sg34
g753
(S'\x07\xdf\x07\x01\x0b%,\n\x16\x08'
tRp6816
sa(dp6817
S'trial_loop.thisTrialN'
p6818
I28
sg6371
g6596
sS'block_loop.thisIndex'
p6819
g6365
sg38
S'right'
p6820
sg59
g63
sS'trial_loop.thisN'
p6821
I28
sg33
g6600
sg64
g65
sS'trial_loop.thisIndex'
p6822
g60
(g99
S'\x1c\x00\x00\x00'
tRp6823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6824
I0
sg6380
g6604
sS'block_loop.thisRepN'
p6825
I2
sg6383
g6600
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6826
I2
sg6385
g6607
sg55
g11
sS'block_loop.thisTrial'
p6827
Nsg70
Vn
sS'block_loop.thisTrialN'
p6828
I0
sg39
F0.71663870807424246
sg34
g753
(S'\x07\xdf\x07\x01\x0b%2\x03G\xd8'
tRp6829
sa(dp6830
S'trial_loop.thisTrialN'
p6831
I29
sg6371
g6528
sS'block_loop.thisIndex'
p6832
g6365
sg38
S'left'
p6833
sg59
g63
sS'trial_loop.thisN'
p6834
I29
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p6835
g60
(g99
S'\x1d\x00\x00\x00'
tRp6836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6837
I0
sg6380
g6536
sS'block_loop.thisRepN'
p6838
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6839
I2
sg6385
g6539
sg55
g11
sS'block_loop.thisTrial'
p6840
Nsg70
Vn
sS'block_loop.thisTrialN'
p6841
I0
sg39
F0.76665940617567685
sg34
g753
(S'\x07\xdf\x07\x01\x0b%7\x0e\xd0\xf8'
tRp6842
sa(dp6843
S'trial_loop.thisTrialN'
p6844
I30
sg6371
g6677
sS'block_loop.thisIndex'
p6845
g6365
sg38
S'right'
p6846
sg59
g63
sS'trial_loop.thisN'
p6847
I30
sg33
g6583
sg64
g65
sS'trial_loop.thisIndex'
p6848
g60
(g99
S'\x1e\x00\x00\x00'
tRp6849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6850
I0
sg6380
g6684
sS'block_loop.thisRepN'
p6851
I2
sg6383
g6583
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6852
I2
sg6385
g6590
sg55
g11
sS'block_loop.thisTrial'
p6853
Nsg70
Vn
sS'block_loop.thisTrialN'
p6854
I0
sg39
F0.71666436687701207
sg34
g753
(S'\x07\xdf\x07\x01\x0b&\x01\x0b\xcfp'
tRp6855
sa(dp6856
S'trial_loop.thisTrialN'
p6857
I31
sg6371
S'31-hobnobs.png'
p6858
sS'block_loop.thisIndex'
p6859
g6365
sg38
S'right'
p6860
sg59
g63
sS'trial_loop.thisN'
p6861
I31
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6862
g60
(g99
S'\x1f\x00\x00\x00'
tRp6863
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6864
I0
sg6380
S'25-kitkat.png'
p6865
sS'block_loop.thisRepN'
p6866
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6867
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6868
Nsg70
Vn
sS'block_loop.thisTrialN'
p6869
I0
sg39
F0.96659252222525538
sg34
g753
(S'\x07\xdf\x07\x01\x0b&\x07\x07\xdb\xb8'
tRp6870
sa(dp6871
S'trial_loop.thisTrialN'
p6872
I32
sg6371
g6660
sS'block_loop.thisIndex'
p6873
g6365
sg38
S'left'
p6874
sg59
g63
sS'trial_loop.thisN'
p6875
I32
sg33
g6664
sg64
g65
sS'trial_loop.thisIndex'
p6876
g60
(g99
S' \x00\x00\x00'
tRp6877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6878
I0
sg6380
g6668
sS'block_loop.thisRepN'
p6879
I2
sg6383
g6664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6880
I2
sg6385
g6671
sg55
g11
sS'block_loop.thisTrial'
p6881
Nsg70
Vn
sS'block_loop.thisTrialN'
p6882
I0
sg39
F0.916798761991231
sg34
g753
(S'\x07\xdf\x07\x01\x0b&\r\x07\xf3('
tRp6883
sa(dp6884
S'trial_loop.thisTrialN'
p6885
I33
sg6371
S'29-beans.png'
p6886
sS'block_loop.thisIndex'
p6887
g6365
sg38
S'right'
p6888
sg59
g63
sS'trial_loop.thisN'
p6889
I33
sg33
g6647
sg64
g65
sS'trial_loop.thisIndex'
p6890
g60
(g99
S'!\x00\x00\x00'
tRp6891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6892
I0
sg6380
S'46-pistachios.png'
p6893
sS'block_loop.thisRepN'
p6894
I2
sg6383
g6647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6895
I2
sg6385
g6654
sg55
g11
sS'block_loop.thisTrial'
p6896
Nsg70
Vn
sS'block_loop.thisTrialN'
p6897
I0
sg39
F0.71667805157267139
sg34
g753
(S'\x07\xdf\x07\x01\x0b&\x13\x07\x18h'
tRp6898
sa(dp6899
S'trial_loop.thisTrialN'
p6900
I34
sg6371
g6720
sS'block_loop.thisIndex'
p6901
g6365
sg38
S'right'
p6902
sg59
g63
sS'trial_loop.thisN'
p6903
I34
sg33
g6488
sg64
g65
sS'trial_loop.thisIndex'
p6904
g60
(g99
S'"\x00\x00\x00'
tRp6905
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6906
I0
sg6380
g6727
sS'block_loop.thisRepN'
p6907
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6908
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p6909
Nsg70
Vn
sS'block_loop.thisTrialN'
p6910
I0
sg39
F0.733185785706155
sg34
g753
(S'\x07\xdf\x07\x01\x0b&\x19\x03_H'
tRp6911
sa(dp6912
S'trial_loop.thisTrialN'
p6913
I35
sg6371
g6460
sS'block_loop.thisIndex'
p6914
g6365
sg38
S'left'
p6915
sg59
g63
sS'trial_loop.thisN'
p6916
I35
sg33
g6471
sg64
g65
sS'trial_loop.thisIndex'
p6917
g60
(g99
S'#\x00\x00\x00'
tRp6918
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6919
I0
sg6380
g6468
sS'block_loop.thisRepN'
p6920
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6921
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p6922
Nsg70
Vn
sS'block_loop.thisTrialN'
p6923
I0
sg39
F0.73323966919633676
sg34
g753
(S'\x07\xdf\x07\x01\x0b&\x1e\x0f&\xe8'
tRp6924
sa(dp6925
S'trial_loop.thisTrialN'
p6926
I36
sg6371
S'3-ellas_strawberries_apples.png'
p6927
sS'block_loop.thisIndex'
p6928
g6365
sg38
S'right'
p6929
sg59
g63
sS'trial_loop.thisN'
p6930
I36
sg33
S'13-mccoys_steak_crisps.png'
p6931
sg64
g65
sS'trial_loop.thisIndex'
p6932
g60
(g99
S'$\x00\x00\x00'
tRp6933
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6934
I0
sg6380
S'13-mccoys_steak_crisps.png'
p6935
sS'block_loop.thisRepN'
p6936
I2
sg6383
g6931
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6937
I2
sg6385
S'3-ellas_strawberries_apples.png'
p6938
sg55
g11
sS'block_loop.thisTrial'
p6939
Nsg70
Vn
sS'block_loop.thisTrialN'
p6940
I0
sg39
F0.66668358247079595
sg34
g753
(S'\x07\xdf\x07\x01\x0b&$\x0bq\xb0'
tRp6941
sa(dp6942
S'trial_loop.thisTrialN'
p6943
I37
sg6371
g6528
sS'block_loop.thisIndex'
p6944
g6365
sg38
S'left'
p6945
sg59
g63
sS'trial_loop.thisN'
p6946
I37
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p6947
g60
(g99
S'%\x00\x00\x00'
tRp6948
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6949
I0
sg6380
g6536
sS'block_loop.thisRepN'
p6950
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6951
I2
sg6385
g6539
sg55
g11
sS'block_loop.thisTrial'
p6952
Nsg70
Vn
sS'block_loop.thisTrialN'
p6953
I0
sg39
F0.64982945448173268
sg34
g753
(S'\x07\xdf\x07\x01\x0b&*\x07\x00\xf8'
tRp6954
sa(dp6955
S'trial_loop.thisTrialN'
p6956
I38
sg6371
g6426
sS'block_loop.thisIndex'
p6957
g6365
sg38
S'right'
p6958
sg59
g63
sS'trial_loop.thisN'
p6959
I38
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6960
g60
(g99
S'&\x00\x00\x00'
tRp6961
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6962
I0
sg6380
g6434
sS'block_loop.thisRepN'
p6963
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6964
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6965
Nsg70
Vn
sS'block_loop.thisTrialN'
p6966
I0
sg39
F0.80036965783619962
sg34
g753
(S'\x07\xdf\x07\x01\x0b&0\x02\x1b\x10'
tRp6967
sa(dp6968
S'trial_loop.thisTrialN'
p6969
I39
sg6371
g6886
sS'block_loop.thisIndex'
p6970
g6365
sg38
S'right'
p6971
sg59
g63
sS'trial_loop.thisN'
p6972
I39
sg33
g6647
sg64
g65
sS'trial_loop.thisIndex'
p6973
g60
(g99
S"'\x00\x00\x00"
tRp6974
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6975
I0
sg6380
g6893
sS'block_loop.thisRepN'
p6976
I2
sg6383
g6647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6977
I2
sg6385
g6654
sg55
g11
sS'block_loop.thisTrial'
p6978
Nsg70
Vn
sS'block_loop.thisTrialN'
p6979
I0
sg39
F0.61667485847647185
sg34
g753
(S'\x07\xdf\x07\x01\x0b&5\x0e\xd4\xe0'
tRp6980
sa(dp6981
S'trial_loop.thisTrialN'
p6982
I40
sg6371
S'49-yorkie.png'
p6983
sS'block_loop.thisIndex'
p6984
g6365
sg38
S'left'
p6985
sg59
g63
sS'trial_loop.thisN'
p6986
I40
sg33
S'49-yorkie.png'
p6987
sg64
g65
sS'trial_loop.thisIndex'
p6988
g60
(g99
S'(\x00\x00\x00'
tRp6989
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6990
I0
sg6380
S'35-raisins.png'
p6991
sS'block_loop.thisRepN'
p6992
I2
sg6383
g6987
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6993
I2
sg6385
S'35-raisins.png'
p6994
sg55
g11
sS'block_loop.thisTrial'
p6995
Nsg70
Vn
sS'block_loop.thisTrialN'
p6996
I0
sg39
F0.84989856219362991
sg34
g753
(S'\x07\xdf\x07\x01\x0b&;\tq\xf8'
tRp6997
sa(dp6998
S'trial_loop.thisTrialN'
p6999
I41
sg6371
S'13-mccoys_steak_crisps.png'
p7000
sS'block_loop.thisIndex'
p7001
g6365
sg38
S'left'
p7002
sg59
g63
sS'trial_loop.thisN'
p7003
I41
sg33
g6938
sg64
g65
sS'trial_loop.thisIndex'
p7004
g60
(g99
S')\x00\x00\x00'
tRp7005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7006
I0
sg6380
S'3-ellas_strawberries_apples.png'
p7007
sS'block_loop.thisRepN'
p7008
I2
sg6383
g6931
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7009
I2
sg6385
g6938
sg55
g11
sS'block_loop.thisTrial'
p7010
Nsg70
Vn
sS'block_loop.thisTrialN'
p7011
I0
sg39
F0.51661179483926389
sg34
g753
(S"\x07\xdf\x07\x01\x0b'\x05\x07\xa1 "
tRp7012
sa(dp7013
S'trial_loop.thisTrialN'
p7014
I42
sg6371
S'7-olives.png'
p7015
sS'block_loop.thisIndex'
p7016
g6365
sg38
S'right'
p7017
sg59
g63
sS'trial_loop.thisN'
p7018
I42
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7019
g60
(g99
S'*\x00\x00\x00'
tRp7020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7021
I0
sg6380
S'22-daim.png'
p7022
sS'block_loop.thisRepN'
p7023
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7024
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7025
Nsg70
Vn
sS'block_loop.thisTrialN'
p7026
I0
sg39
F0.78335501977380773
sg34
g753
(S"\x07\xdf\x07\x01\x0b'\x0b\x00\xd2\xf0"
tRp7027
sa(dp7028
S'trial_loop.thisTrialN'
p7029
I43
sg6371
S'20-fruit_pastilles.png'
p7030
sS'block_loop.thisIndex'
p7031
g6365
sg38
S'right'
p7032
sg59
g63
sS'trial_loop.thisN'
p7033
I43
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p7034
g60
(g99
S'+\x00\x00\x00'
tRp7035
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7036
I0
sg6380
S'2-steamed_puddings.png'
p7037
sS'block_loop.thisRepN'
p7038
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7039
I2
sg6385
g6539
sg55
g11
sS'block_loop.thisTrial'
p7040
Nsg70
Vn
sS'block_loop.thisTrialN'
p7041
I0
sg39
F1.0997642811216792
sg34
g753
(S"\x07\xdf\x07\x01\x0b'\x10\rR("
tRp7042
sa(dp7043
S'trial_loop.thisTrialN'
p7044
I44
sg6371
g6579
sS'block_loop.thisIndex'
p7045
g6365
sg38
S'left'
p7046
sg59
g63
sS'trial_loop.thisN'
p7047
I44
sg33
g6583
sg64
g65
sS'trial_loop.thisIndex'
p7048
g60
(g99
S',\x00\x00\x00'
tRp7049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7050
I0
sg6380
g6587
sS'block_loop.thisRepN'
p7051
I2
sg6383
g6583
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7052
I2
sg6385
g6590
sg55
g11
sS'block_loop.thisTrial'
p7053
Nsg70
Vn
sS'block_loop.thisTrialN'
p7054
I0
sg39
F0.7000266281356744
sg34
g753
(S"\x07\xdf\x07\x01\x0b'\x17\x00\x0f\xa0"
tRp7055
sa(dp7056
S'trial_loop.thisTrialN'
p7057
I45
sg6371
g6804
sS'block_loop.thisIndex'
p7058
g6365
sg38
S'left'
p7059
sg59
g63
sS'trial_loop.thisN'
p7060
I45
sg33
g6758
sg64
g65
sS'trial_loop.thisIndex'
p7061
g60
(g99
S'-\x00\x00\x00'
tRp7062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7063
I0
sg6380
g6811
sS'block_loop.thisRepN'
p7064
I2
sg6383
g6758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7065
I2
sg6385
g6752
sg55
g11
sS'block_loop.thisTrial'
p7066
Nsg70
Vn
sS'block_loop.thisTrialN'
p7067
I0
sg39
F0.58330301793284889
sg34
g753
(S"\x07\xdf\x07\x01\x0b'\x1c\x0bZ@"
tRp7068
sa(dp7069
S'trial_loop.thisTrialN'
p7070
I46
sg6371
g6983
sS'block_loop.thisIndex'
p7071
g6365
sg38
S'left'
p7072
sg59
g63
sS'trial_loop.thisN'
p7073
I46
sg33
g6994
sg64
g65
sS'trial_loop.thisIndex'
p7074
g60
(g99
S'.\x00\x00\x00'
tRp7075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7076
I0
sg6380
g6991
sS'block_loop.thisRepN'
p7077
I2
sg6383
g6987
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7078
I2
sg6385
g6994
sg55
g11
sS'block_loop.thisTrial'
p7079
Nsg70
Vn
sS'block_loop.thisTrialN'
p7080
I0
sg39
F0.53335815584978263
sg34
g753
(S'\x07\xdf\x07\x01\x0b\'"\x05~@'
tRp7081
sa(dp7082
S'trial_loop.thisTrialN'
p7083
I47
sg6371
g6858
sS'block_loop.thisIndex'
p7084
g6365
sg38
S'right'
p7085
sg59
g63
sS'trial_loop.thisN'
p7086
I47
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p7087
g60
(g99
S'/\x00\x00\x00'
tRp7088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7089
I0
sg6380
g6865
sS'block_loop.thisRepN'
p7090
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7091
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7092
Nsg70
Vn
sS'block_loop.thisTrialN'
p7093
I0
sg39
F0.86651007193540863
sg34
g753
(S"\x07\xdf\x07\x01\x0b''\r\xf2P"
tRp7094
sa(dp7095
S'trial_loop.thisTrialN'
p7096
I48
sg6371
g6460
sS'block_loop.thisIndex'
p7097
g6365
sg38
S'left'
p7098
sg59
g63
sS'trial_loop.thisN'
p7099
I48
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7100
g60
(g99
S'0\x00\x00\x00'
tRp7101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7102
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7103
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7104
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7105
Nsg70
Vn
sS'block_loop.thisTrialN'
p7106
I0
sg39
F0.66671180715638911
sg34
g753
(S"\x07\xdf\x07\x01\x0b'-\x0c\x9a\x90"
tRp7107
sa(dp7108
S'trial_loop.thisTrialN'
p7109
I49
sg6371
g6372
sS'block_loop.thisIndex'
p7110
g6365
sg38
S'left'
p7111
sg59
g63
sS'trial_loop.thisN'
p7112
I49
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p7113
g60
(g99
S'1\x00\x00\x00'
tRp7114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7115
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7116
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7117
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7118
Nsg70
Vn
sS'block_loop.thisTrialN'
p7119
I0
sg39
F0.73331293933551933
sg34
g753
(S"\x07\xdf\x07\x01\x0b'3\x07\xef@"
tRp7120
sa(dp7121
S'trial_loop.thisTrialN'
p7122
I50
sg6371
g6562
sS'block_loop.thisIndex'
p7123
g6365
sg38
S'left'
p7124
sg59
g63
sS'trial_loop.thisN'
p7125
I50
sg33
g6573
sg64
g65
sS'trial_loop.thisIndex'
p7126
g60
(g99
S'2\x00\x00\x00'
tRp7127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7128
I0
sg6380
g6570
sS'block_loop.thisRepN'
p7129
I2
sg6383
g6566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7130
I2
sg6385
g6573
sg55
g11
sS'block_loop.thisTrial'
p7131
Nsg70
Vn
sS'block_loop.thisTrialN'
p7132
I0
sg39
F0.60039976416737773
sg34
g753
(S"\x07\xdf\x07\x01\x0b'9\x04t\xa0"
tRp7133
sa(dp7134
S'trial_loop.thisTrialN'
p7135
I51
sg6371
S'10-bounty_redo.png'
p7136
sS'block_loop.thisIndex'
p7137
g6365
sg38
S'left'
p7138
sg59
g63
sS'trial_loop.thisN'
p7139
I51
sg33
g6549
sg64
g65
sS'trial_loop.thisIndex'
p7140
g60
(g99
S'3\x00\x00\x00'
tRp7141
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7142
I0
sg6380
S'4-corn.png'
p7143
sS'block_loop.thisRepN'
p7144
I2
sg6383
g6549
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7145
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p7146
Nsg70
Vn
sS'block_loop.thisTrialN'
p7147
I0
sg39
F0.56657917964912485
sg34
g753
(S'\x07\xdf\x07\x01\x0b(\x02\x0e\x19`'
tRp7148
sa(dp7149
S'trial_loop.thisTrialN'
p7150
I52
sg6371
S'18-mms.png'
p7151
sS'block_loop.thisIndex'
p7152
g6365
sg38
S'left'
p7153
sg59
g63
sS'trial_loop.thisN'
p7154
I52
sg33
g6515
sg64
g65
sS'trial_loop.thisIndex'
p7155
g60
(g99
S'4\x00\x00\x00'
tRp7156
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7157
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p7158
sS'block_loop.thisRepN'
p7159
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7160
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p7161
Nsg70
Vn
sS'block_loop.thisTrialN'
p7162
I0
sg39
F0.61669994708609011
sg34
g753
(S'\x07\xdf\x07\x01\x0b(\x08\x08\x02\xc8'
tRp7163
sa(dp7164
S'trial_loop.thisTrialN'
p7165
I53
sg6371
S'42-mrkipling_lemon_slices.png'
p7166
sS'block_loop.thisIndex'
p7167
g6365
sg38
S'right'
p7168
sg59
g63
sS'trial_loop.thisN'
p7169
I53
sg33
g6664
sg64
g65
sS'trial_loop.thisIndex'
p7170
g60
(g99
S'5\x00\x00\x00'
tRp7171
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7172
I0
sg6380
S'16-skips_prawn.png'
p7173
sS'block_loop.thisRepN'
p7174
I2
sg6383
g6664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7175
I2
sg6385
g6671
sg55
g11
sS'block_loop.thisTrial'
p7176
Nsg70
Vn
sS'block_loop.thisTrialN'
p7177
I0
sg39
F0.96646593879268039
sg34
g753
(S'\x07\xdf\x07\x01\x0b(\x0e\x02\x9f\xe0'
tRp7178
sa(dp7179
S'trial_loop.thisTrialN'
p7180
I54
sg6371
g6409
sS'block_loop.thisIndex'
p7181
g6365
sg38
S'left'
p7182
sg59
g63
sS'trial_loop.thisN'
p7183
I54
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7184
g60
(g99
S'6\x00\x00\x00'
tRp7185
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7186
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7187
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7188
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7189
Nsg70
Vn
sS'block_loop.thisTrialN'
p7190
I0
sg39
F0.69994794113881653
sg34
g753
(S'\x07\xdf\x07\x01\x0b(\x14\x02\xb7P'
tRp7191
sa(dp7192
S'trial_loop.thisTrialN'
p7193
I55
sg6371
S'41-peanuts_redo.png'
p7194
sS'block_loop.thisIndex'
p7195
g6365
sg38
S'right'
p7196
sg59
g63
sS'trial_loop.thisN'
p7197
I55
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7198
g60
(g99
S'7\x00\x00\x00'
tRp7199
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7200
I0
sg6380
S'45-chewy_nougat_redo.png'
p7201
sS'block_loop.thisRepN'
p7202
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7203
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7204
Nsg70
Vn
sS'block_loop.thisTrialN'
p7205
I0
sg39
F0.70000068423541961
sg34
g753
(S'\x07\xdf\x07\x01\x0b(\x19\r\xc7X'
tRp7206
sa(dp7207
S'trial_loop.thisTrialN'
p7208
I56
sg6371
S'6-sour_patch_kids.png'
p7209
sS'block_loop.thisIndex'
p7210
g6365
sg38
S'right'
p7211
sg59
g63
sS'trial_loop.thisN'
p7212
I56
sg33
g6630
sg64
g65
sS'trial_loop.thisIndex'
p7213
g60
(g99
S'8\x00\x00\x00'
tRp7214
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7215
I0
sg6380
S'38-maltesers.png'
p7216
sS'block_loop.thisRepN'
p7217
I2
sg6383
g6630
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7218
I2
sg6385
g6637
sg55
g11
sS'block_loop.thisTrial'
p7219
Nsg70
Vn
sS'block_loop.thisTrialN'
p7220
I0
sg39
F0.85007275696443685
sg34
g753
(S'\x07\xdf\x07\x01\x0b(\x1f\t\xd3\xa0'
tRp7221
sa(dp7222
S'trial_loop.thisTrialN'
p7223
I57
sg6371
g6460
sS'block_loop.thisIndex'
p7224
g6365
sg38
S'left'
p7225
sg59
g63
sS'trial_loop.thisN'
p7226
I57
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7227
g60
(g99
S'9\x00\x00\x00'
tRp7228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7229
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7230
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7231
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7232
Nsg70
Vn
sS'block_loop.thisTrialN'
p7233
I0
sg39
F0.63333626033818291
sg34
g753
(S'\x07\xdf\x07\x01\x0b(%\x08\x02\xc8'
tRp7234
sa(dp7235
S'trial_loop.thisTrialN'
p7236
I58
sg6371
g6804
sS'block_loop.thisIndex'
p7237
g6365
sg38
S'left'
p7238
sg59
g63
sS'trial_loop.thisN'
p7239
I58
sg33
g6758
sg64
g65
sS'trial_loop.thisIndex'
p7240
g60
(g99
S':\x00\x00\x00'
tRp7241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7242
I0
sg6380
g6811
sS'block_loop.thisRepN'
p7243
I2
sg6383
g6758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7244
I2
sg6385
g6752
sg55
g11
sS'block_loop.thisTrial'
p7245
Nsg70
Vn
sS'block_loop.thisTrialN'
p7246
I0
sg39
F0.60003284326921857
sg34
g753
(S'\x07\xdf\x07\x01\x0b(+\x02\xde`'
tRp7247
sa(dp7248
S'trial_loop.thisTrialN'
p7249
I59
sg6371
S'27-hartleys_raspberries_jelly.png'
p7250
sS'block_loop.thisIndex'
p7251
g6365
sg38
S'right'
p7252
sg59
g63
sS'trial_loop.thisN'
p7253
I59
sg33
g6566
sg64
g65
sS'trial_loop.thisIndex'
p7254
g60
(g99
S';\x00\x00\x00'
tRp7255
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7256
I0
sg6380
S'51-mars.png'
p7257
sS'block_loop.thisRepN'
p7258
I2
sg6383
g6566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7259
I2
sg6385
g6573
sg55
g11
sS'block_loop.thisTrial'
p7260
Nsg70
Vn
sS'block_loop.thisTrialN'
p7261
I0
sg39
F1.0999829511511052
sg34
g753
(S'\x07\xdf\x07\x01\x0b(0\x0c\x7f8'
tRp7262
sa(dp7263
S'trial_loop.thisTrialN'
p7264
I60
sg6371
S'5-pineapple.png'
p7265
sS'block_loop.thisIndex'
p7266
g6365
sg38
S'right'
p7267
sg59
g63
sS'trial_loop.thisN'
p7268
I60
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7269
g60
(g99
S'<\x00\x00\x00'
tRp7270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7271
I0
sg6380
S'40-sardines.png'
p7272
sS'block_loop.thisRepN'
p7273
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7274
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7275
Nsg70
Vn
sS'block_loop.thisTrialN'
p7276
I0
sg39
F1.2500356372293027
sg34
g753
(S'\x07\xdf\x07\x01\x0b(6\x0e~\xf0'
tRp7277
sa(dp7278
S'trial_loop.thisTrialN'
p7279
I61
sg6371
g6927
sS'block_loop.thisIndex'
p7280
g6365
sg38
S'right'
p7281
sg59
g63
sS'trial_loop.thisN'
p7282
I61
sg33
g6931
sg64
g65
sS'trial_loop.thisIndex'
p7283
g60
(g99
S'=\x00\x00\x00'
tRp7284
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7285
I0
sg6380
g6935
sS'block_loop.thisRepN'
p7286
I2
sg6383
g6931
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7287
I2
sg6385
g6938
sg55
g11
sS'block_loop.thisTrial'
p7288
Nsg70
Vn
sS'block_loop.thisTrialN'
p7289
I0
sg39
F0.68332787846156862
sg34
g753
(S'\x07\xdf\x07\x01\x0b)\x01\x03\x9d\xc8'
tRp7290
sa(dp7291
S'trial_loop.thisTrialN'
p7292
I62
sg6371
g6545
sS'block_loop.thisIndex'
p7293
g6365
sg38
S'right'
p7294
sg59
g63
sS'trial_loop.thisN'
p7295
I62
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p7296
g60
(g99
S'>\x00\x00\x00'
tRp7297
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7298
I0
sg6380
g6553
sS'block_loop.thisRepN'
p7299
I2
sg6383
g6549
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7300
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p7301
Nsg70
Vn
sS'block_loop.thisTrialN'
p7302
I0
sg39
F0.58380678578396328
sg34
g753
(S'\x07\xdf\x07\x01\x0b)\x06\x0es8'
tRp7303
sa(dp7304
S'trial_loop.thisTrialN'
p7305
I63
sg6371
g6392
sS'block_loop.thisIndex'
p7306
g6365
sg38
S'left'
p7307
sg59
g63
sS'trial_loop.thisN'
p7308
I63
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p7309
g60
(g99
S'?\x00\x00\x00'
tRp7310
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7311
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7312
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7313
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7314
Nsg70
Vn
sS'block_loop.thisTrialN'
p7315
I0
sg39
F1.4666261637703428
sg34
g753
(S'\x07\xdf\x07\x01\x0b)\x0c\x08\x978'
tRp7316
sa(dp7317
S'trial_loop.thisTrialN'
p7318
I64
sg6371
g6372
sS'block_loop.thisIndex'
p7319
g6365
sg38
S'left'
p7320
sg59
g63
sS'trial_loop.thisN'
p7321
I64
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7322
g60
(g99
S'@\x00\x00\x00'
tRp7323
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7324
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7325
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7326
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7327
Nsg70
Vn
sS'block_loop.thisTrialN'
p7328
I0
sg39
F0.98335627420601668
sg34
g753
(S'\x07\xdf\x07\x01\x0b)\x13\x01\t\xa0'
tRp7329
sa(dp7330
S'trial_loop.thisTrialN'
p7331
I65
sg6371
g7030
sS'block_loop.thisIndex'
p7332
g6365
sg38
S'right'
p7333
sg59
g63
sS'trial_loop.thisN'
p7334
I65
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p7335
g60
(g99
S'A\x00\x00\x00'
tRp7336
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7337
I0
sg6380
g7037
sS'block_loop.thisRepN'
p7338
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7339
I2
sg6385
g6539
sg55
g11
sS'block_loop.thisTrial'
p7340
Nsg70
Vn
sS'block_loop.thisTrialN'
p7341
I0
sg39
F0.66665592798199214
sg34
g753
(S'\x07\xdf\x07\x01\x0b)\x19\x01[\xa8'
tRp7342
sa(dp7343
S'trial_loop.thisTrialN'
p7344
I66
sg6371
g6477
sS'block_loop.thisIndex'
p7345
g6365
sg38
S'left'
p7346
sg59
g63
sS'trial_loop.thisN'
p7347
I66
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p7348
g60
(g99
S'B\x00\x00\x00'
tRp7349
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7350
I0
sg6380
g6485
sS'block_loop.thisRepN'
p7351
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7352
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p7353
Nsg70
Vn
sS'block_loop.thisTrialN'
p7354
I0
sg39
F0.86666316946684674
sg34
g753
(S'\x07\xdf\x07\x01\x0b)\x1e\x0b\xf2\x98'
tRp7355
sa(dp7356
S'trial_loop.thisTrialN'
p7357
I67
sg6371
g6511
sS'block_loop.thisIndex'
p7358
g6365
sg38
S'right'
p7359
sg59
g63
sS'trial_loop.thisN'
p7360
I67
sg33
g6515
sg64
g65
sS'trial_loop.thisIndex'
p7361
g60
(g99
S'C\x00\x00\x00'
tRp7362
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7363
I0
sg6380
g6519
sS'block_loop.thisRepN'
p7364
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7365
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p7366
Nsg70
Vn
sS'block_loop.thisTrialN'
p7367
I0
sg39
F1.0833534802459326
sg34
g753
(S'\x07\xdf\x07\x01\x0b)$\n`@'
tRp7368
sa(dp7369
S'trial_loop.thisTrialN'
p7370
I68
sg6371
g6545
sS'block_loop.thisIndex'
p7371
g6365
sg38
S'right'
p7372
sg59
g63
sS'trial_loop.thisN'
p7373
I68
sg33
g6549
sg64
g65
sS'trial_loop.thisIndex'
p7374
g60
(g99
S'D\x00\x00\x00'
tRp7375
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7376
I0
sg6380
g6553
sS'block_loop.thisRepN'
p7377
I2
sg6383
g6549
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7378
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p7379
Nsg70
Vn
sS'block_loop.thisTrialN'
p7380
I0
sg39
F0.79996168285288149
sg34
g753
(S'\x07\xdf\x07\x01\x0b)*\x0c!x'
tRp7381
sa(dp7382
S'trial_loop.thisTrialN'
p7383
I69
sg6371
g6494
sS'block_loop.thisIndex'
p7384
g6365
sg38
S'right'
p7385
sg59
g63
sS'trial_loop.thisN'
p7386
I69
sg33
g6498
sg64
g65
sS'trial_loop.thisIndex'
p7387
g60
(g99
S'E\x00\x00\x00'
tRp7388
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7389
I0
sg6380
g6502
sS'block_loop.thisRepN'
p7390
I2
sg6383
g6498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7391
I2
sg6385
g6505
sg55
g11
sS'block_loop.thisTrial'
p7392
Nsg70
Vn
sS'block_loop.thisTrialN'
p7393
I0
sg39
F0.58332497046467324
sg34
g753
(S'\x07\xdf\x07\x01\x0b)0\t\x9c\xf0'
tRp7394
sa(dp7395
S'trial_loop.thisTrialN'
p7396
I70
sg6371
g6528
sS'block_loop.thisIndex'
p7397
g6365
sg38
S'left'
p7398
sg59
g63
sS'trial_loop.thisN'
p7399
I70
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p7400
g60
(g99
S'F\x00\x00\x00'
tRp7401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7402
I0
sg6380
g6536
sS'block_loop.thisRepN'
p7403
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7404
I2
sg6385
g6539
sg55
g11
sS'block_loop.thisTrial'
p7405
Nsg70
Vn
sS'block_loop.thisTrialN'
p7406
I0
sg39
F0.74998717059861519
sg34
g753
(S'\x07\xdf\x07\x01\x0b)6\x03\xc0\xf0'
tRp7407
sa(dp7408
S'trial_loop.thisTrialN'
p7409
I71
sg6371
g6596
sS'block_loop.thisIndex'
p7410
g6365
sg38
S'right'
p7411
sg59
g63
sS'trial_loop.thisN'
p7412
I71
sg33
g6600
sg64
g65
sS'trial_loop.thisIndex'
p7413
g60
(g99
S'G\x00\x00\x00'
tRp7414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7415
I0
sg6380
g6604
sS'block_loop.thisRepN'
p7416
I2
sg6383
g6600
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7417
I2
sg6385
g6607
sg55
g11
sS'block_loop.thisTrial'
p7418
Nsg70
Vn
sS'block_loop.thisTrialN'
p7419
I0
sg39
F2.0664859526586952
sg34
g753
(S'\x07\xdf\x07\x01\x0b*\x00\x00\x84\xd0'
tRp7420
sa(dp7421
S'trial_loop.thisTrialN'
p7422
I72
sg6371
g6983
sS'block_loop.thisIndex'
p7423
g6365
sg38
S'left'
p7424
sg59
g63
sS'trial_loop.thisN'
p7425
I72
sg33
g6987
sg64
g65
sS'trial_loop.thisIndex'
p7426
g60
(g99
S'H\x00\x00\x00'
tRp7427
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7428
I0
sg6380
g6991
sS'block_loop.thisRepN'
p7429
I2
sg6383
g6987
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7430
I2
sg6385
g6994
sg55
g11
sS'block_loop.thisTrial'
p7431
Nsg70
Vn
sS'block_loop.thisTrialN'
p7432
I0
sg39
F1.183739559717651
sg34
g753
(S'\x07\xdf\x07\x01\x0b*\x07\x02\x03\xa0'
tRp7433
sa(dp7434
S'trial_loop.thisTrialN'
p7435
I73
sg6371
g6562
sS'block_loop.thisIndex'
p7436
g6365
sg38
S'left'
p7437
sg59
g63
sS'trial_loop.thisN'
p7438
I73
sg33
g6566
sg64
g65
sS'trial_loop.thisIndex'
p7439
g60
(g99
S'I\x00\x00\x00'
tRp7440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7441
I0
sg6380
g6570
sS'block_loop.thisRepN'
p7442
I2
sg6383
g6566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7443
I2
sg6385
g6573
sg55
g11
sS'block_loop.thisTrial'
p7444
Nsg70
Vn
sS'block_loop.thisTrialN'
p7445
I0
sg39
F0.61674356705407263
sg34
g753
(S'\x07\xdf\x07\x01\x0b*\r\x05n\xa0'
tRp7446
sa(dp7447
S'trial_loop.thisTrialN'
p7448
I74
sg6371
g6660
sS'block_loop.thisIndex'
p7449
g6365
sg38
S'left'
p7450
sg59
g63
sS'trial_loop.thisN'
p7451
I74
sg33
g6664
sg64
g65
sS'trial_loop.thisIndex'
p7452
g60
(g99
S'J\x00\x00\x00'
tRp7453
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7454
I0
sg6380
g6668
sS'block_loop.thisRepN'
p7455
I2
sg6383
g6664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7456
I2
sg6385
g6671
sg55
g11
sS'block_loop.thisTrial'
p7457
Nsg70
Vn
sS'block_loop.thisTrialN'
p7458
I0
sg39
F0.93320984796264383
sg34
g753
(S'\x07\xdf\x07\x01\x0b*\x13\x00\x0b\xb8'
tRp7459
sa(dp7460
S'trial_loop.thisTrialN'
p7461
I75
sg6371
g7209
sS'block_loop.thisIndex'
p7462
g6365
sg38
S'right'
p7463
sg59
g63
sS'trial_loop.thisN'
p7464
I75
sg33
g6630
sg64
g65
sS'trial_loop.thisIndex'
p7465
g60
(g99
S'K\x00\x00\x00'
tRp7466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7467
I0
sg6380
g7216
sS'block_loop.thisRepN'
p7468
I2
sg6383
g6630
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7469
I2
sg6385
g6637
sg55
g11
sS'block_loop.thisTrial'
p7470
Nsg70
Vn
sS'block_loop.thisTrialN'
p7471
I0
sg39
F0.86629140190598264
sg34
g753
(S'\x07\xdf\x07\x01\x0b*\x18\x0e\xad\xd0'
tRp7472
sa(dp7473
S'trial_loop.thisTrialN'
p7474
I76
sg6371
S'35-raisins.png'
p7475
sS'block_loop.thisIndex'
p7476
g6365
sg38
S'right'
p7477
sg59
g63
sS'trial_loop.thisN'
p7478
I76
sg33
g6994
sg64
g65
sS'trial_loop.thisIndex'
p7479
g60
(g99
S'L\x00\x00\x00'
tRp7480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7481
I0
sg6380
S'49-yorkie.png'
p7482
sS'block_loop.thisRepN'
p7483
I2
sg6383
g6987
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7484
I2
sg6385
g6994
sg55
g11
sS'block_loop.thisTrial'
p7485
Nsg70
Vn
sS'block_loop.thisTrialN'
p7486
I0
sg39
F0.64992724303556315
sg34
g753
(S'\x07\xdf\x07\x01\x0b*\x1e\rY\xf8'
tRp7487
sa(dp7488
S'trial_loop.thisTrialN'
p7489
I77
sg6371
S'21-nakd_banana_crunch.png'
p7490
sS'block_loop.thisIndex'
p7491
g6365
sg38
S'left'
p7492
sg59
g63
sS'trial_loop.thisN'
p7493
I77
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7494
g60
(g99
S'M\x00\x00\x00'
tRp7495
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7496
I0
sg6380
S'1-treacle_cookies.png'
p7497
sS'block_loop.thisRepN'
p7498
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7499
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7500
Nsg70
Vn
sS'block_loop.thisTrialN'
p7501
I0
sg39
F2.0666424713654123
sg34
g753
(S'\x07\xdf\x07\x01\x0b*$\x08p('
tRp7502
sa(dp7503
S'trial_loop.thisTrialN'
p7504
I78
sg6371
g6372
sS'block_loop.thisIndex'
p7505
g6365
sg38
S'left'
p7506
sg59
g63
sS'trial_loop.thisN'
p7507
I78
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7508
g60
(g99
S'N\x00\x00\x00'
tRp7509
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7510
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7511
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7512
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7513
Nsg70
Vn
sS'block_loop.thisTrialN'
p7514
I0
sg39
F0.6666006190043845
sg34
g753
(S'\x07\xdf\x07\x01\x0b*+\t\xee\xf8'
tRp7515
sa(dp7516
S'trial_loop.thisTrialN'
p7517
I79
sg6371
g6720
sS'block_loop.thisIndex'
p7518
g6365
sg38
S'right'
p7519
sg59
g63
sS'trial_loop.thisN'
p7520
I79
sg33
g6488
sg64
g65
sS'trial_loop.thisIndex'
p7521
g60
(g99
S'O\x00\x00\x00'
tRp7522
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7523
I0
sg6380
g6727
sS'block_loop.thisRepN'
p7524
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7525
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p7526
Nsg70
Vn
sS'block_loop.thisTrialN'
p7527
I0
sg39
F0.53334931781864725
sg34
g753
(S'\x07\xdf\x07\x01\x0b*1\x05C\xa8'
tRp7528
sa(dp7529
S'trial_loop.thisTrialN'
p7530
I80
sg6371
g6579
sS'block_loop.thisIndex'
p7531
g6365
sg38
S'left'
p7532
sg59
g63
sS'trial_loop.thisN'
p7533
I80
sg33
g6583
sg64
g65
sS'trial_loop.thisIndex'
p7534
g60
(g99
S'P\x00\x00\x00'
tRp7535
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7536
I0
sg6380
g6587
sS'block_loop.thisRepN'
p7537
I2
sg6383
g6583
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7538
I2
sg6385
g6590
sg55
g11
sS'block_loop.thisTrial'
p7539
Nsg70
Vn
sS'block_loop.thisTrialN'
p7540
I0
sg39
F0.81664674783132796
sg34
g753
(S'\x07\xdf\x07\x01\x0b*6\r\xf2P'
tRp7541
sa(dp7542
S'trial_loop.thisTrialN'
p7543
I81
sg6371
g6720
sS'block_loop.thisIndex'
p7544
g6365
sg38
S'right'
p7545
sg59
g63
sS'trial_loop.thisN'
p7546
I81
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p7547
g60
(g99
S'Q\x00\x00\x00'
tRp7548
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7549
I0
sg6380
g6727
sS'block_loop.thisRepN'
p7550
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7551
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p7552
Nsg70
Vn
sS'block_loop.thisTrialN'
p7553
I0
sg39
F1.0499174926917476
sg34
g753
(S'\x07\xdf\x07\x01\x0b+\x00\x0b\xa8`'
tRp7554
sa(dp7555
S'trial_loop.thisTrialN'
p7556
I82
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p7557
sS'block_loop.thisIndex'
p7558
g6365
sg38
S'left'
p7559
sg59
g63
sS'trial_loop.thisN'
p7560
I82
sg33
g6600
sg64
g65
sS'trial_loop.thisIndex'
p7561
g60
(g99
S'R\x00\x00\x00'
tRp7562
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7563
I0
sg6380
S'36-fig_rolls.png'
p7564
sS'block_loop.thisRepN'
p7565
I2
sg6383
g6600
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7566
I2
sg6385
g6607
sg55
g11
sS'block_loop.thisTrial'
p7567
Nsg70
Vn
sS'block_loop.thisTrialN'
p7568
I0
sg39
F0.71668261313789117
sg34
g753
(S'\x07\xdf\x07\x01\x0b+\x06\x0c\xf0\x80'
tRp7569
sa(dp7570
S'trial_loop.thisTrialN'
p7571
I83
sg6371
g7209
sS'block_loop.thisIndex'
p7572
g6365
sg38
S'right'
p7573
sg59
g63
sS'trial_loop.thisN'
p7574
I83
sg33
g6630
sg64
g65
sS'trial_loop.thisIndex'
p7575
g60
(g99
S'S\x00\x00\x00'
tRp7576
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7577
I0
sg6380
g7216
sS'block_loop.thisRepN'
p7578
I2
sg6383
g6630
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7579
I2
sg6385
g6637
sg55
g11
sS'block_loop.thisTrial'
p7580
Nsg70
Vn
sS'block_loop.thisTrialN'
p7581
I0
sg39
F0.61679345917036699
sg34
g753
(S'\x07\xdf\x07\x01\x0b+\x0c\t;H'
tRp7582
sa(dp7583
S'trial_loop.thisTrialN'
p7584
I84
sg6371
g6748
sS'block_loop.thisIndex'
p7585
g6365
sg38
S'right'
p7586
sg59
g63
sS'trial_loop.thisN'
p7587
I84
sg33
g6758
sg64
g65
sS'trial_loop.thisIndex'
p7588
g60
(g99
S'T\x00\x00\x00'
tRp7589
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7590
I0
sg6380
g6756
sS'block_loop.thisRepN'
p7591
I2
sg6383
g6758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7592
I2
sg6385
g6752
sg55
g11
sS'block_loop.thisTrial'
p7593
Nsg70
Vn
sS'block_loop.thisTrialN'
p7594
I0
sg39
F0.60000091231268016
sg34
g753
(S'\x07\xdf\x07\x01\x0b+\x12\x03\xd8`'
tRp7595
sa(dp7596
S'trial_loop.thisTrialN'
p7597
I85
sg6371
g7475
sS'block_loop.thisIndex'
p7598
g6365
sg38
S'right'
p7599
sg59
g63
sS'trial_loop.thisN'
p7600
I85
sg33
g6987
sg64
g65
sS'trial_loop.thisIndex'
p7601
g60
(g99
S'U\x00\x00\x00'
tRp7602
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7603
I0
sg6380
g7482
sS'block_loop.thisRepN'
p7604
I2
sg6383
g6987
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7605
I2
sg6385
g6994
sg55
g11
sS'block_loop.thisTrial'
p7606
Nsg70
Vn
sS'block_loop.thisTrialN'
p7607
I0
sg39
F0.64986737249273574
sg34
g753
(S'\x07\xdf\x07\x01\x0b+\x17\r} '
tRp7608
sa(dp7609
S'trial_loop.thisTrialN'
p7610
I86
sg6371
g6579
sS'block_loop.thisIndex'
p7611
g6365
sg38
S'left'
p7612
sg59
g63
sS'trial_loop.thisN'
p7613
I86
sg33
g6583
sg64
g65
sS'trial_loop.thisIndex'
p7614
g60
(g99
S'V\x00\x00\x00'
tRp7615
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7616
I0
sg6380
g6587
sS'block_loop.thisRepN'
p7617
I2
sg6383
g6583
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7618
I2
sg6385
g6590
sg55
g11
sS'block_loop.thisTrial'
p7619
Nsg70
Vn
sS'block_loop.thisTrialN'
p7620
I0
sg39
F0.76659668465435971
sg34
g753
(S'\x07\xdf\x07\x01\x0b+\x1d\x08\x93P'
tRp7621
sa(dp7622
S'trial_loop.thisTrialN'
p7623
I87
sg6371
g7136
sS'block_loop.thisIndex'
p7624
g6365
sg38
S'left'
p7625
sg59
g63
sS'trial_loop.thisN'
p7626
I87
sg33
g6549
sg64
g65
sS'trial_loop.thisIndex'
p7627
g60
(g99
S'W\x00\x00\x00'
tRp7628
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7629
I0
sg6380
g7143
sS'block_loop.thisRepN'
p7630
I2
sg6383
g6549
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7631
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p7632
Nsg70
Vn
sS'block_loop.thisTrialN'
p7633
I0
sg39
F0.64992524735134793
sg34
g753
(S'\x07\xdf\x07\x01\x0b+#\x05\x91\xc8'
tRp7634
sa(dp7635
S'trial_loop.thisTrialN'
p7636
I88
sg6371
g6494
sS'block_loop.thisIndex'
p7637
g6365
sg38
S'right'
p7638
sg59
g63
sS'trial_loop.thisN'
p7639
I88
sg33
g6498
sg64
g65
sS'trial_loop.thisIndex'
p7640
g60
(g99
S'X\x00\x00\x00'
tRp7641
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7642
I0
sg6380
g6502
sS'block_loop.thisRepN'
p7643
I2
sg6383
g6498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7644
I2
sg6385
g6505
sg55
g11
sS'block_loop.thisTrial'
p7645
Nsg70
Vn
sS'block_loop.thisTrialN'
p7646
I0
sg39
F0.70000866697409947
sg34
g753
(S'\x07\xdf\x07\x01\x0b+)\x00\xe6x'
tRp7647
sa(dp7648
S'trial_loop.thisTrialN'
p7649
I89
sg6371
g6748
sS'block_loop.thisIndex'
p7650
g6365
sg38
S'right'
p7651
sg59
g63
sS'trial_loop.thisN'
p7652
I89
sg33
g6758
sg64
g65
sS'trial_loop.thisIndex'
p7653
g60
(g99
S'Y\x00\x00\x00'
tRp7654
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7655
I0
sg6380
g6756
sS'block_loop.thisRepN'
p7656
I2
sg6383
g6758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7657
I2
sg6385
g6752
sg55
g11
sS'block_loop.thisTrial'
p7658
Nsg70
Vn
sS'block_loop.thisTrialN'
p7659
I0
sg39
F0.5669141695889266
sg34
g753
(S'\x07\xdf\x07\x01\x0b+.\x0b\xf6\x80'
tRp7660
sa(dp7661
S'trial_loop.thisTrialN'
p7662
I90
sg6371
g6927
sS'block_loop.thisIndex'
p7663
g6365
sg38
S'right'
p7664
sg59
g63
sS'trial_loop.thisN'
p7665
I90
sg33
g6931
sg64
g65
sS'trial_loop.thisIndex'
p7666
g60
(g99
S'Z\x00\x00\x00'
tRp7667
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7668
I0
sg6380
g6935
sS'block_loop.thisRepN'
p7669
I2
sg6383
g6931
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7670
I2
sg6385
g6938
sg55
g11
sS'block_loop.thisTrial'
p7671
Nsg70
Vn
sS'block_loop.thisTrialN'
p7672
I0
sg39
F0.78334047978569288
sg34
g753
(S'\x07\xdf\x07\x01\x0b+4\x05\xdf\xe8'
tRp7673
sa(dp7674
S'trial_loop.thisTrialN'
p7675
I91
sg6371
g7166
sS'block_loop.thisIndex'
p7676
g6365
sg38
S'right'
p7677
sg59
g63
sS'trial_loop.thisN'
p7678
I91
sg33
g6664
sg64
g65
sS'trial_loop.thisIndex'
p7679
g60
(g99
S'[\x00\x00\x00'
tRp7680
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7681
I0
sg6380
g7173
sS'block_loop.thisRepN'
p7682
I2
sg6383
g6664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7683
I2
sg6385
g6671
sg55
g11
sS'block_loop.thisTrial'
p7684
Nsg70
Vn
sS'block_loop.thisTrialN'
p7685
I0
sg39
F0.66655329276727571
sg34
g753
(S'\x07\xdf\x07\x01\x0b+:\x03\x1c\xe0'
tRp7686
sa(dp7687
S'trial_loop.thisTrialN'
p7688
I92
sg6371
g6426
sS'block_loop.thisIndex'
p7689
g6365
sg38
S'right'
p7690
sg59
g63
sS'trial_loop.thisN'
p7691
I92
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7692
g60
(g99
S'\\\x00\x00\x00'
tRp7693
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7694
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7695
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7696
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7697
Nsg70
Vn
sS'block_loop.thisTrialN'
p7698
I0
sg39
F0.90001362767543469
sg34
g753
(S'\x07\xdf\x07\x01\x0b,\x03\r\xb3\xd0'
tRp7699
sa(dp7700
S'trial_loop.thisTrialN'
p7701
I93
sg6371
g7475
sS'block_loop.thisIndex'
p7702
g6365
sg38
S'right'
p7703
sg59
g63
sS'trial_loop.thisN'
p7704
I93
sg33
g6987
sg64
g65
sS'trial_loop.thisIndex'
p7705
g60
(g99
S']\x00\x00\x00'
tRp7706
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7707
I0
sg6380
g7482
sS'block_loop.thisRepN'
p7708
I2
sg6383
g6987
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7709
I2
sg6385
g6994
sg55
g11
sS'block_loop.thisTrial'
p7710
Nsg70
Vn
sS'block_loop.thisTrialN'
p7711
I0
sg39
F0.71658197360557097
sg34
g753
(S'\x07\xdf\x07\x01\x0b,\t\x0c\xd5('
tRp7712
sa(dp7713
S'trial_loop.thisTrialN'
p7714
I94
sg6371
S'44-crunch.png'
p7715
sS'block_loop.thisIndex'
p7716
g6365
sg38
S'right'
p7717
sg59
g63
sS'trial_loop.thisN'
p7718
I94
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p7719
g60
(g99
S'^\x00\x00\x00'
tRp7720
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7721
I0
sg6380
S'26-walkers_smoky_bacon.png'
p7722
sS'block_loop.thisRepN'
p7723
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7724
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p7725
Nsg70
Vn
sS'block_loop.thisTrialN'
p7726
I0
sg39
F0.69992997997542261
sg34
g753
(S'\x07\xdf\x07\x01\x0b,\x0f\x08\xe1p'
tRp7727
sa(dp7728
S'trial_loop.thisTrialN'
p7729
I95
sg6371
g6643
sS'block_loop.thisIndex'
p7730
g6365
sg38
S'left'
p7731
sg59
g63
sS'trial_loop.thisN'
p7732
I95
sg33
g6647
sg64
g65
sS'trial_loop.thisIndex'
p7733
g60
(g99
S'_\x00\x00\x00'
tRp7734
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7735
I0
sg6380
g6651
sS'block_loop.thisRepN'
p7736
I2
sg6383
g6647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7737
I2
sg6385
g6654
sg55
g11
sS'block_loop.thisTrial'
p7738
Nsg70
Vn
sS'block_loop.thisTrialN'
p7739
I0
sg39
F1.5502884049583372
sg34
g753
(S'\x07\xdf\x07\x01\x0b,\x15\x04\xed\xb8'
tRp7740
sa(dp7741
S'trial_loop.thisTrialN'
p7742
I96
sg6371
g7000
sS'block_loop.thisIndex'
p7743
g6365
sg38
S'left'
p7744
sg59
g63
sS'trial_loop.thisN'
p7745
I96
sg33
g6931
sg64
g65
sS'trial_loop.thisIndex'
p7746
g60
(g99
S'`\x00\x00\x00'
tRp7747
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7748
I0
sg6380
g7007
sS'block_loop.thisRepN'
p7749
I2
sg6383
g6931
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7750
I2
sg6385
g6938
sg55
g11
sS'block_loop.thisTrial'
p7751
Nsg70
Vn
sS'block_loop.thisTrialN'
p7752
I0
sg39
F0.71657969282387057
sg34
g753
(S'\x07\xdf\x07\x01\x0b,\x1b\r\xd3\x10'
tRp7753
sa(dp7754
S'trial_loop.thisTrialN'
p7755
I97
sg6371
g7136
sS'block_loop.thisIndex'
p7756
g6365
sg38
S'left'
p7757
sg59
g63
sS'trial_loop.thisN'
p7758
I97
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p7759
g60
(g99
S'a\x00\x00\x00'
tRp7760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7761
I0
sg6380
g7143
sS'block_loop.thisRepN'
p7762
I2
sg6383
g6549
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7763
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p7764
Nsg70
Vn
sS'block_loop.thisTrialN'
p7765
I0
sg39
F0.61667314788974181
sg34
g753
(S'\x07\xdf\x07\x01\x0b,!\t\xdfX'
tRp7766
sa(dp7767
S'trial_loop.thisTrialN'
p7768
I98
sg6371
g6494
sS'block_loop.thisIndex'
p7769
g6365
sg38
S'right'
p7770
sg59
g63
sS'trial_loop.thisN'
p7771
I98
sg33
g6498
sg64
g65
sS'trial_loop.thisIndex'
p7772
g60
(g99
S'b\x00\x00\x00'
tRp7773
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7774
I0
sg6380
g6502
sS'block_loop.thisRepN'
p7775
I2
sg6383
g6498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7776
I2
sg6385
g6505
sg55
g11
sS'block_loop.thisTrial'
p7777
Nsg70
Vn
sS'block_loop.thisTrialN'
p7778
I0
sg39
F0.58332126419190899
sg34
g753
(S"\x07\xdf\x07\x01\x0b,'\x04|p"
tRp7779
sa(dp7780
S'trial_loop.thisTrialN'
p7781
I99
sg6371
g7557
sS'block_loop.thisIndex'
p7782
g6365
sg38
S'left'
p7783
sg59
g63
sS'trial_loop.thisN'
p7784
I99
sg33
g6600
sg64
g65
sS'trial_loop.thisIndex'
p7785
g60
(g99
S'c\x00\x00\x00'
tRp7786
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7787
I0
sg6380
g7564
sS'block_loop.thisRepN'
p7788
I2
sg6383
g6600
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7789
I2
sg6385
g6607
sg55
g11
sS'block_loop.thisTrial'
p7790
Nsg70
Vn
sS'block_loop.thisTrialN'
p7791
I0
sg39
F0.71661618534562876
sg34
g753
(S'\x07\xdf\x07\x01\x0b,,\x0e!0'
tRp7792
sa(dp7793
S'trial_loop.thisTrialN'
p7794
I100
sg6371
g7166
sS'block_loop.thisIndex'
p7795
g6365
sg38
S'right'
p7796
sg59
g63
sS'trial_loop.thisN'
p7797
I100
sg33
g6664
sg64
g65
sS'trial_loop.thisIndex'
p7798
g60
(g99
S'd\x00\x00\x00'
tRp7799
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7800
I0
sg6380
g7173
sS'block_loop.thisRepN'
p7801
I2
sg6383
g6664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7802
I2
sg6385
g6671
sg55
g11
sS'block_loop.thisTrial'
p7803
Nsg70
Vn
sS'block_loop.thisTrialN'
p7804
I0
sg39
F0.58321378231266863
sg34
g753
(S'\x07\xdf\x07\x01\x0b,2\n-x'
tRp7805
sa(dp7806
S'trial_loop.thisTrialN'
p7807
I101
sg6371
g7490
sS'block_loop.thisIndex'
p7808
g6365
sg38
S'right'
p7809
sg59
g63
sS'trial_loop.thisN'
p7810
I101
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7811
g60
(g99
S'e\x00\x00\x00'
tRp7812
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7813
I0
sg6380
g7497
sS'block_loop.thisRepN'
p7814
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7815
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7816
Nsg70
Vn
sS'block_loop.thisTrialN'
p7817
I0
sg39
F2.4500003991379344
sg34
g753
(S'\x07\xdf\x07\x01\x0b,8\x04Qx'
tRp7818
sa(dp7819
S'trial_loop.thisTrialN'
p7820
I102
sg6371
g7015
sS'block_loop.thisIndex'
p7821
g6365
sg38
S'right'
p7822
sg59
g63
sS'trial_loop.thisN'
p7823
I102
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7824
g60
(g99
S'f\x00\x00\x00'
tRp7825
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7826
I0
sg6380
g7022
sS'block_loop.thisRepN'
p7827
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7828
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7829
Nsg70
Vn
sS'block_loop.thisTrialN'
p7830
I0
sg39
F0.61666516515106196
sg34
g753
(S'\x07\xdf\x07\x01\x0b-\x03\x0b\xc3\xb8'
tRp7831
sa(dp7832
S'trial_loop.thisTrialN'
p7833
I103
sg6371
g6545
sS'block_loop.thisIndex'
p7834
g6365
sg38
S'right'
p7835
sg59
g63
sS'trial_loop.thisN'
p7836
I103
sg33
g6549
sg64
g65
sS'trial_loop.thisIndex'
p7837
g60
(g99
S'g\x00\x00\x00'
tRp7838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7839
I0
sg6380
g6553
sS'block_loop.thisRepN'
p7840
I2
sg6383
g6549
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7841
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p7842
Nsg70
Vn
sS'block_loop.thisTrialN'
p7843
I0
sg39
F1.0000054168576753
sg34
g753
(S'\x07\xdf\x07\x01\x0b-\t\x06`\xd0'
tRp7844
sa(dp7845
S'trial_loop.thisTrialN'
p7846
I104
sg6371
g6562
sS'block_loop.thisIndex'
p7847
g6365
sg38
S'left'
p7848
sg59
g63
sS'trial_loop.thisN'
p7849
I104
sg33
g6566
sg64
g65
sS'trial_loop.thisIndex'
p7850
g60
(g99
S'h\x00\x00\x00'
tRp7851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7852
I0
sg6380
g6570
sS'block_loop.thisRepN'
p7853
I2
sg6383
g6566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7854
I2
sg6385
g6573
sg55
g11
sS'block_loop.thisTrial'
p7855
Nsg70
Vn
sS'block_loop.thisTrialN'
p7856
I0
sg39
F0.90002503158757463
sg34
g753
(S'\x07\xdf\x07\x01\x0b-\x0f\x06\xf1X'
tRp7857
sa(dp7858
S'trial_loop.thisTrialN'
p7859
I105
sg6371
g7265
sS'block_loop.thisIndex'
p7860
g6365
sg38
S'right'
p7861
sg59
g63
sS'trial_loop.thisN'
p7862
I105
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7863
g60
(g99
S'i\x00\x00\x00'
tRp7864
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7865
I0
sg6380
g7272
sS'block_loop.thisRepN'
p7866
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7867
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7868
Nsg70
Vn
sS'block_loop.thisTrialN'
p7869
I0
sg39
F1.099882311618785
sg34
g753
(S'\x07\xdf\x07\x01\x0b-\x15\x05\xd8\x18'
tRp7870
sa(dp7871
S'trial_loop.thisTrialN'
p7872
I106
sg6371
g7136
sS'block_loop.thisIndex'
p7873
g6365
sg38
S'left'
p7874
sg59
g63
sS'trial_loop.thisN'
p7875
I106
sg33
g6549
sg64
g65
sS'trial_loop.thisIndex'
p7876
g60
(g99
S'j\x00\x00\x00'
tRp7877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7878
I0
sg6380
g7143
sS'block_loop.thisRepN'
p7879
I2
sg6383
g6549
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7880
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p7881
Nsg70
Vn
sS'block_loop.thisTrialN'
p7882
I0
sg39
F0.8500068993671448
sg34
g753
(S'\x07\xdf\x07\x01\x0b-\x1b\x07\xd7\xd0'
tRp7883
sa(dp7884
S'trial_loop.thisTrialN'
p7885
I107
sg6371
g7166
sS'block_loop.thisIndex'
p7886
g6365
sg38
S'right'
p7887
sg59
g63
sS'trial_loop.thisN'
p7888
I107
sg33
g6664
sg64
g65
sS'trial_loop.thisIndex'
p7889
g60
(g99
S'k\x00\x00\x00'
tRp7890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7891
I0
sg6380
g7173
sS'block_loop.thisRepN'
p7892
I2
sg6383
g6664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7893
I2
sg6385
g6671
sg55
g11
sS'block_loop.thisTrial'
p7894
Nsg70
Vn
sS'block_loop.thisTrialN'
p7895
I0
sg39
F0.70020196329824103
sg34
g753
(S'\x07\xdf\x07\x01\x0b-!\x06\x06\xf8'
tRp7896
sa(dp7897
S'trial_loop.thisTrialN'
p7898
I108
sg6371
g7151
sS'block_loop.thisIndex'
p7899
g6365
sg38
S'left'
p7900
sg59
g63
sS'trial_loop.thisN'
p7901
I108
sg33
g6515
sg64
g65
sS'trial_loop.thisIndex'
p7902
g60
(g99
S'l\x00\x00\x00'
tRp7903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7904
I0
sg6380
g7158
sS'block_loop.thisRepN'
p7905
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7906
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p7907
Nsg70
Vn
sS'block_loop.thisTrialN'
p7908
I0
sg39
F0.75000513176200911
sg34
g753
(S"\x07\xdf\x07\x01\x0b-'\x02\x13@"
tRp7909
sa(dp7910
S'trial_loop.thisTrialN'
p7911
I109
sg6371
g6643
sS'block_loop.thisIndex'
p7912
g6365
sg38
S'left'
p7913
sg59
g63
sS'trial_loop.thisN'
p7914
I109
sg33
g6647
sg64
g65
sS'trial_loop.thisIndex'
p7915
g60
(g99
S'm\x00\x00\x00'
tRp7916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7917
I0
sg6380
g6651
sS'block_loop.thisRepN'
p7918
I2
sg6383
g6647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7919
I2
sg6385
g6654
sg55
g11
sS'block_loop.thisTrial'
p7920
Nsg70
Vn
sS'block_loop.thisTrialN'
p7921
I0
sg39
F0.69995449838825152
sg34
g753
(S'\x07\xdf\x07\x01\x0b-,\x0e\x19`'
tRp7922
sa(dp7923
S'trial_loop.thisTrialN'
p7924
I110
sg6371
g6460
sS'block_loop.thisIndex'
p7925
g6365
sg38
S'left'
p7926
sg59
g63
sS'trial_loop.thisN'
p7927
I110
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7928
g60
(g99
S'n\x00\x00\x00'
tRp7929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7930
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7931
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7932
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p7933
Nsg70
Vn
sS'block_loop.thisTrialN'
p7934
I0
sg39
F0.73329212719545467
sg34
g753
(S'\x07\xdf\x07\x01\x0b-2\t\xe7('
tRp7935
sa(dp7936
S'trial_loop.thisTrialN'
p7937
I111
sg6371
g6886
sS'block_loop.thisIndex'
p7938
g6365
sg38
S'right'
p7939
sg59
g63
sS'trial_loop.thisN'
p7940
I111
sg33
g6647
sg64
g65
sS'trial_loop.thisIndex'
p7941
g60
(g99
S'o\x00\x00\x00'
tRp7942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7943
I0
sg6380
g6893
sS'block_loop.thisRepN'
p7944
I2
sg6383
g6647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7945
I2
sg6385
g6654
sg55
g11
sS'block_loop.thisTrial'
p7946
Nsg70
Vn
sS'block_loop.thisTrialN'
p7947
I0
sg39
F0.84992194021651812
sg34
g753
(S'\x07\xdf\x07\x01\x0b-8\x06l\x88'
tRp7948
sa(dp7949
S'trial_loop.thisTrialN'
p7950
I112
sg6371
g6443
sS'block_loop.thisIndex'
p7951
g6365
sg38
S'left'
p7952
sg59
g63
sS'trial_loop.thisN'
p7953
I112
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7954
g60
(g99
S'p\x00\x00\x00'
tRp7955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7956
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7957
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7958
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p7959
Nsg70
Vn
sS'block_loop.thisTrialN'
p7960
I0
sg39
F0.84971952076193702
sg34
g753
(S'\x07\xdf\x07\x01\x0b.\x02\x04\x9b\xb0'
tRp7961
sa(dp7962
S'trial_loop.thisTrialN'
p7963
I113
sg6371
g6511
sS'block_loop.thisIndex'
p7964
g6365
sg38
S'right'
p7965
sg59
g63
sS'trial_loop.thisN'
p7966
I113
sg33
g6515
sg64
g65
sS'trial_loop.thisIndex'
p7967
g60
(g99
S'q\x00\x00\x00'
tRp7968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7969
I0
sg6380
g6519
sS'block_loop.thisRepN'
p7970
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7971
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p7972
Nsg70
Vn
sS'block_loop.thisTrialN'
p7973
I0
sg39
F0.96703014738523052
sg34
g753
(S'\x07\xdf\x07\x01\x0b.\x08\x02\xca\xd8'
tRp7974
sa(dp7975
S'trial_loop.thisTrialN'
p7976
I114
sg6371
g7136
sS'block_loop.thisIndex'
p7977
g6365
sg38
S'left'
p7978
sg59
g63
sS'trial_loop.thisN'
p7979
I114
sg33
g6549
sg64
g65
sS'trial_loop.thisIndex'
p7980
g60
(g99
S'r\x00\x00\x00'
tRp7981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7982
I0
sg6380
g7143
sS'block_loop.thisRepN'
p7983
I2
sg6383
g6549
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7984
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p7985
Nsg70
Vn
sS'block_loop.thisTrialN'
p7986
I0
sg39
F0.63334139209837303
sg34
g753
(S'\x07\xdf\x07\x01\x0b.\x0e\x02\xe2H'
tRp7987
sa(dp7988
S'trial_loop.thisTrialN'
p7989
I115
sg6371
g6692
sS'block_loop.thisIndex'
p7990
g6365
sg38
S'left'
p7991
sg59
g63
sS'trial_loop.thisN'
p7992
I115
sg33
g6498
sg64
g65
sS'trial_loop.thisIndex'
p7993
g60
(g99
S's\x00\x00\x00'
tRp7994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7995
I0
sg6380
g6699
sS'block_loop.thisRepN'
p7996
I2
sg6383
g6498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7997
I2
sg6385
g6505
sg55
g11
sS'block_loop.thisTrial'
p7998
Nsg70
Vn
sS'block_loop.thisTrialN'
p7999
I0
sg39
F0.63328636822006956
sg34
g753
(S'\x07\xdf\x07\x01\x0b.\x13\r\x00 '
tRp8000
sa(dp8001
S'trial_loop.thisTrialN'
p8002
I116
sg6371
g6626
sS'block_loop.thisIndex'
p8003
g6365
sg38
S'left'
p8004
sg59
g63
sS'trial_loop.thisN'
p8005
I116
sg33
g6630
sg64
g65
sS'trial_loop.thisIndex'
p8006
g60
(g99
S't\x00\x00\x00'
tRp8007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8008
I0
sg6380
g6634
sS'block_loop.thisRepN'
p8009
I2
sg6383
g6630
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8010
I2
sg6385
g6637
sg55
g11
sS'block_loop.thisTrial'
p8011
Nsg70
Vn
sS'block_loop.thisTrialN'
p8012
I0
sg39
F0.64975247806978587
sg34
g753
(S'\x07\xdf\x07\x01\x0b.\x19\x07\xdb\xb8'
tRp8013
sa(dp8014
S'trial_loop.thisTrialN'
p8015
I117
sg6371
g6528
sS'block_loop.thisIndex'
p8016
g6365
sg38
S'left'
p8017
sg59
g63
sS'trial_loop.thisN'
p8018
I117
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p8019
g60
(g99
S'u\x00\x00\x00'
tRp8020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8021
I0
sg6380
g6536
sS'block_loop.thisRepN'
p8022
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8023
I2
sg6385
g6539
sg55
g11
sS'block_loop.thisTrial'
p8024
Nsg70
Vn
sS'block_loop.thisTrialN'
p8025
I0
sg39
F0.81668609133157588
sg34
g753
(S'\x07\xdf\x07\x01\x0b.\x1f\x02\xf1\xe8'
tRp8026
sa(dp8027
S'trial_loop.thisTrialN'
p8028
I118
sg6371
g6660
sS'block_loop.thisIndex'
p8029
g6365
sg38
S'left'
p8030
sg59
g63
sS'trial_loop.thisN'
p8031
I118
sg33
g6671
sg64
g65
sS'trial_loop.thisIndex'
p8032
g60
(g99
S'v\x00\x00\x00'
tRp8033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8034
I0
sg6380
g6668
sS'block_loop.thisRepN'
p8035
I2
sg6383
g6664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8036
I2
sg6385
g6671
sg55
g11
sS'block_loop.thisTrial'
p8037
Nsg70
Vn
sS'block_loop.thisTrialN'
p8038
I0
sg39
F0.88324702471982164
sg34
g753
(S'\x07\xdf\x07\x01\x0b.%\x00\xa7\xf8'
tRp8039
sa(dp8040
S'trial_loop.thisTrialN'
p8041
I119
sg6371
g7715
sS'block_loop.thisIndex'
p8042
g6365
sg38
S'right'
p8043
sg59
g63
sS'trial_loop.thisN'
p8044
I119
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p8045
g60
(g99
S'w\x00\x00\x00'
tRp8046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8047
I0
sg6380
g7722
sS'block_loop.thisRepN'
p8048
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8049
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p8050
Nsg70
Vn
sS'block_loop.thisTrialN'
p8051
I0
sg39
F0.88394950575457187
sg34
g753
(S'\x07\xdf\x07\x01\x0b.*\x0e\xd0\xf8'
tRp8052
sa(dp8053
S'trial_loop.thisTrialN'
p8054
I120
sg6371
g7151
sS'block_loop.thisIndex'
p8055
g6365
sg38
S'left'
p8056
sg59
g63
sS'trial_loop.thisN'
p8057
I120
sg33
g6515
sg64
g65
sS'trial_loop.thisIndex'
p8058
g60
(g99
S'x\x00\x00\x00'
tRp8059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8060
I0
sg6380
g7158
sS'block_loop.thisRepN'
p8061
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8062
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p8063
Nsg70
Vn
sS'block_loop.thisTrialN'
p8064
I0
sg39
F0.93332246160207433
sg34
g753
(S'\x07\xdf\x07\x01\x0b.0\r} '
tRp8065
sa(dp8066
S'trial_loop.thisTrialN'
p8067
I121
sg6371
g6426
sS'block_loop.thisIndex'
p8068
g6365
sg38
S'right'
p8069
sg59
g63
sS'trial_loop.thisN'
p8070
I121
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8071
g60
(g99
S'y\x00\x00\x00'
tRp8072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8073
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8074
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8075
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8076
Nsg70
Vn
sS'block_loop.thisTrialN'
p8077
I0
sg39
F0.84995073509526264
sg34
g753
(S'\x07\xdf\x07\x01\x0b.6\x0c\xdc\xf8'
tRp8078
sa(dp8079
S'trial_loop.thisTrialN'
p8080
I122
sg6371
g6511
sS'block_loop.thisIndex'
p8081
g6365
sg38
S'right'
p8082
sg59
g63
sS'trial_loop.thisN'
p8083
I122
sg33
g6515
sg64
g65
sS'trial_loop.thisIndex'
p8084
g60
(g99
S'z\x00\x00\x00'
tRp8085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8086
I0
sg6380
g6519
sS'block_loop.thisRepN'
p8087
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8088
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p8089
Nsg70
Vn
sS'block_loop.thisTrialN'
p8090
I0
sg39
F0.6499503359591472
sg34
g753
(S'\x07\xdf\x07\x01\x0b/\x00\x0bJ\xa0'
tRp8091
sa(dp8092
S'trial_loop.thisTrialN'
p8093
I123
sg6371
g7490
sS'block_loop.thisIndex'
p8094
g6365
sg38
S'right'
p8095
sg59
g63
sS'trial_loop.thisN'
p8096
I123
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8097
g60
(g99
S'{\x00\x00\x00'
tRp8098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8099
I0
sg6380
g7497
sS'block_loop.thisRepN'
p8100
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8101
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8102
Nsg70
Vn
sS'block_loop.thisTrialN'
p8103
I0
sg39
F0.90001818924065446
sg34
g753
(S'\x07\xdf\x07\x01\x0b/\x06\x06`\xd0'
tRp8104
sa(dp8105
S'trial_loop.thisTrialN'
p8106
I124
sg6371
g7715
sS'block_loop.thisIndex'
p8107
g6365
sg38
S'right'
p8108
sg59
g63
sS'trial_loop.thisN'
p8109
I124
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p8110
g60
(g99
S'|\x00\x00\x00'
tRp8111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8112
I0
sg6380
g7722
sS'block_loop.thisRepN'
p8113
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8114
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vn
sS'block_loop.thisTrialN'
p8116
I0
sg39
F0.91663312015589327
sg34
g753
(S'\x07\xdf\x07\x01\x0b/\x0c\x05G\x90'
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g7194
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'left'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g7201
sS'block_loop.thisRepN'
p8126
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8127
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vn
sS'block_loop.thisTrialN'
p8129
I0
sg39
F1.0170574027360999
sg34
g753
(S'\x07\xdf\x07\x01\x0b/\x12\x04\xa7h'
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g6677
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'right'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g6583
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g6684
sS'block_loop.thisRepN'
p8139
I2
sg6383
g6583
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8140
I2
sg6385
g6590
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vn
sS'block_loop.thisTrialN'
p8142
I0
sg39
F0.78328973237330501
sg34
g753
(S'\x07\xdf\x07\x01\x0b/\x18\x057\xf0'
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g7557
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'left'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g6600
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g7564
sS'block_loop.thisRepN'
p8152
I2
sg6383
g6600
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8153
I2
sg6385
g6607
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vn
sS'block_loop.thisTrialN'
p8155
I0
sg39
F0.66653077003684302
sg34
g753
(S'\x07\xdf\x07\x01\x0b/\x1e\x02t\xe8'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g6409
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'left'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8165
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8166
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vn
sS'block_loop.thisTrialN'
p8168
I0
sg39
F0.76657615761178022
sg34
g753
(S'\x07\xdf\x07\x01\x0b/#\rJX'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g6643
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'left'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g6647
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g6651
sS'block_loop.thisRepN'
p8178
I2
sg6383
g6647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8179
I2
sg6385
g6654
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vn
sS'block_loop.thisTrialN'
p8181
I0
sg39
F0.6999365372248576
sg34
g753
(S'\x07\xdf\x07\x01\x0b/)\nH\xd0'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g6626
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'left'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g6630
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g6634
sS'block_loop.thisRepN'
p8191
I2
sg6383
g6630
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8192
I2
sg6385
g6637
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vn
sS'block_loop.thisTrialN'
p8194
I0
sg39
F0.54964864544308512
sg34
g753
(S'\x07\xdf\x07\x01\x0b//\x06\x16\x98'
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g6720
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'right'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g6727
sS'block_loop.thisRepN'
p8204
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8205
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vn
sS'block_loop.thisTrialN'
p8207
I0
sg39
F1.4666101982911641
sg34
g753
(S'\x07\xdf\x07\x01\x0b/4\x0f\x03\xc0'
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g7209
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'right'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g6630
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g7216
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6630
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8218
I2
sg6385
g6637
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vn
sS'block_loop.thisTrialN'
p8220
I0
sg39
F0.64971940672330675
sg34
g753
(S'\x07\xdf\x07\x01\x0b/;\x07v('
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g6886
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'right'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6654
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g6893
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8231
I2
sg6385
g6654
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vn
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.5667094693526451
sg34
g753
(S'\x07\xdf\x07\x01\x0b0\x05\x02\x90@'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g7209
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'right'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6630
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g7216
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6630
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8244
I2
sg6385
g6637
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vn
sS'block_loop.thisTrialN'
p8246
I0
sg39
F0.51639540559153829
sg34
g753
(S'\x07\xdf\x07\x01\x0b0\n\x0b\xb8\x00'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g7250
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'right'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6566
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g7257
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6385
g6573
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vn
sS'block_loop.thisTrialN'
p8259
I0
sg39
F0.86657821031622007
sg34
g753
(S'\x07\xdf\x07\x01\x0b0\x10\x04\xe9\xd0'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g7194
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'left'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g7201
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vn
sS'block_loop.thisTrialN'
p8272
I0
sg39
F0.89998568809096469
sg34
g753
(S'\x07\xdf\x07\x01\x0b0\x16\x03Wx'
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g6545
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'right'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6549
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g6553
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6549
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6385
g6556
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vn
sS'block_loop.thisTrialN'
p8285
I0
sg39
F0.70001208814755955
sg34
g753
(S'\x07\xdf\x07\x01\x0b0\x1c\x02>8'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g6858
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'right'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g6865
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vn
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.56666413879975153
sg34
g753
(S'\x07\xdf\x07\x01\x0b0!\r\x88\xd8'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g6596
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'right'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g6604
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6600
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6385
g6607
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vn
sS'block_loop.thisTrialN'
p8311
I0
sg39
F0.64993494067675783
sg34
g753
(S"\x07\xdf\x07\x01\x0b0'\x07r@"
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g6804
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'left'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6758
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g6811
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6385
g6752
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vn
sS'block_loop.thisTrialN'
p8324
I0
sg39
F0.99987968871937483
sg34
g753
(S'\x07\xdf\x07\x01\x0b0-\x02\x88p'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6392
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'left'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vn
sS'block_loop.thisTrialN'
p8337
I0
sg39
F0.86663237890206801
sg34
g753
(S'\x07\xdf\x07\x01\x0b03\x03\x18\xf8'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g6596
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'right'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6600
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g6604
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6600
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6385
g6607
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vn
sS'block_loop.thisTrialN'
p8350
I0
sg39
F0.63339242460824607
sg34
g753
(S'\x07\xdf\x07\x01\x0b09\x01\x86\xa0'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g7475
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'right'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6987
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g7482
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6987
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6385
g6994
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vn
sS'block_loop.thisTrialN'
p8363
I0
sg39
F0.58336516925737669
sg34
g753
(S'\x07\xdf\x07\x01\x0b1\x02\x0b\xa4x'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g7194
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'left'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g7201
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vn
sS'block_loop.thisTrialN'
p8376
I0
sg39
F0.78323242770966317
sg34
g753
(S'\x07\xdf\x07\x01\x0b1\x08\x05\xc8x'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g7015
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'right'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g7022
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vn
sS'block_loop.thisTrialN'
p8389
I0
sg39
F0.64994777007814264
sg34
g753
(S'\x07\xdf\x07\x01\x0b1\x0e\x03\x05p'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g6677
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'right'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6583
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g6684
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6583
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6385
g6590
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vn
sS'block_loop.thisTrialN'
p8402
I0
sg39
F1.183201865223964
sg34
g753
(S'\x07\xdf\x07\x01\x0b1\x13\r]\xe0'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g7000
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'left'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6931
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g7007
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6931
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6385
g6938
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vn
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.6166925345423806
sg34
g753
(S'\x07\xdf\x07\x01\x0b1\x1a\x01\x8a\x88'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g6748
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'right'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6758
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g6756
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6385
g6752
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vn
sS'block_loop.thisTrialN'
p8428
I0
sg39
F0.98328671033596038
sg34
g753
(S'\x07\xdf\x07\x01\x0b1\x1f\x0bi\xe0'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g7015
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'right'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g7022
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vn
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.58365055217655026
sg34
g753
(S'\x07\xdf\x07\x01\x0b1%\x0b\xbf\xd0'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6477
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'left'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6485
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vn
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.88330974623931979
sg34
g753
(S'\x07\xdf\x07\x01\x0b1+\x05\xe3\xd0'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g7030
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'right'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g7037
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6385
g6539
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vn
sS'block_loop.thisTrialN'
p8467
I0
sg39
F0.66666847228589177
sg34
g753
(S'\x07\xdf\x07\x01\x0b11\x04\x8c\x10'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g6579
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'left'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6583
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g6587
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6583
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6385
g6590
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vn
sS'block_loop.thisTrialN'
p8480
I0
sg39
F1.2833193825463241
sg34
g753
(S'\x07\xdf\x07\x01\x0b16\x0f#\x00'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g7000
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'left'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6931
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g7007
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6931
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6385
g6938
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vn
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.59984924027230591
sg34
g753
(S'\x07\xdf\x07\x01\x0b2\x01\x04\xba\xf0'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g7715
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'right'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g7722
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vn
sS'block_loop.thisTrialN'
p8506
I0
sg39
F0.5166106544475042
sg34
g753
(S'\x07\xdf\x07\x01\x0b2\x06\x0e_\xb0'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g6927
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'right'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6931
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g6935
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6931
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6385
g6938
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vn
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.70031229615415214
sg34
g753
(S'\x07\xdf\x07\x01\x0b2\x0c\x07\x8d\x98'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g7715
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'right'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g7722
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vn
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.61671619766275398
sg34
g753
(S'\x07\xdf\x07\x01\x0b2\x12\x03\x99\xe0'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g6858
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'right'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g6865
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vn
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.53333021626349364
sg34
g753
(S'\x07\xdf\x07\x01\x0b2\x17\ry8'
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g6372
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'left'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vn
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.81663505881988385
sg34
g753
(S'\x07\xdf\x07\x01\x0b2\x1d\x06\xe5\xa0'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g6562
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'left'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6566
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g6570
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6385
g6573
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vn
sS'block_loop.thisTrialN'
p8571
I0
sg39
F0.64994349361222703
sg34
g753
(S'\x07\xdf\x07\x01\x0b2#\x04\x9b\xb0'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g7265
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'right'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g7272
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vn
sS'block_loop.thisTrialN'
p8584
I0
sg39
F1.4500115179507702
sg34
g753
(S'\x07\xdf\x07\x01\x0b2(\x0e\xf8\x08'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g6626
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'left'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6630
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g6634
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6630
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6385
g6637
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vn
sS'block_loop.thisTrialN'
p8597
I0
sg39
F0.65014135149976937
sg34
g753
(S'\x07\xdf\x07\x01\x0b2/\x07+\xf0'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g7030
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'right'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g7037
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6385
g6539
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vn
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.63332827759950305
sg34
g753
(S'\x07\xdf\x07\x01\x0b25\x02F\x08'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g6660
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'left'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6664
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g6668
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6385
g6671
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vn
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.71643856940318074
sg34
g753
(S'\x07\xdf\x07\x01\x0b2:\x0cc\xe0'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g7030
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'right'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g7037
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6385
g6539
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vn
sS'block_loop.thisTrialN'
p8636
I0
sg39
F0.71666237119279685
sg34
g753
(S'\x07\xdf\x07\x01\x0b3\x04\x08\xaa\xc0'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g6443
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'left'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vn
sS'block_loop.thisTrialN'
p8649
I0
sg39
F1.8665132080113835
sg34
g753
(S'\x07\xdf\x07\x01\x0b3\n\x04\xb7\x08'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6626
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'left'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6637
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g6634
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6630
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6385
g6637
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vn
sS'block_loop.thisTrialN'
p8662
I0
sg39
F0.58300366521871183
sg34
g753
(S'\x07\xdf\x07\x01\x0b3\x11\x03[`'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g6409
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'left'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vn
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.75040255812564283
sg34
g753
(S'\x07\xdf\x07\x01\x0b3\x16\x0c\xc1\xa0'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g7166
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'right'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6664
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g7173
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6664
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6385
g6671
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vn
sS'block_loop.thisTrialN'
p8688
I0
sg39
F0.74996436277069733
sg34
g753
(S'\x07\xdf\x07\x01\x0b3\x1c\tG\x00'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g7490
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'right'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g7497
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vn
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.81663477372421767
sg34
g753
(S'\x07\xdf\x07\x01\x0b3"\x06\x06\xf8'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g7250
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'right'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6566
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g7257
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6385
g6573
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vn
sS'block_loop.thisTrialN'
p8714
I0
sg39
F0.78343171108826937
sg34
g753
(S'\x07\xdf\x07\x01\x0b3(\x03\xbd\x08'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g7151
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'left'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6515
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g7158
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vn
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.64994292341725668
sg34
g753
(S'\x07\xdf\x07\x01\x0b3.\x00\xfa\x00'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g7015
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'right'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g7022
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vn
sS'block_loop.thisTrialN'
p8740
I0
sg39
F1.0834047978532908
sg34
g753
(S'\x07\xdf\x07\x01\x0b33\x0bVX'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g7475
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'right'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6994
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g7482
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6987
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6385
g6994
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vn
sS'block_loop.thisTrialN'
p8753
I0
sg39
F0.55008798118797131
sg34
g753
(S'\x07\xdf\x07\x01\x0b39\r\x17\x90'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g7250
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'right'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6566
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g7257
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6385
g6573
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vn
sS'block_loop.thisTrialN'
p8766
I0
sg39
F1.4165470206135069
sg34
g753
(S'\x07\xdf\x07\x01\x0b4\x03\x06\xc2x'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g6494
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'right'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6498
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g6502
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6385
g6505
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vn
sS'block_loop.thisTrialN'
p8779
I0
sg39
F0.63335564698900271
sg34
g753
(S'\x07\xdf\x07\x01\x0b4\t\r\xbf\x88'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6409
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'left'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vn
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.88319570711064443
sg34
g753
(S'\x07\xdf\x07\x01\x0b4\x0f\x08\x9b '
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g6643
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'left'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6647
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g6651
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6385
g6654
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vn
sS'block_loop.thisTrialN'
p8805
I0
sg39
F0.8999235367627989
sg34
g753
(S'\x07\xdf\x07\x01\x0b4\x15\x07C`'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g7194
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'left'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g7201
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vn
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.88333511994642322
sg34
g753
(S'\x07\xdf\x07\x01\x0b4\x1b\x06h\xa0'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g7265
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'right'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g7272
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vn
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.70041094000225712
sg34
g753
(S'\x07\xdf\x07\x01\x0b4!\x05\x10\xe0'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6692
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'left'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6505
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g6699
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6385
g6505
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vn
sS'block_loop.thisTrialN'
p8844
I0
sg39
F1.0166585508814023
sg34
g753
(S"\x07\xdf\x07\x01\x0b4'\x00\xde\xa8"
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6927
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'right'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6931
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6935
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6931
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6385
g6938
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vn
sS'block_loop.thisTrialN'
p8857
I0
sg39
F0.6500027939582651
sg34
g753
(S'\x07\xdf\x07\x01\x0b4-\x01\xad\xb0'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g7557
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'left'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g7564
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6600
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6385
g6607
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vn
sS'block_loop.thisTrialN'
p8870
I0
sg39
F0.69988978118090017
sg34
g753
(S'\x07\xdf\x07\x01\x0b42\x0cD\xa0'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g6511
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'right'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6522
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g6519
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vn
sS'block_loop.thisTrialN'
p8883
I0
sg39
F0.6000197287685296
sg34
g753
(S'\x07\xdf\x07\x01\x0b48\x08\x12h'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g7265
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'right'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g7272
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6385
g6471
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vn
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.76656960036234523
sg34
g753
(S'\x07\xdf\x07\x01\x0b5\x02\x02t\xe8'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6858
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'right'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6865
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vn
sS'block_loop.thisTrialN'
p8909
I0
sg39
F1.0833320979090786
sg34
g753
(S'\x07\xdf\x07\x01\x0b5\x07\x0e\xb5\xa0'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g7557
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'left'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6600
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g7564
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6600
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6385
g6607
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vn
sS'block_loop.thisTrialN'
p8922
I0
sg39
F0.90003101864203927
sg34
g753
(S'\x07\xdf\x07\x01\x0b5\x0e\x014\x98'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g7490
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'right'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g7497
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vn
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.98322028254369798
sg34
g753
(S'\x07\xdf\x07\x01\x0b5\x14\x00\x1f@'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g7000
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'left'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6931
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g7007
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6931
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6385
g6938
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vn
sS'block_loop.thisTrialN'
p8948
I0
sg39
F1.1666031848853891
sg34
g753
(S'\x07\xdf\x07\x01\x0b5\x1a\x00qH'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g7151
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'left'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6515
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g7158
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6515
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vn
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.93325375302629254
sg34
g753
(S'\x07\xdf\x07\x01\x0b5 \x03c0'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g7250
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'right'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6573
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g7257
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6566
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6385
g6573
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vn
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.59991281708607858
sg34
g753
(S'\x07\xdf\x07\x01\x0b5&\x03\x01\x88'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g6804
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'left'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6758
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g6811
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6385
g6752
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vn
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.68336722196181654
sg34
g753
(S'\x07\xdf\x07\x01\x0b5+\x0c\xa6H'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6886
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'right'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6647
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6893
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6647
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6385
g6654
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vn
sS'block_loop.thisTrialN'
p9000
I0
sg39
F0.68334042276546825
sg34
g753
(S'\x07\xdf\x07\x01\x0b51\x08t\x10'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g6392
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'left'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g6400
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vn
sS'block_loop.thisTrialN'
p9013
I0
sg39
F0.74999287255559466
sg34
g753
(S'\x07\xdf\x07\x01\x0b57\x04\x07@'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g6677
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'right'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6583
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g6684
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6583
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6385
g6590
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vn
sS'block_loop.thisTrialN'
p9026
I0
sg39
F0.71659138183531468
sg34
g753
(S'\x07\xdf\x07\x01\x0b6\x01\x00\xc78'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g6983
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'left'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6987
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g6991
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6987
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6385
g6994
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vn
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.56664617763635761
sg34
g753
(S'\x07\xdf\x07\x01\x0b6\x06\x0c\x15\xc0'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g6392
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'left'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g6400
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vn
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.76667423126309586
sg34
g753
(S'\x07\xdf\x07\x01\x0b6\x0c\x05\xfb@'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g6443
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'left'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6453
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g6451
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6453
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6385
g6447
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vn
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.65031183999781206
sg34
g753
(S'\x07\xdf\x07\x01\x0b6\x12\x02\xfd\xa0'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g6983
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'left'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6987
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g6991
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6987
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6385
g6994
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vn
sS'block_loop.thisTrialN'
p9078
I0
sg39
F0.54984194176722667
sg34
g753
(S'\x07\xdf\x07\x01\x0b6\x17\rV\x10'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6477
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'left'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6485
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6385
g6488
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vn
sS'block_loop.thisTrialN'
p9091
I0
sg39
F1.3998961673732992
sg34
g753
(S'\x07\xdf\x07\x01\x0b6\x1d\x07\x00\xf8'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vn
sa(dp9099
g64
g65
sg43
I26
sg56
g57
sg58
Vn
sg42
I574
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp9100
g64
g65
sg43
I26
sg55
g11
sg56
g57
sg45
F2
sg42
I574
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I00
sg48
I25
sg47
g643
sg51
F30.740000000000002
sg46
F0.5399999999999987
sg66
g67
sg68
g69
sg50
I0
sg70
Vn
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I81916240
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\x14\xae\x87?=\n\x97?R\xb8\x1e?\xaeG\xe1>\xecQ\xb8>\x00\x00\x00\x00=\nW?q=\x8a?R\xb8\x1e?\xcd\xcc\xcc>\x9a\x99\x19?\\\x8f\xc2>\xb8\x1e\x85?\xb8\x1e\x05?\x00\x00\x00\x00\\\x8fB?\xb8\x1e\x05?)\\\x0f?{\x14.?333?\x14\xaeG?=\n\xd7>\x00\x00\x00?=\n\x97?\xb8\x1e\x05?\x8f\xc2u=)\\\x0f?\x14\xaeG?)\\\x8f?\x00\x00\x00\x00\x1f\x85k?ff\xa6?\x00\x00\x00\x00\x85\xeb\x91?\\\x8f\xc2>\\\x8f\x82?q=\n?\\\x8f\xc2>\x00\x00\x00\x00)\\\x0f?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'T\xe3\xa5@\xdd$\xda@\xbaI\xec@\xaa\xf1\x9e@\xfc\xa9i@\xdb\xf9>@\xa8\xc6+@ff\xa8AT\xe3\xcd@\xfe\xd4\xec@\x0e-b@\xdd$\x8a@\xd5x#Ao\x12\x81AT\xe3\x9d@\xaa\xf1\xee@\xcb\xa1\xa1@T\xe3\xb5@\xbaI\xdc@D\x8b\xd0@d;\x8b@\x87\x16\xd9@\x87\x161@33\xab@\x87\x16A@!\xb0\x92@T\xe3\x85@\x10X\x11A\x10X\x15AB`E@\xaa\xf1\x86@u\x93\x08@/\xdd\x0c@w\xbe\x1bAD\x8b\xb0@1\x08\x90@1\x08\x90@\x0e-\x12@\xee|G@!\xb0:@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xe8A\x00\x00\x0cB\x00\x00\xe0A\x00\x00\x10A\x00\x00\xa8A\x00\x00`A\x00\x00\xb0A\x00\x00\x00\x00\x00\x00\x04B\x00\x00PA\x00\x00\x88A\x00\x000A\x00\x00\xc0@\x00\x00\x80?\x00\x00\x90A\x00\x00\x1cB\x00\x00\xc8A\x00\x00\xf0A\x00\x00 A\x00\x00pA\x00\x00\xa0A\x00\x00\x00A\x00\x00\xc0A\x00\x00\x14B\x00\x00\x08B\x00\x00\x80@\x00\x00@A\x00\x00\xb8A\x00\x00\xe0@\x00\x00@@\x00\x00\xf8A\x00\x00\x18B\x00\x00\xa0@\x00\x00\x00@\x00\x00\xd0A\x00\x00\x80A\x00\x00\x10B\x00\x00\xd8A\x00\x00\x00B\x00\x00\x98A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\xc0?\x9a\x99\x99?\xcd\xcc\xcc?\x00\x00\xc0?ff\xe6?\x9a\x99\x99?33\xf3?ff\xe6?\x9a\x99\x99?\xcd\xcc\xcc?\xcd\xcc\x8c?ff\xa6?33\xb3?\x00\x00\x00@\x00\x00\xc0?\xcd\xcc\xcc?\x00\x00\xc0?33\xf3?\xcd\xcc\x8c?\x00\x00\x00@ff\xe6?33\xf3?\x00\x00\x80?\xcd\xcc\x8c?\x9a\x99\x99?\x00\x00\x80?\xcd\xcc\x8c?\x9a\x99\xd9?\x00\x00\x00@\x00\x00\x00@ff\xa6?ff\xa6?\x9a\x99\x99?33\xf3?\xcd\xcc\x8c?33\xf3?\xcd\xcc\xcc?ff\xa6?\x00\x00\x00@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'\x07\x00\x00\x00\r\x00\x00\x00!\x00\x00\x00\x1d\x00\x00\x00\x19\x00\x00\x00 \x00\x00\x00\x0c\x00\x00\x00\x1c\x00\x00\x00\x15\x00\x00\x00\x03\x00\x00\x00\x12\x00\x00\x00\x0b\x00\x00\x00\x1a\x00\x00\x00\t\x00\x00\x00\x05\x00\x00\x00\x13\x00\x00\x00#\x00\x00\x00\n\x00\x00\x00\x0e\x00\x00\x00\'\x00\x00\x00\x14\x00\x00\x00\x04\x00\x00\x00\x06\x00\x00\x00\x1b\x00\x00\x00\x16\x00\x00\x00\x10\x00\x00\x00"\x00\x00\x00%\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x1e\x00\x00\x00&\x00\x00\x00\x08\x00\x00\x00\x18\x00\x00\x00\x01\x00\x00\x00$\x00\x00\x00\x17\x00\x00\x00\x1f\x00\x00\x00\x0f\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g306
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g348
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g299
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g166
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g250
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g201
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g257
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g103
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g334
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g194
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g222
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g180
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g145
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g110
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g229
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g376
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g278
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g313
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g173
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g208
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g243
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g159
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g271
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g362
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g341
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g131
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g187
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g264
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g152
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g124
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g320
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g369
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g138
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g117
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g285
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g215
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g355
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g292
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g327
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g236
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I81916240
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xc0@\x00\x00\xc0@33\x93@ff\x96@\x00\x00`@\x9a\x99\xa9@33\x93@ffF@ffF@\x9a\x99\x89@\xcd\xcc\xbc@ff\xa6@ff\x86@\x9a\x99y@ff\xa6@\x9a\x99\x99@\xcd\xcc,@\x00\x00\xc0@\x00\x00\xc0@ffF@\x00\x00\xc0@\x9a\x99\xa9@\x00\x00\x90@\x9a\x99\xa9@\x9a\x99Y@ff\xb6@\x00\x00\xc0@33\x83@\x00\x00\xb0@\x00\x00\xc0@\x00\x00\xa0@\x00\x00@@33S@ffF@\x9a\x99\x99@33s@ff\x96@33S@33\x93@33\x83@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'\x05\x14\x91?A\xde\xfd?\x1b\xbc\x1b@Lx\xf7?t\xe5m@\xf5\xef\x0e@\x19x7@vj\xc6@S\xff?@\xb4"b@\xc0\x8b\xa8?\xfc\xdd\x1d@W\x02@@-ff@Y\xb2z@\n\xab\xe2@\x877\x8b@\x88\xac\xea?\x12\x9f\x99?;\xbe;@gO\x95?\x8d\x01@@\xf9\x8e\xc8?\xae\xdd\xed@\xb7\x02\x10@\xd8\xf3\xee??iw?\x1a\xff\x9f?2$b?\x01\xf1n?i!b?\x0c\x01\x90@\x91TE@N\xee\x12A\xfd\xcf\xac?o\x9b\x99?\x9f{\xd7?\x8cz\xd7?\x867\xd3?\x92\xcf\x0c@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'ffF@\xcd\xcc,@\x00\x00\x80@\xcd\xccl@\x00\x00\x80@33S@33\x83@ffF@\x00\x00`@\x9a\x99y@\xcd\xccl@\x00\x00\x80@\x00\x00\x80@fff@\x9a\x999@\x00\x00`@\x00\x00`@\x00\x00`@\x9a\x999@ff\x86@ffF@\x00\x00`@ffF@\x00\x00\x80@333@33\x83@\xcd\xcc,@ffF@33S@33\x83@\x00\x00`@ffF@33S@\x9a\x999@ffF@ffF@\x00\x00`@\x9a\x99y@\x00\x00@@ff\x86@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\x00\xf69\x0c\xc0p\xb5\x0b\x80t\xb5\x0b`j\xe1\x0b\xe0i\xe1\x0b\xa0i\xe1\x0b\x80p\xb5\x0b`k\xe1\x0b\x00k\xe1\x0b\xe0e\xe1\x0b\xc0\xfb\xb7\x0b\x00h\xe1\x0b\x80r\xb5\x0b s\xb5\x0b\xa0j\xe1\x0b@p\xb5\x0b\x80q\xb5\x0b p\xb5\x0b`p\xb5\x0b\xc0\xf3\xb7\x0b`6\xe3\x0b@4\xe3\x0b\xe07\xe3\x0b@<\xe3\x0b\xc06\xe3\x0b`=\xe3\x0b\x806\xe3\x0b\xe05\xe3\x0b\x00<\xe3\x0b\x00q\xb5\x0b\x00;\xe3\x0b\x807\xe3\x0b\xc0\xfb9\x0c \xf09\x0c`\xf99\x0c\xa0\xf89\x0c \xf59\x0c\xc0\xf69\x0c\xc0\xf49\x0c\x80\xfa9\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'B`U@\x98n\x8e@d;\xd3@B`\x05@\x10X\xe5@\xee|\x17@\x1dZ\xe4?!\xb0\x92@!\xb0Z@1\x08\xa0@u\x93\xc8?\xb6\xf3\xdd?b\x100@\x96C3@/\xdd,@\xe9&\xd1?\xe9&\xf1?\xc9v\x16@\xe9&\x91?\xfc\xa9\x19@\xe9&\x91?^\xba\xf9?!\xb0J@\x0e-R@\xdb\xf9\x8e?^\xba\xb9?\x1dZ\x84?^\xba\xb9?\xf8S\xb3?\xc5 \x80?\xf8S\xf3?=\no@\x1dZ\x84?^\xba\xd9?^\xba\x99?H\xe1\x8a?\x96C\x13@/\xdd\x0c@+\x87\xe6?\xee|\x17@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I81916240
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S"\xe0\xa6P\x0c\x10&k\x0ch\xaaj\x0c8&k\x0c`&k\x0c\xb0\xa6P\x0c\x80\xa6P\x0c\x88&k\x0c('k\x0c\x10&k\x0c`&k\x0cP'k\x0c\x88&k\x0c\xb0&k\x0c"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'(\n\xd2\x04\x98\x0f\xd2\x04\xc0\x08\xd2\x04\x80\x06\xd2\x04H\x05\xd2\x04\x90\x05\xd2\x04\xf8\t\xd2\x04`\xa5\xf2\x04X\xa4\xf2\x04\xd8\xa2\xf2\x04\x98\xa0\xf2\x04\x88\xa1\xf2\x04\xe8\xad\xf2\x04\x90\xab\xf2\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g778
sg83
g779
sg84
g783
sg85
g784
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g789
sg83
g790
sg84
g794
sg85
g795
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g767
sg83
g800
sg84
g772
sg85
g804
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g744
sg83
g809
sg84
g749
sg85
g813
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g818
sg83
g819
sg84
g823
sg85
g824
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g778
sg83
g829
sg84
g783
sg85
g833
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g756
sg83
g838
sg84
g761
sg85
g842
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g789
sg83
g847
sg84
g794
sg85
g851
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g856
sg83
g857
sg84
g861
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g818
sg83
g867
sg84
g823
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g856
sg83
g876
sg84
g861
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I81916240
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I81916240
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S"\xc8\xcel\x0c\xc0\xd68\x0cHEm\x0cpEm\x0cP&m\x0c\x80&m\x0c\x98Em\x0c\xb0&m\x0c\xc0Em\x0c\xa0\xd18\x0cHEm\x0c`\xd18\x0c\xb0&m\x0c\xe0&m\x0c\x00(m\x0cPGm\x0cP&m\x0c\x10Fm\x0c\xc0\xd68\x0c\xa0\xd18\x0c\xc0Em\x0c\xc0\xd68\x0c\xb0&m\x0c\x80&m\x0c`\xd18\x0c\xc0Em\x0c\xa0\xd18\x0cHEm\x0c\xd0'm\x0c\xb0&m\x0c\x10'm\x0cxGm\x0c\xc0\xd08\x0c@'m\x0cp\xcfl\x0c\xc0\xd08\x0c\x80&m\x0c\xa0\xd18\x0c`\xd58\x0c\x98Em\x0cp'm\x0c\xc0\xd08\x0c\xc0Em\x0c\x00\xcfl\x0c\xe0&m\x0cxGm\x0c8Fm\x0c\x00\xcfl\x0c@'m\x0c`Fm\x0c\x00(m\x0cP&m\x0c@'m\x0cXPm\x0c\x00\xcfl\x0c\xa0'm\x0c\xa0\xd18\x0c8Fm\x0c\x98Em\x0c\x10Fm\x0c\xe0&m\x0cHEm\x0c\xb0&m\x0cp\xcfl\x0c\x80&m\x0cpEm\x0c Pm\x0c\xd0'm\x0c\x00Gm\x0c\xa8\xcfl\x0c\xc0Em\x0c\xa0\xd18\x0cxGm\x0c\xe8Em\x0c\xc8\xcel\x0c\xa8\xcfl\x0cpEm\x0c8Fm\x0cHEm\x0c@'m\x0c\xb0&m\x0cpEm\x0c\xa0Gm\x0c\xa0\xd18\x0c\xe8Em\x0c\xd0'm\x0c\x98Em\x0c`\xd18\x0c\xb0&m\x0c\x80&m\x0c\xe8Em\x0c\xc0\xd08\x0c\xc0\xd68\x0c\x10Fm\x0c@'m\x0c\xe0&m\x0c\x10Fm\x0c\xc8\xcel\x0c\xc0\xd68\x0c`Fm\x0c\x00Gm\x0c\xc0\xd08\x0c\x80&m\x0c\xe8Em\x0c`\xd18\x0cHEm\x0c8Fm\x0c\xa0Gm\x0c\xa0\xd18\x0c\x10'm\x0c\xc8\xcel\x0c\x10'm\x0c`Fm\x0c\x98Em\x0cpEm\x0c`\xd18\x0c\xd8Fm\x0c\xc8\xcel\x0c(Gm\x0c\xe8Em\x0c8Fm\x0c\xe8Em\x0cP&m\x0c`\xd18\x0c\x10Fm\x0c\x10'm\x0c8\xcfl\x0c`\xd18\x0c\xb0&m\x0c\x00\xcfl\x0c0(m\x0cP&m\x0c`(m\x0c\x10'm\x0c\xc8\xcel\x0c8Fm\x0c\xe8Em\x0c\x80&m\x0c\x98Em\x0c`\xd58\x0c\xc8\xcel\x0cxGm\x0c\xe8Em\x0c\x80&m\x0c8Fm\x0c\x10Fm\x0c\xc0\xd08\x0c@'m\x0c\x00\xcfl\x0c\xc0\xd68\x0c\x80&m\x0c`\xd18\x0c\xd8Fm\x0c\xc0\xd08\x0c\x80&m\x0cp\xcfl\x0c\xa0'm\x0c\x00\xcfl\x0c\x10'm\x0c\xc0\xd08\x0c\x98Em\x0cP&m\x0c@'m\x0c`Fm\x0c\xd0'm\x0cp'm\x0c`Fm\x0c\xd0'm\x0c\x00Gm\x0c\xc0\xd08\x0c\xc0Em\x0c\x10Fm\x0cP&m\x0c\xe0&m\x0c@'m\x0c\xa0\xd18\x0c\x10Fm\x0c`Fm\x0c\xc0\xd08\x0c`Fm\x0c@'m\x0c`Fm\x0cpEm\x0c\x98Em\x0cp'm\x0cpEm\x0c\x10'm\x0cP&m\x0c`\xd18\x0cpEm\x0c\xc8\xcel\x0c\x10Fm\x0c\xe8Em\x0cHEm\x0c8Fm\x0c\xc0Em\x0c8Fm\x0c\x00(m\x0c\xc0\xd68\x0c\xc8\xcel\x0c"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'\xa0\x1aQ\x0c\x80\x15Q\x0c\x00\xbc7\x0c@\xd58\x0c\x00=\xe3\x0b\x80`\xe1\x0b\xe0\x19Q\x0c \x1bQ\x0c\x80\x1aQ\x0c \x1aQ\x0c \x18Q\x0c\xc0\x1aQ\x0c \x19Q\x0c\x00\x18Q\x0c`\x1bQ\x0c\x00\x1aQ\x0c\x80\x1bQ\x0c\xe0\x1aQ\x0c \x16Q\x0c@\x1bQ\x0c\xa0\x1bQ\x0c\x00\x1cQ\x0c\xe0\x1bQ\x0c@\x1cQ\x0c \x1cQ\x0c\xc0\x19Q\x0c\xa0\x1cQ\x0c\xc0\x1cQ\x0c\x00\x8d:\x0c\xc0\x8c:\x0c@\x8b:\x0c@\x8a:\x0c\x80\x8c:\x0c\x00\x8b:\x0c\x80\x8d:\x0c\xc0\x8a:\x0c@\x8c:\x0c \x87:\x0c`\x87:\x0c\xe0\x86:\x0c\x00\x86:\x0c\x80\x8a:\x0c\x00\x8e:\x0c@\x86:\x0c\x80\x89:\x0c\xc0\x89:\x0c\x80\x8e:\x0c\x00\x8f:\x0c\xa0\x86:\x0c@\x88:\x0c\x00\x88:\x0c@\x8e:\x0c\x80\x86:\x0c\xc0\x87:\x0c\x80\x88:\x0c@\x89:\x0c@\x8d:\x0c\xc0\x88:\x0c\xc0\x8d:\x0c\xc0\x85:\x0c\xe0\x80:\x0c\x80\x8b:\x0c\xc0\x80:\x0c\xc0\x8b:\x0c\x00\x8a:\x0c\x00\x89:\x0c@\x80:\x0c`\x85:\x0c@\x8f:\x0c\x00\x81:\x0c\xc0\x8e:\x0c`\x80:\x0c\x80\x80:\x0c \x80:\x0c\x00\x8c:\x0c \xb8\xe3\x0b@\xbb7\x0c\x00\xf29\x0c\xc0\xfe9\x0c`\xf79\x0c \xfe9\x0c\x80\xf29\x0c\x00\xff9\x0c`\xfe9\x0c`\xff9\x0c\x80\xff9\x0c@\xfe9\x0c \xf29\x0c\xa0\xff9\x0c\xc0\xff9\x0c\xe0\xff9\x0c`\xf09\x0c\x00\xf19\x0c \xf19\x0c \xff9\x0c`\xf19\x0c\x80\xf19\x0c\xa0\xf19\x0c\xa0\xf29\x0c\xc0\xf29\x0c\xe0\xf29\x0c\xe0\xfe9\x0c`\xf39\x0c\x80\xf39\x0c`\xf29\x0c\x00\xf39\x0c@\xf19\x0c\xe0\xf19\x0c\xe0\xfb9\x0c\xc0\xf19\x0c\xe0\xf39\x0c\xa0\xe1:\x0c@\xf39\x0c\x00\xf49\x0c\xc0\xf39\x0c\xa0\xfe9\x0c\x00x\xb6\x0b\x80\xfe9\x0c\xa0\x80:\x0c\x00|\xb6\x0b \xf39\x0c@x\xb6\x0b@r\xb5\x0b@\xf29\x0c\x80\xd58\x0c\xe0.9\x0c .9\x0c`-9\x0c\xa0/9\x0c@\xff9\x0c`U\xb7\x0b\x00/9\x0c\xe0\x1cQ\x0c@\x1dQ\x0c\x80\x1cQ\x0c\xe0\x17Q\x0c\x80\x1dQ\x0c`\x19Q\x0c`\x1cQ\x0c\xe0\x1dQ\x0c\xa0\x1dQ\x0c`\x1dQ\x0c\x00\x1eQ\x0c\xc0\x1dQ\x0c \x1eQ\x0c\x80\x1eQ\x0c`\x1eQ\x0c\x00\x1bQ\x0c\xa0\x1eQ\x0c\xc0\x1eQ\x0c\xe0\x1eQ\x0c\xa0\x1fQ\x0c\x80\x10Q\x0c@\x1aQ\x0c\xe0\x18Q\x0c\x80\x1fQ\x0c\xe0\x1fQ\x0c@\x1eQ\x0c\xc0\x1fQ\x0c`\x1aQ\x0c \x1fQ\x0c@\x1fQ\x0c`\x1fQ\x0c\xa0\x19Q\x0c\x80\xfc9\x0c \x1dQ\x0c\x00\x1dQ\x0c \x81:\x0c \xe2\xba\x1e\xa0\xe0\xba\x1e`\xe1\xba\x1e\x00\xe1\xba\x1e@\xe0\xba\x1e\xc0\xe1\xba\x1e \xe1\xba\x1e\xa0\xe1\xba\x1e`\xe2\xba\x1e\x80\xe2\xba\x1e\xc0\xe2\xba\x1e\xe0\xe2\xba\x1e\x00\xe3\xba\x1e\xe0\xe1\xba\x1e\xe0\xe0\xba\x1e \xe3\xba\x1e@\xe3\xba\x1e`\xe3\xba\x1e\xc0\xe3\xba\x1e\xa0\xe3\xba\x1e\x00\xe4\xba\x1e\xe0\xe3\xba\x1e@\xe4\xba\x1e`\xe4\xba\x1e\x80\xe4\xba\x1e@\xe1\xba\x1e \xe8\xac\x04\x80\xe8\xac\x04\x00\xea\xac\x04@\xe8\xac\x04\xc0\xed\xac\x04\xc0\xe8\xac\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\x08Bd@tS%@\xe0e\xe6?\xb7\xa8\n@\x1cr\xe6?\x94\xc9L@=f\xe6?GCt@\n\xe1-@\\\xee\x1e@6f\xc6?a\xd9\xbd?\xcd@\xa4?\xde;\xd3?C\xaa\x8a?\xf5\x1bb@\xd1\x86\x88?\x89@$@\x8dx\xd7?\xb2\x0c\xf1?d\x97\xd9?\x96v\xb7?\x83\x96\x99?\xbe\xe2]@_\x96Y?\xe5B\x84?Sc\xa6?\xa3\x87\xc8?\xba\x98\xb9?\x80d\x86?iT\xf5?@\xfe\x1f@\xe1\x0f\x01@\xdc\xe1\r@\x06D\x84?\x1cuw?\x1e\x98\x99?l\xa8\x8a?\xa4\xd4\xac?m\x0e\xb1?\x13\x00\x80?\x01\x99Y?yxw?\xb9\x12\xd1?;@\xe4?\x80\xda\x9d?\xe5\x83\x08@\xc3\xbd{?\xd1cf?\xdc b@=\x86h@\x13\x1f\xa2?rww?\xa4]\xb5?\xd1\xca\x1c@ID\xa4?\xe6/s?\xf3P\x05@@\xe0M@\xf8\xb6\x9b?\xff\xee\x8e?p\xe7n?\xb5\xb5:@o\xd8\x8c?\r\xffO@y\x98)@Ff\xa6?f\x99Y?T\xe1\x9d?\xd9"b?.4s?\x0f\xa2j?\xf3C\xe4?\x08\xf9\xce?\xa2\xcal@\xcd\xeen?\xb6\x1f\x82?\t\nb?\x87\x0eQ?X\xca\x0c@l\xed\x1e@G\x99\xb9?\xf8\x0c\xf1?\xe3\xaa\x8a?|\x96\x99?\xfc\x9d\x99?\xb1\xc5\xac?\xc5\x89\x88?\x03\xf9\xae?\xda!\x02@\xe0\\U?`PU?\xbcED?f{\x97?\xce3\x93?\x151\x13@\x83t\x17@\xa8\xfa\x7f?\xb0\x06\x80?\xc5\x0f\xb1?\xc3af?\xa3\x89H?\xa2\xedn@m\x11Q?\x8a\xa8:@-\xed\x8e?\xfb\\\x86?:\xdc\xfd?\x85yw?\x80R\x15@\xf5f\xc6?"!b@h/\xd3?\xca\xd7\xcc?\xed\xfc\x9f?\xb3!\x82?Q\x1d"?\xdf\xa7j?^43?\xe5=\x93?\x05\xca]?\xdb\x96\xb9?\xb7/\xb3?\xfaCD?\x8c\x08\xa0?\x19\x99\x99?.\xa1j?l\xde]?Sd\x86?A\x040@\x14\x97\x19@\xd7\xaa\xaa?\x98\xf5\xbf?R\x88\x88?\xc0\xbfj?\x84\x17\xe2?E\x01@?\xf4\x98\x91@o\x87H?\x85\x10\xb1?H\x1fb?A23@\xc9\x00@?\xc4qw?l\xdd.?\xf9mw?YQU?\xb8UU?82\xf3?\xa1*Q?\x1be\x86?Z\x0bQ?\xb4\xde]?"\x1db?\xc1d\x86?\x15\x99Y?c\xb9{?2\xff\x7f?V\xaaj?\xaf\xe6\x8e?\x91\x04/?\xa1R\xb5?\x1f\xcb\x8c?\xa8\xdd\x9d?\x051\x93?\xdb\x0b\x80?\x96vw?\xf6\xcb<@\xef\x00@?\x95o7?\xf9\xfa\x8e?&>\xa4?\x13RU?}\x85\x88?\x86\x08b?\xcc\xf2n?~A\x84?gSU?\x7f=D?\xb21\xd3?\xe0\xe8L?q\xff??\xd003@je\x86?<3\x93?\xa1\x83\xb7?\xc8\x10\xd1?\x08\x11Q?\x02\xedn?9\xedn@f\xe1-@\xce\xa6\x8a?\x8bS\x05@\xcbs\xd7?\x04\\\xa6?!\x9eY@\x0b\x0f"?\xf5\x85\x08?\xfe\xc5L?\xb42\x03@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'\xa8\xa2\xf2\x04\xe8\xa4\xf2\x04\xc02\xd5\x04\xe0<\xd5\x04\x989\xd5\x04@:\xd5\x04\xb8:\xd5\x04\xd04\xd5\x04\xb84\xd5\x04\x884\xd5\x04h3\xd5\x04\xe84\xd5\x04 3\xd5\x04\xf80\xd5\x04\xa8;\xd5\x04\x10:\xd5\x04`8\xd5\x04\x80?\xd5\x04\xd85\xd5\x04\xf0;\xd5\x04h6\xd5\x04X=\xd5\x04 9\xd5\x04\xa07\xd5\x04\x809\xd5\x04\x80<\xd5\x04\x083\xd5\x04\x90;\xd5\x04\xc8<\xd5\x04H5\xd5\x04P6\xd5\x048<\xd5\x04\xc08\xd5\x04\xf86\xd5\x04\xd8>\xd5\x04\xf89\xd5\x04\xb81\xd5\x04\xd8;\xd5\x0486\xd5\x04X1\xd5\x04\xf02\xd5\x04\x00>\xd5\x04\xa8>\xd5\x04\xd0=\xd5\x04p:\xd5\x04H>\xd5\x04\xd82\xd5\x0405\xd5\x04\x10=\xd5\x04\xa0=\xd5\x04\x188\xd5\x04\x185\xd5\x04p4\xd5\x04\xe0?\xd5\x04\x98?\xd5\x04\x086\xd5\x04\x08?\xd5\x04\xa0:\xd5\x04\xb0?\xd5\x04\x005\xd5\x04\xc83\xd5\x04\x089\xd5\x04\x90>\xd5\x04H8\xd5\x04x2\xd5\x04\x881\xd5\x04\x104\xd5\x04\xb87\xd5\x04\xd07\xd5\x04\xb0<\xd5\x04\xa82\xd5\x04\x88=\xd5\x04`2\xd5\x04\xc0;\xd5\x04(4\xd5\x04\x983\xd5\x04\xc89\xd5\x04\x88:\xd5\x04p=\xd5\x04`;\xd5\x04H;\xd5\x04\x887\xd5\x04@=\xd5\x04\xb8=\xd5\x04\xc8?\xd5\x04\x101\xd5\x04\x905\xd5\x04\xe87\xd5\x04\xc86\xd5\x04\xa85\xd5\x04@4\xd5\x04h9\xd5\x04P0\xd5\x040>\xd5\x04p7\xd5\x04\x002\xd5\x04\xd0:\xd5\x04h0\xd5\x04x8\xd5\x04\xb00\xd5\x04`>\xd5\x04\x18;\xd5\x04\xa01\xd5\x04P?\xd5\x04(=\xd5\x04X4\xd5\x04\xe8=\xd5\x04x;\xd5\x04P9\xd5\x04(:\xd5\x04h?\xd5\x04\xf0>\xd5\x04\x107\xd5\x04\xe00\xd5\x04\xc0>\xd5\x04\xf05\xd5\x04x>\xd5\x04\xe8:\xd5\x04\x00;\xd5\x04\x18>\xd5\x04\xe09\xd5\x04\xa88\xd5\x04 ?\xd5\x048?\xd5\x04\xe06\xd5\x04\x80<\xde\x04h0\xde\x040>\xde\x04\xb00\xde\x04\xd0:\xde\x04\xf8<\xde\x04\x08?\xde\x04\x80?\xde\x04\x107\xde\x0405\xde\x04\x88:\xde\x04\x00>\xde\x040;\xde\x04\xc89\xde\x04\x986\xde\x04\xf08\xde\x04\xe0?\xde\x04\xa0:\xde\x04\xc83\xde\x04\x809\xde\x04\xa88\xde\x04\xa8;\xde\x04\xf89\xde\x04p=\xde\x04x8\xde\x04\x18>\xde\x04\xb8:\xde\x04\x90;\xde\x04X=\xde\x04@4\xde\x04\x18;\xde\x04\xd01\xde\x04\xd0=\xde\x04`5\xde\x04\xf86\xde\x04H>\xde\x04@:\xde\x04\xe81\xd5\x04P3\xd5\x04\xe03\xd5\x04H2\xd5\x04P<\xd5\x04`5\xd5\x0483\xd5\x04\xb03\xd5\x04@7\xd5\x04 6\xd5\x0402\xd5\x0480\xd5\x04@1\xd5\x04\x800\xd5\x04\x182\xd5\x04X7\xd5\x04\xd01\xd5\x04\xc05\xd5\x0408\xd5\x04p1\xd5\x04x5\xd5\x04\x908\xd5\x04\x806\xd5\x04(1\xd5\x04(7\xd5\x04\xb06\xd5\x04\x008\xd5\x04\xa04\xd5\x04\xf8<\xd5\x04\x08<\xd5\x04\xb09\xd5\x040;\xd5\x04\xf83\xd5\x04\x803\xd5\x04\xd88\xd5\x04 <\xd5\x04\xf08\xd5\x04\x986\xd5\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1056
sg895
g1052
sg909
g1063
sg904
g1060
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1086
sg895
g1082
sg909
g1093
sg904
g1090
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g1022
sg895
g1099
sg909
g1029
sg904
g1106
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1118
sg895
g1114
sg909
g1125
sg904
g1122
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g1141
sg895
g1131
sg909
g1135
sg904
g1139
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1158
sg895
g1148
sg909
g1152
sg904
g1156
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g971
sg895
g1165
sg909
g978
sg904
g1172
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1184
sg895
g1180
sg909
g1191
sg904
g1188
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1056
sg895
g1210
sg909
g1063
sg904
g1217
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g920
sg895
g1238
sg909
g927
sg904
g1245
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1086
sg895
g1082
sg909
g1093
sg904
g1090
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1056
sg895
g1210
sg909
g1063
sg904
g1217
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1118
sg895
g1331
sg909
g1125
sg904
g1338
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1141
sg895
g1131
sg909
g1135
sg904
g1139
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1382
sg895
g1372
sg909
g1376
sg904
g1380
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1393
sg895
g1389
sg909
g1400
sg904
g1397
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1410
sg895
g1406
sg909
g1417
sg904
g1414
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g920
sg895
g1238
sg909
g927
sg904
g1245
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1393
sg895
g1389
sg909
g1400
sg904
g1397
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g988
sg895
g1449
sg909
g995
sg904
g1456
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1056
sg895
g1052
sg909
g1063
sg904
g1060
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g954
sg895
g1477
sg909
g961
sg904
g1484
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1005
sg895
g1492
sg909
g1012
sg904
g1499
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g1393
sg895
g1520
sg909
g1400
sg904
g1527
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1039
sg895
g1535
sg909
g1046
sg904
g1542
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g1382
sg895
g1372
sg909
g1376
sg904
g1380
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1118
sg895
g1114
sg909
g1125
sg904
g1122
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1382
sg895
g1576
sg909
g1376
sg904
g1583
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g1595
sg895
g1591
sg909
g1602
sg904
g1599
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1382
sg895
g1576
sg909
g1376
sg904
g1583
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1410
sg895
g1406
sg909
g1417
sg904
g1414
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1638
sg895
g1634
sg909
g1645
sg904
g1642
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g1141
sg895
g1131
sg909
g1135
sg904
g1139
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g971
sg895
g1165
sg909
g978
sg904
g1172
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g1410
sg895
g1406
sg909
g1417
sg904
g1414
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g1184
sg895
g1690
sg909
g1191
sg904
g1697
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g1382
sg895
g1372
sg909
g1376
sg904
g1380
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1022
sg895
g1099
sg909
g1029
sg904
g1106
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g1056
sg895
g1052
sg909
g1063
sg904
g1060
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g1595
sg895
g1744
sg909
g1602
sg904
g1751
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1005
sg895
g1492
sg909
g1012
sg904
g1499
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g1184
sg895
g1690
sg909
g1191
sg904
g1697
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1118
sg895
g1331
sg909
g1125
sg904
g1338
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g937
sg895
g1798
sg909
g944
sg904
g1805
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g1022
sg895
g1099
sg909
g1029
sg904
g1106
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g988
sg895
g1449
sg909
g995
sg904
g1456
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g1086
sg895
g1082
sg909
g1093
sg904
g1090
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1118
sg895
g1114
sg909
g1125
sg904
g1122
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1039
sg895
g1535
sg909
g1046
sg904
g1542
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1056
sg895
g1052
sg909
g1063
sg904
g1060
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1382
sg895
g1576
sg909
g1376
sg904
g1583
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1158
sg895
g1956
sg909
g1152
sg904
g1963
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g900
sg895
g1971
sg909
g910
sg904
g1978
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g954
sg895
g1477
sg909
g961
sg904
g1484
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1595
sg895
g1744
sg909
g1602
sg904
g1751
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g937
sg895
g1798
sg909
g944
sg904
g1805
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1410
sg895
g2038
sg909
g1417
sg904
g2045
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g1638
sg895
g2079
sg909
g1645
sg904
g2086
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1056
sg895
g1210
sg909
g1063
sg904
g1217
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g1158
sg895
g1956
sg909
g1152
sg904
g1963
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1118
sg895
g1114
sg909
g1125
sg904
g1122
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1005
sg895
g1492
sg909
g1012
sg904
g1499
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1086
sg895
g2146
sg909
g1093
sg904
g2153
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g988
sg895
g1449
sg909
g995
sg904
g1456
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1158
sg895
g1956
sg909
g1152
sg904
g1963
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1393
sg895
g1520
sg909
g1400
sg904
g1527
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g920
sg895
g1238
sg909
g927
sg904
g1245
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g1184
sg895
g1180
sg909
g1191
sg904
g1188
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g1410
sg895
g1406
sg909
g1417
sg904
g1414
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1118
sg895
g1114
sg909
g1125
sg904
g1122
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1184
sg895
g1180
sg909
g1191
sg904
g1188
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g900
sg895
g1971
sg909
g910
sg904
g1978
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1638
sg895
g1634
sg909
g1645
sg904
g1642
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g1039
sg895
g1535
sg909
g1046
sg904
g1542
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g1393
sg895
g1520
sg909
g1400
sg904
g1527
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g988
sg895
g1449
sg909
g995
sg904
g1456
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1158
sg895
g1148
sg909
g1152
sg904
g1156
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g1086
sg895
g2146
sg909
g1093
sg904
g2153
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g937
sg895
g1798
sg909
g944
sg904
g1805
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1595
sg895
g1744
sg909
g1602
sg904
g1751
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1638
sg895
g2079
sg909
g1645
sg904
g2086
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1056
sg895
g1210
sg909
g1063
sg904
g1217
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1141
sg895
g2434
sg909
g1135
sg904
g2441
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g1141
sg895
g2434
sg909
g1135
sg904
g2441
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1638
sg895
g1634
sg909
g1645
sg904
g1642
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g1086
sg895
g1082
sg909
g1093
sg904
g1090
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1005
sg895
g1492
sg909
g1012
sg904
g1499
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g900
sg895
g1971
sg909
g910
sg904
g1978
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1056
sg895
g1052
sg909
g1063
sg904
g1060
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1158
sg895
g1148
sg909
g1152
sg904
g1156
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g1595
sg895
g1591
sg909
g1602
sg904
g1599
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1158
sg895
g1148
sg909
g1152
sg904
g1156
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g971
sg895
g1165
sg909
g978
sg904
g1172
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1086
sg895
g2146
sg909
g1093
sg904
g2153
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1184
sg895
g1690
sg909
g1191
sg904
g1697
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g1141
sg895
g1131
sg909
g1135
sg904
g1139
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1086
sg895
g1082
sg909
g1093
sg904
g1090
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g1022
sg895
g1099
sg909
g1029
sg904
g1106
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1382
sg895
g1372
sg909
g1376
sg904
g1380
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1410
sg895
g2038
sg909
g1417
sg904
g2045
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1595
sg895
g1591
sg909
g1602
sg904
g1599
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1141
sg895
g2434
sg909
g1135
sg904
g2441
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1595
sg895
g1744
sg909
g1602
sg904
g1751
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g1158
sg895
g1956
sg909
g1152
sg904
g1963
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g954
sg895
g1477
sg909
g961
sg904
g1484
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1382
sg895
g1576
sg909
g1376
sg904
g1583
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1158
sg895
g1956
sg909
g1152
sg904
g1963
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g988
sg895
g1449
sg909
g995
sg904
g1456
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g1595
sg895
g1744
sg909
g1602
sg904
g1751
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1184
sg895
g1180
sg909
g1191
sg904
g1188
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1393
sg895
g1389
sg909
g1400
sg904
g1397
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g1410
sg895
g1406
sg909
g1417
sg904
g1414
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1382
sg895
g1576
sg909
g1376
sg904
g1583
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g920
sg895
g1238
sg909
g927
sg904
g1245
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1086
sg895
g2146
sg909
g1093
sg904
g2153
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g1393
sg895
g1520
sg909
g1400
sg904
g1527
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g920
sg895
g1238
sg909
g927
sg904
g1245
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1022
sg895
g1099
sg909
g1029
sg904
g1106
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g1382
sg895
g1372
sg909
g1376
sg904
g1380
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1141
sg895
g1131
sg909
g1135
sg904
g1139
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g1393
sg895
g1389
sg909
g1400
sg904
g1397
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1005
sg895
g1492
sg909
g1012
sg904
g1499
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g971
sg895
g1165
sg909
g978
sg904
g1172
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1410
sg895
g2038
sg909
g1417
sg904
g2045
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g1638
sg895
g1634
sg909
g1645
sg904
g1642
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1118
sg895
g1331
sg909
g1125
sg904
g1338
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g937
sg895
g1798
sg909
g944
sg904
g1805
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1638
sg895
g2079
sg909
g1645
sg904
g2086
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g1118
sg895
g1331
sg909
g1125
sg904
g1338
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1039
sg895
g1535
sg909
g1046
sg904
g1542
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1393
sg895
g1520
sg909
g1400
sg904
g1527
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1184
sg895
g1180
sg909
g1191
sg904
g1188
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1118
sg895
g1331
sg909
g1125
sg904
g1338
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g1410
sg895
g2038
sg909
g1417
sg904
g2045
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1056
sg895
g1210
sg909
g1063
sg904
g1217
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g1184
sg895
g1690
sg909
g1191
sg904
g1697
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1638
sg895
g1634
sg909
g1645
sg904
g1642
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1393
sg895
g1389
sg909
g1400
sg904
g1397
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1638
sg895
g2079
sg909
g1645
sg904
g2086
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1410
sg895
g2038
sg909
g1417
sg904
g2045
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1638
sg895
g2079
sg909
g1645
sg904
g2086
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g954
sg895
g1477
sg909
g961
sg904
g1484
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g954
sg895
g1477
sg909
g961
sg904
g1484
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g1141
sg895
g2434
sg909
g1135
sg904
g2441
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g971
sg895
g1165
sg909
g978
sg904
g1172
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1086
sg895
g2146
sg909
g1093
sg904
g2153
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g900
sg895
g1971
sg909
g910
sg904
g1978
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1184
sg895
g1690
sg909
g1191
sg904
g1697
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1158
sg895
g1148
sg909
g1152
sg904
g1156
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g937
sg895
g1798
sg909
g944
sg904
g1805
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g1595
sg895
g1591
sg909
g1602
sg904
g1599
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g1039
sg895
g1535
sg909
g1046
sg904
g1542
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1595
sg895
g1591
sg909
g1602
sg904
g1599
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1141
sg895
g2434
sg909
g1135
sg904
g2441
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g900
sg895
g1971
sg909
g910
sg904
g1978
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I81916240
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S' \x1a\xe2\x0b\x80\xf99\x0c\x88\x11\xe2\x0b8\x11\xe2\x0b@\x1d\xe2\x0b8\x11\xe2\x0b@t\xe2\x0bh\xba\xe2\x0b\xc0\xb9\xe2\x0b\x00\x12\xe2\x0b`u\xe2\x0bpt\xe2\x0b\xa0t\xe2\x0b\xd8\x11\xe2\x0b\xa0t\xe2\x0b\xb0\x11\xe2\x0b v\xe2\x0b\x80\xf89\x0c@t\xe2\x0b@\xf59\x0cpt\xe2\x0b\xc0\xb9\xe2\x0b\xf8\x19\xe2\x0b`u\xe2\x0b\x00u\xe2\x0b\xc0\x10\xe2\x0b\xa0\xba\xe2\x0b\x98\x1f\xe2\x0b\xd0t\xe2\x0b\xa0\xf79\x0c0\xba\xe2\x0b\xd8\x11\xe2\x0b\xa0\xf79\x0cp\x1f\xe2\x0b\x80\xf89\x0c v\xe2\x0b\x00u\xe2\x0b@t\xe2\x0b\x10\xbb\xe2\x0bpt\xe2\x0b\xc0\xb9\xe2\x0b\xa0t\xe2\x0b@t\xe2\x0b\xd8\x11\xe2\x0bpt\xe2\x0b\xa0t\xe2\x0b0\xba\xe2\x0b\xc0\xb9\xe2\x0b8\x11\xe2\x0b@\xf59\x0c\x80\xf99\x0c \x1a\xe2\x0bp\x1f\xe2\x0b\x00u\xe2\x0b\x00\x12\xe2\x0b \x1a\xe2\x0b0u\xe2\x0b\x10\xbb\xe2\x0b@\xf69\x0c@\xf59\x0c\xc0\x10\xe2\x0b\xd8\xba\xe2\x0b\xd8\x11\xe2\x0b\xb0\x11\xe2\x0b@\x1d\xe2\x0b`\xf89\x0c8\x11\xe2\x0b\x98\x10\xe2\x0b@\x1d\xe2\x0b`u\xe2\x0b\x00\x12\xe2\x0b\xc0u\xe2\x0b\xa0\xf79\x0c\x80\xf99\x0c0u\xe2\x0b8\x11\xe2\x0b\xc0\xb9\xe2\x0b\x98\x1f\xe2\x0b\x80\xf89\x0c\xf8\x19\xe2\x0b\xf0u\xe2\x0bp\x1f\xe2\x0b \x1a\xe2\x0b@\x1d\xe2\x0b\x00u\xe2\x0b@t\xe2\x0b0u\xe2\x0b\x00u\xe2\x0b@\xf59\x0c`\xf89\x0c\xc0\x10\xe2\x0b\xf8\xb9\xe2\x0b\xa0\xf79\x0c\xd0t\xe2\x0b\xc0\x1f\xe2\x0b\x00u\xe2\x0b\xd0t\xe2\x0b\xc0\xb9\xe2\x0b@\xf59\x0cPv\xe2\x0b\xf8\xb9\xe2\x0b\x98\x1f\xe2\x0b\x00u\xe2\x0b@\xf59\x0c\xc0\x10\xe2\x0b\xc0\x1f\xe2\x0b\x00u\xe2\x0b@t\xe2\x0b\x98\x10\xe2\x0bpt\xe2\x0b\x00u\xe2\x0b\xa0\xf79\x0c0u\xe2\x0b\xb0\x11\xe2\x0b@\xf59\x0cH\x1f\xe2\x0b@\x1d\xe2\x0b\x80\xf89\x0c\x80\xf99\x0c\xc0\x10\xe2\x0b\x10\xbb\xe2\x0b\xc0u\xe2\x0b\x98\x10\xe2\x0b\xd8\x11\xe2\x0b\xf8\xb9\xe2\x0b\xa0t\xe2\x0b\x98\x10\xe2\x0b@t\xe2\x0b\xd0t\xe2\x0b\xc0u\xe2\x0b@\xf69\x0c\xa0\xf79\x0c\xc0\xb9\xe2\x0b\x98\x10\xe2\x0b\xa0t\xe2\x0b@\xf59\x0cpt\xe2\x0b\xf8\x19\xe2\x0b\xd0t\xe2\x0b\x00\x12\xe2\x0b\xf0u\xe2\x0b\x80\xf99\x0c \x1a\xe2\x0b\xc0\xb9\xe2\x0b\xa0\xf79\x0c\xf8\xb9\xe2\x0b\x98\x10\xe2\x0b\x90u\xe2\x0b0u\xe2\x0bh\xba\xe2\x0b\x98\x10\xe2\x0b@\xf69\x0c`\xf89\x0c\xb0\x11\xe2\x0b\x80\xf99\x0c\xd0t\xe2\x0b\x10\xbb\xe2\x0b0u\xe2\x0b\xa0\xf79\x0cH\x1f\xe2\x0b\xb0\x11\xe2\x0b0u\xe2\x0b\xa0t\xe2\x0b \x1a\xe2\x0b\xf8\x19\xe2\x0b\xd8\x11\xe2\x0b\x90u\xe2\x0b\xf8\xb9\xe2\x0b\x80\xf89\x0c \x15\xe2\x0bpt\xe2\x0b\xa0t\xe2\x0b\x88\x11\xe2\x0b\xa0\xba\xe2\x0b\x00\x12\xe2\x0b\x80\xf89\x0c\xb0\x11\xe2\x0b\x98\x1f\xe2\x0b\xb0\x11\xe2\x0b v\xe2\x0b@t\xe2\x0b\x00\x12\xe2\x0b@\xf69\x0c\x98\x10\xe2\x0b\x80\xf99\x0c\xf8\xb9\xe2\x0b\x80\xf89\x0c\xf8\x19\xe2\x0b0u\xe2\x0b\x00\x12\xe2\x0b@\x1d\xe2\x0b\x80\xf99\x0c0u\xe2\x0b \x1a\xe2\x0bp\x1f\xe2\x0b\x00\x12\xe2\x0b\xd0t\xe2\x0bp\x1f\xe2\x0b\xc0\xb9\xe2\x0b\xb0\x11\xe2\x0b'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S'\x00\xe7\xba\x1e\xe0\xe5\xba\x1e\xc0\xe6\xba\x1e\xc0\xe0\xba\x1e\xe0\xe6\xba\x1e`\xe6\xba\x1e\x80\xe5\xba\x1e`\xe7\xba\x1e\x80\xe6\xba\x1e\x80\xe7\xba\x1e\x80\xe8\xba\x1e\xc0\xe7\xba\x1e@\xe6\xba\x1e@\xe8\xba\x1e\x80\xe9\xba\x1e\xc0\xe8\xba\x1e\xc0\xe5\xba\x1e\xa0\xe7\xba\x1e \xe7\xba\x1e@\xe9\xba\x1e\x00\xe9\xba\x1e\xe0\xe9\xba\x1e \xe9\xba\x1e\xe0\xe8\xba\x1e`\xe8\xba\x1e\xa0\xe5\xba\x1e\xa0\xea\xba\x1e\xa0\xe9\xba\x1e@\xe7\xba\x1e\xc0\xe9\xba\x1e\x00\xe8\xba\x1e\xa0\xe8\xba\x1e\xc0\xea\xba\x1e\xe0\xea\xba\x1e \xeb\xba\x1e\x80\xea\xba\x1e\x00\xe6\xba\x1e\x80\xeb\xba\x1e`\xea\xba\x1e \xe8\xba\x1e\xe0\xe7\xba\x1e@\xeb\xba\x1e\xa0\xe6\xba\x1e`\xeb\xba\x1e@\xec\xba\x1e\xa0\xec\xba\x1e \xec\xba\x1e\x00\xec\xba\x1e\x00\xed\xba\x1e\x00\xea\xba\x1e@\xea\xba\x1e`\xed\xba\x1e \xed\xba\x1e\xe0\xeb\xba\x1e\xc0\xed\xba\x1e\xa0\xed\xba\x1e\x00\xeb\xba\x1e`\xec\xba\x1e\x80\xec\xba\x1e \xea\xba\x1e\xe0\xec\xba\x1e\xe0\xee\xba\x1e\xa0\xee\xba\x1e\xc0\xeb\xba\x1e\xe0\xed\xba\x1e\x80\xed\xba\x1e\x80\xef\xba\x1e \xee\xba\x1e\xc0\xef\xba\x1e`\xe9\xba\x1e\x00\xee\xba\x1e@\xed\xba\x1e\xc0\xec\xba\x1e@\xef\xba\x1e@\xee\xba\x1e`\xef\xba\x1e\xa0\xeb\xba\x1e\xe0\xef\xba\x1e\xc0\xee\xba\x1e`\xee\xba\x1e \xe6\xba\x1e \xef\xba\x1e`\xe9\xac\x04\x00\xe8\xac\x04@\xa2\xe3\x1e \xa2\xe3\x1e\xc0\xa0\xe3\x1e\xe0\xe9\xac\x04\x80\xa1\xe3\x1e@\xa1\xe3\x1e \xa0\xe3\x1e\x00\xa1\xe3\x1e\x80\xa2\xe3\x1e`\xa0\xe3\x1e\xa0\xa2\xe3\x1e\xc0\xa2\xe3\x1e`\xa3\xe3\x1e\x00\xa2\xe3\x1e\xa0\xa1\xe3\x1e\xc0\xa1\xe3\x1e\xe0\xa1\xe3\x1e\xe0\xa2\xe3\x1e\x80\xa0\xe3\x1e`\xa4\xe3\x1e`\xa2\xe3\x1e@\xa0\xe3\x1e\x00\xa3\xe3\x1e\x80\xa3\xe3\x1e\xa0\xa0\xe3\x1e \xa4\xe3\x1e\x80\xa4\xe3\x1e`\xa5\xe3\x1e@\xa4\xe3\x1e@\xa3\xe3\x1e\x00\xa4\xe3\x1e \xa3\xe3\x1e\xa0\xa3\xe3\x1e\x80\xa5\xe3\x1e\xa0\xa4\xe3\x1e\xc0\xa5\xe3\x1e`\xa1\xe3\x1e\xa0\xa5\xe3\x1e \xa1\xe3\x1e@\xa6\xe3\x1e\xc0\xa4\xe3\x1e\x00\xa7\xe3\x1e\xe0\xa5\xe3\x1e`\xa7\xe3\x1e\xe0\xa4\xe3\x1e \xa5\xe3\x1e@\xa5\xe3\x1e\xc0\xa3\xe3\x1e\x00\xa8\xe3\x1e\x00\xa6\xe3\x1e\xe0\xa0\xe3\x1e\x80\xa7\xe3\x1e\xa0\xa6\xe3\x1e@\xa8\xe3\x1e\xe0\xa7\xe3\x1e \xa6\xe3\x1e`\xa8\xe3\x1e@\xa7\xe3\x1e\xe0\xa3\xe3\x1e\xa0\xa7\xe3\x1e\x80\xa6\xe3\x1e\xe0\xa6\xe3\x1e\xc0\xa6\xe3\x1e\x80\xa9\xe3\x1e\xe0\xa9\xe3\x1e`\xa9\xe3\x1e \xaa\xe3\x1e\xe0\xa8\xe3\x1e@\xa9\xe3\x1e\xa0\xa9\xe3\x1e\x00\xa9\xe3\x1e\xa0\xa8\xe3\x1e\xe0\xaa\xe3\x1e\x80\xaa\xe3\x1e\xc0\xaa\xe3\x1e`\xab\xe3\x1e@\xaa\xe3\x1e \xa8\xe3\x1e\x80\xa8\xe3\x1e@\xab\xe3\x1e\xc0\xa7\xe3\x1e\x00\xab\xe3\x1e\xe0\xab\xe3\x1e\x00\xaa\xe3\x1e \xac\xe3\x1e\xa0\xac\xe3\x1e \xa9\xe3\x1e\xc0\xa9\xe3\x1e`\xac\xe3\x1e\xc0\xac\xe3\x1e\x00\xa5\xe3\x1e\x00\xac\xe3\x1e\xc0\xab\xe3\x1e\xa0\xab\xe3\x1e \xa7\xe3\x1e\xc0\xa8\xe3\x1e\xe0\xad\xe3\x1e\x80\xac\xe3\x1e \xab\xe3\x1e\x00\xae\xe3\x1e\x80\xae\xe3\x1e@\xae\xe3\x1e@\xac\xe3\x1e`\xad\xe3\x1e\xa0\xad\xe3\x1e \xaf\xe3\x1e`\xae\xe3\x1e\xa0\xae\xe3\x1e\xc0\xae\xe3\x1e\x80\xaf\xe3\x1e@\xaf\xe3\x1e\x80\xab\xe3\x1e\xe0\xaf\xe3\x1e\xe0\xac\xe3\x1e\x00\xaf\xe3\x1e@\xad\xe3\x1e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'\xa6N\x05@e\xde\xdd?a\xf1n?\xbb\xc7\xec?\xa8\xa9\x8a?0\xfc??\x01e&@g\x1cB@\x8bef@\xe9\xa3\x8a?\x0e\xce]?~d\xa6?>\xca\xac?%"\x02@;F\xa4?\x86!b?\xba\xee\x8e?\xc4\xcb\xcc?\x88\xc6*?\xa4\x1f\x12@meF@\xd4\xed\xae?\xdb\xbb{?\xef\xaaj?T\xe0]?\xd9\x0e\x91?gS\x15?\xca\xd5\x1d?\xc8w7?\x12g&?j\xfa??\x89R\xf5?ww7?G\x9a\x99?FO\x84?\x16V&?\xf5\x9b\x19?\xeb\x87\x08?\xdd\xdd]?\xc5\xbb\x9b?\xf1\xb4\xca?\x08\x12\x91?\x06\xbc{?\xb423?&\x92Y?\xad\x83H?8\xf4.?K\xbb\x9b?\xeaC\xa4?\xe2bf?Tr7?\xc28s?\xa5 \xc2?>TU?\x8f@\x84?\x82\x88\x19?\xd1\x84\xd7?\x0ey7?\xf3\xee.?\x87\xd7\x1d?\xca\x87H?QV\x15?\x93\xd8\x8c?\x07!\x82?\xc8\rQ?\x1a\x1cb?&\xa9\xca?\x8c?\x93?\xea\xaaj?\xd7C\x15?\xc5\xd9\xbd?Vw\xb7?J\xc6j?gn7?\xf3cf?\\\x84\x88?\x01\x10\xf1?\x98\r\xc0?M13?\xb0.3?\xb4\xf7??\xc5\x13b?MU&??Js?\x9e \xe2?\xcb\rb?\xcePU?L\x9b*?\xa2v\x86?\xa2\xe9\xee?\xefU\xb5?\x18\x03\x80?cvw@q\x16@?\x08ef?\x9c.s?\x10@\x84?\n\xdb]?\t!"?\x07jU?\xee\x0bQ?\xfc23?\x89g&?\x02\xb6;?5\xfe??/\x00\x00@\xa4\xed.?\xd2u7?\xad\x10\x11?Av\'@:f&?`\xdf\x1d?\xa6\xd6\x1d?\xfb\xcaL?X\xca\x0c?\r\xf5\xff>=\xb5\x19?f\x0c\x11?\xdb\x82H?D\xb8;?\x1b\xde\x1d?\xdc\xa8*?\x1f\x8d7?a\x12\x11?\x0cv7?D1s?-\xed.?\x01f\xe6?\x05\x8a\x19?\xd12s?\xca|7?N\xf6??Q\x00\x80?\xcf\xf1.?\xc3ef?\xdf2\x93?\x83\x99Y?v.3?a>s?q\xa8\x8a?`\xa8*?Y\x11\x11?\xccs\x08?Ia\x86?\xbd\x8aH?t\x10\x11?\xff\x7f\x08?\x0f\xbb\x9b?\xdd\xb8\xbb?\x88@\x84?2\xf9]?\xbe.s?<\xff??\x90\xda\xbd?\xd7\x96Y?\x0823?\x1b\xbc\x9b?\xdb,3?\xea@D?\xaf\xa9*?\xa2_\x86?\x16~&?O b?\x8fd7?\x00R\x15?\xcc\xbb{?\x1c\x0e\x91?Y\xf5]?\x8b\xfc\x7f?\xf1\xc9\x8c?-\xcc\xcc?Qu7?\xec\xe3L?\xa7V\x15?\x0b\xa0j?\\NU?`TU?\xff\xbb\xdb?\x07\xcb\x8c?*\x11Q?\xe6U\x95?b\x8dY?\xec$b?\xb4\xdc\x1d?AQ\x15?\x97\xc6\x0c?\xd5U\x15?\xa4E\x04?\xdet\xf7>xq7?\x8e\x0e\x91?S\xeb\x0e@\x81\x0f\xf3B\xeb\xffP?\x01\x14Q?\xfd|H?\x85a&?\xb133?\xa3\x12\x91?\x01\x0e\x91?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'\xe84\xde\x04\xe8=\xde\x04\x18\xae\xf2\x04\xa8\xae\xf2\x04p\xaa\xf2\x04\xf0\xab\xf2\x04\xb8\xa7\xf2\x04\xa0\xa4\xf2\x04P\xac\xf2\x04\x88\xaa\xf2\x04 \xac\xf2\x04\xe8\xaa\xf2\x04\xb0\xaf\xf2\x04h\xaf\xf2\x04\x18\xa2\xf2\x04\x80\xaf\xf2\x048\xa6\xf2\x04P\xa9\xf2\x04X\xaa\xf2\x04\x00\xab\xf2\x04x\xa5\xf2\x04P\xa6\xf2\x04\x98\xaf\xf2\x04`\xae\xf2\x04H\xa2\xf2\x04X\xa1\xf2\x04\x90\xa8\xf2\x04H\xa8\xf2\x04P\xaf\xf2\x04\xa0\xaa\xf2\x04\xf0\xa2\xf2\x04\xd8\xae\xf2\x04\x98\xa3\xf2\x04 \xa9\xf2\x04\x10\xaa\xf2\x04\xa0\xad\xf2\x04\xc8\xa9\xf2\x04\xa0\xa7\xf2\x04\x18\xa5\xf2\x04\xf8\xa0\xf2\x04\x98\xac\xf2\x04h\xa9\xf2\x048\xa0\xf2\x04\x88\xa4\xf2\x04h\xa0\xf2\x04P\xa0\xf2\x04\xd8\xa8\xf2\x04(\xa7\xf2\x04`\xa8\xf2\x04x\xae\xf2\x048\xac\xf2\x04\xa8\xa8\xf2\x04@\xaa\xf2\x04\xa8\xab\xf2\x04\x10\xa4\xf2\x04\xc0\xa5\xf2\x04\xe0\xa9\xf2\x04(\xa1\xf2\x04\xe8\xa1\xf2\x04\x88\xad\xf2\x04\x00\xa2\xf2\x04\xb8\xa4\xf2\x04\xc0\xa2\xf2\x04\xe0\xa3\xf2\x04\xd0\xaa\xf2\x04P\xa3\xf2\x04\xf0\xa8\xf2\x04\xc0\xa8\xf2\x04\xd0\xa7\xf2\x04\xe0\xac\xf2\x04@\xa7\xf2\x04x\xab\xf2\x048\xa3\xf2\x04\x80\xa6\xf2\x048\xaf\xf2\x04p\xad\xf2\x04\x80\xa3\xf2\x04\xc0\xab\xf2\x04\xc8\xa6\xf2\x04\x00\xa5\xf2\x04\xc8\xa0\xf2\x04\xe0\x905\x02H\x9e5\x02\xe8M\xde\x04\xf0H\xde\x04\xf0K\xde\x04\xb0C\xde\x04\xe0I\xde\x04\x80I\xde\x04\xd8K\xde\x04\x18H\xde\x04@M\xde\x04hF\xde\x04`N\xde\x048C\xde\x04HN\xde\x048@\xde\x04h@\xde\x04 I\xde\x04`B\xde\x04\xc8@\xde\x04\xb0O\xde\x04pA\xde\x04\xb0@\xde\x04\xc0K\xde\x04\x08F\xde\x04\x18N\xde\x04HB\xde\x04\x10D\xde\x04\x98O\xde\x04pJ\xde\x04\xa0A\xde\x04\x08O\xde\x04\xb8J\xde\x04xK\xde\x04pM\xde\x04\x98L\xde\x04xH\xde\x04(J\xde\x04\x88A\xde\x04 C\xde\x04\xf0\xe8\xd5\x04\x00\xe8\xd5\x04\xc0\xeb\xd5\x04@\xe4\xd5\x04\xe0\xe6\xd5\x04\xc8\xe6\xd5\x040\xeb\xd5\x04\xc0\xe5\xd5\x04\xf8\xe6\xd5\x04\xc0\xee\xd5\x04 \xe9\xd5\x04 \xe6\xd5\x04\x80\xec\xd5\x04@\xed\xd5\x04X\xed\xd5\x04\x00\xee\xd5\x048\xe0\xd5\x04\xc8\xec\xd5\x04\xd8\xee\xd5\x04\xd8\xeb\xd5\x04`\xee\xd5\x04\xf8\xe9\xd5\x04X\xe4\xd5\x04(\xe1\xd5\x04\xc8\xe0\xd5\x04\xa0\xe1\xd5\x04\xb8\xed\xd5\x04\x08\xec\xd5\x04\x88\xed\xd5\x04 \xef\xd5\x04p\xe7\xd5\x04x\xee\xd5\x04 \xe3\xd5\x04H\xe8\xd5\x04\xb0\xef\xd5\x04\xb0\xe3\xd5\x04\xa0\xed\xd5\x04\xe8\xea\xd5\x04 \xe0\xd5\x040\xa2\xf2\x04\x80\xa9\xf2\x04\xf8\xa9\xf2\x04h\xa3\xf2\x04\xb0\xac\xf2\x04\x90\xae\xf2\x04\xa0\xa1\xf2\x048\xa9\xf2\x04x\xa2\xf2\x04\x08\xa6\xf2\x04\x98\xa9\xf2\x04\x08\xaf\xf2\x040\xab\xf2\x04h\xac\xf2\x04p\xa1\xf2\x04\x10\xa1\xf2\x04\xc8\xa3\xf2\x04\xe0\xa0\xf2\x04h\xa6\xf2\x04\x10\xa7\xf2\x04\xd8\xab\xf2\x04\xd8\xa5\xf2\x04p\xa7\xf2\x04 \xaf\xf2\x04\xb0\xa3\xf2\x040\xae\xf2\x04\xd0\xa4\xf2\x04H\xae\xf2\x04\xc8\xac\xf2\x04\xc8\xaf\xf2\x04\xb0\xa9\xf2\x04\xe0\xaf\xf2\x04\xa8\xa5\xf2\x04p\xa4\xf2\x04\xb8\xaa\xf2\x04\x18\xab\xf2\x04\xe0\xa6\xf2\x04\xf8\xa3\xf2\x04(\xad\xf2\x040\xa8\xf2\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3698
sg3633
g3722
sg3647
g3692
sg3642
g3729
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3764
sg3633
g3754
sg3647
g3758
sg3642
g3762
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3775
sg3633
g3771
sg3647
g3782
sg3642
g3779
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3764
sg3633
g3754
sg3647
g3758
sg3642
g3762
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3638
sg3633
g3801
sg3647
g3648
sg3642
g3808
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3837
sg3633
g3833
sg3647
g3844
sg3642
g3841
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3837
sg3633
g3833
sg3647
g3844
sg3642
g3841
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3907
sg3633
g3897
sg3647
g3901
sg3642
g3905
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3918
sg3633
g3914
sg3647
g3925
sg3642
g3922
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3741
sg3633
g3931
sg3647
g3748
sg3642
g3938
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3950
sg3633
g3946
sg3647
g3957
sg3642
g3954
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3775
sg3633
g3771
sg3647
g3782
sg3642
g3779
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g4019
sg3633
g4015
sg3647
g4026
sg3642
g4023
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g4036
sg3633
g4032
sg3647
g4043
sg3642
g4040
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3950
sg3633
g4049
sg3647
g3957
sg3642
g4056
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g3854
sg3633
g4064
sg3647
g3861
sg3642
g4071
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g3907
sg3633
g4079
sg3647
g3901
sg3642
g4086
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g3681
sg3633
g4133
sg3647
g3675
sg3642
g4140
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g4036
sg3633
g4032
sg3647
g4043
sg3642
g4040
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g3918
sg3633
g3914
sg3647
g3925
sg3642
g3922
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g3907
sg3633
g3897
sg3647
g3901
sg3642
g3905
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g4019
sg3633
g4187
sg3647
g4026
sg3642
g4194
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g4225
sg3633
g4215
sg3647
g4219
sg3642
g4223
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g3820
sg3633
g4232
sg3647
g3827
sg3642
g4239
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g3775
sg3633
g4247
sg3647
g3782
sg3642
g4254
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3837
sg3633
g3833
sg3647
g3844
sg3642
g3841
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3741
sg3633
g3931
sg3647
g3748
sg3642
g3938
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3820
sg3633
g4232
sg3647
g3827
sg3642
g4239
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g3837
sg3633
g3833
sg3647
g3844
sg3642
g3841
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g3658
sg3633
g4327
sg3647
g3665
sg3642
g4334
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g3775
sg3633
g3771
sg3647
g3782
sg3642
g3779
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g3698
sg3633
g3722
sg3647
g3692
sg3642
g3729
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g3950
sg3633
g3946
sg3647
g3957
sg3642
g3954
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3658
sg3633
g4327
sg3647
g3665
sg3642
g4334
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g4036
sg3633
g4407
sg3647
g4043
sg3642
g4414
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g4019
sg3633
g4015
sg3647
g4026
sg3642
g4023
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g3764
sg3633
g4435
sg3647
g3758
sg3642
g4442
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3638
sg3633
g3801
sg3647
g3648
sg3642
g3808
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g4467
sg3633
g4463
sg3647
g4474
sg3642
g4471
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g4225
sg3633
g4215
sg3647
g4219
sg3642
g4223
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3709
sg3633
g4493
sg3647
g3716
sg3642
g4500
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g3950
sg3633
g4049
sg3647
g3957
sg3642
g4056
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g4036
sg3633
g4032
sg3647
g4043
sg3642
g4040
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g4019
sg3633
g4015
sg3647
g4026
sg3642
g4023
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g3854
sg3633
g4064
sg3647
g3861
sg3642
g4071
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g3884
sg3633
g4560
sg3647
g3891
sg3642
g4567
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3709
sg3633
g4493
sg3647
g3716
sg3642
g4500
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3918
sg3633
g4588
sg3647
g3925
sg3642
g4595
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g4620
sg3633
g4616
sg3647
g4627
sg3642
g4624
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3638
sg3633
g3801
sg3647
g3648
sg3642
g3808
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g3764
sg3633
g4435
sg3647
g3758
sg3642
g4442
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g3820
sg3633
g4232
sg3647
g3827
sg3642
g4239
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g3681
sg3633
g4133
sg3647
g3675
sg3642
g4140
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g4467
sg3633
g4463
sg3647
g4474
sg3642
g4471
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g3775
sg3633
g3771
sg3647
g3782
sg3642
g3779
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3854
sg3633
g4064
sg3647
g3861
sg3642
g4071
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3918
sg3633
g3914
sg3647
g3925
sg3642
g3922
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g4036
sg3633
g4032
sg3647
g4043
sg3642
g4040
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3638
sg3633
g3801
sg3647
g3648
sg3642
g3808
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3709
sg3633
g4493
sg3647
g3716
sg3642
g4500
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g4019
sg3633
g4187
sg3647
g4026
sg3642
g4194
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g3741
sg3633
g3931
sg3647
g3748
sg3642
g3938
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g4467
sg3633
g4867
sg3647
g4474
sg3642
g4874
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g4019
sg3633
g4015
sg3647
g4026
sg3642
g4023
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g3950
sg3633
g4049
sg3647
g3957
sg3642
g4056
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g3918
sg3633
g4588
sg3647
g3925
sg3642
g4595
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g4036
sg3633
g4407
sg3647
g4043
sg3642
g4414
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g4225
sg3633
g4215
sg3647
g4219
sg3642
g4223
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g3681
sg3633
g4133
sg3647
g3675
sg3642
g4140
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3907
sg3633
g4079
sg3647
g3901
sg3642
g4086
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g3837
sg3633
g4973
sg3647
g3844
sg3642
g4980
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g4019
sg3633
g4187
sg3647
g4026
sg3642
g4194
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g3907
sg3633
g3897
sg3647
g3901
sg3642
g3905
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3775
sg3633
g3771
sg3647
g3782
sg3642
g3779
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g3950
sg3633
g3946
sg3647
g3957
sg3642
g3954
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g4467
sg3633
g4463
sg3647
g4474
sg3642
g4471
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g4225
sg3633
g5053
sg3647
g4219
sg3642
g5060
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g3854
sg3633
g4064
sg3647
g3861
sg3642
g4071
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g4019
sg3633
g4187
sg3647
g4026
sg3642
g4194
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3950
sg3633
g4049
sg3647
g3957
sg3642
g4056
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g4036
sg3633
g4407
sg3647
g4043
sg3642
g4414
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g3837
sg3633
g4973
sg3647
g3844
sg3642
g4980
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g4019
sg3633
g4015
sg3647
g4026
sg3642
g4023
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3741
sg3633
g3931
sg3647
g3748
sg3642
g3938
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g4620
sg3633
g4616
sg3647
g4627
sg3642
g4624
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g4019
sg3633
g4187
sg3647
g4026
sg3642
g4194
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g4467
sg3633
g4867
sg3647
g4474
sg3642
g4874
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3950
sg3633
g4049
sg3647
g3957
sg3642
g4056
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g4620
sg3633
g4616
sg3647
g4627
sg3642
g4624
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3709
sg3633
g4493
sg3647
g3716
sg3642
g4500
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g3918
sg3633
g4588
sg3647
g3925
sg3642
g4595
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g4036
sg3633
g4032
sg3647
g4043
sg3642
g4040
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g4225
sg3633
g4215
sg3647
g4219
sg3642
g4223
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g3820
sg3633
g4232
sg3647
g3827
sg3642
g4239
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g4620
sg3633
g5341
sg3647
g4627
sg3642
g5348
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g4225
sg3633
g5053
sg3647
g4219
sg3642
g5060
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3837
sg3633
g3833
sg3647
g3844
sg3642
g3841
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g4620
sg3633
g5341
sg3647
g4627
sg3642
g5348
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g3907
sg3633
g4079
sg3647
g3901
sg3642
g4086
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3775
sg3633
g4247
sg3647
g3782
sg3642
g4254
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g4620
sg3633
g5341
sg3647
g4627
sg3642
g5348
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3837
sg3633
g4973
sg3647
g3844
sg3642
g4980
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3950
sg3633
g3946
sg3647
g3957
sg3642
g3954
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3820
sg3633
g4232
sg3647
g3827
sg3642
g4239
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3698
sg3633
g3722
sg3647
g3692
sg3642
g3729
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3907
sg3633
g4079
sg3647
g3901
sg3642
g4086
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3764
sg3633
g3754
sg3647
g3758
sg3642
g3762
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3658
sg3633
g4327
sg3647
g3665
sg3642
g4334
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3638
sg3633
g3801
sg3647
g3648
sg3642
g3808
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g3775
sg3633
g4247
sg3647
g3782
sg3642
g4254
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3681
sg3633
g4133
sg3647
g3675
sg3642
g4140
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g4225
sg3633
g4215
sg3647
g4219
sg3642
g4223
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g4620
sg3633
g4616
sg3647
g4627
sg3642
g4624
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g4467
sg3633
g4463
sg3647
g4474
sg3642
g4471
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g3764
sg3633
g4435
sg3647
g3758
sg3642
g4442
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g4620
sg3633
g4616
sg3647
g4627
sg3642
g4624
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3918
sg3633
g4588
sg3647
g3925
sg3642
g4595
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g3884
sg3633
g4560
sg3647
g3891
sg3642
g4567
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3658
sg3633
g4327
sg3647
g3665
sg3642
g4334
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3907
sg3633
g4079
sg3647
g3901
sg3642
g4086
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g4225
sg3633
g5053
sg3647
g4219
sg3642
g5060
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g4467
sg3633
g4867
sg3647
g4474
sg3642
g4874
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g3681
sg3633
g3671
sg3647
g3675
sg3642
g3679
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g4620
sg3633
g5341
sg3647
g4627
sg3642
g5348
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3884
sg3633
g4560
sg3647
g3891
sg3642
g4567
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g4467
sg3633
g4867
sg3647
g4474
sg3642
g4874
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3837
sg3633
g4973
sg3647
g3844
sg3642
g4980
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3698
sg3633
g3722
sg3647
g3692
sg3642
g3729
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3854
sg3633
g4064
sg3647
g3861
sg3642
g4071
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3741
sg3633
g3931
sg3647
g3748
sg3642
g3938
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g4225
sg3633
g5053
sg3647
g4219
sg3642
g5060
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g3918
sg3633
g3914
sg3647
g3925
sg3642
g3922
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3775
sg3633
g4247
sg3647
g3782
sg3642
g4254
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3837
sg3633
g4973
sg3647
g3844
sg3642
g4980
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3681
sg3633
g4133
sg3647
g3675
sg3642
g4140
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3950
sg3633
g3946
sg3647
g3957
sg3642
g3954
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g3764
sg3633
g4435
sg3647
g3758
sg3642
g4442
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3918
sg3633
g4588
sg3647
g3925
sg3642
g4595
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g3884
sg3633
g3880
sg3647
g3891
sg3642
g3888
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g3884
sg3633
g4560
sg3647
g3891
sg3642
g4567
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3907
sg3633
g3897
sg3647
g3901
sg3642
g3905
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g3764
sg3633
g4435
sg3647
g3758
sg3642
g4442
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g4620
sg3633
g5341
sg3647
g4627
sg3642
g5348
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g4225
sg3633
g5053
sg3647
g4219
sg3642
g5060
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3918
sg3633
g3914
sg3647
g3925
sg3642
g3922
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g3698
sg3633
g3722
sg3647
g3692
sg3642
g3729
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g4467
sg3633
g4867
sg3647
g4474
sg3642
g4874
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g3764
sg3633
g3754
sg3647
g3758
sg3642
g3762
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3709
sg3633
g4493
sg3647
g3716
sg3642
g4500
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3658
sg3633
g4327
sg3647
g3665
sg3642
g4334
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g4467
sg3633
g4463
sg3647
g4474
sg3642
g4471
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g4036
sg3633
g4407
sg3647
g4043
sg3642
g4414
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g3764
sg3633
g3754
sg3647
g3758
sg3642
g3762
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g3907
sg3633
g3897
sg3647
g3901
sg3642
g3905
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g4036
sg3633
g4407
sg3647
g4043
sg3642
g4414
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g3775
sg3633
g4247
sg3647
g3782
sg3642
g4254
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g3884
sg3633
g4560
sg3647
g3891
sg3642
g4567
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I81916240
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S' \xc1\x0c\x1f\x90\xbb\x0b\x1f(\x97\x0c\x1fP\x97\x0c\x1f\xe0\x98\x0c\x1fx\x97\x0c\x1f\xf0\xbb\x0b\x1f@\xc1\x0c\x1f`\xc1\x0c\x1f \xbc\x0b\x1f\xa0\x97\x0c\x1f\x80\xc1\x0c\x1f0\xb3\x0c\x1fh\xb3\x0c\x1f\xf0\xbb\x0b\x1f\xc8\x97\x0c\x1f\xf0\x97\x0c\x1f\x18\x98\x0c\x1f0\xb3\x0c\x1f@\xc1\x0c\x1f\xe0\xbc\x0b\x1f\xf0\xbb\x0b\x1f\xc0\xbb\x0b\x1f\xa0\xbd\x0b\x1f\xa0\xc1\x0c\x1fP\xbc\x0b\x1f\xa0\xc1\x0c\x1fP\xbc\x0b\x1fh\xb3\x0c\x1f \xbc\x0b\x1f0\xb3\x0c\x1f(\x97\x0c\x1f\x18\x98\x0c\x1f\xf0\x97\x0c\x1f\x10\xbd\x0b\x1f\x08\x99\x0c\x1f\x80\xbc\x0b\x1f \xbc\x0b\x1fP\x97\x0c\x1f\xf0\x97\x0c\x1f@\x98\x0c\x1f\x80\xb4\x0c\x1f \xc1\x0c\x1f \xbc\x0b\x1f0\xb3\x0c\x1fP\xbc\x0b\x1f\x80\x99\x0c\x1f\xb8\x98\x0c\x1fx\x97\x0c\x1f\x90\x98\x0c\x1f\xd8\xb3\x0c\x1f\xa0\x97\x0c\x1f`\xc1\x0c\x1f\x18\x98\x0c\x1f(\x97\x0c\x1fP\x97\x0c\x1f\xc8\x97\x0c\x1fx\x97\x0c\x1fP\xbc\x0b\x1f\x80\xc1\x0c\x1fx\x97\x0c\x1f\x80\xbc\x0b\x1f\xc0\xc1\x0c\x1f\xb0\xbc\x0b\x1f \xc1\x0c\x1f \xbc\x0b\x1f\xf0\xbb\x0b\x1f`\xc1\x0c\x1f\xa0\x97\x0c\x1f@\xc1\x0c\x1f \xbc\x0b\x1fh\xb3\x0c\x1f@\x98\x0c\x1f\x80\xc1\x0c\x1f\x18\x98\x0c\x1f\xc8\x97\x0c\x1f\x80\x99\x0c\x1f\x90\xbb\x0b\x1f \xc1\x0c\x1f\x10\xbd\x0b\x1f0\xb3\x0c\x1f\xf0\xbb\x0b\x1fh\xb3\x0c\x1f\xc8\x97\x0c\x1fP\xbc\x0b\x1f@\x98\x0c\x1f0\xb3\x0c\x1f\xa0\x97\x0c\x1f@\xc1\x0c\x1fP\xbc\x0b\x1f\x80\xbc\x0b\x1f\x18\x98\x0c\x1fP\x97\x0c\x1f@\x98\x0c\x1f\xc0\xbb\x0b\x1f\xf0\x97\x0c\x1f\x80\xbc\x0b\x1f\xc0\xc1\x0c\x1f@\xc1\x0c\x1fh\xb3\x0c\x1f\x18\x98\x0c\x1f\x90\xbb\x0b\x1f \xc1\x0c\x1f\xa0\x97\x0c\x1f\x80\xc1\x0c\x1fx\x97\x0c\x1f\xa0\x97\x0c\x1f\x18\x98\x0c\x1f`\xc1\x0c\x1f\xf0\x97\x0c\x1fx\x97\x0c\x1f\xf0\x97\x0c\x1f\xe0\x98\x0c\x1f`\xc1\x0c\x1f\xa0\x97\x0c\x1f@\xc1\x0c\x1f\xc8\x97\x0c\x1f \xbc\x0b\x1fH\xb4\x0c\x1f\xc0\xbb\x0b\x1f`\xc1\x0c\x1f\xe0\xbc\x0b\x1f`\xc1\x0c\x1f\x90\xbb\x0b\x1f\xc0\xbb\x0b\x1fP\x97\x0c\x1f0\xb3\x0c\x1fh\xb3\x0c\x1f(\x97\x0c\x1f\xf0\x97\x0c\x1f\xc8\x97\x0c\x1f\xf0\xbb\x0b\x1f\xc8\x97\x0c\x1fX\x99\x0c\x1f\xc8\x97\x0c\x1f\x80\xc1\x0c\x1fP\x97\x0c\x1f\xa0\x97\x0c\x1f(\x97\x0c\x1f0\x99\x0c\x1fP\xbc\x0b\x1f\x90\xbb\x0b\x1fh\xb3\x0c\x1f@\x98\x0c\x1fP\x97\x0c\x1f \xc1\x0c\x1f0\xb3\x0c\x1f\x80\xbc\x0b\x1fP\xbc\x0b\x1f \xc1\x0c\x1f\xf0\xbb\x0b\x1f \xbc\x0b\x1f0\xb3\x0c\x1f\x80\xbc\x0b\x1f\xc0\xbb\x0b\x1f\x80\xbc\x0b\x1f\xc0\xbb\x0b\x1f(\x97\x0c\x1f \xc1\x0c\x1f\x80\xc1\x0c\x1fx\x97\x0c\x1f\xc8\x97\x0c\x1f \xbc\x0b\x1f\x18\x98\x0c\x1f \xbc\x0b\x1f\xc0\xbb\x0b\x1fp\xbd\x0b\x1f(\x97\x0c\x1f\x18\x98\x0c\x1f\x90\xbb\x0b\x1f\x80\xc1\x0c\x1f`\xc1\x0c\x1f \xc1\x0c\x1f\x80\x99\x0c\x1f\x80\xc1\x0c\x1f@\xc1\x0c\x1f(\x97\x0c\x1f\xf0\x97\x0c\x1fP\x97\x0c\x1fx\x97\x0c\x1f\xa0\xc1\x0c\x1f\x80\xbc\x0b\x1f0\x99\x0c\x1f\xa0\xb3\x0c\x1fx\x97\x0c\x1f(\x97\x0c\x1fh\xb3\x0c\x1f\x90\xbb\x0b\x1f\x80\xbc\x0b\x1f`\xc1\x0c\x1f\xd8\xb3\x0c\x1fP\xbc\x0b\x1f\xf0\x97\x0c\x1f\xb0\xbc\x0b\x1f0\xb3\x0c\x1f@\x98\x0c\x1f\x90\xbb\x0b\x1f\xc0\xbb\x0b\x1f@\x98\x0c\x1f\xf0\xbb\x0b\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'\xa0\xe8\xac\x04`\xc2\x0c\x1f`\xc3\x0c\x1f \xc3\x0c\x1f\xa0\xc3\x0c\x1f\x00\xc3\x0c\x1f\xe0\xc3\x0c\x1f\x80\xc2\x0c\x1f\x00\xc4\x0c\x1f \xc4\x0c\x1f@\xc3\x0c\x1f\xe0\xc1\x0c\x1f`\xc4\x0c\x1f\x80\xc4\x0c\x1f\xa0\xc4\x0c\x1f\xc0\xc4\x0c\x1f \xc5\x0c\x1f\x00\xc5\x0c\x1f\xe0\xc2\x0c\x1f\x80\xc5\x0c\x1f`\xc5\x0c\x1f\x80\xc3\x0c\x1f\xa0\xc5\x0c\x1f\x00\xc6\x0c\x1f \xc6\x0c\x1f\xe0\xc4\x0c\x1f`\xc6\x0c\x1f\x80\xc6\x0c\x1f\xc0\xc3\x0c\x1f\xc0\xc6\x0c\x1f\xa0\xc6\x0c\x1f\x00\xc7\x0c\x1f\xe0\xc6\x0c\x1f@\xc7\x0c\x1f`\xc7\x0c\x1f@\xc2\x0c\x1f\xa0\xc7\x0c\x1f\x80\xc7\x0c\x1f\xe0\xc7\x0c\x1f\x00\xc8\x0c\x1f \xc8\x0c\x1f\xa0\xc2\x0c\x1f\xc0\xc5\x0c\x1f\xa0\xef\xba\x1e\xa0\xc8\x0c\x1f@\xc8\x0c\x1f\x00\xc9\x0c\x1f \xc9\x0c\x1f@\xc6\x0c\x1f@\xc4\x0c\x1f\xc0\xc8\x0c\x1f\xc0\xc7\x0c\x1f \xc7\x0c\x1f\xc0\xc2\x0c\x1f`\xc9\x0c\x1f\x80\xca\x0c\x1f \xca\x0c\x1f\xa0\xca\x0c\x1f@\xca\x0c\x1f\x80\xc8\x0c\x1f\x00\xc2\x0c\x1f \xcb\x0c\x1f\xe0\xc5\x0c\x1f\x00\xcb\x0c\x1f\xa0\xc9\x0c\x1f\xa0\xcb\x0c\x1f\x80\xc9\x0c\x1f@\xc9\x0c\x1f\x00\xca\x0c\x1f`\xc8\x0c\x1f\xc0\xc9\x0c\x1f\x80\xcc\x0c\x1f \xcc\x0c\x1f`\xca\x0c\x1f\x80\xcb\x0c\x1f`\xcc\x0c\x1f\xc0\xcb\x0c\x1f@\xcc\x0c\x1f\xc0\xcc\x0c\x1f \xcd\x0c\x1f\x80\xcd\x0c\x1f \xc2\x0c\x1f@\xcd\x0c\x1f\xa0\xcc\x0c\x1f \xce\x0c\x1f\xc0\xca\x0c\x1f\xe0\xc8\x0c\x1f\xe0\xca\x0c\x1f@\xce\x0c\x1f\xe0\xcc\x0c\x1f`\xcb\x0c\x1f\x00\xcd\x0c\x1f\x00\xcf\x0c\x1f\xa0\xce\x0c\x1f\xc0\xce\x0c\x1f`\xcf\x0c\x1f\xe0\xce\x0c\x1f\xa0\xcf\x0c\x1f\xe0\xc9\x0c\x1f\x80\xcf\x0c\x1f\xc0\xcd\x0c\x1f`\xce\x0c\x1f \xcf\x0c\x1f@\xc5\x0c\x1f\xe0\xcb\x0c\x1f\xe0\xcf\x0c\x1f@\xcf\x0c\x1f\xe0\xcd\x0c\x1f`\xcd\x0c\x1f@\xcb\x0c\x1f\xc0\xcf\x0c\x1f\x00\xad\xe3\x1e\xa0\xaf\xe3\x1e\x00\xcc\x0c\x1f \xb21\x1f\xa0\xb01\x1f`\xb11\x1f\x00\xb11\x1f@\xb01\x1f\xc0\xb11\x1f \xb11\x1f\xa0\xb11\x1f@\xb21\x1f\xa0\xb21\x1f\xc0\xb21\x1f\x80\xb21\x1f\x00\xb31\x1f \xb31\x1f\xe0\xb01\x1f`\xb31\x1f@\xb31\x1f\xa0\xb31\x1f\xc0\xb31\x1f\xc0\xb01\x1f\x00\xb41\x1f\xe0\xb31\x1f\xe0\xb21\x1f`\xb41\x1f@\xb41\x1f\xa0\xb41\x1f\x80\xb41\x1f@\xb11\x1f\x00\xb51\x1f \xb51\x1f`\xb01\x1f`\xb51\x1f\x80\xb51\x1f\x80\xb01\x1f\xc0\xb51\x1f\xa0\xb51\x1f\x00\xb61\x1f\xe0\xb51\x1f@\xb61\x1f`\xb61\x1f\x80\xb61\x1f\xc0\xb41\x1f\x80\xb11\x1f\xa0\xb61\x1f\xc0\xb61\x1f \xb71\x1f\x00\xb71\x1f\xe0\xb41\x1f@\xb71\x1f`\xb71\x1f\x80\xb71\x1f\xa0\xb71\x1f\xc0\xb71\x1f\xe0\xb71\x1f\x00\xb81\x1f`\xb81\x1f@\xb81\x1f \xb41\x1f\x80\xb81\x1f\xe0\xb81\x1f\xc0\xb81\x1f \xb91\x1f\x00\xb91\x1f`\xb91\x1f@\xb91\x1f \xb01\x1f\x80\xb91\x1f\xa0\xb91\x1f\x00\xba1\x1f\xe0\xb91\x1f@\xba1\x1f \xba1\x1f\xe0\xb61\x1f`\xba1\x1f\x80\xba1\x1f\xa0\xba1\x1f\xc0\xba1\x1f\xe0\xba1\x1f\x00\xbb1\x1f`\xbb1\x1f\x80\xbb1\x1f\xa0\xbb1\x1f\xa0\xb81\x1f\xe0\xbb1\x1f\x00\xbc1\x1f`\xb21\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'\x85\xba;@\xca\xfc\x1f@\x84\xa5*?Y\x88H?/\x80H?\xdex7?\x1cuw?\x19\x84\x88?*\xeb\xae?\x94Ns?\x01\xd9\x1d?\xd4\xcc\x0c?\x06\xd3\x1d?\x95\xbc{?<\xa9*?\'\xd6\x0c?\xe7\xb6\x9b?\x15^f?\xf6\x97Y?off?\xb7ff?#\n\x11?-A\x84?\x9e\xaej?033?|\x1db?^gf?\xed\x8a\x08?\xa2u7?\xcaCD?Qw7?\x9crw?S\xb3j?6x7?\x10\xb2;?\x98\xb5;?\xc6\xab*?9[&?\x07\xe5L?g\xde\x1d?\xf4\x92Y?\xac@\x04?\xf4\x89H?\x13\xc5\x8c?\xf243?YS\x15?)\x8a\x08?\x9b\xd3]?\xa0\xad*?f\xba;?\xcd\xb3\x19?U\x0b\x11?\x0c\xe0\x1d?Pjw?\xca/3??33?^\x9eY?S""?\xc1\x9b\x19?>\xcc\x8c?+\x01\xa0?\x93\xee.?]t\x15?h\xba\xbb?=\xbd{?\xf7\xa9*?\xa3\xdd]?T\xab\x8a?J\xcaL?\xc9T\x15?)\xff??NA\x04@\xc7\x84\x97?\xe8\xe2\x1d?\xd7\xe6n?F\xc5]?\xa2a&?\xdfC\x04@W\xa6*?\x95\x89\x08?\xc3\x0fQ?\xb2c\x86?\x83x7?-\xe6\x1d?\xa9\x99\x19?\xb5]&?\xae?D?\x80a&?\xc533?I!\x11?\x00\x89H?=\xa3*?Kgf?\xebq7?\x9c.3?\xdao\xc6?\xc4q7?K\xde\x1d?\x8bT\x15?)t7?\x80M\x15?\xce\xcc\x1c@\xc5\xdd\x1d?-\x00\x80?\nhf?\xf2\xc8\x8c?\r\x9aY?p@3?V\x00@?803?\x08\xb9;?|\x94Y?8\x87Y?J\x8fw?\xa9""?\x0e\x1f"?.V&?W\x12Q?z\x1cb?\x84Jb?9\xeen?_\x96Y?%c&?\x98gf?x\xa8j?\xf0.\x82?\xad\x85H?\xc3\xa1*?V>D?\n/3?\xc6\xb5\x0c?\xe2\xb9\xbb?\x03T&?\xdf\x13\x11?}2\x04?\x12\xd8]?vef?\xfe33?\xe7\x10\x11?#b&?\x1e\xf8\x7f?\x9f\xdb]?\x02&"?kW\x15?\xec\x81H?\xfab&?)s\x97?\x90\xdf\x1d?\xae\xb8{?\x1fj\x15?\x96 b?\xc9\xaa*?\xcfC\xa4?\xb8\x8f\x19?\x99@\x04?\xabG3?\x1d\xe1\x1d?T\x88\x08?\xff\x0eQ?\xb2b&?\xfa\x99\xb9?\xaao&?\xcd!"?\x85h7?/w7?\xe8\xe9\xee?\xba?\x15?b\x1a@?\xaa\xfd??\xfa\x0eQ?\xfb\x8eH?\xa9b&?\x02\xad\x8a?\x91\xd2\x0c?jQ\xb5?\x98#"?\x1d\x19b?daf?@"b?"N3?\xde!\x82?\x95f&?\xfa+3?\xe5\x9a\x19?\xe8=D?\xa0\xaa\x8a?ohf?S\xb4{?AS\x95?\xb8\xe9n?\xe3\x93\x19?\'\xf1.?f\xef.?\x88\xff??\x88r7?\xb9\x0f\x11?\xc3DD?\xd6z&?q\xc2\x0c?\xcc/\xb3?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'\x00\x02\xd2\x04\x00\x0b\xd2\x04\x10\xed\xe7\x0b@\xea\xe7\x0bX\xed\xe7\x0b@\xe7\xe7\x0b\xc8\xe3\xe7\x0b(\xed\xe7\x0b`\xe8\xe7\x0b \xef\xe7\x0bP\xec\xe7\x0b\xf8\xec\xe7\x0b\xa0\xe7\xe7\x0b\xc8\xef\xe7\x0bh\xe6\xe7\x0bx\xe5\xe7\x0b\x98\xe6\xe7\x0b`\xe2\xe7\x0b\xa8\xeb\xe7\x0b\xb8\xea\xe7\x0b\xb0\xe0\xe7\x0b\xa8\xee\xe7\x0b\x88\xe4\xe7\x0bH\xe8\xe7\x0b\xd8\xe2\xe7\x0bh\xec\xe7\x0b0\xe8\xe7\x0b\x10\xe4\xe7\x0b\x90\xee\xe7\x0b\x10\xea\xe7\x0b\xd8\xee\xe7\x0b\xf0\xe2\xe7\x0b\x08\xe3\xe7\x0b\xa0\xe4\xe7\x0b\x88\xed\xe7\x0b \xe0\xe7\x0b8\xe6\xe7\x0b\xf8\xe6\xe7\x0bx\xeb\xe7\x0b\xf0\xee\xe7\x0b\xa8\xe2\xe7\x0b0\xe5\xe7\x0b\xd8\xe5\xe7\x0b\xb8A\xde\x04\xd8\x0b\xd2\x04p\x84\xd6\x04\x80L\xde\x04\x08\x03\xd2\x04\x98\x80\xd6\x04\xc8F\xde\x048\x03\xd2\x04h\x80\xd6\x04\xd0G\xde\x04@\x07\xd2\x04\xd0\x84\xd6\x04\xc0E\xde\x040\x0b\xd2\x04\x88\x01\xd2\x04X\x07\xd2\x04\x90\x02\xd2\x04\xb8\x87\xd6\x04 \x80\xd6\x04\xf0\x85\xd6\x04\xa8\x85\xd6\x04\xa8\x82\xd6\x04p\x8d\xd6\x04(\x87\xd6\x04\xf0\x88\xd6\x04\xd8\x88\xd6\x04X\x8a\xd6\x04X\x84\xd6\x04\x90\x8b\xd6\x04\xa0\x8d\xd6\x040\x88\xd6\x04 \x8c\xd6\x04P\x83\xd6\x04\x18\xee\xe7\x0bX\xe1\xe7\x0bp\xed\xe7\x0bX\xe4\xe7\x0bh\xe3\xe7\x0bh\xef\xe7\x0b\x00\xe5\xe7\x0b\xc0\xe8\xe7\x0b\xb0\xe6\xe7\x0b`\xeb\xe7\x0b\x08\xef\xe7\x0b\x80\xef\xe7\x0bP\xe9\xe7\x0b\x00\xe8\xe7\x0b\x98\xe9\xe7\x0b0\xeb\xe7\x0bp\xe7\xe7\x0b\x18\xe8\xe7\x0b\x80\xec\xe7\x0b\xe8\xea\xe7\x0b\xd0\xed\xe7\x0bP\xe3\xe7\x0b\x90\xe8\xe7\x0b\xb0\xef\xe7\x0b\xd0\xe7\xe7\x0b8\xec\xe7\x0b\xa0\xea\xe7\x0b\xe0\xef\xe7\x0b\xf8\xe3\xe7\x0b\xe8\xe4\xe7\x0b\x18\xe2\xe7\x0b\xe8\xed\xe7\x0b\xe0\xec\xe7\x0b \xec\xe7\x0b\xc0\xee\xe7\x0b\x08\xe9\xe7\x0b\xc0\xeb\xe7\x0bh\xe0\xe7\x0b\xd0\xe1\xe7\x0b\xd8\xeb\xe7\x0b\xf8\xe9\xe7\x0b\x98\xef\xe7\x0b\xc8\xec\xe7\x0b8\xe3\xe7\x0b\xb8\xe4\xe7\x0b\xe0\xe3\xe7\x0bP\xe6\xe7\x0b\xc0\xe5\xe7\x0bp\xe4\xe7\x0b\xe0\xe0\xe7\x0b\x80\xe6\xe7\x0b\xf8\xe0\xe7\x0bP\xe0\xe7\x0b\x90\xeb\xe7\x0b\x80\xe9\xe7\x0b(\xe7\xe7\x0b`\xe5\xe7\x0b\x10\xe1\xe7\x0b\x00\xeb\xe7\x0b\xa8\xe8\xe7\x0b \xe3\xe7\x0b\x10\xe7\xe7\x0bp\xe1\xe7\x0b@\xe1\xe7\x0b(\xe1\xe7\x0b\xc0\xe2\xe7\x0b(\xea\xe7\x0b\xe8\xe7\xe7\x0b\xa8\xe5\xe7\x0bX\xea\xe7\x0b\xc8\xe6\xe7\x0b\xc8\xe0\xe7\x0bh\xe9\xe7\x0b(\xe4\xe7\x0b\x90\xe5\xe7\x0b\x08\xe6\xe7\x0b\x98\xec\xe7\x0b\xe0\xe6\xe7\x0b0\xee\xe7\x0b\xe8\xe1\xe7\x0b\xb8\xed\xe7\x0b\xd0\xe4\xe7\x0b\x88\xe7\xe7\x0b\xb8\xe1\xe7\x0bH\xe5\xe7\x0b\x00\xe2\xe7\x0b\xb0\xe3\xe7\x0bH\xeb\xe7\x0b\x18\xe5\xe7\x0b0\xe2\xe7\x0b\xf0\xe5\xe7\x0b\xb8\xe7\xe7\x0b8\xe0\xe7\x0b\x80\xe0\xe7\x0b \xe6\xe7\x0b\x98\xe0\xe7\x0b\xf0\xe8\xe7\x0b\x98\xe3\xe7\x0b@\xe4\xe7\x0bx\xee\xe7\x0b8\xe9\xe7\x0b\xe0\xe9\xe7\x0bx\xe2\xe7\x0b\xc8\xe9\xe7\x0bx\xe8\xe7\x0bp\xea\xe7\x0b\xb0\xe9\xe7\x0b\x80\xe3\xe7\x0bH\xe2\xe7\x0bP\xef\xe7\x0b\x88\xe1\xe7\x0b\x88\xea\xe7\x0bX\xe7\xe7\x0bH\xee\xe7\x0b\x00\xee\xe7\x0b\xa0\xed\xe7\x0b\xd8\xe8\xe7\x0b\x90\xe2\xe7\x0b\xb0\xec\xe7\x0b`\xee\xe7\x0b \xe9\xe7\x0b\xf0\xeb\xe7\x0b\xd0\xea\xe7\x0b\x08\xec\xe7\x0b'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6453
sg6371
g6443
sg6385
g6447
sg6380
g6451
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6481
sg6371
g6477
sg6385
g6488
sg6380
g6485
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6498
sg6371
g6494
sg6385
g6505
sg6380
g6502
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6515
sg6371
g6511
sg6385
g6522
sg6380
g6519
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6532
sg6371
g6528
sg6385
g6539
sg6380
g6536
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6549
sg6371
g6545
sg6385
g6556
sg6380
g6553
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6566
sg6371
g6562
sg6385
g6573
sg6380
g6570
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6583
sg6371
g6579
sg6385
g6590
sg6380
g6587
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6600
sg6371
g6596
sg6385
g6607
sg6380
g6604
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6481
sg6371
g6477
sg6385
g6488
sg6380
g6485
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6630
sg6371
g6626
sg6385
g6637
sg6380
g6634
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6647
sg6371
g6643
sg6385
g6654
sg6380
g6651
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6664
sg6371
g6660
sg6385
g6671
sg6380
g6668
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6583
sg6371
g6677
sg6385
g6590
sg6380
g6684
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6498
sg6371
g6692
sg6385
g6505
sg6380
g6699
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6481
sg6371
g6720
sg6385
g6488
sg6380
g6727
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6453
sg6371
g6443
sg6385
g6447
sg6380
g6451
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6758
sg6371
g6748
sg6385
g6752
sg6380
g6756
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6498
sg6371
g6692
sg6385
g6505
sg6380
g6699
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6758
sg6371
g6748
sg6385
g6752
sg6380
g6756
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6498
sg6371
g6692
sg6385
g6505
sg6380
g6699
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6758
sg6371
g6804
sg6385
g6752
sg6380
g6811
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6600
sg6371
g6596
sg6385
g6607
sg6380
g6604
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6532
sg6371
g6528
sg6385
g6539
sg6380
g6536
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6583
sg6371
g6677
sg6385
g6590
sg6380
g6684
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6413
sg6371
g6858
sg6385
g6420
sg6380
g6865
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6664
sg6371
g6660
sg6385
g6671
sg6380
g6668
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6647
sg6371
g6886
sg6385
g6654
sg6380
g6893
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6481
sg6371
g6720
sg6385
g6488
sg6380
g6727
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6931
sg6371
g6927
sg6385
g6938
sg6380
g6935
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6532
sg6371
g6528
sg6385
g6539
sg6380
g6536
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6647
sg6371
g6886
sg6385
g6654
sg6380
g6893
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6987
sg6371
g6983
sg6385
g6994
sg6380
g6991
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6931
sg6371
g7000
sg6385
g6938
sg6380
g7007
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6376
sg6371
g7015
sg6385
g6386
sg6380
g7022
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6532
sg6371
g7030
sg6385
g6539
sg6380
g7037
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6583
sg6371
g6579
sg6385
g6590
sg6380
g6587
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6758
sg6371
g6804
sg6385
g6752
sg6380
g6811
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6987
sg6371
g6983
sg6385
g6994
sg6380
g6991
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6413
sg6371
g6858
sg6385
g6420
sg6380
g6865
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6566
sg6371
g6562
sg6385
g6573
sg6380
g6570
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6549
sg6371
g7136
sg6385
g6556
sg6380
g7143
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6515
sg6371
g7151
sg6385
g6522
sg6380
g7158
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6664
sg6371
g7166
sg6385
g6671
sg6380
g7173
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6430
sg6371
g7194
sg6385
g6437
sg6380
g7201
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6630
sg6371
g7209
sg6385
g6637
sg6380
g7216
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6758
sg6371
g6804
sg6385
g6752
sg6380
g6811
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6566
sg6371
g7250
sg6385
g6573
sg6380
g7257
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6464
sg6371
g7265
sg6385
g6471
sg6380
g7272
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6931
sg6371
g6927
sg6385
g6938
sg6380
g6935
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6549
sg6371
g6545
sg6385
g6556
sg6380
g6553
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6532
sg6371
g7030
sg6385
g6539
sg6380
g7037
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6481
sg6371
g6477
sg6385
g6488
sg6380
g6485
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6515
sg6371
g6511
sg6385
g6522
sg6380
g6519
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6549
sg6371
g6545
sg6385
g6556
sg6380
g6553
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6498
sg6371
g6494
sg6385
g6505
sg6380
g6502
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6532
sg6371
g6528
sg6385
g6539
sg6380
g6536
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6600
sg6371
g6596
sg6385
g6607
sg6380
g6604
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6987
sg6371
g6983
sg6385
g6994
sg6380
g6991
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6566
sg6371
g6562
sg6385
g6573
sg6380
g6570
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6664
sg6371
g6660
sg6385
g6671
sg6380
g6668
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6630
sg6371
g7209
sg6385
g6637
sg6380
g7216
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6987
sg6371
g7475
sg6385
g6994
sg6380
g7482
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6396
sg6371
g7490
sg6385
g6403
sg6380
g7497
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6481
sg6371
g6720
sg6385
g6488
sg6380
g6727
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6583
sg6371
g6579
sg6385
g6590
sg6380
g6587
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6481
sg6371
g6720
sg6385
g6488
sg6380
g6727
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6600
sg6371
g7557
sg6385
g6607
sg6380
g7564
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6630
sg6371
g7209
sg6385
g6637
sg6380
g7216
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6758
sg6371
g6748
sg6385
g6752
sg6380
g6756
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6987
sg6371
g7475
sg6385
g6994
sg6380
g7482
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6583
sg6371
g6579
sg6385
g6590
sg6380
g6587
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6549
sg6371
g7136
sg6385
g6556
sg6380
g7143
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6498
sg6371
g6494
sg6385
g6505
sg6380
g6502
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6758
sg6371
g6748
sg6385
g6752
sg6380
g6756
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6931
sg6371
g6927
sg6385
g6938
sg6380
g6935
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6664
sg6371
g7166
sg6385
g6671
sg6380
g7173
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6987
sg6371
g7475
sg6385
g6994
sg6380
g7482
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6453
sg6371
g7715
sg6385
g6447
sg6380
g7722
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6647
sg6371
g6643
sg6385
g6654
sg6380
g6651
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6931
sg6371
g7000
sg6385
g6938
sg6380
g7007
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6549
sg6371
g7136
sg6385
g6556
sg6380
g7143
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6498
sg6371
g6494
sg6385
g6505
sg6380
g6502
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6600
sg6371
g7557
sg6385
g6607
sg6380
g7564
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6664
sg6371
g7166
sg6385
g6671
sg6380
g7173
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6396
sg6371
g7490
sg6385
g6403
sg6380
g7497
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6376
sg6371
g7015
sg6385
g6386
sg6380
g7022
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6549
sg6371
g6545
sg6385
g6556
sg6380
g6553
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6566
sg6371
g6562
sg6385
g6573
sg6380
g6570
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6464
sg6371
g7265
sg6385
g6471
sg6380
g7272
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6549
sg6371
g7136
sg6385
g6556
sg6380
g7143
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6664
sg6371
g7166
sg6385
g6671
sg6380
g7173
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6515
sg6371
g7151
sg6385
g6522
sg6380
g7158
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6647
sg6371
g6643
sg6385
g6654
sg6380
g6651
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6464
sg6371
g6460
sg6385
g6471
sg6380
g6468
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6647
sg6371
g6886
sg6385
g6654
sg6380
g6893
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6453
sg6371
g6443
sg6385
g6447
sg6380
g6451
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6515
sg6371
g6511
sg6385
g6522
sg6380
g6519
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6549
sg6371
g7136
sg6385
g6556
sg6380
g7143
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6498
sg6371
g6692
sg6385
g6505
sg6380
g6699
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6630
sg6371
g6626
sg6385
g6637
sg6380
g6634
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6532
sg6371
g6528
sg6385
g6539
sg6380
g6536
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6664
sg6371
g6660
sg6385
g6671
sg6380
g6668
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6453
sg6371
g7715
sg6385
g6447
sg6380
g7722
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6515
sg6371
g7151
sg6385
g6522
sg6380
g7158
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6515
sg6371
g6511
sg6385
g6522
sg6380
g6519
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6396
sg6371
g7490
sg6385
g6403
sg6380
g7497
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6453
sg6371
g7715
sg6385
g6447
sg6380
g7722
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6430
sg6371
g7194
sg6385
g6437
sg6380
g7201
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6583
sg6371
g6677
sg6385
g6590
sg6380
g6684
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6600
sg6371
g7557
sg6385
g6607
sg6380
g7564
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6647
sg6371
g6643
sg6385
g6654
sg6380
g6651
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6630
sg6371
g6626
sg6385
g6637
sg6380
g6634
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6481
sg6371
g6720
sg6385
g6488
sg6380
g6727
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6630
sg6371
g7209
sg6385
g6637
sg6380
g7216
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6647
sg6371
g6886
sg6385
g6654
sg6380
g6893
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6630
sg6371
g7209
sg6385
g6637
sg6380
g7216
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6566
sg6371
g7250
sg6385
g6573
sg6380
g7257
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6430
sg6371
g7194
sg6385
g6437
sg6380
g7201
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6549
sg6371
g6545
sg6385
g6556
sg6380
g6553
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6413
sg6371
g6858
sg6385
g6420
sg6380
g6865
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6600
sg6371
g6596
sg6385
g6607
sg6380
g6604
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6758
sg6371
g6804
sg6385
g6752
sg6380
g6811
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6600
sg6371
g6596
sg6385
g6607
sg6380
g6604
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6987
sg6371
g7475
sg6385
g6994
sg6380
g7482
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6430
sg6371
g7194
sg6385
g6437
sg6380
g7201
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6376
sg6371
g7015
sg6385
g6386
sg6380
g7022
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6583
sg6371
g6677
sg6385
g6590
sg6380
g6684
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6931
sg6371
g7000
sg6385
g6938
sg6380
g7007
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6758
sg6371
g6748
sg6385
g6752
sg6380
g6756
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6376
sg6371
g7015
sg6385
g6386
sg6380
g7022
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6481
sg6371
g6477
sg6385
g6488
sg6380
g6485
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6532
sg6371
g7030
sg6385
g6539
sg6380
g7037
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6583
sg6371
g6579
sg6385
g6590
sg6380
g6587
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6931
sg6371
g7000
sg6385
g6938
sg6380
g7007
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6453
sg6371
g7715
sg6385
g6447
sg6380
g7722
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6931
sg6371
g6927
sg6385
g6938
sg6380
g6935
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6453
sg6371
g7715
sg6385
g6447
sg6380
g7722
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6413
sg6371
g6858
sg6385
g6420
sg6380
g6865
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6566
sg6371
g6562
sg6385
g6573
sg6380
g6570
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6464
sg6371
g7265
sg6385
g6471
sg6380
g7272
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6630
sg6371
g6626
sg6385
g6637
sg6380
g6634
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6532
sg6371
g7030
sg6385
g6539
sg6380
g7037
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6664
sg6371
g6660
sg6385
g6671
sg6380
g6668
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6532
sg6371
g7030
sg6385
g6539
sg6380
g7037
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6453
sg6371
g6443
sg6385
g6447
sg6380
g6451
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6630
sg6371
g6626
sg6385
g6637
sg6380
g6634
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6664
sg6371
g7166
sg6385
g6671
sg6380
g7173
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6396
sg6371
g7490
sg6385
g6403
sg6380
g7497
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6566
sg6371
g7250
sg6385
g6573
sg6380
g7257
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6515
sg6371
g7151
sg6385
g6522
sg6380
g7158
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6376
sg6371
g7015
sg6385
g6386
sg6380
g7022
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6987
sg6371
g7475
sg6385
g6994
sg6380
g7482
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6566
sg6371
g7250
sg6385
g6573
sg6380
g7257
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6498
sg6371
g6494
sg6385
g6505
sg6380
g6502
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6647
sg6371
g6643
sg6385
g6654
sg6380
g6651
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6430
sg6371
g7194
sg6385
g6437
sg6380
g7201
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6464
sg6371
g7265
sg6385
g6471
sg6380
g7272
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6498
sg6371
g6692
sg6385
g6505
sg6380
g6699
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6931
sg6371
g6927
sg6385
g6938
sg6380
g6935
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6600
sg6371
g7557
sg6385
g6607
sg6380
g7564
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6515
sg6371
g6511
sg6385
g6522
sg6380
g6519
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6464
sg6371
g7265
sg6385
g6471
sg6380
g7272
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6413
sg6371
g6858
sg6385
g6420
sg6380
g6865
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6600
sg6371
g7557
sg6385
g6607
sg6380
g7564
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6396
sg6371
g7490
sg6385
g6403
sg6380
g7497
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6931
sg6371
g7000
sg6385
g6938
sg6380
g7007
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6515
sg6371
g7151
sg6385
g6522
sg6380
g7158
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6566
sg6371
g7250
sg6385
g6573
sg6380
g7257
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6758
sg6371
g6804
sg6385
g6752
sg6380
g6811
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6647
sg6371
g6886
sg6385
g6654
sg6380
g6893
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6583
sg6371
g6677
sg6385
g6590
sg6380
g6684
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6987
sg6371
g6983
sg6385
g6994
sg6380
g6991
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6453
sg6371
g6443
sg6385
g6447
sg6380
g6451
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6987
sg6371
g6983
sg6385
g6994
sg6380
g6991
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6481
sg6371
g6477
sg6385
g6488
sg6380
g6485
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.