ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E20_infer_design1_2015_Jul_11_1020
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xb4*\xe6\xab\xa1\x04N@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_11_1020
p67
sVparticipant
p68
VE20
p69
sVglasses
p70
Vn
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F1.7502098331940488
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F20.833120173979182
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P2\x00'
tbsg70
Vn
sa(dp96
g64
g65
sg20
F43.667000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F0.41999999999999904
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x10\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V22-daim.png
p103
sg21
F1.6000000000000001
sg70
Vn
sa(dp104
g64
g65
sg20
F8.6839999999999993
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F0.45999999999999952
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x11\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p110
sg21
F1
sg70
Vn
sa(dp111
g64
g65
sg20
F10.5
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F0.97999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x06\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V7-olives.png
p117
sg21
F2
sg70
Vn
sa(dp118
g64
g65
sg20
F7.234
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0.87999999999999923
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'\x1d\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V40-sardines.png
p124
sg21
F1.7
sg70
Vn
sa(dp125
g64
g65
sg20
F5.9509999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\x18\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p131
sg21
F1.1000000000000001
sg70
Vn
sa(dp132
g64
g65
sg20
F3.7669999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x07\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p138
sg21
F1.2
sg70
Vn
sa(dp139
g64
g65
sg20
F6.5339999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F0.49999999999999911
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x08\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p145
sg21
F1.3999999999999999
sg70
Vn
sa(dp146
g64
g65
sg20
F6.1340000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F0.059999999999998721
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\n\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p152
sg21
F1.7
sg70
Vn
sa(dp153
g64
g65
sg20
F7.6680000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x14\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p159
sg21
F1.8999999999999999
sg70
Vn
sa(dp160
g64
g65
sg20
F5.4340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F0.45999999999999863
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x0e\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p166
sg21
F2
sg70
Vn
sa(dp167
g64
g65
sg20
F4.2169999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S' \x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p173
sg21
F1.7
sg70
Vn
sa(dp174
g64
g65
sg20
F5.8840000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0.49999999999999867
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'!\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V44-crunch.png
p180
sg21
F2
sg70
Vn
sa(dp181
g64
g65
sg20
F6.101
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F0.619999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\t\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p187
sg21
F1.8
sg70
Vn
sa(dp188
g64
g65
sg20
F3.6339999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0.13999999999999874
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\x1b\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p194
sg21
F1.8
sg70
Vn
sa(dp195
g64
g65
sg20
F4.7009999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F0.29999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x04\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p201
sg21
F1
sg70
Vn
sa(dp202
g64
g65
sg20
F6.6669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F0.57999999999999918
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'%\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p208
sg21
F1.6000000000000001
sg70
Vn
sa(dp209
g64
g65
sg20
F5.6340000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F0.41999999999999926
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S"'\x00\x00\x00"
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V51-mars.png
p215
sg21
F1.3
sg70
Vn
sa(dp216
g64
g65
sg20
F3.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F0.53999999999999915
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x17\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p222
sg21
F1.5
sg70
Vn
sa(dp223
g64
g65
sg20
F3.5510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0.21999999999999936
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'&\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V50-polo.png
p229
sg21
F1
sg70
Vn
sa(dp230
g64
g65
sg20
F4.2510000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F0.49999999999999911
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\r\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p236
sg21
F1.5
sg70
Vn
sa(dp237
g64
g65
sg20
F3.7839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F0.55999999999999961
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x19\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p243
sg21
F1.1000000000000001
sg70
Vn
sa(dp244
g64
g65
sg20
F3.734
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\x02\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p250
sg21
F1.8999999999999999
sg70
Vn
sa(dp251
g64
g65
sg20
F4.0010000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F0.31999999999999895
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'\x12\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p257
sg21
F1.3999999999999999
sg70
Vn
sa(dp258
g64
g65
sg20
F5.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F0.53999999999999959
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\x0c\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V18-mms.png
p264
sg21
F1.1000000000000001
sg70
Vn
sa(dp265
g64
g65
sg20
F3.2679999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F0.019999999999999383
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x16\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p271
sg21
F1.1000000000000001
sg70
Vn
sa(dp272
g64
g65
sg20
F5.867
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F0.47999999999999954
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x0b\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p278
sg21
F1.1000000000000001
sg70
Vn
sa(dp279
g64
g65
sg20
F4.5339999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F0.37999999999999901
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\x15\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V29-beans.png
p285
sg21
F1.6000000000000001
sg70
Vn
sa(dp286
g64
g65
sg20
F2.3340000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\x0f\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p292
sg21
F1.1000000000000001
sg70
Vn
sa(dp293
g64
g65
sg20
F3.7839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0.47999999999999887
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x1a\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V35-raisins.png
p299
sg21
F1.8
sg70
Vn
sa(dp300
g64
g65
sg20
F6.6340000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F0.37999999999999878
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'$\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V48-twix.png
p306
sg21
F1.8
sg70
Vn
sa(dp307
g64
g65
sg20
F3.4510000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F0.51999999999999891
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x1c\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p313
sg21
F1.7
sg70
Vn
sa(dp314
g64
g65
sg20
F4.6340000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F0.47999999999999932
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'\x13\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p320
sg21
F1.3
sg70
Vn
sa(dp321
g64
g65
sg20
F2.1669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F0.099999999999999395
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'"\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p327
sg21
F1
sg70
Vn
sa(dp328
g64
g65
sg20
F4.1840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\x1f\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p334
sg21
F1.3
sg70
Vn
sa(dp335
g64
g65
sg20
F4.9669999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F0.35999999999999854
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x03\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V4-corn.png
p341
sg21
F2
sg70
Vn
sa(dp342
g64
g65
sg20
F3.4510000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F0.55999999999999872
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x1e\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p348
sg21
F1.8999999999999999
sg70
Vn
sa(dp349
g64
g65
sg20
F4.6840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F0.21999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x05\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p355
sg21
F1.6000000000000001
sg70
Vn
sa(dp356
g64
g65
sg20
F2.9169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0.63999999999999968
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x00\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p362
sg21
F1.1000000000000001
sg70
Vn
sa(dp363
g64
g65
sg20
F5.2670000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0.99999999999999933
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'#\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p369
sg21
F1.8
sg70
Vn
sa(dp370
g64
g65
sg20
F2.9169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x01\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p376
sg21
F1.5
sg70
Vn
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F8.2501069122931767
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vn
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'49-yorkie.png'
p381
sg26
F5.6999999999999984
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'right'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F2.750025373851031
sg27
F7.4509999999999996
sg70
Vn
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p390
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'right'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F4.1166769492533604
sg27
F4.867
sg70
Vn
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p399
sg26
F5.1000000000000014
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'left'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F4.6333877683214268
sg27
F5.9669999999999996
sg70
Vn
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'44-crunch.png'
p408
sg26
F5.0000000000000009
sg28
F4
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'right'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F5.917129288038268
sg27
F10.817
sg70
Vn
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'46-pistachios.png'
p417
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'left'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F1.5000989295085674
sg27
F4.6840000000000002
sg70
Vn
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p426
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'left'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F3.8334765482895818
sg27
F5.6340000000000003
sg70
Vn
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'7-olives.png'
p435
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'left'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F1.6167185737729142
sg27
F3.5009999999999999
sg70
Vn
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p444
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'right'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F1.3668354645467389
sg27
F2.367
sg70
Vn
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p453
sg26
F5.5999999999999988
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'right'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F1.4168487501810887
sg27
F3.234
sg70
Vn
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p462
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'right'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F1.3333895929577011
sg27
F1.8340000000000001
sg70
Vn
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'50-polo.png'
p471
sg26
F1.8999999999999984
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'left'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F9.7999174922194925
sg27
F8.1340000000000003
sg70
Vn
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p480
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'right'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F1.916689949788406
sg27
F1.7669999999999999
sg70
Vn
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p489
sg26
F4.4000000000000004
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'left'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F3.833841190484236
sg27
F4.7169999999999996
sg70
Vn
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'51-mars.png'
p498
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'left'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F1.483399229319275
sg27
F6.8170000000000002
sg70
Vn
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'4-corn.png'
p507
sg26
F5.799999999999998
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'left'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F1.6333946107081374
sg27
F5.9169999999999998
sg70
Vn
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'5-pineapple.png'
p516
sg26
F5.1000000000000005
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'right'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F4.3338001361632905
sg27
F5.8010000000000002
sg70
Vn
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p525
sg26
F5.799999999999998
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'right'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F2.1000009123183645
sg27
F7.9009999999999998
sg70
Vn
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p534
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'right'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F1.4000449886930255
sg27
F1.4670000000000001
sg70
Vn
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'48-twix.png'
p543
sg26
F3.1000000000000001
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'right'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F5.7004910552898309
sg27
F4.5170000000000003
sg70
Vn
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p552
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'right'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F1.4333822373919247
sg27
F2.601
sg70
Vn
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p561
sg26
F1.6999999999999995
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'right'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F9.583088242841086
sg27
F8.5679999999999996
sg70
Vn
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p570
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'right'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F1.3500553663129722
sg27
F1.2509999999999999
sg70
Vn
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'22-daim.png'
p579
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'right'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F1.2500610112820141
sg27
F1.284
sg70
Vn
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'38-maltesers.png'
p588
sg26
F1.8999999999999984
sg28
F4
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'right'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F7.5997950705166204
sg27
F2.6669999999999998
sg70
Vn
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'35-raisins.png'
p597
sg26
F5.2000000000000011
sg28
F3
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'left'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F1.3501956352413345
sg27
F2.2170000000000001
sg70
Vn
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p606
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'left'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F1.7672046113125361
sg27
F1.5009999999999999
sg70
Vn
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p615
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'left'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F2.3001176320324248
sg27
F4.7670000000000003
sg70
Vn
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'40-sardines.png'
p624
sg26
F4.1000000000000014
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'left'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F4.5001419795253241
sg27
F4.5839999999999996
sg70
Vn
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p633
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'right'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F1.5001017805032006
sg27
F2.351
sg70
Vn
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p642
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'left'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F1.1500635201571185
sg27
F1.351
sg70
Vn
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'25-kitkat.png'
p651
sg26
F4.4000000000000004
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'right'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F5.6333866279235281
sg27
F5.6680000000000001
sg70
Vn
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p660
sg26
F5.9999999999999982
sg28
F3
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'left'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F1.2333236779654726
sg27
F1.1339999999999999
sg70
Vn
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p669
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'right'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F1.5167093935708635
sg27
F1.5509999999999999
sg70
Vn
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p678
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'right'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F2.4666952526379191
sg27
F3.9009999999999998
sg70
Vn
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p687
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'left'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F1.3668055291047949
sg27
F1.0669999999999999
sg70
Vn
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p696
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'left'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F1.1500618095606114
sg27
F1.401
sg70
Vn
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'18-mms.png'
p705
sg26
F5.9999999999999982
sg28
F3
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'left'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F1.3500756083735723
sg27
F1.3009999999999999
sg70
Vn
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'29-beans.png'
p714
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'right'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F1.5334199275389437
sg27
F1.617
sg70
Vn
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p723
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'left'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F1.1839022587857926
sg27
F1.534
sg70
Vn
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'31-hobnobs.png'
p732
sg26
F5.799999999999998
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'left'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F1.9501868541785825
sg27
F4.2169999999999996
sg70
Vn
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F313.82720008393335
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F7.4167107620480692
sg66
g67
sg68
g69
sg70
Vn
sa(dp743
g64
g65
sg82
S'11-snickers.png'
p744
sg83
S'54-frubes_yogurt.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'54-frubes_yogurt.png'
p749
sg33
g749
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\x0b\n%\t\rY\xf8'
tRp754
sa(dp755
g64
g65
sg82
S'32-hovis_crackers.png'
p756
sg83
S'24-food_doctor_apple_walnut_bar.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\x0b\n%\x13\x0c)H'
tRp765
sa(dp766
g64
g65
sg82
g744
sg83
S'11-snickers.png'
p767
sg56
g57
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p770
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p771
sS'practice_loop.thisIndex'
p772
g60
(g99
S'\x02\x00\x00\x00'
tRp773
sg34
g753
(S'\x07\xdf\x07\x0b\n%\x1c\tR\xb8'
tRp774
sa(dp775
g64
g65
sg82
S'52-aero_mousse.png'
p776
sg83
S'52-aero_mousse.png'
p777
sg56
g57
sS'practice_loop.thisN'
p778
I3
sS'practice_loop.thisTrialN'
p779
I3
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p780
I0
sg84
S'14-discos_salt_vinegar.png'
p781
sg33
g776
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p782
sS'practice_loop.thisIndex'
p783
g60
(g99
S'\x03\x00\x00\x00'
tRp784
sg34
g753
(S"\x07\xdf\x07\x0b\n%'\x0b30"
tRp785
sa(dp786
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p787
sg83
S'9-yu_mango_pieces.png'
p788
sg56
g57
sS'practice_loop.thisN'
p789
I4
sS'practice_loop.thisTrialN'
p790
I4
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p791
I0
sg84
S'9-yu_mango_pieces.png'
p792
sg33
g787
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p793
sS'practice_loop.thisIndex'
p794
g60
(g99
S'\x04\x00\x00\x00'
tRp795
sg34
g753
(S'\x07\xdf\x07\x0b\n%/\t\x918'
tRp796
sa(dp797
g64
g65
sg82
S'12-topic.png'
p798
sg83
S'12-topic.png'
p799
sg56
g57
sS'practice_loop.thisN'
p800
I5
sS'practice_loop.thisTrialN'
p801
I5
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p802
I0
sg84
S'39-mackerel.png'
p803
sg33
g798
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p804
sS'practice_loop.thisIndex'
p805
g60
(g99
S'\x05\x00\x00\x00'
tRp806
sg34
g753
(S'\x07\xdf\x07\x0b\n%8\x0c5\x00'
tRp807
sa(dp808
g64
g65
sg82
S'53-cheestrings.png'
p809
sg83
S'53-cheestrings.png'
p810
sg56
g57
sS'practice_loop.thisN'
p811
I6
sS'practice_loop.thisTrialN'
p812
I6
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p813
I0
sg84
S'47-picnic.png'
p814
sg33
g809
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p815
sS'practice_loop.thisIndex'
p816
g60
(g99
S'\x06\x00\x00\x00'
tRp817
sg34
g753
(S'\x07\xdf\x07\x0b\n&\x04\x0e)\x00'
tRp818
sa(dp819
g64
g65
sg82
g787
sg83
S'37-nakd_cashew_cookie.png'
p820
sg56
g57
sS'practice_loop.thisN'
p821
I7
sS'practice_loop.thisTrialN'
p822
I7
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p823
I0
sg84
g792
sg33
g787
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p824
sS'practice_loop.thisIndex'
p825
g60
(g99
S'\x07\x00\x00\x00'
tRp826
sg34
g753
(S'\x07\xdf\x07\x0b\n&\r\x05\x9d\x80'
tRp827
sa(dp828
g64
g65
sg82
S'15-walnut_whip.png'
p829
sg83
S'15-walnut_whip.png'
p830
sg56
g57
sS'practice_loop.thisN'
p831
I8
sS'practice_loop.thisTrialN'
p832
I8
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p833
I0
sg84
S'28-maple_pecan.png'
p834
sg33
g829
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p835
sS'practice_loop.thisIndex'
p836
g60
(g99
S'\x08\x00\x00\x00'
tRp837
sg34
g753
(S'\x07\xdf\x07\x0b\n&\x16\t\xeb\x10'
tRp838
sa(dp839
g64
g65
sg82
g756
sg83
S'32-hovis_crackers.png'
p840
sg56
g57
sS'practice_loop.thisN'
p841
I9
sS'practice_loop.thisTrialN'
p842
I9
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p843
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\x0b\n&\x1e\x07\xd0\x00'
tRp847
sa(dp848
g64
g65
sg82
g776
sg83
S'14-discos_salt_vinegar.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g781
sg33
g776
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S"\x07\xdf\x07\x0b\n&'\x06* "
tRp856
sa(dp857
g64
g65
sg82
g829
sg83
S'28-maple_pecan.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g834
sg33
g829
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\x0b\n&/\x08X\xb8'
tRp865
sa(dp866
g64
g65
sg82
g798
sg83
S'39-mackerel.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g803
sg33
g803
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\x0b\n&7\x00N '
tRp874
sa(dp875
g64
g65
sg82
g809
sg83
S'47-picnic.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g814
sg33
g809
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S"\x07\xdf\x07\x0b\n'\x02\r\xeeh"
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F77.165558104978118
sg66
g67
sg68
g69
sg70
Vn
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vn
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'45-chewy_nougat_redo.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'right'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'41-peanuts_redo.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'41-peanuts_redo.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'45-chewy_nougat_redo.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vn
sS'block_loop.thisTrialN'
p912
I0
sg39
F2.366501042894015
sg34
g753
(S'\x07\xdf\x07\x0b\n,\x0e\x06\x8f\xb0'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'50-polo.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'left'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'48-twix.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'48-twix.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg909
S'50-polo.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vn
sS'block_loop.thisTrialN'
p929
I0
sg39
F2.3166650891162135
sg34
g753
(S'\x07\xdf\x07\x0b\n,\x15\x0c\x96\xa8'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'43-mrporky_pork_crackles_redo.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'right'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'18-mms.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'18-mms.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p943
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vn
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.8832691669508677
sg34
g753
(S'\x07\xdf\x07\x0b\n,\x1d\x02\x9f\xe0'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'29-beans.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'right'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'29-beans.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'46-pistachios.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p960
I0
sg909
S'46-pistachios.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vn
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.1499677267424886
sg34
g753
(S'\x07\xdf\x07\x0b\n,$\x01\x82\xb8'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'10-bounty_redo.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'right'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'4-corn.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'4-corn.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p977
I0
sg909
S'10-bounty_redo.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vn
sS'block_loop.thisTrialN'
p980
I0
sg39
F2.0664432817457055
sg34
g753
(S'\x07\xdf\x07\x0b\n,*\x046 '
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
S'44-crunch.png'
p984
sS'block_loop.thisIndex'
p985
g889
sg38
S'right'
p986
sg59
g63
sS'trial_loop.thisN'
p987
I5
sg33
S'44-crunch.png'
p988
sg64
g65
sS'trial_loop.thisIndex'
p989
g60
(g99
S'\x05\x00\x00\x00'
tRp990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p991
I0
sg904
S'26-walkers_smoky_bacon.png'
p992
sS'block_loop.thisRepN'
p993
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p994
I0
sg909
S'26-walkers_smoky_bacon.png'
p995
sg55
g11
sS'block_loop.thisTrial'
p996
Nsg70
Vn
sS'block_loop.thisTrialN'
p997
I0
sg39
F2.5499907627777247
sg34
g753
(S'\x07\xdf\x07\x0b\n,1\x05\xb4\xf0'
tRp998
sa(dp999
S'trial_loop.thisTrialN'
p1000
I6
sg895
S'7-olives.png'
p1001
sS'block_loop.thisIndex'
p1002
g889
sg38
S'left'
p1003
sg59
g63
sS'trial_loop.thisN'
p1004
I6
sg33
S'22-daim.png'
p1005
sg64
g65
sS'trial_loop.thisIndex'
p1006
g60
(g99
S'\x06\x00\x00\x00'
tRp1007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1008
I0
sg904
S'22-daim.png'
p1009
sS'block_loop.thisRepN'
p1010
I0
sg907
S'7-olives.png'
p1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1012
I0
sg909
g1005
sg55
g11
sS'block_loop.thisTrial'
p1013
Nsg70
Vn
sS'block_loop.thisTrialN'
p1014
I0
sg39
F1.1499705777368945
sg34
g753
(S'\x07\xdf\x07\x0b\n,8\x0e\x96`'
tRp1015
sa(dp1016
S'trial_loop.thisTrialN'
p1017
I7
sg895
S'35-raisins.png'
p1018
sS'block_loop.thisIndex'
p1019
g889
sg38
S'left'
p1020
sg59
g63
sS'trial_loop.thisN'
p1021
I7
sg33
S'49-yorkie.png'
p1022
sg64
g65
sS'trial_loop.thisIndex'
p1023
g60
(g99
S'\x07\x00\x00\x00'
tRp1024
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1025
I0
sg904
S'49-yorkie.png'
p1026
sS'block_loop.thisRepN'
p1027
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1028
I0
sg909
S'35-raisins.png'
p1029
sg55
g11
sS'block_loop.thisTrial'
p1030
Nsg70
Vn
sS'block_loop.thisTrialN'
p1031
I0
sg39
F1.7999785035017339
sg34
g753
(S'\x07\xdf\x07\x0b\n-\x03\x02F\x08'
tRp1032
sa(dp1033
S'trial_loop.thisTrialN'
p1034
I8
sg895
g950
sS'block_loop.thisIndex'
p1035
g889
sg38
S'right'
p1036
sg59
g63
sS'trial_loop.thisN'
p1037
I8
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1038
g60
(g99
S'\x08\x00\x00\x00'
tRp1039
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1040
I0
sg904
g958
sS'block_loop.thisRepN'
p1041
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1042
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1043
Nsg70
Vn
sS'block_loop.thisTrialN'
p1044
I0
sg39
F0.91658645868847088
sg34
g753
(S'\x07\xdf\x07\x0b\n-\t\x0e\xfb\xf0'
tRp1045
sa(dp1046
S'trial_loop.thisTrialN'
p1047
I9
sg895
S'30-spaghetti_hoops.png'
p1048
sS'block_loop.thisIndex'
p1049
g889
sg38
S'right'
p1050
sg59
g63
sS'trial_loop.thisN'
p1051
I9
sg33
S'19-caramello_redo.png'
p1052
sg64
g65
sS'trial_loop.thisIndex'
p1053
g60
(g99
S'\t\x00\x00\x00'
tRp1054
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1055
I0
sg904
S'19-caramello_redo.png'
p1056
sS'block_loop.thisRepN'
p1057
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1058
I0
sg909
S'30-spaghetti_hoops.png'
p1059
sg55
g11
sS'block_loop.thisTrial'
p1060
Nsg70
Vn
sS'block_loop.thisTrialN'
p1061
I0
sg39
F2.5003178858851243
sg34
g753
(S'\x07\xdf\x07\x0b\n-\x0f\x0e\x1dH'
tRp1062
sa(dp1063
S'trial_loop.thisTrialN'
p1064
I10
sg895
S'41-peanuts_redo.png'
p1065
sS'block_loop.thisIndex'
p1066
g889
sg38
S'left'
p1067
sg59
g63
sS'trial_loop.thisN'
p1068
I10
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1069
g60
(g99
S'\n\x00\x00\x00'
tRp1070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1071
I0
sg904
S'45-chewy_nougat_redo.png'
p1072
sS'block_loop.thisRepN'
p1073
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1074
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1075
Nsg70
Vn
sS'block_loop.thisTrialN'
p1076
I0
sg39
F3.0165277852220242
sg34
g753
(S'\x07\xdf\x07\x0b\n-\x17\x07\x04\xe0'
tRp1077
sa(dp1078
S'trial_loop.thisTrialN'
p1079
I11
sg895
S'42-mrkipling_lemon_slices.png'
p1080
sS'block_loop.thisIndex'
p1081
g889
sg38
S'right'
p1082
sg59
g63
sS'trial_loop.thisN'
p1083
I11
sg33
S'16-skips_prawn.png'
p1084
sg64
g65
sS'trial_loop.thisIndex'
p1085
g60
(g99
S'\x0b\x00\x00\x00'
tRp1086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1087
I0
sg904
S'16-skips_prawn.png'
p1088
sS'block_loop.thisRepN'
p1089
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1090
I0
sg909
S'42-mrkipling_lemon_slices.png'
p1091
sg55
g11
sS'block_loop.thisTrial'
p1092
Nsg70
Vn
sS'block_loop.thisTrialN'
p1093
I0
sg39
F1.9830964537050022
sg34
g753
(S'\x07\xdf\x07\x0b\n-\x1f\x07\xc80'
tRp1094
sa(dp1095
S'trial_loop.thisTrialN'
p1096
I12
sg895
S'46-pistachios.png'
p1097
sS'block_loop.thisIndex'
p1098
g889
sg38
S'right'
p1099
sg59
g63
sS'trial_loop.thisN'
p1100
I12
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1101
g60
(g99
S'\x0c\x00\x00\x00'
tRp1102
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1103
I0
sg904
S'29-beans.png'
p1104
sS'block_loop.thisRepN'
p1105
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1106
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1107
Nsg70
Vn
sS'block_loop.thisTrialN'
p1108
I0
sg39
F1.6333079404757882
sg34
g753
(S'\x07\xdf\x07\x0b\n-&\x08\x16P'
tRp1109
sa(dp1110
S'trial_loop.thisTrialN'
p1111
I13
sg895
S'33-ambrosia_rice.png'
p1112
sS'block_loop.thisIndex'
p1113
g889
sg38
S'right'
p1114
sg59
g63
sS'trial_loop.thisN'
p1115
I13
sg33
S'33-ambrosia_rice.png'
p1116
sg64
g65
sS'trial_loop.thisIndex'
p1117
g60
(g99
S'\r\x00\x00\x00'
tRp1118
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1119
I0
sg904
S'23-crunchie_redo.png'
p1120
sS'block_loop.thisRepN'
p1121
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1122
I0
sg909
S'23-crunchie_redo.png'
p1123
sg55
g11
sS'block_loop.thisTrial'
p1124
Nsg70
Vn
sS'block_loop.thisTrialN'
p1125
I0
sg39
F1.4332240071980777
sg34
g753
(S'\x07\xdf\x07\x0b\n--\x02\xea\x18'
tRp1126
sa(dp1127
S'trial_loop.thisTrialN'
p1128
I14
sg895
S'4-corn.png'
p1129
sS'block_loop.thisIndex'
p1130
g889
sg38
S'right'
p1131
sg59
g63
sS'trial_loop.thisN'
p1132
I14
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1133
g60
(g99
S'\x0e\x00\x00\x00'
tRp1134
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1135
I0
sg904
S'10-bounty_redo.png'
p1136
sS'block_loop.thisRepN'
p1137
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1138
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1139
Nsg70
Vn
sS'block_loop.thisTrialN'
p1140
I0
sg39
F2.7670210072678856
sg34
g753
(S'\x07\xdf\x07\x0b\n-3\n%\xa8'
tRp1141
sa(dp1142
S'trial_loop.thisTrialN'
p1143
I15
sg895
g1048
sS'block_loop.thisIndex'
p1144
g889
sg38
S'right'
p1145
sg59
g63
sS'trial_loop.thisN'
p1146
I15
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p1147
g60
(g99
S'\x0f\x00\x00\x00'
tRp1148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1149
I0
sg904
g1056
sS'block_loop.thisRepN'
p1150
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1151
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p1152
Nsg70
Vn
sS'block_loop.thisTrialN'
p1153
I0
sg39
F3.183315809220403
sg34
g753
(S'\x07\xdf\x07\x0b\n-;\x07\x18h'
tRp1154
sa(dp1155
S'trial_loop.thisTrialN'
p1156
I16
sg895
S'1-treacle_cookies.png'
p1157
sS'block_loop.thisIndex'
p1158
g889
sg38
S'left'
p1159
sg59
g63
sS'trial_loop.thisN'
p1160
I16
sg33
S'21-nakd_banana_crunch.png'
p1161
sg64
g65
sS'trial_loop.thisIndex'
p1162
g60
(g99
S'\x10\x00\x00\x00'
tRp1163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1164
I0
sg904
S'21-nakd_banana_crunch.png'
p1165
sS'block_loop.thisRepN'
p1166
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1167
I0
sg909
S'1-treacle_cookies.png'
p1168
sg55
g11
sS'block_loop.thisTrial'
p1169
Nsg70
Vn
sS'block_loop.thisTrialN'
p1170
I0
sg39
F2.4332214413034308
sg34
g753
(S'\x07\xdf\x07\x0b\n.\x07\n=\x18'
tRp1171
sa(dp1172
S'trial_loop.thisTrialN'
p1173
I17
sg895
S'23-crunchie_redo.png'
p1174
sS'block_loop.thisIndex'
p1175
g889
sg38
S'right'
p1176
sg59
g63
sS'trial_loop.thisN'
p1177
I17
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p1178
g60
(g99
S'\x11\x00\x00\x00'
tRp1179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1180
I0
sg904
S'33-ambrosia_rice.png'
p1181
sS'block_loop.thisRepN'
p1182
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1183
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p1184
Nsg70
Vn
sS'block_loop.thisTrialN'
p1185
I0
sg39
F1.6165361101261624
sg34
g753
(S'\x07\xdf\x07\x0b\n.\x0f\x02.\x98'
tRp1186
sa(dp1187
S'trial_loop.thisTrialN'
p1188
I18
sg895
S'21-nakd_banana_crunch.png'
p1189
sS'block_loop.thisIndex'
p1190
g889
sg38
S'left'
p1191
sg59
g63
sS'trial_loop.thisN'
p1192
I18
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p1193
g60
(g99
S'\x12\x00\x00\x00'
tRp1194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1195
I0
sg904
S'1-treacle_cookies.png'
p1196
sS'block_loop.thisRepN'
p1197
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1198
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p1199
Nsg70
Vn
sS'block_loop.thisTrialN'
p1200
I0
sg39
F3.1167103058887733
sg34
g753
(S'\x07\xdf\x07\x0b\n.\x15\x0c\n\x08'
tRp1201
sa(dp1202
S'trial_loop.thisTrialN'
p1203
I19
sg895
g1129
sS'block_loop.thisIndex'
p1204
g889
sg38
S'left'
p1205
sg59
g63
sS'trial_loop.thisN'
p1206
I19
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1207
g60
(g99
S'\x13\x00\x00\x00'
tRp1208
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1209
I0
sg904
g1136
sS'block_loop.thisRepN'
p1210
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1211
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1212
Nsg70
Vn
sS'block_loop.thisTrialN'
p1213
I0
sg39
F2.0999721172738646
sg34
g753
(S'\x07\xdf\x07\x0b\n.\x1d\x0ew '
tRp1214
sa(dp1215
S'trial_loop.thisTrialN'
p1216
I20
sg895
S'18-mms.png'
p1217
sS'block_loop.thisIndex'
p1218
g889
sg38
S'left'
p1219
sg59
g63
sS'trial_loop.thisN'
p1220
I20
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p1221
g60
(g99
S'\x14\x00\x00\x00'
tRp1222
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1223
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1224
sS'block_loop.thisRepN'
p1225
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1226
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1227
Nsg70
Vn
sS'block_loop.thisTrialN'
p1228
I0
sg39
F2.6833115327285668
sg34
g753
(S'\x07\xdf\x07\x0b\n.%\x01,\xc8'
tRp1229
sa(dp1230
S'trial_loop.thisTrialN'
p1231
I21
sg895
S'6-sour_patch_kids.png'
p1232
sS'block_loop.thisIndex'
p1233
g889
sg38
S'left'
p1234
sg59
g63
sS'trial_loop.thisN'
p1235
I21
sg33
S'38-maltesers.png'
p1236
sg64
g65
sS'trial_loop.thisIndex'
p1237
g60
(g99
S'\x15\x00\x00\x00'
tRp1238
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1239
I0
sg904
S'38-maltesers.png'
p1240
sS'block_loop.thisRepN'
p1241
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1242
I0
sg909
S'6-sour_patch_kids.png'
p1243
sg55
g11
sS'block_loop.thisTrial'
p1244
Nsg70
Vn
sS'block_loop.thisTrialN'
p1245
I0
sg39
F1.5997257913504654
sg34
g753
(S'\x07\xdf\x07\x0b\n.,\x0b\xf2\x98'
tRp1246
sa(dp1247
S'trial_loop.thisTrialN'
p1248
I22
sg895
g984
sS'block_loop.thisIndex'
p1249
g889
sg38
S'left'
p1250
sg59
g63
sS'trial_loop.thisN'
p1251
I22
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1252
g60
(g99
S'\x16\x00\x00\x00'
tRp1253
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1254
I0
sg904
g992
sS'block_loop.thisRepN'
p1255
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1256
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1257
Nsg70
Vn
sS'block_loop.thisTrialN'
p1258
I0
sg39
F2.0332813692070886
sg34
g753
(S'\x07\xdf\x07\x0b\n.3\x06\x8b\xc8'
tRp1259
sa(dp1260
S'trial_loop.thisTrialN'
p1261
I23
sg895
S'40-sardines.png'
p1262
sS'block_loop.thisIndex'
p1263
g889
sg38
S'left'
p1264
sg59
g63
sS'trial_loop.thisN'
p1265
I23
sg33
S'40-sardines.png'
p1266
sg64
g65
sS'trial_loop.thisIndex'
p1267
g60
(g99
S'\x17\x00\x00\x00'
tRp1268
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1269
I0
sg904
S'5-pineapple.png'
p1270
sS'block_loop.thisRepN'
p1271
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1272
I0
sg909
S'5-pineapple.png'
p1273
sg55
g11
sS'block_loop.thisTrial'
p1274
Nsg70
Vn
sS'block_loop.thisTrialN'
p1275
I0
sg39
F2.3500103206001768
sg34
g753
(S'\x07\xdf\x07\x0b\n.:\x07\x91\x80'
tRp1276
sa(dp1277
S'trial_loop.thisTrialN'
p1278
I24
sg895
S'20-fruit_pastilles.png'
p1279
sS'block_loop.thisIndex'
p1280
g889
sg38
S'left'
p1281
sg59
g63
sS'trial_loop.thisN'
p1282
I24
sg33
S'20-fruit_pastilles.png'
p1283
sg64
g65
sS'trial_loop.thisIndex'
p1284
g60
(g99
S'\x18\x00\x00\x00'
tRp1285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1286
I0
sg904
S'2-steamed_puddings.png'
p1287
sS'block_loop.thisRepN'
p1288
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1289
I0
sg909
S'2-steamed_puddings.png'
p1290
sg55
g11
sS'block_loop.thisTrial'
p1291
Nsg70
Vn
sS'block_loop.thisTrialN'
p1292
I0
sg39
F1.8833144977629672
sg34
g753
(S'\x07\xdf\x07\x0b\n/\x05\rV\x10'
tRp1293
sa(dp1294
S'trial_loop.thisTrialN'
p1295
I25
sg895
g1232
sS'block_loop.thisIndex'
p1296
g889
sg38
S'right'
p1297
sg59
g63
sS'trial_loop.thisN'
p1298
I25
sg33
g1243
sg64
g65
sS'trial_loop.thisIndex'
p1299
g60
(g99
S'\x19\x00\x00\x00'
tRp1300
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1301
I0
sg904
g1240
sS'block_loop.thisRepN'
p1302
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1303
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p1304
Nsg70
Vn
sS'block_loop.thisTrialN'
p1305
I0
sg39
F1.7497143303526173
sg34
g753
(S'\x07\xdf\x07\x0b\n/\x0c\x0b\xfah'
tRp1306
sa(dp1307
S'trial_loop.thisTrialN'
p1308
I26
sg895
g967
sS'block_loop.thisIndex'
p1309
g889
sg38
S'right'
p1310
sg59
g63
sS'trial_loop.thisN'
p1311
I26
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p1312
g60
(g99
S'\x1a\x00\x00\x00'
tRp1313
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1314
I0
sg904
g975
sS'block_loop.thisRepN'
p1315
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1316
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1317
Nsg70
Vn
sS'block_loop.thisTrialN'
p1318
I0
sg39
F2.1665043500470347
sg34
g753
(S'\x07\xdf\x07\x0b\n/\x13\x08\xb6x'
tRp1319
sa(dp1320
S'trial_loop.thisTrialN'
p1321
I27
sg895
g1189
sS'block_loop.thisIndex'
p1322
g889
sg38
S'left'
p1323
sg59
g63
sS'trial_loop.thisN'
p1324
I27
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p1325
g60
(g99
S'\x1b\x00\x00\x00'
tRp1326
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1327
I0
sg904
g1196
sS'block_loop.thisRepN'
p1328
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1329
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p1330
Nsg70
Vn
sS'block_loop.thisTrialN'
p1331
I0
sg39
F1.8499952103288706
sg34
g753
(S'\x07\xdf\x07\x0b\n/\x1a\x0b\xdf\x10'
tRp1332
sa(dp1333
S'trial_loop.thisTrialN'
p1334
I28
sg895
S'13-mccoys_steak_crisps.png'
p1335
sS'block_loop.thisIndex'
p1336
g889
sg38
S'left'
p1337
sg59
g63
sS'trial_loop.thisN'
p1338
I28
sg33
S'13-mccoys_steak_crisps.png'
p1339
sg64
g65
sS'trial_loop.thisIndex'
p1340
g60
(g99
S'\x1c\x00\x00\x00'
tRp1341
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1342
I0
sg904
S'3-ellas_strawberries_apples.png'
p1343
sS'block_loop.thisRepN'
p1344
I0
sg907
S'3-ellas_strawberries_apples.png'
p1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1346
I0
sg909
g1339
sg55
g11
sS'block_loop.thisTrial'
p1347
Nsg70
Vn
sS'block_loop.thisTrialN'
p1348
I0
sg39
F2.3170305866092349
sg34
g753
(S'\x07\xdf\x07\x0b\n/!\n\nP'
tRp1349
sa(dp1350
S'trial_loop.thisTrialN'
p1351
I29
sg895
S'19-caramello_redo.png'
p1352
sS'block_loop.thisIndex'
p1353
g889
sg38
S'left'
p1354
sg59
g63
sS'trial_loop.thisN'
p1355
I29
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p1356
g60
(g99
S'\x1d\x00\x00\x00'
tRp1357
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1358
I0
sg904
S'30-spaghetti_hoops.png'
p1359
sS'block_loop.thisRepN'
p1360
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1361
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p1362
Nsg70
Vn
sS'block_loop.thisTrialN'
p1363
I0
sg39
F2.3666336141372994
sg34
g753
(S'\x07\xdf\x07\x0b\n/)\x00\x17p'
tRp1364
sa(dp1365
S'trial_loop.thisTrialN'
p1366
I30
sg895
S'49-yorkie.png'
p1367
sS'block_loop.thisIndex'
p1368
g889
sg38
S'left'
p1369
sg59
g63
sS'trial_loop.thisN'
p1370
I30
sg33
g1029
sg64
g65
sS'trial_loop.thisIndex'
p1371
g60
(g99
S'\x1e\x00\x00\x00'
tRp1372
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1373
I0
sg904
S'35-raisins.png'
p1374
sS'block_loop.thisRepN'
p1375
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1376
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1377
Nsg70
Vn
sS'block_loop.thisTrialN'
p1378
I0
sg39
F2.8832991023928116
sg34
g753
(S'\x07\xdf\x07\x0b\n/0\x06\x1a\x80'
tRp1379
sa(dp1380
S'trial_loop.thisTrialN'
p1381
I31
sg895
S'48-twix.png'
p1382
sS'block_loop.thisIndex'
p1383
g889
sg38
S'left'
p1384
sg59
g63
sS'trial_loop.thisN'
p1385
I31
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1386
g60
(g99
S'\x1f\x00\x00\x00'
tRp1387
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1388
I0
sg904
S'50-polo.png'
p1389
sS'block_loop.thisRepN'
p1390
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1391
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1392
Nsg70
Vn
sS'block_loop.thisTrialN'
p1393
I0
sg39
F5.6831507366400729
sg34
g753
(S'\x07\xdf\x07\x0b\n/8\x04\xf5\x88'
tRp1394
sa(dp1395
S'trial_loop.thisTrialN'
p1396
I32
sg895
g1001
sS'block_loop.thisIndex'
p1397
g889
sg38
S'right'
p1398
sg59
g63
sS'trial_loop.thisN'
p1399
I32
sg33
g1011
sg64
g65
sS'trial_loop.thisIndex'
p1400
g60
(g99
S' \x00\x00\x00'
tRp1401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1402
I0
sg904
g1009
sS'block_loop.thisRepN'
p1403
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1404
I0
sg909
g1005
sg55
g11
sS'block_loop.thisTrial'
p1405
Nsg70
Vn
sS'block_loop.thisTrialN'
p1406
I0
sg39
F5.2667501627915954
sg34
g753
(S'\x07\xdf\x07\x0b\n0\x07\x00\xa4\x10'
tRp1407
sa(dp1408
S'trial_loop.thisTrialN'
p1409
I33
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1410
sS'block_loop.thisIndex'
p1411
g889
sg38
S'left'
p1412
sg59
g63
sS'trial_loop.thisN'
p1413
I33
sg33
S'36-fig_rolls.png'
p1414
sg64
g65
sS'trial_loop.thisIndex'
p1415
g60
(g99
S'!\x00\x00\x00'
tRp1416
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1417
I0
sg904
S'36-fig_rolls.png'
p1418
sS'block_loop.thisRepN'
p1419
I0
sg907
g1414
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1420
I0
sg909
S'34-hula_hoops_bbq_beef_redo.png'
p1421
sg55
g11
sS'block_loop.thisTrial'
p1422
Nsg70
Vn
sS'block_loop.thisTrialN'
p1423
I0
sg39
F1.8666139422753076
sg34
g753
(S'\x07\xdf\x07\x0b\n0\x11\x05(P'
tRp1424
sa(dp1425
S'trial_loop.thisTrialN'
p1426
I34
sg895
S'16-skips_prawn.png'
p1427
sS'block_loop.thisIndex'
p1428
g889
sg38
S'left'
p1429
sg59
g63
sS'trial_loop.thisN'
p1430
I34
sg33
g1091
sg64
g65
sS'trial_loop.thisIndex'
p1431
g60
(g99
S'"\x00\x00\x00'
tRp1432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1433
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1434
sS'block_loop.thisRepN'
p1435
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1436
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p1437
Nsg70
Vn
sS'block_loop.thisTrialN'
p1438
I0
sg39
F2.8831548420721447
sg34
g753
(S'\x07\xdf\x07\x0b\n0\x18\x03\x8e('
tRp1439
sa(dp1440
S'trial_loop.thisTrialN'
p1441
I35
sg895
g1129
sS'block_loop.thisIndex'
p1442
g889
sg38
S'right'
p1443
sg59
g63
sS'trial_loop.thisN'
p1444
I35
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1445
g60
(g99
S'#\x00\x00\x00'
tRp1446
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1447
I0
sg904
g1136
sS'block_loop.thisRepN'
p1448
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1449
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1450
Nsg70
Vn
sS'block_loop.thisTrialN'
p1451
I0
sg39
F4.2665862306089366
sg34
g753
(S'\x07\xdf\x07\x0b\n0 \x02i0'
tRp1452
sa(dp1453
S'trial_loop.thisTrialN'
p1454
I36
sg895
S'36-fig_rolls.png'
p1455
sS'block_loop.thisIndex'
p1456
g889
sg38
S'left'
p1457
sg59
g63
sS'trial_loop.thisN'
p1458
I36
sg33
g1414
sg64
g65
sS'trial_loop.thisIndex'
p1459
g60
(g99
S'$\x00\x00\x00'
tRp1460
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1461
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1462
sS'block_loop.thisRepN'
p1463
I0
sg907
g1414
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1464
I0
sg909
g1421
sg55
g11
sS'block_loop.thisTrial'
p1465
Nsg70
Vn
sS'block_loop.thisTrialN'
p1466
I0
sg39
F2.6166835065409941
sg34
g753
(S'\x07\xdf\x07\x0b\n0)\x06\xf5@'
tRp1467
sa(dp1468
S'trial_loop.thisTrialN'
p1469
I37
sg895
g1279
sS'block_loop.thisIndex'
p1470
g889
sg38
S'left'
p1471
sg59
g63
sS'trial_loop.thisN'
p1472
I37
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p1473
g60
(g99
S'%\x00\x00\x00'
tRp1474
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1475
I0
sg904
g1287
sS'block_loop.thisRepN'
p1476
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1477
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p1478
Nsg70
Vn
sS'block_loop.thisTrialN'
p1479
I0
sg39
F1.883310221271131
sg34
g753
(S'\x07\xdf\x07\x0b\n01\x01\x86\xa0'
tRp1480
sa(dp1481
S'trial_loop.thisTrialN'
p1482
I38
sg895
S'25-kitkat.png'
p1483
sS'block_loop.thisIndex'
p1484
g889
sg38
S'right'
p1485
sg59
g63
sS'trial_loop.thisN'
p1486
I38
sg33
S'25-kitkat.png'
p1487
sg64
g65
sS'trial_loop.thisIndex'
p1488
g60
(g99
S'&\x00\x00\x00'
tRp1489
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1490
I0
sg904
S'31-hobnobs.png'
p1491
sS'block_loop.thisRepN'
p1492
I0
sg907
g1487
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1493
I0
sg909
S'31-hobnobs.png'
p1494
sg55
g11
sS'block_loop.thisTrial'
p1495
Nsg70
Vn
sS'block_loop.thisTrialN'
p1496
I0
sg39
F2.8999460591840034
sg34
g753
(S'\x07\xdf\x07\x0b\n08\x00e\x90'
tRp1497
sa(dp1498
S'trial_loop.thisTrialN'
p1499
I39
sg895
g1367
sS'block_loop.thisIndex'
p1500
g889
sg38
S'right'
p1501
sg59
g63
sS'trial_loop.thisN'
p1502
I39
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1503
g60
(g99
S"'\x00\x00\x00"
tRp1504
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1505
I0
sg904
g1374
sS'block_loop.thisRepN'
p1506
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1507
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1508
Nsg70
Vn
sS'block_loop.thisTrialN'
p1509
I0
sg39
F1.766554299470954
sg34
g753
(S'\x07\xdf\x07\x0b\n1\x03\x0e\x82\xd8'
tRp1510
sa(dp1511
S'trial_loop.thisTrialN'
p1512
I40
sg895
g896
sS'block_loop.thisIndex'
p1513
g889
sg38
S'right'
p1514
sg59
g63
sS'trial_loop.thisN'
p1515
I40
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1516
g60
(g99
S'(\x00\x00\x00'
tRp1517
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1518
I0
sg904
g905
sS'block_loop.thisRepN'
p1519
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1520
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1521
Nsg70
Vn
sS'block_loop.thisTrialN'
p1522
I0
sg39
F1.4832478415119112
sg34
g753
(S'\x07\xdf\x07\x0b\n1\n\x0b}h'
tRp1523
sa(dp1524
S'trial_loop.thisTrialN'
p1525
I41
sg895
g950
sS'block_loop.thisIndex'
p1526
g889
sg38
S'right'
p1527
sg59
g63
sS'trial_loop.thisN'
p1528
I41
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1529
g60
(g99
S')\x00\x00\x00'
tRp1530
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1531
I0
sg904
g958
sS'block_loop.thisRepN'
p1532
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1533
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1534
Nsg70
Vn
sS'block_loop.thisTrialN'
p1535
I0
sg39
F2.8835656703768109
sg34
g753
(S'\x07\xdf\x07\x0b\n1\x11\x04*h'
tRp1536
sa(dp1537
S'trial_loop.thisTrialN'
p1538
I42
sg895
S'5-pineapple.png'
p1539
sS'block_loop.thisIndex'
p1540
g889
sg38
S'right'
p1541
sg59
g63
sS'trial_loop.thisN'
p1542
I42
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p1543
g60
(g99
S'*\x00\x00\x00'
tRp1544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1545
I0
sg904
S'40-sardines.png'
p1546
sS'block_loop.thisRepN'
p1547
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1548
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p1549
Nsg70
Vn
sS'block_loop.thisTrialN'
p1550
I0
sg39
F2.4332667721155303
sg34
g753
(S'\x07\xdf\x07\x0b\n1\x19\x02\xca\xd8'
tRp1551
sa(dp1552
S'trial_loop.thisTrialN'
p1553
I43
sg895
g1382
sS'block_loop.thisIndex'
p1554
g889
sg38
S'left'
p1555
sg59
g63
sS'trial_loop.thisN'
p1556
I43
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p1557
g60
(g99
S'+\x00\x00\x00'
tRp1558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1559
I0
sg904
g1389
sS'block_loop.thisRepN'
p1560
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1561
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1562
Nsg70
Vn
sS'block_loop.thisTrialN'
p1563
I0
sg39
F2.0666437066574872
sg34
g753
(S'\x07\xdf\x07\x0b\n1 \t\xfe\x98'
tRp1564
sa(dp1565
S'trial_loop.thisTrialN'
p1566
I44
sg895
S'38-maltesers.png'
p1567
sS'block_loop.thisIndex'
p1568
g889
sg38
S'left'
p1569
sg59
g63
sS'trial_loop.thisN'
p1570
I44
sg33
g1243
sg64
g65
sS'trial_loop.thisIndex'
p1571
g60
(g99
S',\x00\x00\x00'
tRp1572
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1573
I0
sg904
S'6-sour_patch_kids.png'
p1574
sS'block_loop.thisRepN'
p1575
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1576
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p1577
Nsg70
Vn
sS'block_loop.thisTrialN'
p1578
I0
sg39
F2.9829231132403038
sg34
g753
(S"\x07\xdf\x07\x0b\n1'\x0b}h"
tRp1579
sa(dp1580
S'trial_loop.thisTrialN'
p1581
I45
sg895
g1455
sS'block_loop.thisIndex'
p1582
g889
sg38
S'right'
p1583
sg59
g63
sS'trial_loop.thisN'
p1584
I45
sg33
g1421
sg64
g65
sS'trial_loop.thisIndex'
p1585
g60
(g99
S'-\x00\x00\x00'
tRp1586
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1587
I0
sg904
g1462
sS'block_loop.thisRepN'
p1588
I0
sg907
g1414
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1589
I0
sg909
g1421
sg55
g11
sS'block_loop.thisTrial'
p1590
Nsg70
Vn
sS'block_loop.thisTrialN'
p1591
I0
sg39
F1.4999885960223764
sg34
g753
(S'\x07\xdf\x07\x0b\n1/\x0b\xc7\xa0'
tRp1592
sa(dp1593
S'trial_loop.thisTrialN'
p1594
I46
sg895
g950
sS'block_loop.thisIndex'
p1595
g889
sg38
S'left'
p1596
sg59
g63
sS'trial_loop.thisN'
p1597
I46
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1598
g60
(g99
S'.\x00\x00\x00'
tRp1599
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1600
I0
sg904
g958
sS'block_loop.thisRepN'
p1601
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1602
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1603
Nsg70
Vn
sS'block_loop.thisTrialN'
p1604
I0
sg39
F1.7332997296116446
sg34
g753
(S'\x07\xdf\x07\x0b\n16\x04\xb3 '
tRp1605
sa(dp1606
S'trial_loop.thisTrialN'
p1607
I47
sg895
g1352
sS'block_loop.thisIndex'
p1608
g889
sg38
S'left'
p1609
sg59
g63
sS'trial_loop.thisN'
p1610
I47
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p1611
g60
(g99
S'/\x00\x00\x00'
tRp1612
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1613
I0
sg904
g1359
sS'block_loop.thisRepN'
p1614
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1615
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p1616
Nsg70
Vn
sS'block_loop.thisTrialN'
p1617
I0
sg39
F1.8997390769850426
sg34
g753
(S'\x07\xdf\x07\x0b\n2\x01\x010\xb0'
tRp1618
sa(dp1619
S'trial_loop.thisTrialN'
p1620
I48
sg895
S'51-mars.png'
p1621
sS'block_loop.thisIndex'
p1622
g889
sg38
S'left'
p1623
sg59
g63
sS'trial_loop.thisN'
p1624
I48
sg33
S'51-mars.png'
p1625
sg64
g65
sS'trial_loop.thisIndex'
p1626
g60
(g99
S'0\x00\x00\x00'
tRp1627
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1628
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p1629
sS'block_loop.thisRepN'
p1630
I0
sg907
g1625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1631
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p1632
sg55
g11
sS'block_loop.thisTrial'
p1633
Nsg70
Vn
sS'block_loop.thisTrialN'
p1634
I0
sg39
F3.8500063292076447
sg34
g753
(S'\x07\xdf\x07\x0b\n2\x08\x00\x13\x88'
tRp1635
sa(dp1636
S'trial_loop.thisTrialN'
p1637
I49
sg895
g1483
sS'block_loop.thisIndex'
p1638
g889
sg38
S'left'
p1639
sg59
g63
sS'trial_loop.thisN'
p1640
I49
sg33
g1494
sg64
g65
sS'trial_loop.thisIndex'
p1641
g60
(g99
S'1\x00\x00\x00'
tRp1642
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1643
I0
sg904
g1491
sS'block_loop.thisRepN'
p1644
I0
sg907
g1487
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1645
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p1646
Nsg70
Vn
sS'block_loop.thisTrialN'
p1647
I0
sg39
F2.6165520756949263
sg34
g753
(S'\x07\xdf\x07\x0b\n2\x10\r\xaf\xe8'
tRp1648
sa(dp1649
S'trial_loop.thisTrialN'
p1650
I50
sg895
S'2-steamed_puddings.png'
p1651
sS'block_loop.thisIndex'
p1652
g889
sg38
S'right'
p1653
sg59
g63
sS'trial_loop.thisN'
p1654
I50
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p1655
g60
(g99
S'2\x00\x00\x00'
tRp1656
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1657
I0
sg904
S'20-fruit_pastilles.png'
p1658
sS'block_loop.thisRepN'
p1659
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1660
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p1661
Nsg70
Vn
sS'block_loop.thisTrialN'
p1662
I0
sg39
F3.1669779002309042
sg34
g753
(S'\x07\xdf\x07\x0b\n2\x18\x08AH'
tRp1663
sa(dp1664
S'trial_loop.thisTrialN'
p1665
I51
sg895
g1567
sS'block_loop.thisIndex'
p1666
g889
sg38
S'right'
p1667
sg59
g63
sS'trial_loop.thisN'
p1668
I51
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p1669
g60
(g99
S'3\x00\x00\x00'
tRp1670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1671
I0
sg904
g1574
sS'block_loop.thisRepN'
p1672
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1673
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p1674
Nsg70
Vn
sS'block_loop.thisTrialN'
p1675
I0
sg39
F6.099542472405119
sg34
g753
(S'\x07\xdf\x07\x0b\n2 \x0bb\x10'
tRp1676
sa(dp1677
S'trial_loop.thisTrialN'
p1678
I52
sg895
S'8-liquorice_catherine_wheels.png'
p1679
sS'block_loop.thisIndex'
p1680
g889
sg38
S'right'
p1681
sg59
g63
sS'trial_loop.thisN'
p1682
I52
sg33
S'17-jacobs_mini_cheddars_redo.png'
p1683
sg64
g65
sS'trial_loop.thisIndex'
p1684
g60
(g99
S'4\x00\x00\x00'
tRp1685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1686
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1687
sS'block_loop.thisRepN'
p1688
I0
sg907
g1683
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1689
I0
sg909
S'8-liquorice_catherine_wheels.png'
p1690
sg55
g11
sS'block_loop.thisTrial'
p1691
Nsg70
Vn
sS'block_loop.thisTrialN'
p1692
I0
sg39
F1.9999218827510958
sg34
g753
(S'\x07\xdf\x07\x0b\n2+\rB\x88'
tRp1693
sa(dp1694
S'trial_loop.thisTrialN'
p1695
I53
sg895
g1048
sS'block_loop.thisIndex'
p1696
g889
sg38
S'right'
p1697
sg59
g63
sS'trial_loop.thisN'
p1698
I53
sg33
g1059
sg64
g65
sS'trial_loop.thisIndex'
p1699
g60
(g99
S'5\x00\x00\x00'
tRp1700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1701
I0
sg904
g1056
sS'block_loop.thisRepN'
p1702
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1703
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p1704
Nsg70
Vn
sS'block_loop.thisTrialN'
p1705
I0
sg39
F2.4000233211345403
sg34
g753
(S'\x07\xdf\x07\x0b\n22\r\xcf('
tRp1706
sa(dp1707
S'trial_loop.thisTrialN'
p1708
I54
sg895
g1367
sS'block_loop.thisIndex'
p1709
g889
sg38
S'right'
p1710
sg59
g63
sS'trial_loop.thisN'
p1711
I54
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1712
g60
(g99
S'6\x00\x00\x00'
tRp1713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1714
I0
sg904
g1374
sS'block_loop.thisRepN'
p1715
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1716
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1717
Nsg70
Vn
sS'block_loop.thisTrialN'
p1718
I0
sg39
F1.6669274376290559
sg34
g753
(S'\x07\xdf\x07\x0b\n2:\x05G\x90'
tRp1719
sa(dp1720
S'trial_loop.thisTrialN'
p1721
I55
sg895
g1097
sS'block_loop.thisIndex'
p1722
g889
sg38
S'right'
p1723
sg59
g63
sS'trial_loop.thisN'
p1724
I55
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1725
g60
(g99
S'7\x00\x00\x00'
tRp1726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1727
I0
sg904
g1104
sS'block_loop.thisRepN'
p1728
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1729
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1730
Nsg70
Vn
sS'block_loop.thisTrialN'
p1731
I0
sg39
F3.1665804716003549
sg34
g753
(S'\x07\xdf\x07\x0b\n3\x05\x00\x94p'
tRp1732
sa(dp1733
S'trial_loop.thisTrialN'
p1734
I56
sg895
g1279
sS'block_loop.thisIndex'
p1735
g889
sg38
S'left'
p1736
sg59
g63
sS'trial_loop.thisN'
p1737
I56
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p1738
g60
(g99
S'8\x00\x00\x00'
tRp1739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1740
I0
sg904
g1287
sS'block_loop.thisRepN'
p1741
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1742
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p1743
Nsg70
Vn
sS'block_loop.thisTrialN'
p1744
I0
sg39
F1.4832623815836996
sg34
g753
(S'\x07\xdf\x07\x0b\n3\r\x03\xb9 '
tRp1745
sa(dp1746
S'trial_loop.thisTrialN'
p1747
I57
sg895
g1352
sS'block_loop.thisIndex'
p1748
g889
sg38
S'left'
p1749
sg59
g63
sS'trial_loop.thisN'
p1750
I57
sg33
g1059
sg64
g65
sS'trial_loop.thisIndex'
p1751
g60
(g99
S'9\x00\x00\x00'
tRp1752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1753
I0
sg904
g1359
sS'block_loop.thisRepN'
p1754
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1755
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p1756
Nsg70
Vn
sS'block_loop.thisTrialN'
p1757
I0
sg39
F1.3666598432864703
sg34
g753
(S'\x07\xdf\x07\x0b\n3\x13\x0bm\xc8'
tRp1758
sa(dp1759
S'trial_loop.thisTrialN'
p1760
I58
sg895
g1174
sS'block_loop.thisIndex'
p1761
g889
sg38
S'right'
p1762
sg59
g63
sS'trial_loop.thisN'
p1763
I58
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p1764
g60
(g99
S':\x00\x00\x00'
tRp1765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1766
I0
sg904
g1181
sS'block_loop.thisRepN'
p1767
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1768
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p1769
Nsg70
Vn
sS'block_loop.thisTrialN'
p1770
I0
sg39
F1.650010206560637
sg34
g753
(S'\x07\xdf\x07\x0b\n3\x1a\x02t\xe8'
tRp1771
sa(dp1772
S'trial_loop.thisTrialN'
p1773
I59
sg895
g1189
sS'block_loop.thisIndex'
p1774
g889
sg38
S'left'
p1775
sg59
g63
sS'trial_loop.thisN'
p1776
I59
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p1777
g60
(g99
S';\x00\x00\x00'
tRp1778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1779
I0
sg904
g1196
sS'block_loop.thisRepN'
p1780
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1781
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p1782
Nsg70
Vn
sS'block_loop.thisTrialN'
p1783
I0
sg39
F1.4333021244469819
sg34
g753
(S'\x07\xdf\x07\x0b\n3 \x0c\xc9p'
tRp1784
sa(dp1785
S'trial_loop.thisTrialN'
p1786
I60
sg895
g1539
sS'block_loop.thisIndex'
p1787
g889
sg38
S'right'
p1788
sg59
g63
sS'trial_loop.thisN'
p1789
I60
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p1790
g60
(g99
S'<\x00\x00\x00'
tRp1791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1792
I0
sg904
g1546
sS'block_loop.thisRepN'
p1793
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1794
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p1795
Nsg70
Vn
sS'block_loop.thisTrialN'
p1796
I0
sg39
F1.6667372762967716
sg34
g753
(S"\x07\xdf\x07\x0b\n3'\x04\xc2\xc0"
tRp1797
sa(dp1798
S'trial_loop.thisTrialN'
p1799
I61
sg895
g1217
sS'block_loop.thisIndex'
p1800
g889
sg38
S'right'
p1801
sg59
g63
sS'trial_loop.thisN'
p1802
I61
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1803
g60
(g99
S'=\x00\x00\x00'
tRp1804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1805
I0
sg904
g1224
sS'block_loop.thisRepN'
p1806
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1807
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1808
Nsg70
Vn
sS'block_loop.thisTrialN'
p1809
I0
sg39
F3.7999596869376546
sg34
g753
(S'\x07\xdf\x07\x0b\n3.\x00\x0f\xa0'
tRp1810
sa(dp1811
S'trial_loop.thisTrialN'
p1812
I62
sg895
S'26-walkers_smoky_bacon.png'
p1813
sS'block_loop.thisIndex'
p1814
g889
sg38
S'right'
p1815
sg59
g63
sS'trial_loop.thisN'
p1816
I62
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p1817
g60
(g99
S'>\x00\x00\x00'
tRp1818
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1819
I0
sg904
S'44-crunch.png'
p1820
sS'block_loop.thisRepN'
p1821
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1822
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1823
Nsg70
Vn
sS'block_loop.thisTrialN'
p1824
I0
sg39
F1.7833221384280478
sg34
g753
(S'\x07\xdf\x07\x0b\n36\x0c\xb9\xd0'
tRp1825
sa(dp1826
S'trial_loop.thisTrialN'
p1827
I63
sg895
S'22-daim.png'
p1828
sS'block_loop.thisIndex'
p1829
g889
sg38
S'left'
p1830
sg59
g63
sS'trial_loop.thisN'
p1831
I63
sg33
g1011
sg64
g65
sS'trial_loop.thisIndex'
p1832
g60
(g99
S'?\x00\x00\x00'
tRp1833
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1834
I0
sg904
S'7-olives.png'
p1835
sS'block_loop.thisRepN'
p1836
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1837
I0
sg909
g1005
sg55
g11
sS'block_loop.thisTrial'
p1838
Nsg70
Vn
sS'block_loop.thisTrialN'
p1839
I0
sg39
F3.2503233027741771
sg34
g753
(S'\x07\xdf\x07\x0b\n4\x01\t\xee\xf8'
tRp1840
sa(dp1841
S'trial_loop.thisTrialN'
p1842
I64
sg895
g1813
sS'block_loop.thisIndex'
p1843
g889
sg38
S'right'
p1844
sg59
g63
sS'trial_loop.thisN'
p1845
I64
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1846
g60
(g99
S'@\x00\x00\x00'
tRp1847
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1848
I0
sg904
g1820
sS'block_loop.thisRepN'
p1849
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1850
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1851
Nsg70
Vn
sS'block_loop.thisTrialN'
p1852
I0
sg39
F1.8666182187666891
sg34
g753
(S'\x07\xdf\x07\x0b\n4\t\x0eDX'
tRp1853
sa(dp1854
S'trial_loop.thisTrialN'
p1855
I65
sg895
g1065
sS'block_loop.thisIndex'
p1856
g889
sg38
S'left'
p1857
sg59
g63
sS'trial_loop.thisN'
p1858
I65
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1859
g60
(g99
S'A\x00\x00\x00'
tRp1860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1861
I0
sg904
g1072
sS'block_loop.thisRepN'
p1862
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1863
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1864
Nsg70
Vn
sS'block_loop.thisTrialN'
p1865
I0
sg39
F1.649928383018505
sg34
g753
(S'\x07\xdf\x07\x0b\n4\x10\x0c\xe4\xc8'
tRp1866
sa(dp1867
S'trial_loop.thisTrialN'
p1868
I66
sg895
g1129
sS'block_loop.thisIndex'
p1869
g889
sg38
S'left'
p1870
sg59
g63
sS'trial_loop.thisN'
p1871
I66
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1872
g60
(g99
S'B\x00\x00\x00'
tRp1873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1874
I0
sg904
g1136
sS'block_loop.thisRepN'
p1875
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1876
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1877
Nsg70
Vn
sS'block_loop.thisTrialN'
p1878
I0
sg39
F2.8165596023204671
sg34
g753
(S'\x07\xdf\x07\x0b\n4\x17\x07\xf7\x10'
tRp1879
sa(dp1880
S'trial_loop.thisTrialN'
p1881
I67
sg895
g1112
sS'block_loop.thisIndex'
p1882
g889
sg38
S'left'
p1883
sg59
g63
sS'trial_loop.thisN'
p1884
I67
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p1885
g60
(g99
S'C\x00\x00\x00'
tRp1886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1887
I0
sg904
g1120
sS'block_loop.thisRepN'
p1888
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1889
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p1890
Nsg70
Vn
sS'block_loop.thisTrialN'
p1891
I0
sg39
F1.1665958669700558
sg34
g753
(S'\x07\xdf\x07\x0b\n4\x1f\x05\xa1h'
tRp1892
sa(dp1893
S'trial_loop.thisTrialN'
p1894
I68
sg895
g1382
sS'block_loop.thisIndex'
p1895
g889
sg38
S'left'
p1896
sg59
g63
sS'trial_loop.thisN'
p1897
I68
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1898
g60
(g99
S'D\x00\x00\x00'
tRp1899
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1900
I0
sg904
g1389
sS'block_loop.thisRepN'
p1901
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1902
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1903
Nsg70
Vn
sS'block_loop.thisTrialN'
p1904
I0
sg39
F2.0836461824615071
sg34
g753
(S'\x07\xdf\x07\x0b\n4%\x08\xd1\xd0'
tRp1905
sa(dp1906
S'trial_loop.thisTrialN'
p1907
I69
sg895
g1097
sS'block_loop.thisIndex'
p1908
g889
sg38
S'right'
p1909
sg59
g63
sS'trial_loop.thisN'
p1910
I69
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1911
g60
(g99
S'E\x00\x00\x00'
tRp1912
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1913
I0
sg904
g1104
sS'block_loop.thisRepN'
p1914
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1915
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1916
Nsg70
Vn
sS'block_loop.thisTrialN'
p1917
I0
sg39
F1.8166659444145807
sg34
g753
(S'\x07\xdf\x07\x0b\n4,\n\x8b8'
tRp1918
sa(dp1919
S'trial_loop.thisTrialN'
p1920
I70
sg895
g1483
sS'block_loop.thisIndex'
p1921
g889
sg38
S'left'
p1922
sg59
g63
sS'trial_loop.thisN'
p1923
I70
sg33
g1487
sg64
g65
sS'trial_loop.thisIndex'
p1924
g60
(g99
S'F\x00\x00\x00'
tRp1925
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1926
I0
sg904
g1491
sS'block_loop.thisRepN'
p1927
I0
sg907
g1487
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1928
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p1929
Nsg70
Vn
sS'block_loop.thisTrialN'
p1930
I0
sg39
F1.6665513914563235
sg34
g753
(S'\x07\xdf\x07\x0b\n43\x08=`'
tRp1931
sa(dp1932
S'trial_loop.thisTrialN'
p1933
I71
sg895
g1567
sS'block_loop.thisIndex'
p1934
g889
sg38
S'left'
p1935
sg59
g63
sS'trial_loop.thisN'
p1936
I71
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p1937
g60
(g99
S'G\x00\x00\x00'
tRp1938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1939
I0
sg904
g1574
sS'block_loop.thisRepN'
p1940
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1941
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p1942
Nsg70
Vn
sS'block_loop.thisTrialN'
p1943
I0
sg39
F4.9662955432113449
sg34
g753
(S'\x07\xdf\x07\x0b\n4:\x03\x8a@'
tRp1944
sa(dp1945
S'trial_loop.thisTrialN'
p1946
I72
sg895
g1157
sS'block_loop.thisIndex'
p1947
g889
sg38
S'right'
p1948
sg59
g63
sS'trial_loop.thisN'
p1949
I72
sg33
g1168
sg64
g65
sS'trial_loop.thisIndex'
p1950
g60
(g99
S'H\x00\x00\x00'
tRp1951
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1952
I0
sg904
g1165
sS'block_loop.thisRepN'
p1953
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1954
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p1955
Nsg70
Vn
sS'block_loop.thisTrialN'
p1956
I0
sg39
F1.4336687623376747
sg34
g753
(S'\x07\xdf\x07\x0b\n5\x08\x03\x8a@'
tRp1957
sa(dp1958
S'trial_loop.thisTrialN'
p1959
I73
sg895
g1828
sS'block_loop.thisIndex'
p1960
g889
sg38
S'right'
p1961
sg59
g63
sS'trial_loop.thisN'
p1962
I73
sg33
g1011
sg64
g65
sS'trial_loop.thisIndex'
p1963
g60
(g99
S'I\x00\x00\x00'
tRp1964
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1965
I0
sg904
g1835
sS'block_loop.thisRepN'
p1966
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1967
I0
sg909
g1005
sg55
g11
sS'block_loop.thisTrial'
p1968
Nsg70
Vn
sS'block_loop.thisTrialN'
p1969
I0
sg39
F5.133267171254829
sg34
g753
(S'\x07\xdf\x07\x0b\n5\x0e\n\xc5\xd0'
tRp1970
sa(dp1971
S'trial_loop.thisTrialN'
p1972
I74
sg895
g896
sS'block_loop.thisIndex'
p1973
g889
sg38
S'right'
p1974
sg59
g63
sS'trial_loop.thisN'
p1975
I74
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1976
g60
(g99
S'J\x00\x00\x00'
tRp1977
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1978
I0
sg904
g905
sS'block_loop.thisRepN'
p1979
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1980
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1981
Nsg70
Vn
sS'block_loop.thisTrialN'
p1982
I0
sg39
F1.7332250335562094
sg34
g753
(S'\x07\xdf\x07\x0b\n5\x18\ra\xc8'
tRp1983
sa(dp1984
S'trial_loop.thisTrialN'
p1985
I75
sg895
g1621
sS'block_loop.thisIndex'
p1986
g889
sg38
S'left'
p1987
sg59
g63
sS'trial_loop.thisN'
p1988
I75
sg33
g1625
sg64
g65
sS'trial_loop.thisIndex'
p1989
g60
(g99
S'K\x00\x00\x00'
tRp1990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1991
I0
sg904
g1629
sS'block_loop.thisRepN'
p1992
I0
sg907
g1625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1993
I0
sg909
g1632
sg55
g11
sS'block_loop.thisTrial'
p1994
Nsg70
Vn
sS'block_loop.thisTrialN'
p1995
I0
sg39
F1.7998584766337444
sg34
g753
(S'\x07\xdf\x07\x0b\n5\x1f\t\xa4\xc0'
tRp1996
sa(dp1997
S'trial_loop.thisTrialN'
p1998
I76
sg895
g933
sS'block_loop.thisIndex'
p1999
g889
sg38
S'left'
p2000
sg59
g63
sS'trial_loop.thisN'
p2001
I76
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2002
g60
(g99
S'L\x00\x00\x00'
tRp2003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2004
I0
sg904
g941
sS'block_loop.thisRepN'
p2005
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2006
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2007
Nsg70
Vn
sS'block_loop.thisTrialN'
p2008
I0
sg39
F1.6336623190900355
sg34
g753
(S'\x07\xdf\x07\x0b\n5&\x07\x18h'
tRp2009
sa(dp2010
S'trial_loop.thisTrialN'
p2011
I77
sg895
S'31-hobnobs.png'
p2012
sS'block_loop.thisIndex'
p2013
g889
sg38
S'right'
p2014
sg59
g63
sS'trial_loop.thisN'
p2015
I77
sg33
g1487
sg64
g65
sS'trial_loop.thisIndex'
p2016
g60
(g99
S'M\x00\x00\x00'
tRp2017
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2018
I0
sg904
S'25-kitkat.png'
p2019
sS'block_loop.thisRepN'
p2020
I0
sg907
g1487
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2021
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p2022
Nsg70
Vn
sS'block_loop.thisTrialN'
p2023
I0
sg39
F1.6333281825363883
sg34
g753
(S'\x07\xdf\x07\x0b\n5-\x02*\xb0'
tRp2024
sa(dp2025
S'trial_loop.thisTrialN'
p2026
I78
sg895
g1352
sS'block_loop.thisIndex'
p2027
g889
sg38
S'left'
p2028
sg59
g63
sS'trial_loop.thisN'
p2029
I78
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p2030
g60
(g99
S'N\x00\x00\x00'
tRp2031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2032
I0
sg904
g1359
sS'block_loop.thisRepN'
p2033
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2034
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p2035
Nsg70
Vn
sS'block_loop.thisTrialN'
p2036
I0
sg39
F1.2166983887318565
sg34
g753
(S'\x07\xdf\x07\x0b\n53\x0c@\xb8'
tRp2037
sa(dp2038
S'trial_loop.thisTrialN'
p2039
I79
sg895
g1080
sS'block_loop.thisIndex'
p2040
g889
sg38
S'left'
p2041
sg59
g63
sS'trial_loop.thisN'
p2042
I79
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p2043
g60
(g99
S'O\x00\x00\x00'
tRp2044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2045
I0
sg904
g1088
sS'block_loop.thisRepN'
p2046
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2047
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p2048
Nsg70
Vn
sS'block_loop.thisTrialN'
p2049
I0
sg39
F3.549802882241238
sg34
g753
(S'\x07\xdf\x07\x0b\n5:\x00\xe2\x90'
tRp2050
sa(dp2051
S'trial_loop.thisTrialN'
p2052
I80
sg895
g1217
sS'block_loop.thisIndex'
p2053
g889
sg38
S'left'
p2054
sg59
g63
sS'trial_loop.thisN'
p2055
I80
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p2056
g60
(g99
S'P\x00\x00\x00'
tRp2057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2058
I0
sg904
g1224
sS'block_loop.thisRepN'
p2059
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2060
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2061
Nsg70
Vn
sS'block_loop.thisTrialN'
p2062
I0
sg39
F3.0166546544764969
sg34
g753
(S'\x07\xdf\x07\x0b\n6\x06\t\xbc0'
tRp2063
sa(dp2064
S'trial_loop.thisTrialN'
p2065
I81
sg895
g1651
sS'block_loop.thisIndex'
p2066
g889
sg38
S'right'
p2067
sg59
g63
sS'trial_loop.thisN'
p2068
I81
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p2069
g60
(g99
S'Q\x00\x00\x00'
tRp2070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2071
I0
sg904
g1658
sS'block_loop.thisRepN'
p2072
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2073
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p2074
Nsg70
Vn
sS'block_loop.thisTrialN'
p2075
I0
sg39
F1.8333379899577267
sg34
g753
(S'\x07\xdf\x07\x0b\n6\x0e\n\x7f\x80'
tRp2076
sa(dp2077
S'trial_loop.thisTrialN'
p2078
I82
sg895
g1065
sS'block_loop.thisIndex'
p2079
g889
sg38
S'left'
p2080
sg59
g63
sS'trial_loop.thisN'
p2081
I82
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p2082
g60
(g99
S'R\x00\x00\x00'
tRp2083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2084
I0
sg904
g1072
sS'block_loop.thisRepN'
p2085
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2086
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2087
Nsg70
Vn
sS'block_loop.thisTrialN'
p2088
I0
sg39
F1.2666230084378185
sg34
g753
(S'\x07\xdf\x07\x0b\n6\x15\x08l@'
tRp2089
sa(dp2090
S'trial_loop.thisTrialN'
p2091
I83
sg895
g2012
sS'block_loop.thisIndex'
p2092
g889
sg38
S'right'
p2093
sg59
g63
sS'trial_loop.thisN'
p2094
I83
sg33
g1487
sg64
g65
sS'trial_loop.thisIndex'
p2095
g60
(g99
S'S\x00\x00\x00'
tRp2096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2097
I0
sg904
g2019
sS'block_loop.thisRepN'
p2098
I0
sg907
g1487
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2099
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p2100
Nsg70
Vn
sS'block_loop.thisTrialN'
p2101
I0
sg39
F1.7664947136863702
sg34
g753
(S'\x07\xdf\x07\x0b\n6\x1b\r\x07\xf0'
tRp2102
sa(dp2103
S'trial_loop.thisTrialN'
p2104
I84
sg895
g1174
sS'block_loop.thisIndex'
p2105
g889
sg38
S'right'
p2106
sg59
g63
sS'trial_loop.thisN'
p2107
I84
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p2108
g60
(g99
S'T\x00\x00\x00'
tRp2109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2110
I0
sg904
g1181
sS'block_loop.thisRepN'
p2111
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2112
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p2113
Nsg70
Vn
sS'block_loop.thisTrialN'
p2114
I0
sg39
F1.2166681681906084
sg34
g753
(S'\x07\xdf\x07\x0b\n6"\n\x02\x80'
tRp2115
sa(dp2116
S'trial_loop.thisTrialN'
p2117
I85
sg895
S'3-ellas_strawberries_apples.png'
p2118
sS'block_loop.thisIndex'
p2119
g889
sg38
S'right'
p2120
sg59
g63
sS'trial_loop.thisN'
p2121
I85
sg33
g1345
sg64
g65
sS'trial_loop.thisIndex'
p2122
g60
(g99
S'U\x00\x00\x00'
tRp2123
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2124
I0
sg904
S'13-mccoys_steak_crisps.png'
p2125
sS'block_loop.thisRepN'
p2126
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2127
I0
sg909
g1339
sg55
g11
sS'block_loop.thisTrial'
p2128
Nsg70
Vn
sS'block_loop.thisTrialN'
p2129
I0
sg39
F1.8166186179059878
sg34
g753
(S'\x07\xdf\x07\x0b\n6(\r\xac\x00'
tRp2130
sa(dp2131
S'trial_loop.thisTrialN'
p2132
I86
sg895
g1539
sS'block_loop.thisIndex'
p2133
g889
sg38
S'right'
p2134
sg59
g63
sS'trial_loop.thisN'
p2135
I86
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p2136
g60
(g99
S'V\x00\x00\x00'
tRp2137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2138
I0
sg904
g1546
sS'block_loop.thisRepN'
p2139
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2140
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p2141
Nsg70
Vn
sS'block_loop.thisTrialN'
p2142
I0
sg39
F1.1666925156832804
sg34
g753
(S'\x07\xdf\x07\x0b\n6/\x0b\x98\xc0'
tRp2143
sa(dp2144
S'trial_loop.thisTrialN'
p2145
I87
sg895
g1483
sS'block_loop.thisIndex'
p2146
g889
sg38
S'left'
p2147
sg59
g63
sS'trial_loop.thisN'
p2148
I87
sg33
g1487
sg64
g65
sS'trial_loop.thisIndex'
p2149
g60
(g99
S'W\x00\x00\x00'
tRp2150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2151
I0
sg904
g1491
sS'block_loop.thisRepN'
p2152
I0
sg907
g1487
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2153
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p2154
Nsg70
Vn
sS'block_loop.thisTrialN'
p2155
I0
sg39
F1.1332854176193905
sg34
g753
(S'\x07\xdf\x07\x0b\n65\x0e\x8a\xa8'
tRp2156
sa(dp2157
S'trial_loop.thisTrialN'
p2158
I88
sg895
g2118
sS'block_loop.thisIndex'
p2159
g889
sg38
S'right'
p2160
sg59
g63
sS'trial_loop.thisN'
p2161
I88
sg33
g1345
sg64
g65
sS'trial_loop.thisIndex'
p2162
g60
(g99
S'X\x00\x00\x00'
tRp2163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2164
I0
sg904
g2125
sS'block_loop.thisRepN'
p2165
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2166
I0
sg909
g1339
sg55
g11
sS'block_loop.thisTrial'
p2167
Nsg70
Vn
sS'block_loop.thisTrialN'
p2168
I0
sg39
F1.7333581749985569
sg34
g753
(S'\x07\xdf\x07\x0b\n7\x00\x01\xc18'
tRp2169
sa(dp2170
S'trial_loop.thisTrialN'
p2171
I89
sg895
g1097
sS'block_loop.thisIndex'
p2172
g889
sg38
S'right'
p2173
sg59
g63
sS'trial_loop.thisN'
p2174
I89
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2175
g60
(g99
S'Y\x00\x00\x00'
tRp2176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2177
I0
sg904
g1104
sS'block_loop.thisRepN'
p2178
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2179
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2180
Nsg70
Vn
sS'block_loop.thisTrialN'
p2181
I0
sg39
F1.5500483528662699
sg34
g753
(S'\x07\xdf\x07\x0b\n7\x06\r\x84\xf0'
tRp2182
sa(dp2183
S'trial_loop.thisTrialN'
p2184
I90
sg895
g2012
sS'block_loop.thisIndex'
p2185
g889
sg38
S'right'
p2186
sg59
g63
sS'trial_loop.thisN'
p2187
I90
sg33
g1487
sg64
g65
sS'trial_loop.thisIndex'
p2188
g60
(g99
S'Z\x00\x00\x00'
tRp2189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2190
I0
sg904
g2019
sS'block_loop.thisRepN'
p2191
I0
sg907
g1487
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2192
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p2193
Nsg70
Vn
sS'block_loop.thisTrialN'
p2194
I0
sg39
F1.3999950962893308
sg34
g753
(S'\x07\xdf\x07\x0b\n7\r\x07(\x08'
tRp2195
sa(dp2196
S'trial_loop.thisTrialN'
p2197
I91
sg895
g1567
sS'block_loop.thisIndex'
p2198
g889
sg38
S'left'
p2199
sg59
g63
sS'trial_loop.thisN'
p2200
I91
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p2201
g60
(g99
S'[\x00\x00\x00'
tRp2202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2203
I0
sg904
g1574
sS'block_loop.thisRepN'
p2204
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2205
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p2206
Nsg70
Vn
sS'block_loop.thisTrialN'
p2207
I0
sg39
F2.7834604116605988
sg34
g753
(S'\x07\xdf\x07\x0b\n7\x13\r\xac\x00'
tRp2208
sa(dp2209
S'trial_loop.thisTrialN'
p2210
I92
sg895
g1651
sS'block_loop.thisIndex'
p2211
g889
sg38
S'right'
p2212
sg59
g63
sS'trial_loop.thisN'
p2213
I92
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p2214
g60
(g99
S'\\\x00\x00\x00'
tRp2215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2216
I0
sg904
g1658
sS'block_loop.thisRepN'
p2217
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2218
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p2219
Nsg70
Vn
sS'block_loop.thisTrialN'
p2220
I0
sg39
F1.8499986315223396
sg34
g753
(S'\x07\xdf\x07\x0b\n7\x1b\n\xdd@'
tRp2221
sa(dp2222
S'trial_loop.thisTrialN'
p2223
I93
sg895
g1001
sS'block_loop.thisIndex'
p2224
g889
sg38
S'left'
p2225
sg59
g63
sS'trial_loop.thisN'
p2226
I93
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2227
g60
(g99
S']\x00\x00\x00'
tRp2228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2229
I0
sg904
g1009
sS'block_loop.thisRepN'
p2230
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2231
I0
sg909
g1005
sg55
g11
sS'block_loop.thisTrial'
p2232
Nsg70
Vn
sS'block_loop.thisTrialN'
p2233
I0
sg39
F1.5665798443810672
sg34
g753
(S'\x07\xdf\x07\x0b\n7"\tC\x18'
tRp2234
sa(dp2235
S'trial_loop.thisTrialN'
p2236
I94
sg895
g984
sS'block_loop.thisIndex'
p2237
g889
sg38
S'left'
p2238
sg59
g63
sS'trial_loop.thisN'
p2239
I94
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p2240
g60
(g99
S'^\x00\x00\x00'
tRp2241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2242
I0
sg904
g992
sS'block_loop.thisRepN'
p2243
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2244
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2245
Nsg70
Vn
sS'block_loop.thisTrialN'
p2246
I0
sg39
F1.2499643625692443
sg34
g753
(S'\x07\xdf\x07\x0b\n7)\x03$\xb0'
tRp2247
sa(dp2248
S'trial_loop.thisTrialN'
p2249
I95
sg895
g1651
sS'block_loop.thisIndex'
p2250
g889
sg38
S'right'
p2251
sg59
g63
sS'trial_loop.thisN'
p2252
I95
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p2253
g60
(g99
S'_\x00\x00\x00'
tRp2254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2255
I0
sg904
g1658
sS'block_loop.thisRepN'
p2256
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2257
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p2258
Nsg70
Vn
sS'block_loop.thisTrialN'
p2259
I0
sg39
F1.1166341843363625
sg34
g753
(S'\x07\xdf\x07\x0b\n7/\x07\x85\xc8'
tRp2260
sa(dp2261
S'trial_loop.thisTrialN'
p2262
I96
sg895
g1427
sS'block_loop.thisIndex'
p2263
g889
sg38
S'right'
p2264
sg59
g63
sS'trial_loop.thisN'
p2265
I96
sg33
g1091
sg64
g65
sS'trial_loop.thisIndex'
p2266
g60
(g99
S'`\x00\x00\x00'
tRp2267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2268
I0
sg904
g1434
sS'block_loop.thisRepN'
p2269
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2270
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p2271
Nsg70
Vn
sS'block_loop.thisTrialN'
p2272
I0
sg39
F1.5169457410133873
sg34
g753
(S'\x07\xdf\x07\x0b\n75\t\xc0\x18'
tRp2273
sa(dp2274
S'trial_loop.thisTrialN'
p2275
I97
sg895
g1157
sS'block_loop.thisIndex'
p2276
g889
sg38
S'right'
p2277
sg59
g63
sS'trial_loop.thisN'
p2278
I97
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p2279
g60
(g99
S'a\x00\x00\x00'
tRp2280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2281
I0
sg904
g1165
sS'block_loop.thisRepN'
p2282
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2283
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p2284
Nsg70
Vn
sS'block_loop.thisTrialN'
p2285
I0
sg39
F1.0499859160872802
sg34
g753
(S'\x07\xdf\x07\x0b\n8\x00\x02\xea\x18'
tRp2286
sa(dp2287
S'trial_loop.thisTrialN'
p2288
I98
sg895
g1217
sS'block_loop.thisIndex'
p2289
g889
sg38
S'left'
p2290
sg59
g63
sS'trial_loop.thisN'
p2291
I98
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2292
g60
(g99
S'b\x00\x00\x00'
tRp2293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2294
I0
sg904
g1224
sS'block_loop.thisRepN'
p2295
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2296
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2297
Nsg70
Vn
sS'block_loop.thisTrialN'
p2298
I0
sg39
F2.5165685544434382
sg34
g753
(S'\x07\xdf\x07\x0b\n8\x06\x0428'
tRp2299
sa(dp2300
S'trial_loop.thisTrialN'
p2301
I99
sg895
g1279
sS'block_loop.thisIndex'
p2302
g889
sg38
S'left'
p2303
sg59
g63
sS'trial_loop.thisN'
p2304
I99
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p2305
g60
(g99
S'c\x00\x00\x00'
tRp2306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2307
I0
sg904
g1287
sS'block_loop.thisRepN'
p2308
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2309
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p2310
Nsg70
Vn
sS'block_loop.thisTrialN'
p2311
I0
sg39
F0.93325650853512343
sg34
g753
(S'\x07\xdf\x07\x0b\n8\r\x0c\x96\xa8'
tRp2312
sa(dp2313
S'trial_loop.thisTrialN'
p2314
I100
sg895
g1410
sS'block_loop.thisIndex'
p2315
g889
sg38
S'right'
p2316
sg59
g63
sS'trial_loop.thisN'
p2317
I100
sg33
g1414
sg64
g65
sS'trial_loop.thisIndex'
p2318
g60
(g99
S'd\x00\x00\x00'
tRp2319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2320
I0
sg904
g1418
sS'block_loop.thisRepN'
p2321
I0
sg907
g1414
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2322
I0
sg909
g1421
sg55
g11
sS'block_loop.thisTrial'
p2323
Nsg70
Vn
sS'block_loop.thisTrialN'
p2324
I0
sg39
F1.866591134319151
sg34
g753
(S'\x07\xdf\x07\x0b\n8\x13\x0b\xfah'
tRp2325
sa(dp2326
S'trial_loop.thisTrialN'
p2327
I101
sg895
g1382
sS'block_loop.thisIndex'
p2328
g889
sg38
S'left'
p2329
sg59
g63
sS'trial_loop.thisN'
p2330
I101
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2331
g60
(g99
S'e\x00\x00\x00'
tRp2332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2333
I0
sg904
g1389
sS'block_loop.thisRepN'
p2334
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2335
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2336
Nsg70
Vn
sS'block_loop.thisTrialN'
p2337
I0
sg39
F1.9836569592202977
sg34
g753
(S'\x07\xdf\x07\x0b\n8\x1a\n`@'
tRp2338
sa(dp2339
S'trial_loop.thisTrialN'
p2340
I102
sg895
g1217
sS'block_loop.thisIndex'
p2341
g889
sg38
S'left'
p2342
sg59
g63
sS'trial_loop.thisN'
p2343
I102
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2344
g60
(g99
S'f\x00\x00\x00'
tRp2345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2346
I0
sg904
g1224
sS'block_loop.thisRepN'
p2347
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2348
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2349
Nsg70
Vn
sS'block_loop.thisTrialN'
p2350
I0
sg39
F1.0499428660705235
sg34
g753
(S'\x07\xdf\x07\x0b\n8!\n\xae`'
tRp2351
sa(dp2352
S'trial_loop.thisTrialN'
p2353
I103
sg895
g1679
sS'block_loop.thisIndex'
p2354
g889
sg38
S'right'
p2355
sg59
g63
sS'trial_loop.thisN'
p2356
I103
sg33
g1683
sg64
g65
sS'trial_loop.thisIndex'
p2357
g60
(g99
S'g\x00\x00\x00'
tRp2358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2359
I0
sg904
g1687
sS'block_loop.thisRepN'
p2360
I0
sg907
g1683
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2361
I0
sg909
g1690
sg55
g11
sS'block_loop.thisTrial'
p2362
Nsg70
Vn
sS'block_loop.thisTrialN'
p2363
I0
sg39
F1.4999985745030244
sg34
g753
(S"\x07\xdf\x07\x0b\n8'\x0b\xf6\x80"
tRp2364
sa(dp2365
S'trial_loop.thisTrialN'
p2366
I104
sg895
g1065
sS'block_loop.thisIndex'
p2367
g889
sg38
S'left'
p2368
sg59
g63
sS'trial_loop.thisN'
p2369
I104
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2370
g60
(g99
S'h\x00\x00\x00'
tRp2371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2372
I0
sg904
g1072
sS'block_loop.thisRepN'
p2373
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2374
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2375
Nsg70
Vn
sS'block_loop.thisTrialN'
p2376
I0
sg39
F0.99991475526485374
sg34
g753
(S'\x07\xdf\x07\x0b\n8.\x04\xe2\x00'
tRp2377
sa(dp2378
S'trial_loop.thisTrialN'
p2379
I105
sg895
S'27-hartleys_raspberries_jelly.png'
p2380
sS'block_loop.thisIndex'
p2381
g889
sg38
S'right'
p2382
sg59
g63
sS'trial_loop.thisN'
p2383
I105
sg33
g1625
sg64
g65
sS'trial_loop.thisIndex'
p2384
g60
(g99
S'i\x00\x00\x00'
tRp2385
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2386
I0
sg904
S'51-mars.png'
p2387
sS'block_loop.thisRepN'
p2388
I0
sg907
g1625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2389
I0
sg909
g1632
sg55
g11
sS'block_loop.thisTrial'
p2390
Nsg70
Vn
sS'block_loop.thisTrialN'
p2391
I0
sg39
F1.116615367772738
sg34
g753
(S'\x07\xdf\x07\x0b\n84\x05r\x88'
tRp2392
sa(dp2393
S'trial_loop.thisTrialN'
p2394
I106
sg895
g1539
sS'block_loop.thisIndex'
p2395
g889
sg38
S'right'
p2396
sg59
g63
sS'trial_loop.thisN'
p2397
I106
sg33
g1273
sg64
g65
sS'trial_loop.thisIndex'
p2398
g60
(g99
S'j\x00\x00\x00'
tRp2399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2400
I0
sg904
g1546
sS'block_loop.thisRepN'
p2401
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2402
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p2403
Nsg70
Vn
sS'block_loop.thisTrialN'
p2404
I0
sg39
F1.3166725017017598
sg34
g753
(S'\x07\xdf\x07\x0b\n8:\x07\xb0\xc0'
tRp2405
sa(dp2406
S'trial_loop.thisTrialN'
p2407
I107
sg895
g1018
sS'block_loop.thisIndex'
p2408
g889
sg38
S'right'
p2409
sg59
g63
sS'trial_loop.thisN'
p2410
I107
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p2411
g60
(g99
S'k\x00\x00\x00'
tRp2412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2413
I0
sg904
g1026
sS'block_loop.thisRepN'
p2414
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2415
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2416
Nsg70
Vn
sS'block_loop.thisTrialN'
p2417
I0
sg39
F2.9999418397123918
sg34
g753
(S'\x07\xdf\x07\x0b\n9\x04\r\x04\x08'
tRp2418
sa(dp2419
S'trial_loop.thisTrialN'
p2420
I108
sg895
g1262
sS'block_loop.thisIndex'
p2421
g889
sg38
S'left'
p2422
sg59
g63
sS'trial_loop.thisN'
p2423
I108
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p2424
g60
(g99
S'l\x00\x00\x00'
tRp2425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2426
I0
sg904
g1270
sS'block_loop.thisRepN'
p2427
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2428
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p2429
Nsg70
Vn
sS'block_loop.thisTrialN'
p2430
I0
sg39
F0.84985465630143153
sg34
g753
(S'\x07\xdf\x07\x0b\n9\x0c\r\x88\xd8'
tRp2431
sa(dp2432
S'trial_loop.thisTrialN'
p2433
I109
sg895
g916
sS'block_loop.thisIndex'
p2434
g889
sg38
S'right'
p2435
sg59
g63
sS'trial_loop.thisN'
p2436
I109
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2437
g60
(g99
S'm\x00\x00\x00'
tRp2438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2439
I0
sg904
g924
sS'block_loop.thisRepN'
p2440
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2441
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2442
Nsg70
Vn
sS'block_loop.thisTrialN'
p2443
I0
sg39
F1.516583949813139
sg34
g753
(S'\x07\xdf\x07\x0b\n9\x12\x0b\xb8\x00'
tRp2444
sa(dp2445
S'trial_loop.thisTrialN'
p2446
I110
sg895
g1262
sS'block_loop.thisIndex'
p2447
g889
sg38
S'left'
p2448
sg59
g63
sS'trial_loop.thisN'
p2449
I110
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p2450
g60
(g99
S'n\x00\x00\x00'
tRp2451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2452
I0
sg904
g1270
sS'block_loop.thisRepN'
p2453
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2454
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p2455
Nsg70
Vn
sS'block_loop.thisTrialN'
p2456
I0
sg39
F0.84974517811269834
sg34
g753
(S'\x07\xdf\x07\x0b\n9\x19\x04\xe2\x00'
tRp2457
sa(dp2458
S'trial_loop.thisTrialN'
p2459
I111
sg895
g1813
sS'block_loop.thisIndex'
p2460
g889
sg38
S'right'
p2461
sg59
g63
sS'trial_loop.thisN'
p2462
I111
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2463
g60
(g99
S'o\x00\x00\x00'
tRp2464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2465
I0
sg904
g1820
sS'block_loop.thisRepN'
p2466
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2467
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2468
Nsg70
Vn
sS'block_loop.thisTrialN'
p2469
I0
sg39
F1.3502067541198812
sg34
g753
(S'\x07\xdf\x07\x0b\n9\x1f\x03\x15\x10'
tRp2470
sa(dp2471
S'trial_loop.thisTrialN'
p2472
I112
sg895
g1189
sS'block_loop.thisIndex'
p2473
g889
sg38
S'left'
p2474
sg59
g63
sS'trial_loop.thisN'
p2475
I112
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p2476
g60
(g99
S'p\x00\x00\x00'
tRp2477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2478
I0
sg904
g1196
sS'block_loop.thisRepN'
p2479
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2480
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p2481
Nsg70
Vn
sS'block_loop.thisTrialN'
p2482
I0
sg39
F0.9332559383365151
sg34
g753
(S'\x07\xdf\x07\x0b\n9%\x08\xe1p'
tRp2483
sa(dp2484
S'trial_loop.thisTrialN'
p2485
I113
sg895
g1621
sS'block_loop.thisIndex'
p2486
g889
sg38
S'left'
p2487
sg59
g63
sS'trial_loop.thisN'
p2488
I113
sg33
g1625
sg64
g65
sS'trial_loop.thisIndex'
p2489
g60
(g99
S'q\x00\x00\x00'
tRp2490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2491
I0
sg904
g1629
sS'block_loop.thisRepN'
p2492
I0
sg907
g1625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2493
I0
sg909
g1632
sg55
g11
sS'block_loop.thisTrial'
p2494
Nsg70
Vn
sS'block_loop.thisTrialN'
p2495
I0
sg39
F1.0333269851189471
sg34
g753
(S'\x07\xdf\x07\x0b\n9+\x08\x7f\xc8'
tRp2496
sa(dp2497
S'trial_loop.thisTrialN'
p2498
I114
sg895
g1828
sS'block_loop.thisIndex'
p2499
g889
sg38
S'right'
p2500
sg59
g63
sS'trial_loop.thisN'
p2501
I114
sg33
g1011
sg64
g65
sS'trial_loop.thisIndex'
p2502
g60
(g99
S'r\x00\x00\x00'
tRp2503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2504
I0
sg904
g1835
sS'block_loop.thisRepN'
p2505
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2506
I0
sg909
g1005
sg55
g11
sS'block_loop.thisTrial'
p2507
Nsg70
Vn
sS'block_loop.thisTrialN'
p2508
I0
sg39
F1.3332413412445021
sg34
g753
(S'\x07\xdf\x07\x0b\n91\t\x89h'
tRp2509
sa(dp2510
S'trial_loop.thisTrialN'
p2511
I115
sg895
g1129
sS'block_loop.thisIndex'
p2512
g889
sg38
S'left'
p2513
sg59
g63
sS'trial_loop.thisN'
p2514
I115
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2515
g60
(g99
S's\x00\x00\x00'
tRp2516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2517
I0
sg904
g1136
sS'block_loop.thisRepN'
p2518
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2519
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2520
Nsg70
Vn
sS'block_loop.thisTrialN'
p2521
I0
sg39
F1.7166162800904203
sg34
g753
(S'\x07\xdf\x07\x0b\n97\x0f\x1b0'
tRp2522
sa(dp2523
S'trial_loop.thisTrialN'
p2524
I116
sg895
g1367
sS'block_loop.thisIndex'
p2525
g889
sg38
S'left'
p2526
sg59
g63
sS'trial_loop.thisN'
p2527
I116
sg33
g1029
sg64
g65
sS'trial_loop.thisIndex'
p2528
g60
(g99
S't\x00\x00\x00'
tRp2529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2530
I0
sg904
g1374
sS'block_loop.thisRepN'
p2531
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2532
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2533
Nsg70
Vn
sS'block_loop.thisTrialN'
p2534
I0
sg39
F1.1503332242350552
sg34
g753
(S'\x07\xdf\x07\x0b\n:\x02\x0b\x1f\xa8'
tRp2535
sa(dp2536
S'trial_loop.thisTrialN'
p2537
I117
sg895
g1410
sS'block_loop.thisIndex'
p2538
g889
sg38
S'right'
p2539
sg59
g63
sS'trial_loop.thisN'
p2540
I117
sg33
g1414
sg64
g65
sS'trial_loop.thisIndex'
p2541
g60
(g99
S'u\x00\x00\x00'
tRp2542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2543
I0
sg904
g1418
sS'block_loop.thisRepN'
p2544
I0
sg907
g1414
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2545
I0
sg909
g1421
sg55
g11
sS'block_loop.thisTrial'
p2546
Nsg70
Vn
sS'block_loop.thisTrialN'
p2547
I0
sg39
F1.2166758658754588
sg34
g753
(S'\x07\xdf\x07\x0b\n:\x08\x0e\x11\x90'
tRp2548
sa(dp2549
S'trial_loop.thisTrialN'
p2550
I118
sg895
g967
sS'block_loop.thisIndex'
p2551
g889
sg38
S'right'
p2552
sg59
g63
sS'trial_loop.thisN'
p2553
I118
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2554
g60
(g99
S'v\x00\x00\x00'
tRp2555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2556
I0
sg904
g975
sS'block_loop.thisRepN'
p2557
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2558
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2559
Nsg70
Vn
sS'block_loop.thisTrialN'
p2560
I0
sg39
F1.1333176338566773
sg34
g753
(S'\x07\xdf\x07\x0b\n:\x0f\x02x\xd0'
tRp2561
sa(dp2562
S'trial_loop.thisTrialN'
p2563
I119
sg895
g1410
sS'block_loop.thisIndex'
p2564
g889
sg38
S'right'
p2565
sg59
g63
sS'trial_loop.thisN'
p2566
I119
sg33
g1414
sg64
g65
sS'trial_loop.thisIndex'
p2567
g60
(g99
S'w\x00\x00\x00'
tRp2568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2569
I0
sg904
g1418
sS'block_loop.thisRepN'
p2570
I0
sg907
g1414
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2571
I0
sg909
g1421
sg55
g11
sS'block_loop.thisTrial'
p2572
Nsg70
Vn
sS'block_loop.thisTrialN'
p2573
I0
sg39
F1.1499035793663097
sg34
g753
(S'\x07\xdf\x07\x0b\n:\x15\x050 '
tRp2574
sa(dp2575
S'trial_loop.thisTrialN'
p2576
I120
sg895
g1080
sS'block_loop.thisIndex'
p2577
g889
sg38
S'left'
p2578
sg59
g63
sS'trial_loop.thisN'
p2579
I120
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p2580
g60
(g99
S'x\x00\x00\x00'
tRp2581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2582
I0
sg904
g1088
sS'block_loop.thisRepN'
p2583
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2584
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p2585
Nsg70
Vn
sS'block_loop.thisTrialN'
p2586
I0
sg39
F1.1998626961058108
sg34
g753
(S'\x07\xdf\x07\x0b\n:\x1b\x07\xe7p'
tRp2587
sa(dp2588
S'trial_loop.thisTrialN'
p2589
I121
sg895
g933
sS'block_loop.thisIndex'
p2590
g889
sg38
S'right'
p2591
sg59
g63
sS'trial_loop.thisN'
p2592
I121
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2593
g60
(g99
S'y\x00\x00\x00'
tRp2594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2595
I0
sg904
g941
sS'block_loop.thisRepN'
p2596
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2597
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2598
Nsg70
Vn
sS'block_loop.thisTrialN'
p2599
I0
sg39
F1.4503966873726313
sg34
g753
(S'\x07\xdf\x07\x0b\n:!\x0b\x90\xf0'
tRp2600
sa(dp2601
S'trial_loop.thisTrialN'
p2602
I122
sg895
g1455
sS'block_loop.thisIndex'
p2603
g889
sg38
S'left'
p2604
sg59
g63
sS'trial_loop.thisN'
p2605
I122
sg33
g1414
sg64
g65
sS'trial_loop.thisIndex'
p2606
g60
(g99
S'z\x00\x00\x00'
tRp2607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2608
I0
sg904
g1462
sS'block_loop.thisRepN'
p2609
I0
sg907
g1414
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2610
I0
sg909
g1421
sg55
g11
sS'block_loop.thisTrial'
p2611
Nsg70
Vn
sS'block_loop.thisTrialN'
p2612
I0
sg39
F0.7833506483734709
sg34
g753
(S'\x07\xdf\x07\x0b\n:(\x03\x8a@'
tRp2613
sa(dp2614
S'trial_loop.thisTrialN'
p2615
I123
sg895
g2118
sS'block_loop.thisIndex'
p2616
g889
sg38
S'left'
p2617
sg59
g63
sS'trial_loop.thisN'
p2618
I123
sg33
g1339
sg64
g65
sS'trial_loop.thisIndex'
p2619
g60
(g99
S'{\x00\x00\x00'
tRp2620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2621
I0
sg904
g2125
sS'block_loop.thisRepN'
p2622
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2623
I0
sg909
g1339
sg55
g11
sS'block_loop.thisTrial'
p2624
Nsg70
Vn
sS'block_loop.thisTrialN'
p2625
I0
sg39
F1.6666768352138206
sg34
g753
(S'\x07\xdf\x07\x0b\n:.\x00\xc3P'
tRp2626
sa(dp2627
S'trial_loop.thisTrialN'
p2628
I124
sg895
g1157
sS'block_loop.thisIndex'
p2629
g889
sg38
S'right'
p2630
sg59
g63
sS'trial_loop.thisN'
p2631
I124
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p2632
g60
(g99
S'|\x00\x00\x00'
tRp2633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2634
I0
sg904
g1165
sS'block_loop.thisRepN'
p2635
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2636
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p2637
Nsg70
Vn
sS'block_loop.thisTrialN'
p2638
I0
sg39
F0.94991800539855831
sg34
g753
(S'\x07\xdf\x07\x0b\n:4\x0b\x94\xd8'
tRp2639
sa(dp2640
S'trial_loop.thisTrialN'
p2641
I125
sg895
g1048
sS'block_loop.thisIndex'
p2642
g889
sg38
S'right'
p2643
sg59
g63
sS'trial_loop.thisN'
p2644
I125
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p2645
g60
(g99
S'}\x00\x00\x00'
tRp2646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2647
I0
sg904
g1056
sS'block_loop.thisRepN'
p2648
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2649
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p2650
Nsg70
Vn
sS'block_loop.thisTrialN'
p2651
I0
sg39
F1.2834592712629274
sg34
g753
(S'\x07\xdf\x07\x0b\n::\x0b/H'
tRp2652
sa(dp2653
S'trial_loop.thisTrialN'
p2654
I126
sg895
g1813
sS'block_loop.thisIndex'
p2655
g889
sg38
S'right'
p2656
sg59
g63
sS'trial_loop.thisN'
p2657
I126
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2658
g60
(g99
S'~\x00\x00\x00'
tRp2659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2660
I0
sg904
g1820
sS'block_loop.thisRepN'
p2661
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2662
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2663
Nsg70
Vn
sS'block_loop.thisTrialN'
p2664
I0
sg39
F1.2833432357874699
sg34
g753
(S'\x07\xdf\x07\x0b\n;\x05\x00\xc78'
tRp2665
sa(dp2666
S'trial_loop.thisTrialN'
p2667
I127
sg895
g1112
sS'block_loop.thisIndex'
p2668
g889
sg38
S'left'
p2669
sg59
g63
sS'trial_loop.thisN'
p2670
I127
sg33
g1123
sg64
g65
sS'trial_loop.thisIndex'
p2671
g60
(g99
S'\x7f\x00\x00\x00'
tRp2672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2673
I0
sg904
g1120
sS'block_loop.thisRepN'
p2674
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2675
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p2676
Nsg70
Vn
sS'block_loop.thisTrialN'
p2677
I0
sg39
F1.0832553111176821
sg34
g753
(S'\x07\xdf\x07\x0b\n;\x0b\x05\xa1h'
tRp2678
sa(dp2679
S'trial_loop.thisTrialN'
p2680
I128
sg895
g1080
sS'block_loop.thisIndex'
p2681
g889
sg38
S'left'
p2682
sg59
g63
sS'trial_loop.thisN'
p2683
I128
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p2684
g60
(g99
S'\x80\x00\x00\x00'
tRp2685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2686
I0
sg904
g1088
sS'block_loop.thisRepN'
p2687
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2688
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p2689
Nsg70
Vn
sS'block_loop.thisTrialN'
p2690
I0
sg39
F0.93320690123164241
sg34
g753
(S'\x07\xdf\x07\x0b\n;\x11\x07f\x88'
tRp2691
sa(dp2692
S'trial_loop.thisTrialN'
p2693
I129
sg895
g1018
sS'block_loop.thisIndex'
p2694
g889
sg38
S'right'
p2695
sg59
g63
sS'trial_loop.thisN'
p2696
I129
sg33
g1029
sg64
g65
sS'trial_loop.thisIndex'
p2697
g60
(g99
S'\x81\x00\x00\x00'
tRp2698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2699
I0
sg904
g1026
sS'block_loop.thisRepN'
p2700
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2701
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2702
Nsg70
Vn
sS'block_loop.thisTrialN'
p2703
I0
sg39
F3.1499337999080126
sg34
g753
(S'\x07\xdf\x07\x0b\n;\x17\x06\xc6`'
tRp2704
sa(dp2705
S'trial_loop.thisTrialN'
p2706
I130
sg895
g1813
sS'block_loop.thisIndex'
p2707
g889
sg38
S'right'
p2708
sg59
g63
sS'trial_loop.thisN'
p2709
I130
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p2710
g60
(g99
S'\x82\x00\x00\x00'
tRp2711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2712
I0
sg904
g1820
sS'block_loop.thisRepN'
p2713
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2714
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2715
Nsg70
Vn
sS'block_loop.thisTrialN'
p2716
I0
sg39
F0.93336883771780776
sg34
g753
(S'\x07\xdf\x07\x0b\n;\x1f\t\xac\x90'
tRp2717
sa(dp2718
S'trial_loop.thisTrialN'
p2719
I131
sg895
S'17-jacobs_mini_cheddars_redo.png'
p2720
sS'block_loop.thisIndex'
p2721
g889
sg38
S'left'
p2722
sg59
g63
sS'trial_loop.thisN'
p2723
I131
sg33
g1683
sg64
g65
sS'trial_loop.thisIndex'
p2724
g60
(g99
S'\x83\x00\x00\x00'
tRp2725
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2726
I0
sg904
S'8-liquorice_catherine_wheels.png'
p2727
sS'block_loop.thisRepN'
p2728
I0
sg907
g1683
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg909
g1690
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vn
sS'block_loop.thisTrialN'
p2731
I0
sg39
F1.0835831754834544
sg34
g753
(S'\x07\xdf\x07\x0b\n;%\t\x0ch'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g1352
sS'block_loop.thisIndex'
p2735
g889
sg38
S'left'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g1359
sS'block_loop.thisRepN'
p2741
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vn
sS'block_loop.thisTrialN'
p2744
I0
sg39
F0.96657208967644692
sg34
g753
(S'\x07\xdf\x07\x0b\n;+\x0b\x0c '
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g933
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g941
sS'block_loop.thisRepN'
p2754
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vn
sS'block_loop.thisTrialN'
p2757
I0
sg39
F1.3666532859992913
sg34
g753
(S'\x07\xdf\x07\x0b\n;1\n\xe5\x10'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g1828
sS'block_loop.thisIndex'
p2761
g889
sg38
S'right'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g1835
sS'block_loop.thisRepN'
p2767
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg909
g1005
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vn
sS'block_loop.thisTrialN'
p2770
I0
sg39
F1.1666557378548532
sg34
g753
(S'\x07\xdf\x07\x0b\n;8\x01\xad\xb0'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g1483
sS'block_loop.thisIndex'
p2774
g889
sg38
S'left'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g1487
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g1491
sS'block_loop.thisRepN'
p2780
I0
sg907
g1487
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vn
sS'block_loop.thisTrialN'
p2783
I0
sg39
F1.5833436919465385
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x00\x02\x04\xde\x18'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1651
sS'block_loop.thisIndex'
p2787
g889
sg38
S'right'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1658
sS'block_loop.thisRepN'
p2793
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vn
sS'block_loop.thisTrialN'
p2796
I0
sg39
F1.2003627605381553
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x00\x08\x0e<\x88'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g2720
sS'block_loop.thisIndex'
p2800
g889
sg38
S'left'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g1683
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g2727
sS'block_loop.thisRepN'
p2806
I0
sg907
g1683
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg909
g1690
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vn
sS'block_loop.thisTrialN'
p2809
I0
sg39
F1.0332890668923937
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x00\x0f\x02\xa3\xc8'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g916
sS'block_loop.thisIndex'
p2813
g889
sg38
S'right'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g924
sS'block_loop.thisRepN'
p2819
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vn
sS'block_loop.thisTrialN'
p2822
I0
sg39
F1.4166369212912286
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x00\x15\x03r\xd0'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1065
sS'block_loop.thisIndex'
p2826
g889
sg38
S'left'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1072
sS'block_loop.thisRepN'
p2832
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vn
sS'block_loop.thisTrialN'
p2835
I0
sg39
F0.94999213125538517
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x00\x1b\ns\xc8'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g2720
sS'block_loop.thisIndex'
p2839
g889
sg38
S'left'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g1683
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g2727
sS'block_loop.thisRepN'
p2845
I0
sg907
g1683
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g1690
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vn
sS'block_loop.thisTrialN'
p2848
I0
sg39
F0.91664804016909329
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x00!\n\x0e8'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1112
sS'block_loop.thisIndex'
p2852
g889
sg38
S'left'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1123
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1120
sS'block_loop.thisRepN'
p2858
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vn
sS'block_loop.thisTrialN'
p2861
I0
sg39
F0.96699318156152003
sg34
g753
(S"\x07\xdf\x07\x0b\x0b\x00'\tq\xf8"
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g2380
sS'block_loop.thisIndex'
p2865
g889
sg38
S'right'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g1625
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g2387
sS'block_loop.thisRepN'
p2871
I0
sg907
g1625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g1632
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vn
sS'block_loop.thisTrialN'
p2874
I0
sg39
F1.1332033089779543
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x00-\t\x89h'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g1232
sS'block_loop.thisIndex'
p2878
g889
sg38
S'right'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g1240
sS'block_loop.thisRepN'
p2884
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vn
sS'block_loop.thisTrialN'
p2887
I0
sg39
F2.1329797910107118
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x003\x0c\x028'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1189
sS'block_loop.thisIndex'
p2891
g889
sg38
S'left'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1196
sS'block_loop.thisRepN'
p2897
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vn
sS'block_loop.thisTrialN'
p2900
I0
sg39
F0.9332262879938753
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x00:\x0es8'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1539
sS'block_loop.thisIndex'
p2904
g889
sg38
S'right'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1546
sS'block_loop.thisRepN'
p2910
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vn
sS'block_loop.thisTrialN'
p2913
I0
sg39
F1.2166670277924823
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x01\x04\x0e\x11\x90'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1112
sS'block_loop.thisIndex'
p2917
g889
sg38
S'left'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1120
sS'block_loop.thisRepN'
p2923
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vn
sS'block_loop.thisTrialN'
p2926
I0
sg39
F0.98332453326383984
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x01\x0b\x02x\xd0'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g1001
sS'block_loop.thisIndex'
p2930
g889
sg38
S'left'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g1011
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g1009
sS'block_loop.thisRepN'
p2936
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g1005
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vn
sS'block_loop.thisTrialN'
p2939
I0
sg39
F1.0000105486797111
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x01\x11\x02\xce\xc0'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1157
sS'block_loop.thisIndex'
p2943
g889
sg38
S'right'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1168
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1165
sS'block_loop.thisRepN'
p2949
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vn
sS'block_loop.thisTrialN'
p2952
I0
sg39
F0.94989747823819926
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x01\x17\x03_H'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1621
sS'block_loop.thisIndex'
p2956
g889
sg38
S'left'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g1625
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1629
sS'block_loop.thisRepN'
p2962
I0
sg907
g1625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g1632
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vn
sS'block_loop.thisTrialN'
p2965
I0
sg39
F0.89999623668745699
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x01\x1d\x02\xfd\xa0'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g2012
sS'block_loop.thisIndex'
p2969
g889
sg38
S'right'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g1494
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g2019
sS'block_loop.thisRepN'
p2975
I0
sg907
g1487
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vn
sS'block_loop.thisTrialN'
p2978
I0
sg39
F1.1333390163158583
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x01#\x02\x1e\xf8'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1335
sS'block_loop.thisIndex'
p2982
g889
sg38
S'right'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1345
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1343
sS'block_loop.thisRepN'
p2988
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g1339
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vn
sS'block_loop.thisTrialN'
p2991
I0
sg39
F0.84996527488692664
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x01)\x04\x97\xc8'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g950
sS'block_loop.thisIndex'
p2995
g889
sg38
S'left'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g958
sS'block_loop.thisRepN'
p3001
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vn
sS'block_loop.thisTrialN'
p3004
I0
sg39
F1.300002166755803
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x01/\x02\xc6\xf0'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g967
sS'block_loop.thisIndex'
p3008
g889
sg38
S'right'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g975
sS'block_loop.thisRepN'
p3014
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vn
sS'block_loop.thisTrialN'
p3017
I0
sg39
F1.3166836205805339
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x015\x07\xdf\xa0'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g916
sS'block_loop.thisIndex'
p3021
g889
sg38
S'right'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g924
sS'block_loop.thisRepN'
p3027
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vn
sS'block_loop.thisTrialN'
p3030
I0
sg39
F1.2666649180564491
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x01;\r2\xe8'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1018
sS'block_loop.thisIndex'
p3034
g889
sg38
S'left'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1029
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1026
sS'block_loop.thisRepN'
p3040
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vn
sS'block_loop.thisTrialN'
p3043
I0
sg39
F2.6832790313919759
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x02\x06\x02\x90@'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g933
sS'block_loop.thisIndex'
p3047
g889
sg38
S'right'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g941
sS'block_loop.thisRepN'
p3053
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vn
sS'block_loop.thisTrialN'
p3056
I0
sg39
F1.400292740113855
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x02\r\r\x94\x90'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g2720
sS'block_loop.thisIndex'
p3060
g889
sg38
S'left'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g1683
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g2727
sS'block_loop.thisRepN'
p3066
I0
sg907
g1683
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g1690
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vn
sS'block_loop.thisTrialN'
p3069
I0
sg39
F1.016695138598152
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x02\x14\x04\xd6H'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1828
sS'block_loop.thisIndex'
p3073
g889
sg38
S'right'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1011
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1835
sS'block_loop.thisRepN'
p3079
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g1005
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vn
sS'block_loop.thisTrialN'
p3082
I0
sg39
F1.2499908768177193
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x02\x1a\x05\xa5P'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1382
sS'block_loop.thisIndex'
p3086
g889
sg38
S'left'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1389
sS'block_loop.thisRepN'
p3092
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vn
sS'block_loop.thisTrialN'
p3095
I0
sg39
F1.0499231942089864
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x02 \n\x02\x80'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1679
sS'block_loop.thisIndex'
p3099
g889
sg38
S'right'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1683
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1687
sS'block_loop.thisRepN'
p3105
I0
sg907
g1683
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g1690
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vn
sS'block_loop.thisTrialN'
p3108
I0
sg39
F1.083255026018378
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x02&\x0b\x10\x08'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1427
sS'block_loop.thisIndex'
p3112
g889
sg38
S'right'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1434
sS'block_loop.thisRepN'
p3118
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vn
sS'block_loop.thisTrialN'
p3121
I0
sg39
F1.2502409090338915
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x02,\r\x0f\xc0'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1335
sS'block_loop.thisIndex'
p3125
g889
sg38
S'right'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1345
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1343
sS'block_loop.thisRepN'
p3131
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g1339
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vn
sS'block_loop.thisTrialN'
p3134
I0
sg39
F1.0166640627585366
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x023\x01\xf0\x18'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1621
sS'block_loop.thisIndex'
p3138
g889
sg38
S'left'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g1625
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1629
sS'block_loop.thisRepN'
p3144
I0
sg907
g1625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g1632
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vn
sS'block_loop.thisTrialN'
p3147
I0
sg39
F1.3500157374892297
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x029\x02\xbf '
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g1262
sS'block_loop.thisIndex'
p3151
g889
sg38
S'left'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g1270
sS'block_loop.thisRepN'
p3157
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vn
sS'block_loop.thisTrialN'
p3160
I0
sg39
F1.0499964647665365
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x03\x03\x08\x8b\x80'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g967
sS'block_loop.thisIndex'
p3164
g889
sg38
S'right'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g975
sS'block_loop.thisRepN'
p3170
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vn
sS'block_loop.thisTrialN'
p3173
I0
sg39
F0.94991401400602626
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x03\t\t\xd3\xa0'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1335
sS'block_loop.thisIndex'
p3177
g889
sg38
S'right'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1345
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1343
sS'block_loop.thisRepN'
p3183
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g1339
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vn
sS'block_loop.thisTrialN'
p3186
I0
sg39
F0.96694899114709187
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x03\x0f\t\xb0x'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g1679
sS'block_loop.thisIndex'
p3190
g889
sg38
S'right'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g1683
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g1687
sS'block_loop.thisRepN'
p3196
I0
sg907
g1683
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g1690
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vn
sS'block_loop.thisTrialN'
p3199
I0
sg39
F0.79996995051851627
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x03\x15\t\x89h'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1174
sS'block_loop.thisIndex'
p3203
g889
sg38
S'right'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1181
sS'block_loop.thisRepN'
p3209
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vn
sS'block_loop.thisTrialN'
p3212
I0
sg39
F1.0166734710401215
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x03\x1b\x07\x00\xf8'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g2380
sS'block_loop.thisIndex'
p3216
g889
sg38
S'right'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1625
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g2387
sS'block_loop.thisRepN'
p3222
I0
sg907
g1625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g1632
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vn
sS'block_loop.thisTrialN'
p3225
I0
sg39
F0.79999703496605434
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x03!\x07\xd0\x00'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g2720
sS'block_loop.thisIndex'
p3229
g889
sg38
S'left'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1683
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g2727
sS'block_loop.thisRepN'
p3235
I0
sg907
g1683
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g1690
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vn
sS'block_loop.thisTrialN'
p3238
I0
sg39
F1.2999018117502601
sg34
g753
(S"\x07\xdf\x07\x0b\x0b\x03'\x05Kx"
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1410
sS'block_loop.thisIndex'
p3242
g889
sg38
S'right'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1414
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1418
sS'block_loop.thisRepN'
p3248
I0
sg907
g1414
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g1421
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vn
sS'block_loop.thisTrialN'
p3251
I0
sg39
F1.3500222947768634
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x03-\n`@'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1427
sS'block_loop.thisIndex'
p3255
g889
sg38
S'right'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1434
sS'block_loop.thisRepN'
p3261
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vn
sS'block_loop.thisTrialN'
p3264
I0
sg39
F1.3664782349378584
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x034\x00\xeeH'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1279
sS'block_loop.thisIndex'
p3268
g889
sg38
S'left'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1287
sS'block_loop.thisRepN'
p3274
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vn
sS'block_loop.thisTrialN'
p3277
I0
sg39
F1.3166553957348697
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x03:\x073\xc0'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g1567
sS'block_loop.thisIndex'
p3281
g889
sg38
S'left'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g1243
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g1574
sS'block_loop.thisRepN'
p3287
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vn
sS'block_loop.thisTrialN'
p3290
I0
sg39
F1.9163994334503514
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x04\x04\x0c\x87\x08'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g2380
sS'block_loop.thisIndex'
p3294
g889
sg38
S'right'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1625
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g2387
sS'block_loop.thisRepN'
p3300
I0
sg907
g1625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g1632
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vn
sS'block_loop.thisTrialN'
p3303
I0
sg39
F1.3499216546715616
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x04\x0b\x0b\xa4x'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1455
sS'block_loop.thisIndex'
p3307
g889
sg38
S'left'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g1414
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1462
sS'block_loop.thisRepN'
p3313
I0
sg907
g1414
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g1421
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vn
sS'block_loop.thisTrialN'
p3316
I0
sg39
F1.1003735372974006
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x04\x12\x022\x80'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g1262
sS'block_loop.thisIndex'
p3320
g889
sg38
S'left'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g1270
sS'block_loop.thisRepN'
p3326
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vn
sS'block_loop.thisTrialN'
p3329
I0
sg39
F0.76670597237762195
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x04\x18\x0428'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g1018
sS'block_loop.thisIndex'
p3333
g889
sg38
S'left'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g1026
sS'block_loop.thisRepN'
p3339
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vn
sS'block_loop.thisTrialN'
p3342
I0
sg39
F1.2166943973397792
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x04\x1e\x010\xb0'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g896
sS'block_loop.thisIndex'
p3346
g889
sg38
S'right'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g905
sS'block_loop.thisRepN'
p3352
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vn
sS'block_loop.thisTrialN'
p3355
I0
sg39
F1.3497565820907766
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x04$\x05\x18\xb0'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g1232
sS'block_loop.thisIndex'
p3359
g889
sg38
S'right'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g1240
sS'block_loop.thisRepN'
p3365
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vn
sS'block_loop.thisTrialN'
p3368
I0
sg39
F2.0329346882781465
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x04*\n\xe5\x10'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1097
sS'block_loop.thisIndex'
p3372
g889
sg38
S'right'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1104
sS'block_loop.thisRepN'
p3378
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vn
sS'block_loop.thisTrialN'
p3381
I0
sg39
F1.0503993102875029
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x041\x0b\xea\xc8'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g896
sS'block_loop.thisIndex'
p3385
g889
sg38
S'right'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g905
sS'block_loop.thisRepN'
p3391
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vn
sS'block_loop.thisTrialN'
p3394
I0
sg39
F0.78323033640572248
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x047\r2\xe8'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g916
sS'block_loop.thisIndex'
p3398
g889
sg38
S'right'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g924
sS'block_loop.thisRepN'
p3404
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vn
sS'block_loop.thisTrialN'
p3407
I0
sg39
F1.1500036492730032
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x05\x01\no\xe0'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g2118
sS'block_loop.thisIndex'
p3411
g889
sg38
S'left'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g1345
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g2125
sS'block_loop.thisRepN'
p3417
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g1339
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vn
sS'block_loop.thisTrialN'
p3420
I0
sg39
F1.2166319605607896
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x05\x07\r#H'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1367
sS'block_loop.thisIndex'
p3424
g889
sg38
S'right'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1374
sS'block_loop.thisRepN'
p3430
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vn
sS'block_loop.thisTrialN'
p3433
I0
sg39
F1.9166517464623212
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x05\x0e\x01\xc9\x08'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g2380
sS'block_loop.thisIndex'
p3437
g889
sg38
S'right'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g1625
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g2387
sS'block_loop.thisRepN'
p3443
I0
sg907
g1625
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g1632
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vn
sS'block_loop.thisTrialN'
p3446
I0
sg39
F0.78368079353413123
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x05\x15\x00\xe6x'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g1335
sS'block_loop.thisIndex'
p3450
g889
sg38
S'right'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g1339
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g1343
sS'block_loop.thisRepN'
p3456
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g1339
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vn
sS'block_loop.thisTrialN'
p3459
I0
sg39
F0.8666695366678141
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x05\x1a\re\xb0'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1455
sS'block_loop.thisIndex'
p3463
g889
sg38
S'left'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1414
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1462
sS'block_loop.thisRepN'
p3469
I0
sg907
g1414
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g1421
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vn
sS'block_loop.thisTrialN'
p3472
I0
sg39
F1.133195896392408
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x05 \x0b\xcfp'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g1427
sS'block_loop.thisIndex'
p3476
g889
sg38
S'left'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g1434
sS'block_loop.thisRepN'
p3482
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vn
sS'block_loop.thisTrialN'
p3485
I0
sg39
F2.0330832250906496
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x05&\x0e\x86\xc0'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g984
sS'block_loop.thisIndex'
p3489
g889
sg38
S'left'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g992
sS'block_loop.thisRepN'
p3495
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vn
sS'block_loop.thisTrialN'
p3498
I0
sg39
F0.84986064338954748
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x05.\x00J8'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g1174
sS'block_loop.thisIndex'
p3502
g889
sg38
S'right'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1123
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g1181
sS'block_loop.thisRepN'
p3508
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vn
sS'block_loop.thisTrialN'
p3511
I0
sg39
F1.3333280114766239
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x053\r\xbb\xa0'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g1048
sS'block_loop.thisIndex'
p3515
g889
sg38
S'right'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g1056
sS'block_loop.thisRepN'
p3521
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vn
sS'block_loop.thisTrialN'
p3524
I0
sg39
F1.1332771497350222
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x05:\x04\x84@'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g2118
sS'block_loop.thisIndex'
p3528
g889
sg38
S'left'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g1339
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g2125
sS'block_loop.thisRepN'
p3534
I0
sg907
g1345
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g1339
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vn
sS'block_loop.thisTrialN'
p3537
I0
sg39
F1.0166238637361857
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x06\x04\x06\xfd\x10'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g1232
sS'block_loop.thisIndex'
p3541
g889
sg38
S'right'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g1236
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g1240
sS'block_loop.thisRepN'
p3547
I0
sg907
g1236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g1243
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vn
sS'block_loop.thisTrialN'
p3550
I0
sg39
F1.2496285154188627
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x06\n\x07\xcc\x18'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g984
sS'block_loop.thisIndex'
p3554
g889
sg38
S'left'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g992
sS'block_loop.thisRepN'
p3560
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vn
sS'block_loop.thisTrialN'
p3563
I0
sg39
F0.96668784005260022
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x06\x10\x0c-0'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1001
sS'block_loop.thisIndex'
p3567
g889
sg38
S'left'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1011
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1009
sS'block_loop.thisRepN'
p3573
I0
sg907
g1011
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g1005
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vn
sS'block_loop.thisTrialN'
p3576
I0
sg39
F1.0166760369352232
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x06\x16\x0cD\xa0'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1679
sS'block_loop.thisIndex'
p3580
g889
sg38
S'right'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1683
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1687
sS'block_loop.thisRepN'
p3586
I0
sg907
g1683
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g1690
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vn
sS'block_loop.thisTrialN'
p3589
I0
sg39
F1.0833371346593594
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x06\x1c\x0c\xd5('
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g2012
sS'block_loop.thisIndex'
p3593
g889
sg38
S'right'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g1494
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g2019
sS'block_loop.thisRepN'
p3599
I0
sg907
g1487
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g1494
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vn
sS'block_loop.thisTrialN'
p3602
I0
sg39
F0.94991829049786247
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x06"\x0e\x96`'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1080
sS'block_loop.thisIndex'
p3606
g889
sg38
S'right'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1088
sS'block_loop.thisRepN'
p3612
I0
sg907
g1084
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vn
sS'block_loop.thisTrialN'
p3615
I0
sg39
F1.1664843930857387
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x06(\x0es8'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F172.91343696508193
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vn
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vn
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'46-pistachios.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'right'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'29-beans.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'29-beans.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'46-pistachios.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vn
sS'block_loop.thisTrialN'
p3650
I0
sg39
F1.266540899796837
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0b+\x06\x1a\x80'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'30-spaghetti_hoops.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'right'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'19-caramello_redo.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'19-caramello_redo.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
S'30-spaghetti_hoops.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vn
sS'block_loop.thisTrialN'
p3667
I0
sg39
F1.1832915757672708
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0b1\n{\x98'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'3-ellas_strawberries_apples.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'left'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'3-ellas_strawberries_apples.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'13-mccoys_steak_crisps.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3681
I1
sg3647
S'13-mccoys_steak_crisps.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vn
sS'block_loop.thisTrialN'
p3684
I0
sg39
F0.71667272978129404
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0b7\r\xe6\x98'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'25-kitkat.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'left'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'31-hobnobs.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'31-hobnobs.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
S'25-kitkat.png'
p3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3699
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vn
sS'block_loop.thisTrialN'
p3701
I0
sg39
F0.88325149078536924
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0c\x01\n-x'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
g3634
sS'block_loop.thisIndex'
p3705
g3627
sg38
S'right'
p3706
sg59
g63
sS'trial_loop.thisN'
p3707
I4
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3708
g60
(g99
S'\x04\x00\x00\x00'
tRp3709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3710
I0
sg3642
g3643
sS'block_loop.thisRepN'
p3711
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3712
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3713
Nsg70
Vn
sS'block_loop.thisTrialN'
p3714
I0
sg39
F0.81668019938751968
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0c\x07\x08\xd9\xa0'
tRp3715
sa(dp3716
S'trial_loop.thisTrialN'
p3717
I5
sg3633
S'8-liquorice_catherine_wheels.png'
p3718
sS'block_loop.thisIndex'
p3719
g3627
sg38
S'right'
p3720
sg59
g63
sS'trial_loop.thisN'
p3721
I5
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3722
sg64
g65
sS'trial_loop.thisIndex'
p3723
g60
(g99
S'\x05\x00\x00\x00'
tRp3724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3725
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p3726
sS'block_loop.thisRepN'
p3727
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3728
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p3729
sg55
g11
sS'block_loop.thisTrial'
p3730
Nsg70
Vn
sS'block_loop.thisTrialN'
p3731
I0
sg39
F0.7668707598581932
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0c\r\x06\x8f\xb0'
tRp3732
sa(dp3733
S'trial_loop.thisTrialN'
p3734
I6
sg3633
S'41-peanuts_redo.png'
p3735
sS'block_loop.thisIndex'
p3736
g3627
sg38
S'left'
p3737
sg59
g63
sS'trial_loop.thisN'
p3738
I6
sg33
S'41-peanuts_redo.png'
p3739
sg64
g65
sS'trial_loop.thisIndex'
p3740
g60
(g99
S'\x06\x00\x00\x00'
tRp3741
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3742
I0
sg3642
S'45-chewy_nougat_redo.png'
p3743
sS'block_loop.thisRepN'
p3744
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3745
I1
sg3647
S'45-chewy_nougat_redo.png'
p3746
sg55
g11
sS'block_loop.thisTrial'
p3747
Nsg70
Vn
sS'block_loop.thisTrialN'
p3748
I0
sg39
F0.74996778376225848
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0c\x13\x03\x8e('
tRp3749
sa(dp3750
S'trial_loop.thisTrialN'
p3751
I7
sg3633
S'40-sardines.png'
p3752
sS'block_loop.thisIndex'
p3753
g3627
sg38
S'left'
p3754
sg59
g63
sS'trial_loop.thisN'
p3755
I7
sg33
S'5-pineapple.png'
p3756
sg64
g65
sS'trial_loop.thisIndex'
p3757
g60
(g99
S'\x07\x00\x00\x00'
tRp3758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3759
I0
sg3642
S'5-pineapple.png'
p3760
sS'block_loop.thisRepN'
p3761
I1
sg3645
S'40-sardines.png'
p3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3763
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p3764
Nsg70
Vn
sS'block_loop.thisTrialN'
p3765
I0
sg39
F0.76663498261495988
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0c\x19\x00\x13\x88'
tRp3766
sa(dp3767
S'trial_loop.thisTrialN'
p3768
I8
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p3769
sS'block_loop.thisIndex'
p3770
g3627
sg38
S'left'
p3771
sg59
g63
sS'trial_loop.thisN'
p3772
I8
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p3773
g60
(g99
S'\x08\x00\x00\x00'
tRp3774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3775
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p3776
sS'block_loop.thisRepN'
p3777
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3778
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p3779
Nsg70
Vn
sS'block_loop.thisTrialN'
p3780
I0
sg39
F0.75000655728763377
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0c\x1e\x0cT@'
tRp3781
sa(dp3782
S'trial_loop.thisTrialN'
p3783
I9
sg3633
S'29-beans.png'
p3784
sS'block_loop.thisIndex'
p3785
g3627
sg38
S'left'
p3786
sg59
g63
sS'trial_loop.thisN'
p3787
I9
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3788
g60
(g99
S'\t\x00\x00\x00'
tRp3789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3790
I0
sg3642
S'46-pistachios.png'
p3791
sS'block_loop.thisRepN'
p3792
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3793
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3794
Nsg70
Vn
sS'block_loop.thisTrialN'
p3795
I0
sg39
F1.0333261298205798
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0c$\t\x18 '
tRp3796
sa(dp3797
S'trial_loop.thisTrialN'
p3798
I10
sg3633
S'10-bounty_redo.png'
p3799
sS'block_loop.thisIndex'
p3800
g3627
sg38
S'right'
p3801
sg59
g63
sS'trial_loop.thisN'
p3802
I10
sg33
S'4-corn.png'
p3803
sg64
g65
sS'trial_loop.thisIndex'
p3804
g60
(g99
S'\n\x00\x00\x00'
tRp3805
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3806
I0
sg3642
S'4-corn.png'
p3807
sS'block_loop.thisRepN'
p3808
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3809
I1
sg3647
S'10-bounty_redo.png'
p3810
sg55
g11
sS'block_loop.thisTrial'
p3811
Nsg70
Vn
sS'block_loop.thisTrialN'
p3812
I0
sg39
F1.4000104916594864
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0c*\n!\xc0'
tRp3813
sa(dp3814
S'trial_loop.thisTrialN'
p3815
I11
sg3633
S'18-mms.png'
p3816
sS'block_loop.thisIndex'
p3817
g3627
sg38
S'left'
p3818
sg59
g63
sS'trial_loop.thisN'
p3819
I11
sg33
S'18-mms.png'
p3820
sg64
g65
sS'trial_loop.thisIndex'
p3821
g60
(g99
S'\x0b\x00\x00\x00'
tRp3822
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3823
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p3824
sS'block_loop.thisRepN'
p3825
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3826
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p3827
sg55
g11
sS'block_loop.thisTrial'
p3828
Nsg70
Vn
sS'block_loop.thisTrialN'
p3829
I0
sg39
F1.1166926297228201
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0c1\x01g`'
tRp3830
sa(dp3831
S'trial_loop.thisTrialN'
p3832
I12
sg3633
S'6-sour_patch_kids.png'
p3833
sS'block_loop.thisIndex'
p3834
g3627
sg38
S'right'
p3835
sg59
g63
sS'trial_loop.thisN'
p3836
I12
sg33
S'38-maltesers.png'
p3837
sg64
g65
sS'trial_loop.thisIndex'
p3838
g60
(g99
S'\x0c\x00\x00\x00'
tRp3839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3840
I0
sg3642
S'38-maltesers.png'
p3841
sS'block_loop.thisRepN'
p3842
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3843
I1
sg3647
S'6-sour_patch_kids.png'
p3844
sg55
g11
sS'block_loop.thisTrial'
p3845
Nsg70
Vn
sS'block_loop.thisTrialN'
p3846
I0
sg39
F1.1663156142126354
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0c7\x03\xa1\xb0'
tRp3847
sa(dp3848
S'trial_loop.thisTrialN'
p3849
I13
sg3633
S'50-polo.png'
p3850
sS'block_loop.thisIndex'
p3851
g3627
sg38
S'right'
p3852
sg59
g63
sS'trial_loop.thisN'
p3853
I13
sg33
S'48-twix.png'
p3854
sg64
g65
sS'trial_loop.thisIndex'
p3855
g60
(g99
S'\r\x00\x00\x00'
tRp3856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3857
I0
sg3642
S'48-twix.png'
p3858
sS'block_loop.thisRepN'
p3859
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3860
I1
sg3647
S'50-polo.png'
p3861
sg55
g11
sS'block_loop.thisTrial'
p3862
Nsg70
Vn
sS'block_loop.thisTrialN'
p3863
I0
sg39
F1.0665946695526145
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\r\x01\x06\xd2\x18'
tRp3864
sa(dp3865
S'trial_loop.thisTrialN'
p3866
I14
sg3633
S'45-chewy_nougat_redo.png'
p3867
sS'block_loop.thisIndex'
p3868
g3627
sg38
S'right'
p3869
sg59
g63
sS'trial_loop.thisN'
p3870
I14
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p3871
g60
(g99
S'\x0e\x00\x00\x00'
tRp3872
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3873
I0
sg3642
S'41-peanuts_redo.png'
p3874
sS'block_loop.thisRepN'
p3875
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3876
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p3877
Nsg70
Vn
sS'block_loop.thisTrialN'
p3878
I0
sg39
F0.86665898798810304
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\r\x07\x08T\xd0'
tRp3879
sa(dp3880
S'trial_loop.thisTrialN'
p3881
I15
sg3633
g3654
sS'block_loop.thisIndex'
p3882
g3627
sg38
S'right'
p3883
sg59
g63
sS'trial_loop.thisN'
p3884
I15
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p3885
g60
(g99
S'\x0f\x00\x00\x00'
tRp3886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3887
I0
sg3642
g3662
sS'block_loop.thisRepN'
p3888
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3889
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p3890
Nsg70
Vn
sS'block_loop.thisTrialN'
p3891
I0
sg39
F1.0170532235056271
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\r\r\x06\xc2x'
tRp3892
sa(dp3893
S'trial_loop.thisTrialN'
p3894
I16
sg3633
S'16-skips_prawn.png'
p3895
sS'block_loop.thisIndex'
p3896
g3627
sg38
S'left'
p3897
sg59
g63
sS'trial_loop.thisN'
p3898
I16
sg33
S'42-mrkipling_lemon_slices.png'
p3899
sg64
g65
sS'trial_loop.thisIndex'
p3900
g60
(g99
S'\x10\x00\x00\x00'
tRp3901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3902
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p3903
sS'block_loop.thisRepN'
p3904
I1
sg3645
S'16-skips_prawn.png'
p3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3906
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p3907
Nsg70
Vn
sS'block_loop.thisTrialN'
p3908
I0
sg39
F1.349906259301406
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\r\x13\x07\x91\x80'
tRp3909
sa(dp3910
S'trial_loop.thisTrialN'
p3911
I17
sg3633
S'44-crunch.png'
p3912
sS'block_loop.thisIndex'
p3913
g3627
sg38
S'left'
p3914
sg59
g63
sS'trial_loop.thisN'
p3915
I17
sg33
S'44-crunch.png'
p3916
sg64
g65
sS'trial_loop.thisIndex'
p3917
g60
(g99
S'\x11\x00\x00\x00'
tRp3918
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3919
I0
sg3642
S'26-walkers_smoky_bacon.png'
p3920
sS'block_loop.thisRepN'
p3921
I1
sg3645
g3916
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3922
I1
sg3647
S'26-walkers_smoky_bacon.png'
p3923
sg55
g11
sS'block_loop.thisTrial'
p3924
Nsg70
Vn
sS'block_loop.thisTrialN'
p3925
I0
sg39
F0.81658440597266235
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\r\x19\r]\xe0'
tRp3926
sa(dp3927
S'trial_loop.thisTrialN'
p3928
I18
sg3633
g3895
sS'block_loop.thisIndex'
p3929
g3627
sg38
S'left'
p3930
sg59
g63
sS'trial_loop.thisN'
p3931
I18
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p3932
g60
(g99
S'\x12\x00\x00\x00'
tRp3933
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3934
I0
sg3642
g3903
sS'block_loop.thisRepN'
p3935
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3936
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p3937
Nsg70
Vn
sS'block_loop.thisTrialN'
p3938
I0
sg39
F1.0664963102431102
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\r\x1f\x0b\x13\xf0'
tRp3939
sa(dp3940
S'trial_loop.thisTrialN'
p3941
I19
sg3633
S'1-treacle_cookies.png'
p3942
sS'block_loop.thisIndex'
p3943
g3627
sg38
S'right'
p3944
sg59
g63
sS'trial_loop.thisN'
p3945
I19
sg33
S'21-nakd_banana_crunch.png'
p3946
sg64
g65
sS'trial_loop.thisIndex'
p3947
g60
(g99
S'\x13\x00\x00\x00'
tRp3948
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3949
I0
sg3642
S'21-nakd_banana_crunch.png'
p3950
sS'block_loop.thisRepN'
p3951
I1
sg3645
g3946
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3952
I1
sg3647
S'1-treacle_cookies.png'
p3953
sg55
g11
sS'block_loop.thisTrial'
p3954
Nsg70
Vn
sS'block_loop.thisTrialN'
p3955
I0
sg39
F0.73324385011983395
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\r%\x0c\x9a\x90'
tRp3956
sa(dp3957
S'trial_loop.thisTrialN'
p3958
I20
sg3633
g3752
sS'block_loop.thisIndex'
p3959
g3627
sg38
S'left'
p3960
sg59
g63
sS'trial_loop.thisN'
p3961
I20
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p3962
g60
(g99
S'\x14\x00\x00\x00'
tRp3963
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3964
I0
sg3642
g3760
sS'block_loop.thisRepN'
p3965
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3966
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p3967
Nsg70
Vn
sS'block_loop.thisTrialN'
p3968
I0
sg39
F0.69989975903399682
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\r+\t\x1f\xf0'
tRp3969
sa(dp3970
S'trial_loop.thisTrialN'
p3971
I21
sg3633
g3833
sS'block_loop.thisIndex'
p3972
g3627
sg38
S'right'
p3973
sg59
g63
sS'trial_loop.thisN'
p3974
I21
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p3975
g60
(g99
S'\x15\x00\x00\x00'
tRp3976
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3977
I0
sg3642
g3841
sS'block_loop.thisRepN'
p3978
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3979
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p3980
Nsg70
Vn
sS'block_loop.thisTrialN'
p3981
I0
sg39
F1.0997257913509202
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\r1\x04\xed\xb8'
tRp3982
sa(dp3983
S'trial_loop.thisTrialN'
p3984
I22
sg3633
S'51-mars.png'
p3985
sS'block_loop.thisIndex'
p3986
g3627
sg38
S'left'
p3987
sg59
g63
sS'trial_loop.thisN'
p3988
I22
sg33
S'27-hartleys_raspberries_jelly.png'
p3989
sg64
g65
sS'trial_loop.thisIndex'
p3990
g60
(g99
S'\x16\x00\x00\x00'
tRp3991
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3992
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p3993
sS'block_loop.thisRepN'
p3994
I1
sg3645
S'51-mars.png'
p3995
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3996
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p3997
Nsg70
Vn
sS'block_loop.thisTrialN'
p3998
I0
sg39
F0.66655652324652692
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\r7\x06\xedp'
tRp3999
sa(dp4000
S'trial_loop.thisTrialN'
p4001
I23
sg3633
S'49-yorkie.png'
p4002
sS'block_loop.thisIndex'
p4003
g3627
sg38
S'right'
p4004
sg59
g63
sS'trial_loop.thisN'
p4005
I23
sg33
S'49-yorkie.png'
p4006
sg64
g65
sS'trial_loop.thisIndex'
p4007
g60
(g99
S'\x17\x00\x00\x00'
tRp4008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4009
I0
sg3642
S'35-raisins.png'
p4010
sS'block_loop.thisRepN'
p4011
I1
sg3645
g4006
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4012
I1
sg3647
S'35-raisins.png'
p4013
sg55
g11
sS'block_loop.thisTrial'
p4014
Nsg70
Vn
sS'block_loop.thisTrialN'
p4015
I0
sg39
F1.983219616666247
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0e\x01\x02\x80\xa0'
tRp4016
sa(dp4017
S'trial_loop.thisTrialN'
p4018
I24
sg3633
S'13-mccoys_steak_crisps.png'
p4019
sS'block_loop.thisIndex'
p4020
g3627
sg38
S'right'
p4021
sg59
g63
sS'trial_loop.thisN'
p4022
I24
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4023
g60
(g99
S'\x18\x00\x00\x00'
tRp4024
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4025
I0
sg3642
S'3-ellas_strawberries_apples.png'
p4026
sS'block_loop.thisRepN'
p4027
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4028
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4029
Nsg70
Vn
sS'block_loop.thisTrialN'
p4030
I0
sg39
F0.74994155461354239
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0e\x08\x02\xce\xc0'
tRp4031
sa(dp4032
S'trial_loop.thisTrialN'
p4033
I25
sg3633
S'42-mrkipling_lemon_slices.png'
p4034
sS'block_loop.thisIndex'
p4035
g3627
sg38
S'right'
p4036
sg59
g63
sS'trial_loop.thisN'
p4037
I25
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p4038
g60
(g99
S'\x19\x00\x00\x00'
tRp4039
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4040
I0
sg3642
S'16-skips_prawn.png'
p4041
sS'block_loop.thisRepN'
p4042
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4043
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p4044
Nsg70
Vn
sS'block_loop.thisTrialN'
p4045
I0
sg39
F1.0169545790968186
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0e\r\x0e\x96`'
tRp4046
sa(dp4047
S'trial_loop.thisTrialN'
p4048
I26
sg3633
g3784
sS'block_loop.thisIndex'
p4049
g3627
sg38
S'left'
p4050
sg59
g63
sS'trial_loop.thisN'
p4051
I26
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p4052
g60
(g99
S'\x1a\x00\x00\x00'
tRp4053
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4054
I0
sg3642
g3791
sS'block_loop.thisRepN'
p4055
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4056
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4057
Nsg70
Vn
sS'block_loop.thisTrialN'
p4058
I0
sg39
F1.000003421193469
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0e\x14\x00#('
tRp4059
sa(dp4060
S'trial_loop.thisTrialN'
p4061
I27
sg3633
S'31-hobnobs.png'
p4062
sS'block_loop.thisIndex'
p4063
g3627
sg38
S'right'
p4064
sg59
g63
sS'trial_loop.thisN'
p4065
I27
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p4066
g60
(g99
S'\x1b\x00\x00\x00'
tRp4067
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4068
I0
sg3642
S'25-kitkat.png'
p4069
sS'block_loop.thisRepN'
p4070
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4071
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4072
Nsg70
Vn
sS'block_loop.thisTrialN'
p4073
I0
sg39
F0.88324920999002643
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0e\x1a\x00\xb3\xb0'
tRp4074
sa(dp4075
S'trial_loop.thisTrialN'
p4076
I28
sg3633
S'2-steamed_puddings.png'
p4077
sS'block_loop.thisIndex'
p4078
g3627
sg38
S'right'
p4079
sg59
g63
sS'trial_loop.thisN'
p4080
I28
sg33
S'2-steamed_puddings.png'
p4081
sg64
g65
sS'trial_loop.thisIndex'
p4082
g60
(g99
S'\x1c\x00\x00\x00'
tRp4083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4084
I0
sg3642
S'20-fruit_pastilles.png'
p4085
sS'block_loop.thisRepN'
p4086
I1
sg3645
S'20-fruit_pastilles.png'
p4087
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4088
I1
sg3647
g4081
sg55
g11
sS'block_loop.thisTrial'
p4089
Nsg70
Vn
sS'block_loop.thisTrialN'
p4090
I0
sg39
F0.71669354204186675
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0e\x1f\x0e\x9e0'
tRp4091
sa(dp4092
S'trial_loop.thisTrialN'
p4093
I29
sg3633
S'26-walkers_smoky_bacon.png'
p4094
sS'block_loop.thisIndex'
p4095
g3627
sg38
S'right'
p4096
sg59
g63
sS'trial_loop.thisN'
p4097
I29
sg33
g3923
sg64
g65
sS'trial_loop.thisIndex'
p4098
g60
(g99
S'\x1d\x00\x00\x00'
tRp4099
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4100
I0
sg3642
S'44-crunch.png'
p4101
sS'block_loop.thisRepN'
p4102
I1
sg3645
g3916
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4103
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4104
Nsg70
Vn
sS'block_loop.thisTrialN'
p4105
I0
sg39
F0.79995911673904629
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0e%\n\xe8\xf8'
tRp4106
sa(dp4107
S'trial_loop.thisTrialN'
p4108
I30
sg3633
g3850
sS'block_loop.thisIndex'
p4109
g3627
sg38
S'right'
p4110
sg59
g63
sS'trial_loop.thisN'
p4111
I30
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4112
g60
(g99
S'\x1e\x00\x00\x00'
tRp4113
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4114
I0
sg3642
g3858
sS'block_loop.thisRepN'
p4115
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4116
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4117
Nsg70
Vn
sS'block_loop.thisTrialN'
p4118
I0
sg39
F1.2831986903674988
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0e+\x08`\x88'
tRp4119
sa(dp4120
S'trial_loop.thisTrialN'
p4121
I31
sg3633
g3784
sS'block_loop.thisIndex'
p4122
g3627
sg38
S'left'
p4123
sg59
g63
sS'trial_loop.thisN'
p4124
I31
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4125
g60
(g99
S'\x1f\x00\x00\x00'
tRp4126
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4127
I0
sg3642
g3791
sS'block_loop.thisRepN'
p4128
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4129
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4130
Nsg70
Vn
sS'block_loop.thisTrialN'
p4131
I0
sg39
F0.88324835469120444
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0e1\r:\xb8'
tRp4132
sa(dp4133
S'trial_loop.thisTrialN'
p4134
I32
sg3633
S'35-raisins.png'
p4135
sS'block_loop.thisIndex'
p4136
g3627
sg38
S'right'
p4137
sg59
g63
sS'trial_loop.thisN'
p4138
I32
sg33
g4006
sg64
g65
sS'trial_loop.thisIndex'
p4139
g60
(g99
S' \x00\x00\x00'
tRp4140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4141
I0
sg3642
S'49-yorkie.png'
p4142
sS'block_loop.thisRepN'
p4143
I1
sg3645
g4006
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4144
I1
sg3647
g4013
sg55
g11
sS'block_loop.thisTrial'
p4145
Nsg70
Vn
sS'block_loop.thisTrialN'
p4146
I0
sg39
F2.9832903213300597
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0e7\x0b\xe2\xf8'
tRp4147
sa(dp4148
S'trial_loop.thisTrialN'
p4149
I33
sg3633
g3718
sS'block_loop.thisIndex'
p4150
g3627
sg38
S'right'
p4151
sg59
g63
sS'trial_loop.thisN'
p4152
I33
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p4153
g60
(g99
S'!\x00\x00\x00'
tRp4154
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4155
I0
sg3642
g3726
sS'block_loop.thisRepN'
p4156
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4157
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p4158
Nsg70
Vn
sS'block_loop.thisTrialN'
p4159
I0
sg39
F0.73325896039023064
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0f\x03\x0c-0'
tRp4160
sa(dp4161
S'trial_loop.thisTrialN'
p4162
I34
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p4163
sS'block_loop.thisIndex'
p4164
g3627
sg38
S'right'
p4165
sg59
g63
sS'trial_loop.thisN'
p4166
I34
sg33
S'36-fig_rolls.png'
p4167
sg64
g65
sS'trial_loop.thisIndex'
p4168
g60
(g99
S'"\x00\x00\x00'
tRp4169
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4170
I0
sg3642
S'36-fig_rolls.png'
p4171
sS'block_loop.thisRepN'
p4172
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4173
I1
sg3647
S'34-hula_hoops_bbq_beef_redo.png'
p4174
sg55
g11
sS'block_loop.thisTrial'
p4175
Nsg70
Vn
sS'block_loop.thisTrialN'
p4176
I0
sg39
F1.0833716316928985
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0f\t\x08t\x10'
tRp4177
sa(dp4178
S'trial_loop.thisTrialN'
p4179
I35
sg3633
g4034
sS'block_loop.thisIndex'
p4180
g3627
sg38
S'right'
p4181
sg59
g63
sS'trial_loop.thisN'
p4182
I35
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p4183
g60
(g99
S'#\x00\x00\x00'
tRp4184
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4185
I0
sg3642
g4041
sS'block_loop.thisRepN'
p4186
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4187
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p4188
Nsg70
Vn
sS'block_loop.thisTrialN'
p4189
I0
sg39
F1.0500492081646371
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0f\x0f\n5H'
tRp4190
sa(dp4191
S'trial_loop.thisTrialN'
p4192
I36
sg3633
g3769
sS'block_loop.thisIndex'
p4193
g3627
sg38
S'left'
p4194
sg59
g63
sS'trial_loop.thisN'
p4195
I36
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p4196
g60
(g99
S'$\x00\x00\x00'
tRp4197
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4198
I0
sg3642
g3776
sS'block_loop.thisRepN'
p4199
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4200
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p4201
Nsg70
Vn
sS'block_loop.thisTrialN'
p4202
I0
sg39
F0.79993288759033021
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0f\x15\x0b}h'
tRp4203
sa(dp4204
S'trial_loop.thisTrialN'
p4205
I37
sg3633
g3816
sS'block_loop.thisIndex'
p4206
g3627
sg38
S'left'
p4207
sg59
g63
sS'trial_loop.thisN'
p4208
I37
sg33
g3827
sg64
g65
sS'trial_loop.thisIndex'
p4209
g60
(g99
S'%\x00\x00\x00'
tRp4210
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4211
I0
sg3642
g3824
sS'block_loop.thisRepN'
p4212
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4213
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p4214
Nsg70
Vn
sS'block_loop.thisTrialN'
p4215
I0
sg39
F1.0833029227251245
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0f\x1b\x08\xf8\xe0'
tRp4216
sa(dp4217
S'trial_loop.thisTrialN'
p4218
I38
sg3633
g3671
sS'block_loop.thisIndex'
p4219
g3627
sg38
S'left'
p4220
sg59
g63
sS'trial_loop.thisN'
p4221
I38
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4222
g60
(g99
S'&\x00\x00\x00'
tRp4223
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4224
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4225
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4226
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4227
Nsg70
Vn
sS'block_loop.thisTrialN'
p4228
I0
sg39
F0.73327236006480234
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0f!\n\xba\x18'
tRp4229
sa(dp4230
S'trial_loop.thisTrialN'
p4231
I39
sg3633
S'33-ambrosia_rice.png'
p4232
sS'block_loop.thisIndex'
p4233
g3627
sg38
S'left'
p4234
sg59
g63
sS'trial_loop.thisN'
p4235
I39
sg33
S'33-ambrosia_rice.png'
p4236
sg64
g65
sS'trial_loop.thisIndex'
p4237
g60
(g99
S"'\x00\x00\x00"
tRp4238
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4239
I0
sg3642
S'23-crunchie_redo.png'
p4240
sS'block_loop.thisRepN'
p4241
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4242
I1
sg3647
S'23-crunchie_redo.png'
p4243
sg55
g11
sS'block_loop.thisTrial'
p4244
Nsg70
Vn
sS'block_loop.thisTrialN'
p4245
I0
sg39
F0.79998449058984988
sg34
g753
(S"\x07\xdf\x07\x0b\x0b\x0f'\x07?x"
tRp4246
sa(dp4247
S'trial_loop.thisTrialN'
p4248
I40
sg3633
S'36-fig_rolls.png'
p4249
sS'block_loop.thisIndex'
p4250
g3627
sg38
S'left'
p4251
sg59
g63
sS'trial_loop.thisN'
p4252
I40
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p4253
g60
(g99
S'(\x00\x00\x00'
tRp4254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4255
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p4256
sS'block_loop.thisRepN'
p4257
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4258
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p4259
Nsg70
Vn
sS'block_loop.thisTrialN'
p4260
I0
sg39
F0.71668641455471516
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0f-\x04\xb7\x08'
tRp4261
sa(dp4262
S'trial_loop.thisTrialN'
p4263
I41
sg3633
g3912
sS'block_loop.thisIndex'
p4264
g3627
sg38
S'left'
p4265
sg59
g63
sS'trial_loop.thisN'
p4266
I41
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p4267
g60
(g99
S')\x00\x00\x00'
tRp4268
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4269
I0
sg3642
g3920
sS'block_loop.thisRepN'
p4270
I1
sg3645
g3916
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4271
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4272
Nsg70
Vn
sS'block_loop.thisTrialN'
p4273
I0
sg39
F0.73334534552304831
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0f3\x01\x01\xd0'
tRp4274
sa(dp4275
S'trial_loop.thisTrialN'
p4276
I42
sg3633
g3942
sS'block_loop.thisIndex'
p4277
g3627
sg38
S'right'
p4278
sg59
g63
sS'trial_loop.thisN'
p4279
I42
sg33
g3946
sg64
g65
sS'trial_loop.thisIndex'
p4280
g60
(g99
S'*\x00\x00\x00'
tRp4281
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4282
I0
sg3642
g3950
sS'block_loop.thisRepN'
p4283
I1
sg3645
g3946
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4284
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p4285
Nsg70
Vn
sS'block_loop.thisTrialN'
p4286
I0
sg39
F0.78326084204672952
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x0f8\x0c\x8a\xf0'
tRp4287
sa(dp4288
S'trial_loop.thisTrialN'
p4289
I43
sg3633
g3799
sS'block_loop.thisIndex'
p4290
g3627
sg38
S'right'
p4291
sg59
g63
sS'trial_loop.thisN'
p4292
I43
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p4293
g60
(g99
S'+\x00\x00\x00'
tRp4294
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4295
I0
sg3642
g3807
sS'block_loop.thisRepN'
p4296
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4297
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p4298
Nsg70
Vn
sS'block_loop.thisTrialN'
p4299
I0
sg39
F0.94999384185121016
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x10\x02\t\xc7\xe8'
tRp4300
sa(dp4301
S'trial_loop.thisTrialN'
p4302
I44
sg3633
g3634
sS'block_loop.thisIndex'
p4303
g3627
sg38
S'right'
p4304
sg59
g63
sS'trial_loop.thisN'
p4305
I44
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p4306
g60
(g99
S',\x00\x00\x00'
tRp4307
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4308
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4309
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4310
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4311
Nsg70
Vn
sS'block_loop.thisTrialN'
p4312
I0
sg39
F0.75002280795615661
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x10\x08\t\xa4\xc0'
tRp4313
sa(dp4314
S'trial_loop.thisTrialN'
p4315
I45
sg3633
g4249
sS'block_loop.thisIndex'
p4316
g3627
sg38
S'left'
p4317
sg59
g63
sS'trial_loop.thisN'
p4318
I45
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p4319
g60
(g99
S'-\x00\x00\x00'
tRp4320
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4321
I0
sg3642
g4256
sS'block_loop.thisRepN'
p4322
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4323
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p4324
Nsg70
Vn
sS'block_loop.thisTrialN'
p4325
I0
sg39
F0.73327920245083078
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x10\x0e\x06* '
tRp4326
sa(dp4327
S'trial_loop.thisTrialN'
p4328
I46
sg3633
g3850
sS'block_loop.thisIndex'
p4329
g3627
sg38
S'right'
p4330
sg59
g63
sS'trial_loop.thisN'
p4331
I46
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4332
g60
(g99
S'.\x00\x00\x00'
tRp4333
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4334
I0
sg3642
g3858
sS'block_loop.thisRepN'
p4335
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4336
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4337
Nsg70
Vn
sS'block_loop.thisTrialN'
p4338
I0
sg39
F1.1000003421195288
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x10\x14\x02\xaf\x80'
tRp4339
sa(dp4340
S'trial_loop.thisTrialN'
p4341
I47
sg3633
S'23-crunchie_redo.png'
p4342
sS'block_loop.thisIndex'
p4343
g3627
sg38
S'right'
p4344
sg59
g63
sS'trial_loop.thisN'
p4345
I47
sg33
g4236
sg64
g65
sS'trial_loop.thisIndex'
p4346
g60
(g99
S'/\x00\x00\x00'
tRp4347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4348
I0
sg3642
S'33-ambrosia_rice.png'
p4349
sS'block_loop.thisRepN'
p4350
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4351
I1
sg3647
g4243
sg55
g11
sS'block_loop.thisTrial'
p4352
Nsg70
Vn
sS'block_loop.thisTrialN'
p4353
I0
sg39
F1.0500169919268956
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x10\x1a\x04\xabP'
tRp4354
sa(dp4355
S'trial_loop.thisTrialN'
p4356
I48
sg3633
S'5-pineapple.png'
p4357
sS'block_loop.thisIndex'
p4358
g3627
sg38
S'right'
p4359
sg59
g63
sS'trial_loop.thisN'
p4360
I48
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p4361
g60
(g99
S'0\x00\x00\x00'
tRp4362
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4363
I0
sg3642
S'40-sardines.png'
p4364
sS'block_loop.thisRepN'
p4365
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4366
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p4367
Nsg70
Vn
sS'block_loop.thisTrialN'
p4368
I0
sg39
F1.0500138558327308
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x10 \x05\xf3p'
tRp4369
sa(dp4370
S'trial_loop.thisTrialN'
p4371
I49
sg3633
g3985
sS'block_loop.thisIndex'
p4372
g3627
sg38
S'left'
p4373
sg59
g63
sS'trial_loop.thisN'
p4374
I49
sg33
g3995
sg64
g65
sS'trial_loop.thisIndex'
p4375
g60
(g99
S'1\x00\x00\x00'
tRp4376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4377
I0
sg3642
g3993
sS'block_loop.thisRepN'
p4378
I1
sg3645
g3995
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4379
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p4380
Nsg70
Vn
sS'block_loop.thisTrialN'
p4381
I0
sg39
F0.73323729283310968
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x10&\x07;\x90'
tRp4382
sa(dp4383
S'trial_loop.thisTrialN'
p4384
I50
sg3633
S'43-mrporky_pork_crackles_redo.png'
p4385
sS'block_loop.thisIndex'
p4386
g3627
sg38
S'right'
p4387
sg59
g63
sS'trial_loop.thisN'
p4388
I50
sg33
g3827
sg64
g65
sS'trial_loop.thisIndex'
p4389
g60
(g99
S'2\x00\x00\x00'
tRp4390
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4391
I0
sg3642
S'18-mms.png'
p4392
sS'block_loop.thisRepN'
p4393
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4394
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p4395
Nsg70
Vn
sS'block_loop.thisTrialN'
p4396
I0
sg39
F1.866709735690165
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x10,\x03\xc0\xf0'
tRp4397
sa(dp4398
S'trial_loop.thisTrialN'
p4399
I51
sg3633
g3752
sS'block_loop.thisIndex'
p4400
g3627
sg38
S'left'
p4401
sg59
g63
sS'trial_loop.thisN'
p4402
I51
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p4403
g60
(g99
S'3\x00\x00\x00'
tRp4404
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4405
I0
sg3642
g3760
sS'block_loop.thisRepN'
p4406
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4407
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p4408
Nsg70
Vn
sS'block_loop.thisTrialN'
p4409
I0
sg39
F0.80002668530869414
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x103\x02*\xb0'
tRp4410
sa(dp4411
S'trial_loop.thisTrialN'
p4412
I52
sg3633
g3850
sS'block_loop.thisIndex'
p4413
g3627
sg38
S'right'
p4414
sg59
g63
sS'trial_loop.thisN'
p4415
I52
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4416
g60
(g99
S'4\x00\x00\x00'
tRp4417
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4418
I0
sg3642
g3858
sS'block_loop.thisRepN'
p4419
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4420
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4421
Nsg70
Vn
sS'block_loop.thisTrialN'
p4422
I0
sg39
F1.000346110729879
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x108\x0e\xe4\x80'
tRp4423
sa(dp4424
S'trial_loop.thisTrialN'
p4425
I53
sg3633
S'19-caramello_redo.png'
p4426
sS'block_loop.thisIndex'
p4427
g3627
sg38
S'left'
p4428
sg59
g63
sS'trial_loop.thisN'
p4429
I53
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4430
g60
(g99
S'5\x00\x00\x00'
tRp4431
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4432
I0
sg3642
S'30-spaghetti_hoops.png'
p4433
sS'block_loop.thisRepN'
p4434
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4435
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4436
Nsg70
Vn
sS'block_loop.thisTrialN'
p4437
I0
sg39
F0.90001904464315885
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x11\x03\x002\xc8'
tRp4438
sa(dp4439
S'trial_loop.thisTrialN'
p4440
I54
sg3633
S'20-fruit_pastilles.png'
p4441
sS'block_loop.thisIndex'
p4442
g3627
sg38
S'left'
p4443
sg59
g63
sS'trial_loop.thisN'
p4444
I54
sg33
g4087
sg64
g65
sS'trial_loop.thisIndex'
p4445
g60
(g99
S'6\x00\x00\x00'
tRp4446
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4447
I0
sg3642
S'2-steamed_puddings.png'
p4448
sS'block_loop.thisRepN'
p4449
I1
sg3645
g4087
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4450
I1
sg3647
g4081
sg55
g11
sS'block_loop.thisTrial'
p4451
Nsg70
Vn
sS'block_loop.thisTrialN'
p4452
I0
sg39
F1.0833391303549433
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x11\x08\x0e[\xc8'
tRp4453
sa(dp4454
S'trial_loop.thisTrialN'
p4455
I55
sg3633
g3735
sS'block_loop.thisIndex'
p4456
g3627
sg38
S'left'
p4457
sg59
g63
sS'trial_loop.thisN'
p4458
I55
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p4459
g60
(g99
S'7\x00\x00\x00'
tRp4460
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4461
I0
sg3642
g3743
sS'block_loop.thisRepN'
p4462
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4463
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p4464
Nsg70
Vn
sS'block_loop.thisTrialN'
p4465
I0
sg39
F0.78338400500888383
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x11\x0f\x00\xda\xc0'
tRp4466
sa(dp4467
S'trial_loop.thisTrialN'
p4468
I56
sg3633
g4441
sS'block_loop.thisIndex'
p4469
g3627
sg38
S'left'
p4470
sg59
g63
sS'trial_loop.thisN'
p4471
I56
sg33
g4081
sg64
g65
sS'trial_loop.thisIndex'
p4472
g60
(g99
S'8\x00\x00\x00'
tRp4473
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4474
I0
sg3642
g4448
sS'block_loop.thisRepN'
p4475
I1
sg3645
g4087
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4476
I1
sg3647
g4081
sg55
g11
sS'block_loop.thisTrial'
p4477
Nsg70
Vn
sS'block_loop.thisTrialN'
p4478
I0
sg39
F0.68331809001574584
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x11\x14\rY\xf8'
tRp4479
sa(dp4480
S'trial_loop.thisTrialN'
p4481
I57
sg3633
g3799
sS'block_loop.thisIndex'
p4482
g3627
sg38
S'right'
p4483
sg59
g63
sS'trial_loop.thisN'
p4484
I57
sg33
g3810
sg64
g65
sS'trial_loop.thisIndex'
p4485
g60
(g99
S'9\x00\x00\x00'
tRp4486
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4487
I0
sg3642
g3807
sS'block_loop.thisRepN'
p4488
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4489
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p4490
Nsg70
Vn
sS'block_loop.thisTrialN'
p4491
I0
sg39
F0.83335794691902265
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x11\x1a\x08\xed('
tRp4492
sa(dp4493
S'trial_loop.thisTrialN'
p4494
I58
sg3633
g3634
sS'block_loop.thisIndex'
p4495
g3627
sg38
S'right'
p4496
sg59
g63
sS'trial_loop.thisN'
p4497
I58
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4498
g60
(g99
S':\x00\x00\x00'
tRp4499
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4500
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4501
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4502
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4503
Nsg70
Vn
sS'block_loop.thisTrialN'
p4504
I0
sg39
F0.75043135546548001
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x11 \x06\xdd\xd0'
tRp4505
sa(dp4506
S'trial_loop.thisTrialN'
p4507
I59
sg3633
S'38-maltesers.png'
p4508
sS'block_loop.thisIndex'
p4509
g3627
sg38
S'left'
p4510
sg59
g63
sS'trial_loop.thisN'
p4511
I59
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p4512
g60
(g99
S';\x00\x00\x00'
tRp4513
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4514
I0
sg3642
S'6-sour_patch_kids.png'
p4515
sS'block_loop.thisRepN'
p4516
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4517
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p4518
Nsg70
Vn
sS'block_loop.thisTrialN'
p4519
I0
sg39
F1.4663146448747284
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x11&\x03\xa1\xb0'
tRp4520
sa(dp4521
S'trial_loop.thisTrialN'
p4522
I60
sg3633
g3985
sS'block_loop.thisIndex'
p4523
g3627
sg38
S'left'
p4524
sg59
g63
sS'trial_loop.thisN'
p4525
I60
sg33
g3989
sg64
g65
sS'trial_loop.thisIndex'
p4526
g60
(g99
S'<\x00\x00\x00'
tRp4527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4528
I0
sg3642
g3993
sS'block_loop.thisRepN'
p4529
I1
sg3645
g3995
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4530
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p4531
Nsg70
Vn
sS'block_loop.thisTrialN'
p4532
I0
sg39
F0.69998842496261204
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x11,\x0bVX'
tRp4533
sa(dp4534
S'trial_loop.thisTrialN'
p4535
I61
sg3633
g4163
sS'block_loop.thisIndex'
p4536
g3627
sg38
S'right'
p4537
sg59
g63
sS'trial_loop.thisN'
p4538
I61
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p4539
g60
(g99
S'=\x00\x00\x00'
tRp4540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4541
I0
sg3642
g4171
sS'block_loop.thisRepN'
p4542
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4543
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p4544
Nsg70
Vn
sS'block_loop.thisTrialN'
p4545
I0
sg39
F0.94998215277519193
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x112\x07(\x08'
tRp4546
sa(dp4547
S'trial_loop.thisTrialN'
p4548
I62
sg3633
g3867
sS'block_loop.thisIndex'
p4549
g3627
sg38
S'right'
p4550
sg59
g63
sS'trial_loop.thisN'
p4551
I62
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p4552
g60
(g99
S'>\x00\x00\x00'
tRp4553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4554
I0
sg3642
g3874
sS'block_loop.thisRepN'
p4555
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4556
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p4557
Nsg70
Vn
sS'block_loop.thisTrialN'
p4558
I0
sg39
F0.88322868282921263
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x118\x07\x00\xf8'
tRp4559
sa(dp4560
S'trial_loop.thisTrialN'
p4561
I63
sg3633
g4034
sS'block_loop.thisIndex'
p4562
g3627
sg38
S'right'
p4563
sg59
g63
sS'trial_loop.thisN'
p4564
I63
sg33
g3899
sg64
g65
sS'trial_loop.thisIndex'
p4565
g60
(g99
S'?\x00\x00\x00'
tRp4566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4567
I0
sg3642
g4041
sS'block_loop.thisRepN'
p4568
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4569
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p4570
Nsg70
Vn
sS'block_loop.thisTrialN'
p4571
I0
sg39
F0.9836084923144881
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x12\x02\x05\xa98'
tRp4572
sa(dp4573
S'trial_loop.thisTrialN'
p4574
I64
sg3633
g3735
sS'block_loop.thisIndex'
p4575
g3627
sg38
S'left'
p4576
sg59
g63
sS'trial_loop.thisN'
p4577
I64
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p4578
g60
(g99
S'@\x00\x00\x00'
tRp4579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4580
I0
sg3642
g3743
sS'block_loop.thisRepN'
p4581
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4582
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p4583
Nsg70
Vn
sS'block_loop.thisTrialN'
p4584
I0
sg39
F0.70000353523300873
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x12\x08\x05\xff('
tRp4585
sa(dp4586
S'trial_loop.thisTrialN'
p4587
I65
sg3633
S'48-twix.png'
p4588
sS'block_loop.thisIndex'
p4589
g3627
sg38
S'left'
p4590
sg59
g63
sS'trial_loop.thisN'
p4591
I65
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4592
g60
(g99
S'A\x00\x00\x00'
tRp4593
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4594
I0
sg3642
S'50-polo.png'
p4595
sS'block_loop.thisRepN'
p4596
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4597
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4598
Nsg70
Vn
sS'block_loop.thisTrialN'
p4599
I0
sg39
F0.8166499788458168
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x12\x0e\x01\xcc\xf0'
tRp4600
sa(dp4601
S'trial_loop.thisTrialN'
p4602
I66
sg3633
g3942
sS'block_loop.thisIndex'
p4603
g3627
sg38
S'right'
p4604
sg59
g63
sS'trial_loop.thisN'
p4605
I66
sg33
g3946
sg64
g65
sS'trial_loop.thisIndex'
p4606
g60
(g99
S'B\x00\x00\x00'
tRp4607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4608
I0
sg3642
g3950
sS'block_loop.thisRepN'
p4609
I1
sg3645
g3946
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4610
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p4611
Nsg70
Vn
sS'block_loop.thisTrialN'
p4612
I0
sg39
F0.78330104106953513
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x12\x13\x0e\xc5@'
tRp4613
sa(dp4614
S'trial_loop.thisTrialN'
p4615
I67
sg3633
g3912
sS'block_loop.thisIndex'
p4616
g3627
sg38
S'left'
p4617
sg59
g63
sS'trial_loop.thisN'
p4618
I67
sg33
g3923
sg64
g65
sS'trial_loop.thisIndex'
p4619
g60
(g99
S'C\x00\x00\x00'
tRp4620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4621
I0
sg3642
g3920
sS'block_loop.thisRepN'
p4622
I1
sg3645
g3916
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4623
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4624
Nsg70
Vn
sS'block_loop.thisTrialN'
p4625
I0
sg39
F0.70001379881341563
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x12\x19\x0c\x028'
tRp4626
sa(dp4627
S'trial_loop.thisTrialN'
p4628
I68
sg3633
g4342
sS'block_loop.thisIndex'
p4629
g3627
sg38
S'right'
p4630
sg59
g63
sS'trial_loop.thisN'
p4631
I68
sg33
g4236
sg64
g65
sS'trial_loop.thisIndex'
p4632
g60
(g99
S'D\x00\x00\x00'
tRp4633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4634
I0
sg3642
g4349
sS'block_loop.thisRepN'
p4635
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4636
I1
sg3647
g4243
sg55
g11
sS'block_loop.thisTrial'
p4637
Nsg70
Vn
sS'block_loop.thisTrialN'
p4638
I0
sg39
F0.9498512921272777
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x12\x1f\x08\x0e\x80'
tRp4639
sa(dp4640
S'trial_loop.thisTrialN'
p4641
I69
sg3633
g3833
sS'block_loop.thisIndex'
p4642
g3627
sg38
S'right'
p4643
sg59
g63
sS'trial_loop.thisN'
p4644
I69
sg33
g3844
sg64
g65
sS'trial_loop.thisIndex'
p4645
g60
(g99
S'E\x00\x00\x00'
tRp4646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4647
I0
sg3642
g3841
sS'block_loop.thisRepN'
p4648
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4649
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p4650
Nsg70
Vn
sS'block_loop.thisTrialN'
p4651
I0
sg39
F1.8000571909497012
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x12%\x07\xac\xd8'
tRp4652
sa(dp4653
S'trial_loop.thisTrialN'
p4654
I70
sg3633
g3895
sS'block_loop.thisIndex'
p4655
g3627
sg38
S'left'
p4656
sg59
g63
sS'trial_loop.thisN'
p4657
I70
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p4658
g60
(g99
S'F\x00\x00\x00'
tRp4659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4660
I0
sg3642
g3903
sS'block_loop.thisRepN'
p4661
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4662
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p4663
Nsg70
Vn
sS'block_loop.thisTrialN'
p4664
I0
sg39
F0.91634212846111041
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x12,\x05\x1c\x98'
tRp4665
sa(dp4666
S'trial_loop.thisTrialN'
p4667
I71
sg3633
g3654
sS'block_loop.thisIndex'
p4668
g3627
sg38
S'right'
p4669
sg59
g63
sS'trial_loop.thisN'
p4670
I71
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4671
g60
(g99
S'G\x00\x00\x00'
tRp4672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4673
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4674
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4675
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4676
Nsg70
Vn
sS'block_loop.thisTrialN'
p4677
I0
sg39
F0.91664518917514215
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x122\x04\x80X'
tRp4678
sa(dp4679
S'trial_loop.thisTrialN'
p4680
I72
sg3633
S'27-hartleys_raspberries_jelly.png'
p4681
sS'block_loop.thisIndex'
p4682
g3627
sg38
S'right'
p4683
sg59
g63
sS'trial_loop.thisN'
p4684
I72
sg33
g3995
sg64
g65
sS'trial_loop.thisIndex'
p4685
g60
(g99
S'H\x00\x00\x00'
tRp4686
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4687
I0
sg3642
S'51-mars.png'
p4688
sS'block_loop.thisRepN'
p4689
I1
sg3645
g3995
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4690
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p4691
Nsg70
Vn
sS'block_loop.thisTrialN'
p4692
I0
sg39
F0.6999208563929642
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x128\x03\xa1\xb0'
tRp4693
sa(dp4694
S'trial_loop.thisTrialN'
p4695
I73
sg3633
g4357
sS'block_loop.thisIndex'
p4696
g3627
sg38
S'right'
p4697
sg59
g63
sS'trial_loop.thisN'
p4698
I73
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p4699
g60
(g99
S'I\x00\x00\x00'
tRp4700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4701
I0
sg3642
g4364
sS'block_loop.thisRepN'
p4702
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4703
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p4704
Nsg70
Vn
sS'block_loop.thisTrialN'
p4705
I0
sg39
F0.71666132580321573
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x13\x01\x0e\xf08'
tRp4706
sa(dp4707
S'trial_loop.thisTrialN'
p4708
I74
sg3633
g3634
sS'block_loop.thisIndex'
p4709
g3627
sg38
S'right'
p4710
sg59
g63
sS'trial_loop.thisN'
p4711
I74
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4712
g60
(g99
S'J\x00\x00\x00'
tRp4713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4714
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4715
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4716
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4717
Nsg70
Vn
sS'block_loop.thisTrialN'
p4718
I0
sg39
F0.7666475269898001
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x13\x07\n\xfc\x80'
tRp4719
sa(dp4720
S'trial_loop.thisTrialN'
p4721
I75
sg3633
g4342
sS'block_loop.thisIndex'
p4722
g3627
sg38
S'right'
p4723
sg59
g63
sS'trial_loop.thisN'
p4724
I75
sg33
g4243
sg64
g65
sS'trial_loop.thisIndex'
p4725
g60
(g99
S'K\x00\x00\x00'
tRp4726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4727
I0
sg3642
g4349
sS'block_loop.thisRepN'
p4728
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4729
I1
sg3647
g4243
sg55
g11
sS'block_loop.thisTrial'
p4730
Nsg70
Vn
sS'block_loop.thisTrialN'
p4731
I0
sg39
F0.88360643959822482
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x13\r\x07\xfa\xf8'
tRp4732
sa(dp4733
S'trial_loop.thisTrialN'
p4734
I76
sg3633
g3718
sS'block_loop.thisIndex'
p4735
g3627
sg38
S'right'
p4736
sg59
g63
sS'trial_loop.thisN'
p4737
I76
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p4738
g60
(g99
S'L\x00\x00\x00'
tRp4739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4740
I0
sg3642
g3726
sS'block_loop.thisRepN'
p4741
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4742
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p4743
Nsg70
Vn
sS'block_loop.thisTrialN'
p4744
I0
sg39
F0.85003255835727032
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x13\x13\x06\xa38'
tRp4745
sa(dp4746
S'trial_loop.thisTrialN'
p4747
I77
sg3633
g4062
sS'block_loop.thisIndex'
p4748
g3627
sg38
S'right'
p4749
sg59
g63
sS'trial_loop.thisN'
p4750
I77
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p4751
g60
(g99
S'M\x00\x00\x00'
tRp4752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4753
I0
sg3642
g4069
sS'block_loop.thisRepN'
p4754
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4755
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4756
Nsg70
Vn
sS'block_loop.thisTrialN'
p4757
I0
sg39
F0.68322799859106453
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x13\x19\x04\xd6H'
tRp4758
sa(dp4759
S'trial_loop.thisTrialN'
p4760
I78
sg3633
g4077
sS'block_loop.thisIndex'
p4761
g3627
sg38
S'right'
p4762
sg59
g63
sS'trial_loop.thisN'
p4763
I78
sg33
g4087
sg64
g65
sS'trial_loop.thisIndex'
p4764
g60
(g99
S'N\x00\x00\x00'
tRp4765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4766
I0
sg3642
g4085
sS'block_loop.thisRepN'
p4767
I1
sg3645
g4087
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4768
I1
sg3647
g4081
sg55
g11
sS'block_loop.thisTrial'
p4769
Nsg70
Vn
sS'block_loop.thisTrialN'
p4770
I0
sg39
F0.68334317876815476
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x13\x1f\x00\xa4\x10'
tRp4771
sa(dp4772
S'trial_loop.thisTrialN'
p4773
I79
sg3633
g3895
sS'block_loop.thisIndex'
p4774
g3627
sg38
S'left'
p4775
sg59
g63
sS'trial_loop.thisN'
p4776
I79
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p4777
g60
(g99
S'O\x00\x00\x00'
tRp4778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4779
I0
sg3642
g3903
sS'block_loop.thisRepN'
p4780
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4781
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p4782
Nsg70
Vn
sS'block_loop.thisTrialN'
p4783
I0
sg39
F0.81643073736995575
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x13$\x0bu\x98'
tRp4784
sa(dp4785
S'trial_loop.thisTrialN'
p4786
I80
sg3633
S'4-corn.png'
p4787
sS'block_loop.thisIndex'
p4788
g3627
sg38
S'left'
p4789
sg59
g63
sS'trial_loop.thisN'
p4790
I80
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p4791
g60
(g99
S'P\x00\x00\x00'
tRp4792
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4793
I0
sg3642
S'10-bounty_redo.png'
p4794
sS'block_loop.thisRepN'
p4795
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4796
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p4797
Nsg70
Vn
sS'block_loop.thisTrialN'
p4798
I0
sg39
F1.0166877260126057
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x13*\t+\xa8'
tRp4799
sa(dp4800
S'trial_loop.thisTrialN'
p4801
I81
sg3633
g4681
sS'block_loop.thisIndex'
p4802
g3627
sg38
S'right'
p4803
sg59
g63
sS'trial_loop.thisN'
p4804
I81
sg33
g3995
sg64
g65
sS'trial_loop.thisIndex'
p4805
g60
(g99
S'Q\x00\x00\x00'
tRp4806
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4807
I0
sg3642
g4688
sS'block_loop.thisRepN'
p4808
I1
sg3645
g3995
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4809
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p4810
Nsg70
Vn
sS'block_loop.thisTrialN'
p4811
I0
sg39
F0.6501829768258176
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x130\t\xfa\xb0'
tRp4812
sa(dp4813
S'trial_loop.thisTrialN'
p4814
I82
sg3633
g4787
sS'block_loop.thisIndex'
p4815
g3627
sg38
S'left'
p4816
sg59
g63
sS'trial_loop.thisN'
p4817
I82
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p4818
g60
(g99
S'R\x00\x00\x00'
tRp4819
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4820
I0
sg3642
g4794
sS'block_loop.thisRepN'
p4821
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4822
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p4823
Nsg70
Vn
sS'block_loop.thisTrialN'
p4824
I0
sg39
F0.83333285816752323
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x136\x05\x14\xc8'
tRp4825
sa(dp4826
S'trial_loop.thisTrialN'
p4827
I83
sg3633
g4385
sS'block_loop.thisIndex'
p4828
g3627
sg38
S'right'
p4829
sg59
g63
sS'trial_loop.thisN'
p4830
I83
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p4831
g60
(g99
S'S\x00\x00\x00'
tRp4832
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4833
I0
sg3642
g4392
sS'block_loop.thisRepN'
p4834
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4835
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p4836
Nsg70
Vn
sS'block_loop.thisTrialN'
p4837
I0
sg39
F1.1000151672906213
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x14\x00\x03C\xf0'
tRp4838
sa(dp4839
S'trial_loop.thisTrialN'
p4840
I84
sg3633
g3688
sS'block_loop.thisIndex'
p4841
g3627
sg38
S'left'
p4842
sg59
g63
sS'trial_loop.thisN'
p4843
I84
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p4844
g60
(g99
S'T\x00\x00\x00'
tRp4845
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4846
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4847
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4848
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4849
Nsg70
Vn
sS'block_loop.thisTrialN'
p4850
I0
sg39
F0.70002377729451837
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x14\x06\x05C\xa8'
tRp4851
sa(dp4852
S'trial_loop.thisTrialN'
p4853
I85
sg3633
g4002
sS'block_loop.thisIndex'
p4854
g3627
sg38
S'left'
p4855
sg59
g63
sS'trial_loop.thisN'
p4856
I85
sg33
g4006
sg64
g65
sS'trial_loop.thisIndex'
p4857
g60
(g99
S'U\x00\x00\x00'
tRp4858
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4859
I0
sg3642
g4010
sS'block_loop.thisRepN'
p4860
I1
sg3645
g4006
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4861
I1
sg3647
g4013
sg55
g11
sS'block_loop.thisTrial'
p4862
Nsg70
Vn
sS'block_loop.thisTrialN'
p4863
I0
sg39
F1.2333481965179089
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x14\x0c\x01\x11p'
tRp4864
sa(dp4865
S'trial_loop.thisTrialN'
p4866
I86
sg3633
S'22-daim.png'
p4867
sS'block_loop.thisIndex'
p4868
g3627
sg38
S'right'
p4869
sg59
g63
sS'trial_loop.thisN'
p4870
I86
sg33
S'7-olives.png'
p4871
sg64
g65
sS'trial_loop.thisIndex'
p4872
g60
(g99
S'V\x00\x00\x00'
tRp4873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4874
I0
sg3642
S'7-olives.png'
p4875
sS'block_loop.thisRepN'
p4876
I1
sg3645
g4871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4877
I1
sg3647
S'22-daim.png'
p4878
sg55
g11
sS'block_loop.thisTrial'
p4879
Nsg70
Vn
sS'block_loop.thisTrialN'
p4880
I0
sg39
F0.86666868136944686
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x14\x12\x054\x08'
tRp4881
sa(dp4882
S'trial_loop.thisTrialN'
p4883
I87
sg3633
g4357
sS'block_loop.thisIndex'
p4884
g3627
sg38
S'right'
p4885
sg59
g63
sS'trial_loop.thisN'
p4886
I87
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p4887
g60
(g99
S'W\x00\x00\x00'
tRp4888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4889
I0
sg3642
g4364
sS'block_loop.thisRepN'
p4890
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4891
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p4892
Nsg70
Vn
sS'block_loop.thisTrialN'
p4893
I0
sg39
F0.76664980778605241
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x14\x18\x03\xa1\xb0'
tRp4894
sa(dp4895
S'trial_loop.thisTrialN'
p4896
I88
sg3633
g3735
sS'block_loop.thisIndex'
p4897
g3627
sg38
S'left'
p4898
sg59
g63
sS'trial_loop.thisN'
p4899
I88
sg33
g3746
sg64
g65
sS'trial_loop.thisIndex'
p4900
g60
(g99
S'X\x00\x00\x00'
tRp4901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4902
I0
sg3642
g3743
sS'block_loop.thisRepN'
p4903
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4904
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p4905
Nsg70
Vn
sS'block_loop.thisTrialN'
p4906
I0
sg39
F0.76657682232689695
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x14\x1e\x00\xa0('
tRp4907
sa(dp4908
S'trial_loop.thisTrialN'
p4909
I89
sg3633
S'21-nakd_banana_crunch.png'
p4910
sS'block_loop.thisIndex'
p4911
g3627
sg38
S'left'
p4912
sg59
g63
sS'trial_loop.thisN'
p4913
I89
sg33
g3953
sg64
g65
sS'trial_loop.thisIndex'
p4914
g60
(g99
S'Y\x00\x00\x00'
tRp4915
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4916
I0
sg3642
S'1-treacle_cookies.png'
p4917
sS'block_loop.thisRepN'
p4918
I1
sg3645
g3946
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4919
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p4920
Nsg70
Vn
sS'block_loop.thisTrialN'
p4921
I0
sg39
F0.75003934372398362
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x14#\x0c\xe0\xe0'
tRp4922
sa(dp4923
S'trial_loop.thisTrialN'
p4924
I90
sg3633
g4681
sS'block_loop.thisIndex'
p4925
g3627
sg38
S'right'
p4926
sg59
g63
sS'trial_loop.thisN'
p4927
I90
sg33
g3989
sg64
g65
sS'trial_loop.thisIndex'
p4928
g60
(g99
S'Z\x00\x00\x00'
tRp4929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4930
I0
sg3642
g4688
sS'block_loop.thisRepN'
p4931
I1
sg3645
g3995
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4932
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p4933
Nsg70
Vn
sS'block_loop.thisTrialN'
p4934
I0
sg39
F0.68321374361767084
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x14)\tf@'
tRp4935
sa(dp4936
S'trial_loop.thisTrialN'
p4937
I91
sg3633
g4910
sS'block_loop.thisIndex'
p4938
g3627
sg38
S'left'
p4939
sg59
g63
sS'trial_loop.thisN'
p4940
I91
sg33
g3946
sg64
g65
sS'trial_loop.thisIndex'
p4941
g60
(g99
S'[\x00\x00\x00'
tRp4942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4943
I0
sg3642
g4917
sS'block_loop.thisRepN'
p4944
I1
sg3645
g3946
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4945
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p4946
Nsg70
Vn
sS'block_loop.thisTrialN'
p4947
I0
sg39
F0.699819646089054
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x14/\x057\xf0'
tRp4948
sa(dp4949
S'trial_loop.thisTrialN'
p4950
I92
sg3633
g4077
sS'block_loop.thisIndex'
p4951
g3627
sg38
S'right'
p4952
sg59
g63
sS'trial_loop.thisN'
p4953
I92
sg33
g4081
sg64
g65
sS'trial_loop.thisIndex'
p4954
g60
(g99
S'\\\x00\x00\x00'
tRp4955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4956
I0
sg3642
g4085
sS'block_loop.thisRepN'
p4957
I1
sg3645
g4087
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4958
I1
sg3647
g4081
sg55
g11
sS'block_loop.thisTrial'
p4959
Nsg70
Vn
sS'block_loop.thisTrialN'
p4960
I0
sg39
F0.73364527014291525
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x145\x01\x05\xb8'
tRp4961
sa(dp4962
S'trial_loop.thisTrialN'
p4963
I93
sg3633
g4910
sS'block_loop.thisIndex'
p4964
g3627
sg38
S'left'
p4965
sg59
g63
sS'trial_loop.thisN'
p4966
I93
sg33
g3946
sg64
g65
sS'trial_loop.thisIndex'
p4967
g60
(g99
S']\x00\x00\x00'
tRp4968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4969
I0
sg3642
g4917
sS'block_loop.thisRepN'
p4970
I1
sg3645
g3946
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4971
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p4972
Nsg70
Vn
sS'block_loop.thisTrialN'
p4973
I0
sg39
F0.59993733514056657
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x14:\x0c\xcdX'
tRp4974
sa(dp4975
S'trial_loop.thisTrialN'
p4976
I94
sg3633
g3833
sS'block_loop.thisIndex'
p4977
g3627
sg38
S'right'
p4978
sg59
g63
sS'trial_loop.thisN'
p4979
I94
sg33
g3844
sg64
g65
sS'trial_loop.thisIndex'
p4980
g60
(g99
S'^\x00\x00\x00'
tRp4981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4982
I0
sg3642
g3841
sS'block_loop.thisRepN'
p4983
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4984
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p4985
Nsg70
Vn
sS'block_loop.thisTrialN'
p4986
I0
sg39
F0.93307490018651151
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x15\x04\x07+\xf0'
tRp4987
sa(dp4988
S'trial_loop.thisTrialN'
p4989
I95
sg3633
g4249
sS'block_loop.thisIndex'
p4990
g3627
sg38
S'left'
p4991
sg59
g63
sS'trial_loop.thisN'
p4992
I95
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p4993
g60
(g99
S'_\x00\x00\x00'
tRp4994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4995
I0
sg3642
g4256
sS'block_loop.thisRepN'
p4996
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4997
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p4998
Nsg70
Vn
sS'block_loop.thisTrialN'
p4999
I0
sg39
F0.73328119814777892
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x15\n\x06\xcaH'
tRp5000
sa(dp5001
S'trial_loop.thisTrialN'
p5002
I96
sg3633
g3654
sS'block_loop.thisIndex'
p5003
g3627
sg38
S'right'
p5004
sg59
g63
sS'trial_loop.thisN'
p5005
I96
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5006
g60
(g99
S'`\x00\x00\x00'
tRp5007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5008
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5009
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5010
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5011
Nsg70
Vn
sS'block_loop.thisTrialN'
p5012
I0
sg39
F0.85001003550041787
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x15\x10\x03\x15\x10'
tRp5013
sa(dp5014
S'trial_loop.thisTrialN'
p5015
I97
sg3633
g4019
sS'block_loop.thisIndex'
p5016
g3627
sg38
S'right'
p5017
sg59
g63
sS'trial_loop.thisN'
p5018
I97
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5019
g60
(g99
S'a\x00\x00\x00'
tRp5020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5021
I0
sg3642
g4026
sS'block_loop.thisRepN'
p5022
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5023
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5024
Nsg70
Vn
sS'block_loop.thisTrialN'
p5025
I0
sg39
F0.73308961131806427
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x15\x16\x01D8'
tRp5026
sa(dp5027
S'trial_loop.thisTrialN'
p5028
I98
sg3633
g4426
sS'block_loop.thisIndex'
p5029
g3627
sg38
S'left'
p5030
sg59
g63
sS'trial_loop.thisN'
p5031
I98
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5032
g60
(g99
S'b\x00\x00\x00'
tRp5033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5034
I0
sg3642
g4433
sS'block_loop.thisRepN'
p5035
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5036
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5037
Nsg70
Vn
sS'block_loop.thisTrialN'
p5038
I0
sg39
F0.70037530491390498
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x15\x1b\r\x0b\xd8'
tRp5039
sa(dp5040
S'trial_loop.thisTrialN'
p5041
I99
sg3633
g4508
sS'block_loop.thisIndex'
p5042
g3627
sg38
S'left'
p5043
sg59
g63
sS'trial_loop.thisN'
p5044
I99
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p5045
g60
(g99
S'c\x00\x00\x00'
tRp5046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5047
I0
sg3642
g4515
sS'block_loop.thisRepN'
p5048
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5049
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p5050
Nsg70
Vn
sS'block_loop.thisTrialN'
p5051
I0
sg39
F0.89960279944898502
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x15!\t\x18 '
tRp5052
sa(dp5053
S'trial_loop.thisTrialN'
p5054
I100
sg3633
g3752
sS'block_loop.thisIndex'
p5055
g3627
sg38
S'left'
p5056
sg59
g63
sS'trial_loop.thisN'
p5057
I100
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p5058
g60
(g99
S'd\x00\x00\x00'
tRp5059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5060
I0
sg3642
g3760
sS'block_loop.thisRepN'
p5061
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5062
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p5063
Nsg70
Vn
sS'block_loop.thisTrialN'
p5064
I0
sg39
F0.90004270789722796
sg34
g753
(S"\x07\xdf\x07\x0b\x0b\x15'\x07\xfe\xe0"
tRp5065
sa(dp5066
S'trial_loop.thisTrialN'
p5067
I101
sg3633
g4249
sS'block_loop.thisIndex'
p5068
g3627
sg38
S'left'
p5069
sg59
g63
sS'trial_loop.thisN'
p5070
I101
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p5071
g60
(g99
S'e\x00\x00\x00'
tRp5072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5073
I0
sg3642
g4256
sS'block_loop.thisRepN'
p5074
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5075
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p5076
Nsg70
Vn
sS'block_loop.thisTrialN'
p5077
I0
sg39
F0.66665231666138425
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x15-\x06\xe5\xa0'
tRp5078
sa(dp5079
S'trial_loop.thisTrialN'
p5080
I102
sg3633
g4077
sS'block_loop.thisIndex'
p5081
g3627
sg38
S'right'
p5082
sg59
g63
sS'trial_loop.thisN'
p5083
I102
sg33
g4087
sg64
g65
sS'trial_loop.thisIndex'
p5084
g60
(g99
S'f\x00\x00\x00'
tRp5085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5086
I0
sg3642
g4085
sS'block_loop.thisRepN'
p5087
I1
sg3645
g4087
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5088
I1
sg3647
g4081
sg55
g11
sS'block_loop.thisTrial'
p5089
Nsg70
Vn
sS'block_loop.thisTrialN'
p5090
I0
sg39
F0.76658081371988374
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x153\x02t\xe8'
tRp5091
sa(dp5092
S'trial_loop.thisTrialN'
p5093
I103
sg3633
g3769
sS'block_loop.thisIndex'
p5094
g3627
sg38
S'left'
p5095
sg59
g63
sS'trial_loop.thisN'
p5096
I103
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p5097
g60
(g99
S'g\x00\x00\x00'
tRp5098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5099
I0
sg3642
g3776
sS'block_loop.thisRepN'
p5100
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5101
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p5102
Nsg70
Vn
sS'block_loop.thisTrialN'
p5103
I0
sg39
F0.71663908804657694
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x158\x0e{\x08'
tRp5104
sa(dp5105
S'trial_loop.thisTrialN'
p5106
I104
sg3633
g3671
sS'block_loop.thisIndex'
p5107
g3627
sg38
S'left'
p5108
sg59
g63
sS'trial_loop.thisN'
p5109
I104
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5110
g60
(g99
S'h\x00\x00\x00'
tRp5111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5112
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5113
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5114
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5115
Nsg70
Vn
sS'block_loop.thisTrialN'
p5116
I0
sg39
F0.68375571766955545
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x16\x02\n\xc1\xe8'
tRp5117
sa(dp5118
S'trial_loop.thisTrialN'
p5119
I105
sg3633
g3688
sS'block_loop.thisIndex'
p5120
g3627
sg38
S'left'
p5121
sg59
g63
sS'trial_loop.thisN'
p5122
I105
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p5123
g60
(g99
S'i\x00\x00\x00'
tRp5124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5125
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5126
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5127
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p5128
Nsg70
Vn
sS'block_loop.thisTrialN'
p5129
I0
sg39
F0.84993819043938856
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x16\x08\x06U\x18'
tRp5130
sa(dp5131
S'trial_loop.thisTrialN'
p5132
I106
sg3633
g4077
sS'block_loop.thisIndex'
p5133
g3627
sg38
S'right'
p5134
sg59
g63
sS'trial_loop.thisN'
p5135
I106
sg33
g4087
sg64
g65
sS'trial_loop.thisIndex'
p5136
g60
(g99
S'j\x00\x00\x00'
tRp5137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5138
I0
sg3642
g4085
sS'block_loop.thisRepN'
p5139
I1
sg3645
g4087
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5140
I1
sg3647
g4081
sg55
g11
sS'block_loop.thisTrial'
p5141
Nsg70
Vn
sS'block_loop.thisTrialN'
p5142
I0
sg39
F0.66667056302594574
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x16\x0e\x04\xc2\xc0'
tRp5143
sa(dp5144
S'trial_loop.thisTrialN'
p5145
I107
sg3633
g4426
sS'block_loop.thisIndex'
p5146
g3627
sg38
S'left'
p5147
sg59
g63
sS'trial_loop.thisN'
p5148
I107
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5149
g60
(g99
S'k\x00\x00\x00'
tRp5150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5151
I0
sg3642
g4433
sS'block_loop.thisRepN'
p5152
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5153
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5154
Nsg70
Vn
sS'block_loop.thisTrialN'
p5155
I0
sg39
F0.80001955782245204
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x16\x14\x00\x17p'
tRp5156
sa(dp5157
S'trial_loop.thisTrialN'
p5158
I108
sg3633
g4342
sS'block_loop.thisIndex'
p5159
g3627
sg38
S'right'
p5160
sg59
g63
sS'trial_loop.thisN'
p5161
I108
sg33
g4243
sg64
g65
sS'trial_loop.thisIndex'
p5162
g60
(g99
S'l\x00\x00\x00'
tRp5163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5164
I0
sg3642
g4349
sS'block_loop.thisRepN'
p5165
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5166
I1
sg3647
g4243
sg55
g11
sS'block_loop.thisTrial'
p5167
Nsg70
Vn
sS'block_loop.thisTrialN'
p5168
I0
sg39
F0.96652276747136057
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x16\x19\x0c\xd1@'
tRp5169
sa(dp5170
S'trial_loop.thisTrialN'
p5171
I109
sg3633
g4002
sS'block_loop.thisIndex'
p5172
g3627
sg38
S'left'
p5173
sg59
g63
sS'trial_loop.thisN'
p5174
I109
sg33
g4006
sg64
g65
sS'trial_loop.thisIndex'
p5175
g60
(g99
S'm\x00\x00\x00'
tRp5176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5177
I0
sg3642
g4010
sS'block_loop.thisRepN'
p5178
I1
sg3645
g4006
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5179
I1
sg3647
g4013
sg55
g11
sS'block_loop.thisTrial'
p5180
Nsg70
Vn
sS'block_loop.thisTrialN'
p5181
I0
sg39
F0.66653200469409057
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x16\x1f\x0c\xe8\xb0'
tRp5182
sa(dp5183
S'trial_loop.thisTrialN'
p5184
I110
sg3633
g4508
sS'block_loop.thisIndex'
p5185
g3627
sg38
S'left'
p5186
sg59
g63
sS'trial_loop.thisN'
p5187
I110
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p5188
g60
(g99
S'n\x00\x00\x00'
tRp5189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5190
I0
sg3642
g4515
sS'block_loop.thisRepN'
p5191
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5192
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p5193
Nsg70
Vn
sS'block_loop.thisTrialN'
p5194
I0
sg39
F1.183106261125431
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x16%\x08=`'
tRp5195
sa(dp5196
S'trial_loop.thisTrialN'
p5197
I111
sg3633
g4135
sS'block_loop.thisIndex'
p5198
g3627
sg38
S'right'
p5199
sg59
g63
sS'trial_loop.thisN'
p5200
I111
sg33
g4006
sg64
g65
sS'trial_loop.thisIndex'
p5201
g60
(g99
S'o\x00\x00\x00'
tRp5202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5203
I0
sg3642
g4142
sS'block_loop.thisRepN'
p5204
I1
sg3645
g4006
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5205
I1
sg3647
g4013
sg55
g11
sS'block_loop.thisTrial'
p5206
Nsg70
Vn
sS'block_loop.thisTrialN'
p5207
I0
sg39
F0.79986617431859486
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x16+\x0bm\xc8'
tRp5208
sa(dp5209
S'trial_loop.thisTrialN'
p5210
I112
sg3633
g4019
sS'block_loop.thisIndex'
p5211
g3627
sg38
S'right'
p5212
sg59
g63
sS'trial_loop.thisN'
p5213
I112
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5214
g60
(g99
S'p\x00\x00\x00'
tRp5215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5216
I0
sg3642
g4026
sS'block_loop.thisRepN'
p5217
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5218
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5219
Nsg70
Vn
sS'block_loop.thisTrialN'
p5220
I0
sg39
F0.73317856234643841
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x161\x08\xe5X'
tRp5221
sa(dp5222
S'trial_loop.thisTrialN'
p5223
I113
sg3633
g4002
sS'block_loop.thisIndex'
p5224
g3627
sg38
S'left'
p5225
sg59
g63
sS'trial_loop.thisN'
p5226
I113
sg33
g4006
sg64
g65
sS'trial_loop.thisIndex'
p5227
g60
(g99
S'q\x00\x00\x00'
tRp5228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5229
I0
sg3642
g4010
sS'block_loop.thisRepN'
p5230
I1
sg3645
g4006
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5231
I1
sg3647
g4013
sg55
g11
sS'block_loop.thisTrial'
p5232
Nsg70
Vn
sS'block_loop.thisTrialN'
p5233
I0
sg39
F0.73331198888809013
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x167\x05j\xb8'
tRp5234
sa(dp5235
S'trial_loop.thisTrialN'
p5236
I114
sg3633
g4910
sS'block_loop.thisIndex'
p5237
g3627
sg38
S'left'
p5238
sg59
g63
sS'trial_loop.thisN'
p5239
I114
sg33
g3946
sg64
g65
sS'trial_loop.thisIndex'
p5240
g60
(g99
S'r\x00\x00\x00'
tRp5241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5242
I0
sg3642
g4917
sS'block_loop.thisRepN'
p5243
I1
sg3645
g3946
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5244
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p5245
Nsg70
Vn
sS'block_loop.thisTrialN'
p5246
I0
sg39
F0.69994195375238633
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x17\x01\x01\xf0\x18'
tRp5247
sa(dp5248
S'trial_loop.thisTrialN'
p5249
I115
sg3633
g3850
sS'block_loop.thisIndex'
p5250
g3627
sg38
S'right'
p5251
sg59
g63
sS'trial_loop.thisN'
p5252
I115
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5253
g60
(g99
S's\x00\x00\x00'
tRp5254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5255
I0
sg3642
g3858
sS'block_loop.thisRepN'
p5256
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5257
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5258
Nsg70
Vn
sS'block_loop.thisTrialN'
p5259
I0
sg39
F1.1332480695919003
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x17\x06\r\x04\x08'
tRp5260
sa(dp5261
S'trial_loop.thisTrialN'
p5262
I116
sg3633
g3867
sS'block_loop.thisIndex'
p5263
g3627
sg38
S'right'
p5264
sg59
g63
sS'trial_loop.thisN'
p5265
I116
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p5266
g60
(g99
S't\x00\x00\x00'
tRp5267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5268
I0
sg3642
g3874
sS'block_loop.thisRepN'
p5269
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5270
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p5271
Nsg70
Vn
sS'block_loop.thisTrialN'
p5272
I0
sg39
F0.71686631230659259
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x17\r\x00:\x98'
tRp5273
sa(dp5274
S'trial_loop.thisTrialN'
p5275
I117
sg3633
g3985
sS'block_loop.thisIndex'
p5276
g3627
sg38
S'left'
p5277
sg59
g63
sS'trial_loop.thisN'
p5278
I117
sg33
g3989
sg64
g65
sS'trial_loop.thisIndex'
p5279
g60
(g99
S'u\x00\x00\x00'
tRp5280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5281
I0
sg3642
g3993
sS'block_loop.thisRepN'
p5282
I1
sg3645
g3995
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5283
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p5284
Nsg70
Vn
sS'block_loop.thisTrialN'
p5285
I0
sg39
F0.74995267349095229
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x17\x12\x0b\xc3\xb8'
tRp5286
sa(dp5287
S'trial_loop.thisTrialN'
p5288
I118
sg3633
S'7-olives.png'
p5289
sS'block_loop.thisIndex'
p5290
g3627
sg38
S'left'
p5291
sg59
g63
sS'trial_loop.thisN'
p5292
I118
sg33
g4871
sg64
g65
sS'trial_loop.thisIndex'
p5293
g60
(g99
S'v\x00\x00\x00'
tRp5294
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5295
I0
sg3642
S'22-daim.png'
p5296
sS'block_loop.thisRepN'
p5297
I1
sg3645
g4871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5298
I1
sg3647
g4878
sg55
g11
sS'block_loop.thisTrial'
p5299
Nsg70
Vn
sS'block_loop.thisTrialN'
p5300
I0
sg39
F0.8500106056990262
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x17\x18\x08\x87\x98'
tRp5301
sa(dp5302
S'trial_loop.thisTrialN'
p5303
I119
sg3633
g4426
sS'block_loop.thisIndex'
p5304
g3627
sg38
S'left'
p5305
sg59
g63
sS'trial_loop.thisN'
p5306
I119
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5307
g60
(g99
S'w\x00\x00\x00'
tRp5308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5309
I0
sg3642
g4433
sS'block_loop.thisRepN'
p5310
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5311
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5312
Nsg70
Vn
sS'block_loop.thisTrialN'
p5313
I0
sg39
F0.88323666561336722
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x17\x1e\x06\xb6\xc0'
tRp5314
sa(dp5315
S'trial_loop.thisTrialN'
p5316
I120
sg3633
g3784
sS'block_loop.thisIndex'
p5317
g3627
sg38
S'left'
p5318
sg59
g63
sS'trial_loop.thisN'
p5319
I120
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5320
g60
(g99
S'x\x00\x00\x00'
tRp5321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5322
I0
sg3642
g3791
sS'block_loop.thisRepN'
p5323
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5324
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5325
Nsg70
Vn
sS'block_loop.thisTrialN'
p5326
I0
sg39
F1.0667115603264392
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x17$\x05_\x00'
tRp5327
sa(dp5328
S'trial_loop.thisTrialN'
p5329
I121
sg3633
g4508
sS'block_loop.thisIndex'
p5330
g3627
sg38
S'left'
p5331
sg59
g63
sS'trial_loop.thisN'
p5332
I121
sg33
g3844
sg64
g65
sS'trial_loop.thisIndex'
p5333
g60
(g99
S'y\x00\x00\x00'
tRp5334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5335
I0
sg3642
g4515
sS'block_loop.thisRepN'
p5336
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5337
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p5338
Nsg70
Vn
sS'block_loop.thisTrialN'
p5339
I0
sg39
F0.8830755844255691
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x17*\x06\xe5\xa0'
tRp5340
sa(dp5341
S'trial_loop.thisTrialN'
p5342
I122
sg3633
g4357
sS'block_loop.thisIndex'
p5343
g3627
sg38
S'right'
p5344
sg59
g63
sS'trial_loop.thisN'
p5345
I122
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p5346
g60
(g99
S'z\x00\x00\x00'
tRp5347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5348
I0
sg3642
g4364
sS'block_loop.thisRepN'
p5349
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5350
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p5351
Nsg70
Vn
sS'block_loop.thisTrialN'
p5352
I0
sg39
F0.78372697964459803
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x170\x05\x8d\xe0'
tRp5353
sa(dp5354
S'trial_loop.thisTrialN'
p5355
I123
sg3633
g4094
sS'block_loop.thisIndex'
p5356
g3627
sg38
S'right'
p5357
sg59
g63
sS'trial_loop.thisN'
p5358
I123
sg33
g3923
sg64
g65
sS'trial_loop.thisIndex'
p5359
g60
(g99
S'{\x00\x00\x00'
tRp5360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5361
I0
sg3642
g4101
sS'block_loop.thisRepN'
p5362
I1
sg3645
g3916
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5363
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p5364
Nsg70
Vn
sS'block_loop.thisTrialN'
p5365
I0
sg39
F0.64993579560450598
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x176\x02\xca\xd8'
tRp5366
sa(dp5367
S'trial_loop.thisTrialN'
p5368
I124
sg3633
g4249
sS'block_loop.thisIndex'
p5369
g3627
sg38
S'left'
p5370
sg59
g63
sS'trial_loop.thisN'
p5371
I124
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p5372
g60
(g99
S'|\x00\x00\x00'
tRp5373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5374
I0
sg3642
g4256
sS'block_loop.thisRepN'
p5375
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5376
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p5377
Nsg70
Vn
sS'block_loop.thisTrialN'
p5378
I0
sg39
F0.68333804697795131
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x17;\ra\xc8'
tRp5379
sa(dp5380
S'trial_loop.thisTrialN'
p5381
I125
sg3633
g3688
sS'block_loop.thisIndex'
p5382
g3627
sg38
S'left'
p5383
sg59
g63
sS'trial_loop.thisN'
p5384
I125
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5385
g60
(g99
S'}\x00\x00\x00'
tRp5386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5387
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5388
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5389
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p5390
Nsg70
Vn
sS'block_loop.thisTrialN'
p5391
I0
sg39
F0.81666851030968246
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x18\x05\x08\xf4\xf8'
tRp5392
sa(dp5393
S'trial_loop.thisTrialN'
p5394
I126
sg3633
g4441
sS'block_loop.thisIndex'
p5395
g3627
sg38
S'left'
p5396
sg59
g63
sS'trial_loop.thisN'
p5397
I126
sg33
g4087
sg64
g65
sS'trial_loop.thisIndex'
p5398
g60
(g99
S'~\x00\x00\x00'
tRp5399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5400
I0
sg3642
g4448
sS'block_loop.thisRepN'
p5401
I1
sg3645
g4087
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5402
I1
sg3647
g4081
sg55
g11
sS'block_loop.thisTrial'
p5403
Nsg70
Vn
sS'block_loop.thisTrialN'
p5404
I0
sg39
F0.75002908014357672
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x18\x0b\x06\xab\x08'
tRp5405
sa(dp5406
S'trial_loop.thisTrialN'
p5407
I127
sg3633
g4588
sS'block_loop.thisIndex'
p5408
g3627
sg38
S'left'
p5409
sg59
g63
sS'trial_loop.thisN'
p5410
I127
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5411
g60
(g99
S'\x7f\x00\x00\x00'
tRp5412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5413
I0
sg3642
g4595
sS'block_loop.thisRepN'
p5414
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5415
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5416
Nsg70
Vn
sS'block_loop.thisTrialN'
p5417
I0
sg39
F0.81667649309474655
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x18\x11\x03k\x00'
tRp5418
sa(dp5419
S'trial_loop.thisTrialN'
p5420
I128
sg3633
g4787
sS'block_loop.thisIndex'
p5421
g3627
sg38
S'left'
p5422
sg59
g63
sS'trial_loop.thisN'
p5423
I128
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p5424
g60
(g99
S'\x80\x00\x00\x00'
tRp5425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5426
I0
sg3642
g4794
sS'block_loop.thisRepN'
p5427
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5428
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p5429
Nsg70
Vn
sS'block_loop.thisTrialN'
p5430
I0
sg39
F0.78360809317564417
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x18\x17\x01!\x10'
tRp5431
sa(dp5432
S'trial_loop.thisTrialN'
p5433
I129
sg3633
g4508
sS'block_loop.thisIndex'
p5434
g3627
sg38
S'left'
p5435
sg59
g63
sS'trial_loop.thisN'
p5436
I129
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p5437
g60
(g99
S'\x81\x00\x00\x00'
tRp5438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5439
I0
sg3642
g4515
sS'block_loop.thisRepN'
p5440
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5441
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vn
sS'block_loop.thisTrialN'
p5443
I0
sg39
F0.7830136608254179
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x18\x1c\r\xa0H'
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g3867
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'right'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g3874
sS'block_loop.thisRepN'
p5453
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5454
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vn
sS'block_loop.thisTrialN'
p5456
I0
sg39
F0.68337510990568262
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x18"\n\x9e\xc0'
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g4867
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'right'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g4871
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g4875
sS'block_loop.thisRepN'
p5466
I1
sg3645
g4871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5467
I1
sg3647
g4878
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vn
sS'block_loop.thisTrialN'
p5469
I0
sg39
F0.83330890981414996
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x18(\x06pp'
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g4385
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'right'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g4392
sS'block_loop.thisRepN'
p5479
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5480
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vn
sS'block_loop.thisTrialN'
p5482
I0
sg39
F0.9166645759369203
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x18.\x04a\x18'
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g3718
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'right'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g3726
sS'block_loop.thisRepN'
p5492
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5493
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vn
sS'block_loop.thisTrialN'
p5495
I0
sg39
F0.76664153990168415
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x184\x03\x86X'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g4034
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'right'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g4041
sS'block_loop.thisRepN'
p5505
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5506
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vn
sS'block_loop.thisTrialN'
p5508
I0
sg39
F0.96696923320814676
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x18:\x00\x84\xd0'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g3799
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'right'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g3807
sS'block_loop.thisRepN'
p5518
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5519
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vn
sS'block_loop.thisTrialN'
p5521
I0
sg39
F0.79993117699268623
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x19\x04\x00\x9c@'
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g4019
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'right'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g4026
sS'block_loop.thisRepN'
p5531
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5532
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vn
sS'block_loop.thisTrialN'
p5534
I0
sg39
F0.63333502492332627
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x19\t\rV\x10'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g4232
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'left'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g4236
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g4240
sS'block_loop.thisRepN'
p5544
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5545
I1
sg3647
g4243
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vn
sS'block_loop.thisTrialN'
p5547
I0
sg39
F1.0166002004816619
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x19\x0f\x081\xa8'
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g4163
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'right'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g4171
sS'block_loop.thisRepN'
p5557
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5558
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vn
sS'block_loop.thisTrialN'
p5560
I0
sg39
F0.75000655728763377
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x19\x15\t\x00\xb0'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g4062
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'right'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g4069
sS'block_loop.thisRepN'
p5570
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5571
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vn
sS'block_loop.thisTrialN'
p5573
I0
sg39
F0.70005171703996893
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x19\x1b\x05\xc4\x90'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g4787
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'left'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g4794
sS'block_loop.thisRepN'
p5583
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vn
sS'block_loop.thisTrialN'
p5586
I0
sg39
F0.86701393680141337
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x19!\x01\x92X'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g4135
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'right'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g4006
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g4142
sS'block_loop.thisRepN'
p5596
I1
sg3645
g4006
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3647
g4013
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vn
sS'block_loop.thisTrialN'
p5599
I0
sg39
F0.88332932293451449
sg34
g753
(S"\x07\xdf\x07\x0b\x0b\x19'\x00\x00\x00"
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g5289
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'left'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g4871
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g5296
sS'block_loop.thisRepN'
p5609
I1
sg3645
g4871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3647
g4878
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vn
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.76662899552593444
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x19,\x0e)\x00'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g3895
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'left'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g3903
sS'block_loop.thisRepN'
p5622
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vn
sS'block_loop.thisTrialN'
p5625
I0
sg39
F1.0998483841131019
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x192\n\xe8\xf8'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g4062
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'right'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g4069
sS'block_loop.thisRepN'
p5635
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vn
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.71668356355985452
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x198\x0c\xe8\xb0'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g4681
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'right'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g3995
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g4688
sS'block_loop.thisRepN'
p5648
I1
sg3645
g3995
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vn
sS'block_loop.thisTrialN'
p5651
I0
sg39
F0.66670306436299143
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1a\x02\t3x'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g3816
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'left'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g3824
sS'block_loop.thisRepN'
p5661
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vn
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.81681020473570243
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1a\x08\x04\x88('
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g3833
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'right'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g3841
sS'block_loop.thisRepN'
p5674
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vn
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.83296365438218345
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1a\x0e\x02>8'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g3985
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'left'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g3995
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g3993
sS'block_loop.thisRepN'
p5687
I1
sg3645
g3995
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vn
sS'block_loop.thisTrialN'
p5690
I0
sg39
F0.70001237331598531
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1a\x14\x00.\xe0'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g4588
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'left'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g4595
sS'block_loop.thisRepN'
p5700
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vn
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.88334044181283389
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1a\x19\x0b}h'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g4034
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'right'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g4041
sS'block_loop.thisRepN'
p5713
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g3899
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vn
sS'block_loop.thisTrialN'
p5716
I0
sg39
F0.71655298801397294
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1a\x1f\n%\xa8'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g4681
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'right'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3995
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g4688
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3995
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vn
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.66659985836304259
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1a%\x06pp'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g4019
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'right'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g4026
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vn
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.70035335225657036
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1a+\x01\xc5 '
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g4910
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'left'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g3946
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g4917
sS'block_loop.thisRepN'
p5752
I1
sg3645
g3946
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vn
sS'block_loop.thisTrialN'
p5755
I0
sg39
F0.63334870969720214
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1a0\r\x13\xa8'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g4232
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'left'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g4236
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g4240
sS'block_loop.thisRepN'
p5765
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g4243
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vn
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.91651318813001126
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1a6\x07\xebX'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g4385
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g4392
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vn
sS'block_loop.thisTrialN'
p5781
I0
sg39
F1.1666751246175409
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1b\x00\x07\x10\x98'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g3942
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'right'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g3946
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g3950
sS'block_loop.thisRepN'
p5791
I1
sg3645
g3946
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vn
sS'block_loop.thisTrialN'
p5794
I0
sg39
F0.6333877683209721
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1b\x06\nA\x00'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g4163
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'right'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g4174
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g4171
sS'block_loop.thisRepN'
p5804
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vn
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.78335920135668857
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1b\x0c\x05\x1c\x98'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g3816
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'left'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g3824
sS'block_loop.thisRepN'
p5817
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vn
sS'block_loop.thisTrialN'
p5820
I0
sg39
F0.93371437824953318
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1b\x12\x02U\xa8'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g4441
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'left'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g4087
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g4448
sS'block_loop.thisRepN'
p5830
I1
sg3645
g4087
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g4081
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vn
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.80000986444065347
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1b\x18\x01\xb9h'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g3912
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'left'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g3920
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3916
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vn
sS'block_loop.thisTrialN'
p5846
I0
sg39
F0.75000085529791249
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1b\x1d\x0es8'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g4002
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'left'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g4006
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g4010
sS'block_loop.thisRepN'
p5856
I1
sg3645
g4006
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g4013
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vn
sS'block_loop.thisTrialN'
p5859
I0
sg39
F0.83334141115119564
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1b#\x0b7\x18'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g4232
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'left'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g4236
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g4240
sS'block_loop.thisRepN'
p5869
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g4243
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vn
sS'block_loop.thisTrialN'
p5872
I0
sg39
F0.81670500303880544
sg34
g753
(S"\x07\xdf\x07\x0b\x0b\x1b)\t'\xc0"
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g3718
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'right'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3729
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g3726
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vn
sS'block_loop.thisTrialN'
p5885
I0
sg39
F1.0665099950165313
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1b/\x06\xdd\xd0'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g3654
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'right'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vn
sS'block_loop.thisTrialN'
p5898
I0
sg39
F1.1833186602152637
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1b5\x08dp'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g3784
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'left'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g3791
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vn
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.75002223775663879
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1b;\x0b\xcfp'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g3752
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'left'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g3760
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vn
sS'block_loop.thisTrialN'
p5924
I0
sg39
F0.79991264552882058
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1c\x05\x08T\xd0'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g4867
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'right'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g4871
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g4875
sS'block_loop.thisRepN'
p5934
I1
sg3645
g4871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g4878
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vn
sS'block_loop.thisTrialN'
p5937
I0
sg39
F1.1166327588389322
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1c\x0b\x05\xd0H'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g4135
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'right'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g4006
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g4142
sS'block_loop.thisRepN'
p5947
I1
sg3645
g4006
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g4013
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vn
sS'block_loop.thisTrialN'
p5950
I0
sg39
F0.68329300126515591
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1c\x11\x08I\x18'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g4867
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'right'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g4871
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g4875
sS'block_loop.thisRepN'
p5960
I1
sg3645
g4871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g4878
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vn
sS'block_loop.thisTrialN'
p5963
I0
sg39
F0.88375583170909522
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1c\x17\x03\xd8`'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g4135
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'right'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g4006
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g4142
sS'block_loop.thisRepN'
p5973
I1
sg3645
g4006
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g4013
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vn
sS'block_loop.thisTrialN'
p5976
I0
sg39
F0.59994759872097347
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1c\x1d\x02\x84\x88'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g3671
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'left'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vn
sS'block_loop.thisTrialN'
p5989
I0
sg39
F0.89995290157094132
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1c"\x0c%`'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g3799
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'right'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g3807
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vn
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.71669753343394405
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1c(\x0bJ\xa0'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g3912
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'left'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3923
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g3920
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3916
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vn
sS'block_loop.thisTrialN'
p6015
I0
sg39
F0.66669821767209214
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1c.\x07V\xe8'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4441
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'left'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g4087
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4448
sS'block_loop.thisRepN'
p6025
I1
sg3645
g4087
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g4081
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vn
sS'block_loop.thisTrialN'
p6028
I0
sg39
F0.68328273768474901
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1c4\x02\xe60'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g3688
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'left'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g3696
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vn
sS'block_loop.thisTrialN'
p6041
I0
sg39
F0.7835533540810502
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1c9\r\xbb\xa0'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g3735
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'left'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g3743
sS'block_loop.thisRepN'
p6051
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vn
sS'block_loop.thisTrialN'
p6054
I0
sg39
F0.75001140397762356
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1d\x03\n\xf8\x98'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g3769
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'left'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g3776
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vn
sS'block_loop.thisTrialN'
p6067
I0
sg39
F0.68338679898351984
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1d\t\x07\xb8\x90'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g4357
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'right'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g3762
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g4364
sS'block_loop.thisRepN'
p6077
I1
sg3645
g3762
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g3756
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vn
sS'block_loop.thisTrialN'
p6080
I0
sg39
F0.78336975003639964
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1d\x0f\x03K\xc0'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g4385
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'right'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g4392
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vn
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.86668949362956482
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1d\x15\x00\x88\xb8'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g5289
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'left'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g4871
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g5296
sS'block_loop.thisRepN'
p6103
I1
sg3645
g4871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g4878
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vn
sS'block_loop.thisTrialN'
p6106
I0
sg39
F0.76671880185222108
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1d\x1a\x0e8\xa0'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g4588
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'left'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g3861
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g4595
sS'block_loop.thisRepN'
p6116
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vn
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.75018559974068921
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1d \x0b7\x18'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g5289
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'left'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g4871
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g5296
sS'block_loop.thisRepN'
p6129
I1
sg3645
g4871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g4878
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vn
sS'block_loop.thisTrialN'
p6132
I0
sg39
F0.66662808320779732
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1d&\x07\xfa\xf8'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g4426
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'left'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g4433
sS'block_loop.thisRepN'
p6142
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vn
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.83327355748315313
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1d,\x03O\xa8'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g3671
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'left'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g3679
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vn
sS'block_loop.thisTrialN'
p6158
I0
sg39
F0.69995592362556636
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1d2\x01@P'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g3816
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'left'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g3824
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vn
sS'block_loop.thisTrialN'
p6171
I0
sg39
F0.68326563171831367
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1d7\x0c\x8e\xd8'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g4094
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'right'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3923
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g4101
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3916
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vn
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.68328273768474901
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1e\x01\x08"\x08'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g4232
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'left'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g4236
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g4240
sS'block_loop.thisRepN'
p6194
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g4243
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vn
sS'block_loop.thisTrialN'
p6197
I0
sg39
F0.70035734364864766
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1e\x07\x03\xef\xd0'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g5289
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'left'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g4871
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g5296
sS'block_loop.thisRepN'
p6207
I1
sg3645
g4871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g4878
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vn
sS'block_loop.thisTrialN'
p6210
I0
sg39
F0.73329887431373209
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1e\x0c\x0e\xff\xd8'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g3867
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'right'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g3874
sS'block_loop.thisRepN'
p6220
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g3746
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vn
sS'block_loop.thisTrialN'
p6223
I0
sg39
F0.6999342560675359
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1e\x12\x0b\x858'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g4094
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'right'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g4101
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3916
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vn
sS'block_loop.thisTrialN'
p6236
I0
sg39
F0.66655652324698167
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1e\x18\x07S\x00'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g4163
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'right'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g4171
sS'block_loop.thisRepN'
p6246
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vn
sS'block_loop.thisTrialN'
p6249
I0
sg39
F0.81664399175679137
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1e\x1e\x02\xe60'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g4787
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'left'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g4794
sS'block_loop.thisRepN'
p6259
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vn
sS'block_loop.thisTrialN'
p6262
I0
sg39
F0.99998916622098477
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1e$\x00\x9c@'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g4867
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'right'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g4871
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g4875
sS'block_loop.thisRepN'
p6272
I1
sg3645
g4871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g4878
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vn
sS'block_loop.thisTrialN'
p6275
I0
sg39
F0.68333148969031754
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1e*\x00\xeeH'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g4094
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'right'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g4101
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3916
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vn
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.66659330107540882
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1e/\x0c\x028'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g4342
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'right'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g4236
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g4349
sS'block_loop.thisRepN'
p6298
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g4243
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vn
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.73329260212540248
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1e5\x07V\xe8'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g4588
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'left'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g4595
sS'block_loop.thisRepN'
p6311
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vn
sS'block_loop.thisTrialN'
p6314
I0
sg39
F1.0833448323446646
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1e;\x03\xdcH'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4062
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'right'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4069
sS'block_loop.thisRepN'
p6324
I1
sg3645
g3698
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vn
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.86670317840253119
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1f\x05\x05\x9d\x80'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g3942
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'right'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g3953
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g3950
sS'block_loop.thisRepN'
p6337
I1
sg3645
g3946
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g3953
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vn
sS'block_loop.thisTrialN'
p6340
I0
sg39
F0.71662226717944577
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1f\x0b\x04\x0b('
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g3769
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'left'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g3722
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g3776
sS'block_loop.thisRepN'
p6350
I1
sg3645
g3722
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g3729
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vn
sS'block_loop.thisTrialN'
p6353
I0
sg39
F0.76667062004617037
sg34
g753
(S'\x07\xdf\x07\x0b\x0b\x1f\x11\x00R\x08'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F100.21516883019194
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vn
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vn
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'46-pistachios.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'right'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'46-pistachios.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'29-beans.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
S'29-beans.png'
p6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6385
I2
sS'img_wrong'
p6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vn
sS'block_loop.thisTrialN'
p6388
I0
sg39
F0.9832079275893193
sg34
g753
(S'\x07\xdf\x07\x0b\x0b!9\x0e\t\xc0'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'35-raisins.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'right'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'35-raisins.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'49-yorkie.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
S'49-yorkie.png'
p6402
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6403
I2
sg6386
g6396
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vn
sS'block_loop.thisTrialN'
p6405
I0
sg39
F0.94998015707824379
sg34
g753
(S'\x07\xdf\x07\x0b\x0b"\x03\x0e!0'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'18-mms.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'left'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'18-mms.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6419
I2
sg6386
S'43-mrporky_pork_crackles_redo.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vn
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.81659894604399597
sg34
g753
(S'\x07\xdf\x07\x0b\x0b"\t\r\xfa '
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'20-fruit_pastilles.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'left'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'20-fruit_pastilles.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'2-steamed_puddings.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6436
I2
sg6386
S'2-steamed_puddings.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vn
sS'block_loop.thisTrialN'
p6439
I0
sg39
F0.73337043427454773
sg34
g753
(S'\x07\xdf\x07\x0b\x0b"\x0f\x0b\xb00'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'36-fig_rolls.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'left'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
S'36-fig_rolls.png'
p6447
sg64
g65
sS'trial_loop.thisIndex'
p6448
g60
(g99
S'\x04\x00\x00\x00'
tRp6449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6450
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p6451
sS'block_loop.thisRepN'
p6452
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6453
I2
sg6386
S'34-hula_hoops_bbq_beef_redo.png'
p6454
sg55
g11
sS'block_loop.thisTrial'
p6455
Nsg70
Vn
sS'block_loop.thisTrialN'
p6456
I0
sg39
F0.80002554491056799
sg34
g753
(S'\x07\xdf\x07\x0b\x0b"\x15\x085\x90'
tRp6457
sa(dp6458
S'trial_loop.thisTrialN'
p6459
I5
sg6371
g6409
sS'block_loop.thisIndex'
p6460
g6365
sg38
S'left'
p6461
sg59
g63
sS'trial_loop.thisN'
p6462
I5
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6463
g60
(g99
S'\x05\x00\x00\x00'
tRp6464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6465
I0
sg6380
g6417
sS'block_loop.thisRepN'
p6466
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6467
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p6468
Nsg70
Vn
sS'block_loop.thisTrialN'
p6469
I0
sg39
F0.68372207593438361
sg34
g753
(S'\x07\xdf\x07\x0b\x0b"\x1b\x05\xb1\x08'
tRp6470
sa(dp6471
S'trial_loop.thisTrialN'
p6472
I6
sg6371
S'41-peanuts_redo.png'
p6473
sS'block_loop.thisIndex'
p6474
g6365
sg38
S'left'
p6475
sg59
g63
sS'trial_loop.thisN'
p6476
I6
sg33
S'45-chewy_nougat_redo.png'
p6477
sg64
g65
sS'trial_loop.thisIndex'
p6478
g60
(g99
S'\x06\x00\x00\x00'
tRp6479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6480
I0
sg6380
S'45-chewy_nougat_redo.png'
p6481
sS'block_loop.thisRepN'
p6482
I2
sg6383
S'41-peanuts_redo.png'
p6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6484
I2
sg6386
g6477
sg55
g11
sS'block_loop.thisTrial'
p6485
Nsg70
Vn
sS'block_loop.thisTrialN'
p6486
I0
sg39
F0.6832282836894592
sg34
g753
(S'\x07\xdf\x07\x0b\x0b"!\x01@P'
tRp6487
sa(dp6488
S'trial_loop.thisTrialN'
p6489
I7
sg6371
S'31-hobnobs.png'
p6490
sS'block_loop.thisIndex'
p6491
g6365
sg38
S'right'
p6492
sg59
g63
sS'trial_loop.thisN'
p6493
I7
sg33
S'31-hobnobs.png'
p6494
sg64
g65
sS'trial_loop.thisIndex'
p6495
g60
(g99
S'\x07\x00\x00\x00'
tRp6496
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6497
I0
sg6380
S'25-kitkat.png'
p6498
sS'block_loop.thisRepN'
p6499
I2
sg6383
S'25-kitkat.png'
p6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6501
I2
sg6386
g6494
sg55
g11
sS'block_loop.thisTrial'
p6502
Nsg70
Vn
sS'block_loop.thisTrialN'
p6503
I0
sg39
F0.76665607997347252
sg34
g753
(S'\x07\xdf\x07\x0b\x0b"&\x0c\x15\xc0'
tRp6504
sa(dp6505
S'trial_loop.thisTrialN'
p6506
I8
sg6371
S'10-bounty_redo.png'
p6507
sS'block_loop.thisIndex'
p6508
g6365
sg38
S'right'
p6509
sg59
g63
sS'trial_loop.thisN'
p6510
I8
sg33
S'4-corn.png'
p6511
sg64
g65
sS'trial_loop.thisIndex'
p6512
g60
(g99
S'\x08\x00\x00\x00'
tRp6513
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6514
I0
sg6380
S'4-corn.png'
p6515
sS'block_loop.thisRepN'
p6516
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6517
I2
sg6386
S'10-bounty_redo.png'
p6518
sg55
g11
sS'block_loop.thisTrial'
p6519
Nsg70
Vn
sS'block_loop.thisTrialN'
p6520
I0
sg39
F0.76668344952031475
sg34
g753
(S'\x07\xdf\x07\x0b\x0b",\t\x148'
tRp6521
sa(dp6522
S'trial_loop.thisTrialN'
p6523
I9
sg6371
S'42-mrkipling_lemon_slices.png'
p6524
sS'block_loop.thisIndex'
p6525
g6365
sg38
S'right'
p6526
sg59
g63
sS'trial_loop.thisN'
p6527
I9
sg33
S'42-mrkipling_lemon_slices.png'
p6528
sg64
g65
sS'trial_loop.thisIndex'
p6529
g60
(g99
S'\t\x00\x00\x00'
tRp6530
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6531
I0
sg6380
S'16-skips_prawn.png'
p6532
sS'block_loop.thisRepN'
p6533
I2
sg6383
S'16-skips_prawn.png'
p6534
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6535
I2
sg6386
g6528
sg55
g11
sS'block_loop.thisTrial'
p6536
Nsg70
Vn
sS'block_loop.thisTrialN'
p6537
I0
sg39
F0.79986474882116454
sg34
g753
(S'\x07\xdf\x07\x0b\x0b"2\x06\x12\xb0'
tRp6538
sa(dp6539
S'trial_loop.thisTrialN'
p6540
I10
sg6371
S'40-sardines.png'
p6541
sS'block_loop.thisIndex'
p6542
g6365
sg38
S'left'
p6543
sg59
g63
sS'trial_loop.thisN'
p6544
I10
sg33
S'40-sardines.png'
p6545
sg64
g65
sS'trial_loop.thisIndex'
p6546
g60
(g99
S'\n\x00\x00\x00'
tRp6547
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6548
I0
sg6380
S'5-pineapple.png'
p6549
sS'block_loop.thisRepN'
p6550
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6551
I2
sg6386
S'5-pineapple.png'
p6552
sg55
g11
sS'block_loop.thisTrial'
p6553
Nsg70
Vn
sS'block_loop.thisTrialN'
p6554
I0
sg39
F0.96661827578645898
sg34
g753
(S'\x07\xdf\x07\x0b\x0b"8\x03\x8e('
tRp6555
sa(dp6556
S'trial_loop.thisTrialN'
p6557
I11
sg6371
S'2-steamed_puddings.png'
p6558
sS'block_loop.thisIndex'
p6559
g6365
sg38
S'right'
p6560
sg59
g63
sS'trial_loop.thisN'
p6561
I11
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6562
g60
(g99
S'\x0b\x00\x00\x00'
tRp6563
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6564
I0
sg6380
S'20-fruit_pastilles.png'
p6565
sS'block_loop.thisRepN'
p6566
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6567
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p6568
Nsg70
Vn
sS'block_loop.thisTrialN'
p6569
I0
sg39
F0.66692715252975177
sg34
g753
(S'\x07\xdf\x07\x0b\x0b#\x02\x03\xa5\x98'
tRp6570
sa(dp6571
S'trial_loop.thisTrialN'
p6572
I12
sg6371
S'1-treacle_cookies.png'
p6573
sS'block_loop.thisIndex'
p6574
g6365
sg38
S'right'
p6575
sg59
g63
sS'trial_loop.thisN'
p6576
I12
sg33
S'21-nakd_banana_crunch.png'
p6577
sg64
g65
sS'trial_loop.thisIndex'
p6578
g60
(g99
S'\x0c\x00\x00\x00'
tRp6579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6580
I0
sg6380
S'21-nakd_banana_crunch.png'
p6581
sS'block_loop.thisRepN'
p6582
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6583
I2
sg6386
S'1-treacle_cookies.png'
p6584
sg55
g11
sS'block_loop.thisTrial'
p6585
Nsg70
Vn
sS'block_loop.thisTrialN'
p6586
I0
sg39
F0.73325639449558366
sg34
g753
(S'\x07\xdf\x07\x0b\x0b#\x07\x0e<\x88'
tRp6587
sa(dp6588
S'trial_loop.thisTrialN'
p6589
I13
sg6371
S'27-hartleys_raspberries_jelly.png'
p6590
sS'block_loop.thisIndex'
p6591
g6365
sg38
S'right'
p6592
sg59
g63
sS'trial_loop.thisN'
p6593
I13
sg33
S'51-mars.png'
p6594
sg64
g65
sS'trial_loop.thisIndex'
p6595
g60
(g99
S'\r\x00\x00\x00'
tRp6596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6597
I0
sg6380
S'51-mars.png'
p6598
sS'block_loop.thisRepN'
p6599
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6600
I2
sg6386
S'27-hartleys_raspberries_jelly.png'
p6601
sg55
g11
sS'block_loop.thisTrial'
p6602
Nsg70
Vn
sS'block_loop.thisTrialN'
p6603
I0
sg39
F0.68337853109915159
sg34
g753
(S'\x07\xdf\x07\x0b\x0b#\r\n\xc1\xe8'
tRp6604
sa(dp6605
S'trial_loop.thisTrialN'
p6606
I14
sg6371
S'6-sour_patch_kids.png'
p6607
sS'block_loop.thisIndex'
p6608
g6365
sg38
S'right'
p6609
sg59
g63
sS'trial_loop.thisN'
p6610
I14
sg33
S'38-maltesers.png'
p6611
sg64
g65
sS'trial_loop.thisIndex'
p6612
g60
(g99
S'\x0e\x00\x00\x00'
tRp6613
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6614
I0
sg6380
S'38-maltesers.png'
p6615
sS'block_loop.thisRepN'
p6616
I2
sg6383
g6611
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6617
I2
sg6386
S'6-sour_patch_kids.png'
p6618
sg55
g11
sS'block_loop.thisTrial'
p6619
Nsg70
Vn
sS'block_loop.thisTrialN'
p6620
I0
sg39
F0.8496644949691472
sg34
g753
(S'\x07\xdf\x07\x0b\x0b#\x13\x06Q0'
tRp6621
sa(dp6622
S'trial_loop.thisTrialN'
p6623
I15
sg6371
S'13-mccoys_steak_crisps.png'
p6624
sS'block_loop.thisIndex'
p6625
g6365
sg38
S'right'
p6626
sg59
g63
sS'trial_loop.thisN'
p6627
I15
sg33
S'3-ellas_strawberries_apples.png'
p6628
sg64
g65
sS'trial_loop.thisIndex'
p6629
g60
(g99
S'\x0f\x00\x00\x00'
tRp6630
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6631
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6632
sS'block_loop.thisRepN'
p6633
I2
sg6383
g6628
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6634
I2
sg6386
S'13-mccoys_steak_crisps.png'
p6635
sg55
g11
sS'block_loop.thisTrial'
p6636
Nsg70
Vn
sS'block_loop.thisTrialN'
p6637
I0
sg39
F0.71665847480835509
sg34
g753
(S'\x07\xdf\x07\x0b\x0b#\x19\x04\x84@'
tRp6638
sa(dp6639
S'trial_loop.thisTrialN'
p6640
I16
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p6641
sS'block_loop.thisIndex'
p6642
g6365
sg38
S'right'
p6643
sg59
g63
sS'trial_loop.thisN'
p6644
I16
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6645
g60
(g99
S'\x10\x00\x00\x00'
tRp6646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6647
I0
sg6380
S'36-fig_rolls.png'
p6648
sS'block_loop.thisRepN'
p6649
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6650
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p6651
Nsg70
Vn
sS'block_loop.thisTrialN'
p6652
I0
sg39
F0.83334711314000742
sg34
g753
(S'\x07\xdf\x07\x0b\x0b#\x1f\x00\xcb '
tRp6653
sa(dp6654
S'trial_loop.thisTrialN'
p6655
I17
sg6371
g6624
sS'block_loop.thisIndex'
p6656
g6365
sg38
S'right'
p6657
sg59
g63
sS'trial_loop.thisN'
p6658
I17
sg33
g6628
sg64
g65
sS'trial_loop.thisIndex'
p6659
g60
(g99
S'\x11\x00\x00\x00'
tRp6660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6661
I0
sg6380
g6632
sS'block_loop.thisRepN'
p6662
I2
sg6383
g6628
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6663
I2
sg6386
g6635
sg55
g11
sS'block_loop.thisTrial'
p6664
Nsg70
Vn
sS'block_loop.thisTrialN'
p6665
I0
sg39
F0.66704689429843711
sg34
g753
(S'\x07\xdf\x07\x0b\x0b#$\x0e\x01\xf0'
tRp6666
sa(dp6667
S'trial_loop.thisTrialN'
p6668
I18
sg6371
g6524
sS'block_loop.thisIndex'
p6669
g6365
sg38
S'right'
p6670
sg59
g63
sS'trial_loop.thisN'
p6671
I18
sg33
g6534
sg64
g65
sS'trial_loop.thisIndex'
p6672
g60
(g99
S'\x12\x00\x00\x00'
tRp6673
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6674
I0
sg6380
g6532
sS'block_loop.thisRepN'
p6675
I2
sg6383
g6534
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6676
I2
sg6386
g6528
sg55
g11
sS'block_loop.thisTrial'
p6677
Nsg70
Vn
sS'block_loop.thisTrialN'
p6678
I0
sg39
F0.68324795555236051
sg34
g753
(S'\x07\xdf\x07\x0b\x0b#*\tV\xa0'
tRp6679
sa(dp6680
S'trial_loop.thisTrialN'
p6681
I19
sg6371
g6372
sS'block_loop.thisIndex'
p6682
g6365
sg38
S'right'
p6683
sg59
g63
sS'trial_loop.thisN'
p6684
I19
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p6685
g60
(g99
S'\x13\x00\x00\x00'
tRp6686
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6687
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6688
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6689
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p6690
Nsg70
Vn
sS'block_loop.thisTrialN'
p6691
I0
sg39
F0.89992125553271762
sg34
g753
(S'\x07\xdf\x07\x0b\x0b#0\x05$h'
tRp6692
sa(dp6693
S'trial_loop.thisTrialN'
p6694
I20
sg6371
g6573
sS'block_loop.thisIndex'
p6695
g6365
sg38
S'right'
p6696
sg59
g63
sS'trial_loop.thisN'
p6697
I20
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p6698
g60
(g99
S'\x14\x00\x00\x00'
tRp6699
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6700
I0
sg6380
g6581
sS'block_loop.thisRepN'
p6701
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6702
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p6703
Nsg70
Vn
sS'block_loop.thisTrialN'
p6704
I0
sg39
F0.666644048777016
sg34
g753
(S'\x07\xdf\x07\x0b\x0b#6\x04\x0b('
tRp6705
sa(dp6706
S'trial_loop.thisTrialN'
p6707
I21
sg6371
S'48-twix.png'
p6708
sS'block_loop.thisIndex'
p6709
g6365
sg38
S'left'
p6710
sg59
g63
sS'trial_loop.thisN'
p6711
I21
sg33
S'48-twix.png'
p6712
sg64
g65
sS'trial_loop.thisIndex'
p6713
g60
(g99
S'\x15\x00\x00\x00'
tRp6714
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6715
I0
sg6380
S'50-polo.png'
p6716
sS'block_loop.thisRepN'
p6717
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6718
I2
sg6386
S'50-polo.png'
p6719
sg55
g11
sS'block_loop.thisTrial'
p6720
Nsg70
Vn
sS'block_loop.thisTrialN'
p6721
I0
sg39
F1.1333099361727363
sg34
g753
(S'\x07\xdf\x07\x0b\x0b#;\x0e\xa2\x18'
tRp6722
sa(dp6723
S'trial_loop.thisTrialN'
p6724
I22
sg6371
g6507
sS'block_loop.thisIndex'
p6725
g6365
sg38
S'right'
p6726
sg59
g63
sS'trial_loop.thisN'
p6727
I22
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p6728
g60
(g99
S'\x16\x00\x00\x00'
tRp6729
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6730
I0
sg6380
g6515
sS'block_loop.thisRepN'
p6731
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6732
I2
sg6386
g6518
sg55
g11
sS'block_loop.thisTrial'
p6733
Nsg70
Vn
sS'block_loop.thisTrialN'
p6734
I0
sg39
F0.73318797062711383
sg34
g753
(S'\x07\xdf\x07\x0b\x0b$\x06\x02\x13@'
tRp6735
sa(dp6736
S'trial_loop.thisTrialN'
p6737
I23
sg6371
S'22-daim.png'
p6738
sS'block_loop.thisIndex'
p6739
g6365
sg38
S'right'
p6740
sg59
g63
sS'trial_loop.thisN'
p6741
I23
sg33
S'7-olives.png'
p6742
sg64
g65
sS'trial_loop.thisIndex'
p6743
g60
(g99
S'\x17\x00\x00\x00'
tRp6744
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6745
I0
sg6380
S'7-olives.png'
p6746
sS'block_loop.thisRepN'
p6747
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6748
I2
sg6386
S'22-daim.png'
p6749
sg55
g11
sS'block_loop.thisTrial'
p6750
Nsg70
Vn
sS'block_loop.thisTrialN'
p6751
I0
sg39
F0.86656262437463738
sg34
g753
(S'\x07\xdf\x07\x0b\x0b$\x0b\r\xa0H'
tRp6752
sa(dp6753
S'trial_loop.thisTrialN'
p6754
I24
sg6371
S'45-chewy_nougat_redo.png'
p6755
sS'block_loop.thisIndex'
p6756
g6365
sg38
S'right'
p6757
sg59
g63
sS'trial_loop.thisN'
p6758
I24
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p6759
g60
(g99
S'\x18\x00\x00\x00'
tRp6760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6761
I0
sg6380
S'41-peanuts_redo.png'
p6762
sS'block_loop.thisRepN'
p6763
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6764
I2
sg6386
g6477
sg55
g11
sS'block_loop.thisTrial'
p6765
Nsg70
Vn
sS'block_loop.thisTrialN'
p6766
I0
sg39
F0.74992815493897069
sg34
g753
(S'\x07\xdf\x07\x0b\x0b$\x11\x0cH\x88'
tRp6767
sa(dp6768
S'trial_loop.thisTrialN'
p6769
I25
sg6371
S'29-beans.png'
p6770
sS'block_loop.thisIndex'
p6771
g6365
sg38
S'left'
p6772
sg59
g63
sS'trial_loop.thisN'
p6773
I25
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p6774
g60
(g99
S'\x19\x00\x00\x00'
tRp6775
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6776
I0
sg6380
S'46-pistachios.png'
p6777
sS'block_loop.thisRepN'
p6778
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6779
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p6780
Nsg70
Vn
sS'block_loop.thisTrialN'
p6781
I0
sg39
F0.93323598137521913
sg34
g753
(S'\x07\xdf\x07\x0b\x0b$\x17\x08\xcd\xe8'
tRp6782
sa(dp6783
S'trial_loop.thisTrialN'
p6784
I26
sg6371
S'7-olives.png'
p6785
sS'block_loop.thisIndex'
p6786
g6365
sg38
S'left'
p6787
sg59
g63
sS'trial_loop.thisN'
p6788
I26
sg33
g6749
sg64
g65
sS'trial_loop.thisIndex'
p6789
g60
(g99
S'\x1a\x00\x00\x00'
tRp6790
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6791
I0
sg6380
S'22-daim.png'
p6792
sS'block_loop.thisRepN'
p6793
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6794
I2
sg6386
g6749
sg55
g11
sS'block_loop.thisTrial'
p6795
Nsg70
Vn
sS'block_loop.thisTrialN'
p6796
I0
sg39
F0.99993984401680791
sg34
g753
(S'\x07\xdf\x07\x0b\x0b$\x1d\x08l@'
tRp6797
sa(dp6798
S'trial_loop.thisTrialN'
p6799
I27
sg6371
S'25-kitkat.png'
p6800
sS'block_loop.thisIndex'
p6801
g6365
sg38
S'left'
p6802
sg59
g63
sS'trial_loop.thisN'
p6803
I27
sg33
g6500
sg64
g65
sS'trial_loop.thisIndex'
p6804
g60
(g99
S'\x1b\x00\x00\x00'
tRp6805
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6806
I0
sg6380
S'31-hobnobs.png'
p6807
sS'block_loop.thisRepN'
p6808
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6809
I2
sg6386
g6494
sg55
g11
sS'block_loop.thisTrial'
p6810
Nsg70
Vn
sS'block_loop.thisTrialN'
p6811
I0
sg39
F0.95004088326095371
sg34
g753
(S'\x07\xdf\x07\x0b\x0b$#\x08\xc20'
tRp6812
sa(dp6813
S'trial_loop.thisTrialN'
p6814
I28
sg6371
S'16-skips_prawn.png'
p6815
sS'block_loop.thisIndex'
p6816
g6365
sg38
S'left'
p6817
sg59
g63
sS'trial_loop.thisN'
p6818
I28
sg33
g6534
sg64
g65
sS'trial_loop.thisIndex'
p6819
g60
(g99
S'\x1c\x00\x00\x00'
tRp6820
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6821
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p6822
sS'block_loop.thisRepN'
p6823
I2
sg6383
g6534
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6824
I2
sg6386
g6528
sg55
g11
sS'block_loop.thisTrial'
p6825
Nsg70
Vn
sS'block_loop.thisTrialN'
p6826
I0
sg39
F0.89985910385257739
sg34
g753
(S'\x07\xdf\x07\x0b\x0b$)\x08\x9b '
tRp6827
sa(dp6828
S'trial_loop.thisTrialN'
p6829
I29
sg6371
S'23-crunchie_redo.png'
p6830
sS'block_loop.thisIndex'
p6831
g6365
sg38
S'right'
p6832
sg59
g63
sS'trial_loop.thisN'
p6833
I29
sg33
S'33-ambrosia_rice.png'
p6834
sg64
g65
sS'trial_loop.thisIndex'
p6835
g60
(g99
S'\x1d\x00\x00\x00'
tRp6836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6837
I0
sg6380
S'33-ambrosia_rice.png'
p6838
sS'block_loop.thisRepN'
p6839
I2
sg6383
g6834
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6840
I2
sg6386
S'23-crunchie_redo.png'
p6841
sg55
g11
sS'block_loop.thisTrial'
p6842
Nsg70
Vn
sS'block_loop.thisTrialN'
p6843
I0
sg39
F0.98362901947439241
sg34
g753
(S'\x07\xdf\x07\x0b\x0b$/\x07\x81\xe0'
tRp6844
sa(dp6845
S'trial_loop.thisTrialN'
p6846
I30
sg6371
S'38-maltesers.png'
p6847
sS'block_loop.thisIndex'
p6848
g6365
sg38
S'left'
p6849
sg59
g63
sS'trial_loop.thisN'
p6850
I30
sg33
g6611
sg64
g65
sS'trial_loop.thisIndex'
p6851
g60
(g99
S'\x1e\x00\x00\x00'
tRp6852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6853
I0
sg6380
S'6-sour_patch_kids.png'
p6854
sS'block_loop.thisRepN'
p6855
I2
sg6383
g6611
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6856
I2
sg6386
g6618
sg55
g11
sS'block_loop.thisTrial'
p6857
Nsg70
Vn
sS'block_loop.thisTrialN'
p6858
I0
sg39
F0.86641437266189314
sg34
g753
(S'\x07\xdf\x07\x0b\x0b$5\x07\xd7\xd0'
tRp6859
sa(dp6860
S'trial_loop.thisTrialN'
p6861
I31
sg6371
S'21-nakd_banana_crunch.png'
p6862
sS'block_loop.thisIndex'
p6863
g6365
sg38
S'left'
p6864
sg59
g63
sS'trial_loop.thisN'
p6865
I31
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p6866
g60
(g99
S'\x1f\x00\x00\x00'
tRp6867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6868
I0
sg6380
S'1-treacle_cookies.png'
p6869
sS'block_loop.thisRepN'
p6870
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6871
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p6872
Nsg70
Vn
sS'block_loop.thisTrialN'
p6873
I0
sg39
F0.81667421229849424
sg34
g753
(S'\x07\xdf\x07\x0b\x0b$;\x06Ex'
tRp6874
sa(dp6875
S'trial_loop.thisTrialN'
p6876
I32
sg6371
S'33-ambrosia_rice.png'
p6877
sS'block_loop.thisIndex'
p6878
g6365
sg38
S'left'
p6879
sg59
g63
sS'trial_loop.thisN'
p6880
I32
sg33
g6834
sg64
g65
sS'trial_loop.thisIndex'
p6881
g60
(g99
S' \x00\x00\x00'
tRp6882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6883
I0
sg6380
S'23-crunchie_redo.png'
p6884
sS'block_loop.thisRepN'
p6885
I2
sg6383
g6834
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6886
I2
sg6386
g6841
sg55
g11
sS'block_loop.thisTrial'
p6887
Nsg70
Vn
sS'block_loop.thisTrialN'
p6888
I0
sg39
F0.79996995051806152
sg34
g753
(S'\x07\xdf\x07\x0b\x0b%\x05\x03\xfb\x88'
tRp6889
sa(dp6890
S'trial_loop.thisTrialN'
p6891
I33
sg6371
g6755
sS'block_loop.thisIndex'
p6892
g6365
sg38
S'right'
p6893
sg59
g63
sS'trial_loop.thisN'
p6894
I33
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p6895
g60
(g99
S'!\x00\x00\x00'
tRp6896
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6897
I0
sg6380
g6762
sS'block_loop.thisRepN'
p6898
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6899
I2
sg6386
g6477
sg55
g11
sS'block_loop.thisTrial'
p6900
Nsg70
Vn
sS'block_loop.thisTrialN'
p6901
I0
sg39
F0.69996276601159479
sg34
g753
(S'\x07\xdf\x07\x0b\x0b%\x0b\x01s\x18'
tRp6902
sa(dp6903
S'trial_loop.thisTrialN'
p6904
I34
sg6371
g6443
sS'block_loop.thisIndex'
p6905
g6365
sg38
S'left'
p6906
sg59
g63
sS'trial_loop.thisN'
p6907
I34
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6908
g60
(g99
S'"\x00\x00\x00'
tRp6909
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6910
I0
sg6380
g6451
sS'block_loop.thisRepN'
p6911
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6912
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p6913
Nsg70
Vn
sS'block_loop.thisTrialN'
p6914
I0
sg39
F0.86665585189439298
sg34
g753
(S'\x07\xdf\x07\x0b\x0b%\x10\x0c\xc1\xa0'
tRp6915
sa(dp6916
S'trial_loop.thisTrialN'
p6917
I35
sg6371
S'49-yorkie.png'
p6918
sS'block_loop.thisIndex'
p6919
g6365
sg38
S'left'
p6920
sg59
g63
sS'trial_loop.thisN'
p6921
I35
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6922
g60
(g99
S'#\x00\x00\x00'
tRp6923
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6924
I0
sg6380
S'35-raisins.png'
p6925
sS'block_loop.thisRepN'
p6926
I2
sg6383
g6402
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6927
I2
sg6386
g6396
sg55
g11
sS'block_loop.thisTrial'
p6928
Nsg70
Vn
sS'block_loop.thisTrialN'
p6929
I0
sg39
F0.8670974709393704
sg34
g753
(S'\x07\xdf\x07\x0b\x0b%\x16\x0b/H'
tRp6930
sa(dp6931
S'trial_loop.thisTrialN'
p6932
I36
sg6371
S'5-pineapple.png'
p6933
sS'block_loop.thisIndex'
p6934
g6365
sg38
S'right'
p6935
sg59
g63
sS'trial_loop.thisN'
p6936
I36
sg33
g6552
sg64
g65
sS'trial_loop.thisIndex'
p6937
g60
(g99
S'$\x00\x00\x00'
tRp6938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6939
I0
sg6380
S'40-sardines.png'
p6940
sS'block_loop.thisRepN'
p6941
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6942
I2
sg6386
g6552
sg55
g11
sS'block_loop.thisTrial'
p6943
Nsg70
Vn
sS'block_loop.thisTrialN'
p6944
I0
sg39
F0.80000302205371554
sg34
g753
(S'\x07\xdf\x07\x0b\x0b%\x1c\t\x99\x08'
tRp6945
sa(dp6946
S'trial_loop.thisTrialN'
p6947
I37
sg6371
S'51-mars.png'
p6948
sS'block_loop.thisIndex'
p6949
g6365
sg38
S'left'
p6950
sg59
g63
sS'trial_loop.thisN'
p6951
I37
sg33
g6601
sg64
g65
sS'trial_loop.thisIndex'
p6952
g60
(g99
S'%\x00\x00\x00'
tRp6953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6954
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6955
sS'block_loop.thisRepN'
p6956
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6957
I2
sg6386
g6601
sg55
g11
sS'block_loop.thisTrial'
p6958
Nsg70
Vn
sS'block_loop.thisTrialN'
p6959
I0
sg39
F0.68333747677843348
sg34
g753
(S'\x07\xdf\x07\x0b\x0b%"\x07\x14\x80'
tRp6960
sa(dp6961
S'trial_loop.thisTrialN'
p6962
I38
sg6371
S'44-crunch.png'
p6963
sS'block_loop.thisIndex'
p6964
g6365
sg38
S'left'
p6965
sg59
g63
sS'trial_loop.thisN'
p6966
I38
sg33
S'44-crunch.png'
p6967
sg64
g65
sS'trial_loop.thisIndex'
p6968
g60
(g99
S'&\x00\x00\x00'
tRp6969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6970
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6971
sS'block_loop.thisRepN'
p6972
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6973
I2
sg6386
S'26-walkers_smoky_bacon.png'
p6974
sg55
g11
sS'block_loop.thisTrial'
p6975
Nsg70
Vn
sS'block_loop.thisTrialN'
p6976
I0
sg39
F0.80001186013669212
sg34
g753
(S'\x07\xdf\x07\x0b\x0b%(\x02\xa3\xc8'
tRp6977
sa(dp6978
S'trial_loop.thisTrialN'
p6979
I39
sg6371
S'19-caramello_redo.png'
p6980
sS'block_loop.thisIndex'
p6981
g6365
sg38
S'left'
p6982
sg59
g63
sS'trial_loop.thisN'
p6983
I39
sg33
S'19-caramello_redo.png'
p6984
sg64
g65
sS'trial_loop.thisIndex'
p6985
g60
(g99
S"'\x00\x00\x00"
tRp6986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6987
I0
sg6380
S'30-spaghetti_hoops.png'
p6988
sS'block_loop.thisRepN'
p6989
I2
sg6383
g6984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6990
I2
sg6386
S'30-spaghetti_hoops.png'
p6991
sg55
g11
sS'block_loop.thisTrial'
p6992
Nsg70
Vn
sS'block_loop.thisTrialN'
p6993
I0
sg39
F0.9666259734722189
sg34
g753
(S'\x07\xdf\x07\x0b\x0b%.\x00\x1f@'
tRp6994
sa(dp6995
S'trial_loop.thisTrialN'
p6996
I40
sg6371
g6624
sS'block_loop.thisIndex'
p6997
g6365
sg38
S'right'
p6998
sg59
g63
sS'trial_loop.thisN'
p6999
I40
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p7000
g60
(g99
S'(\x00\x00\x00'
tRp7001
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7002
I0
sg6380
g6632
sS'block_loop.thisRepN'
p7003
I2
sg6383
g6628
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7004
I2
sg6386
g6635
sg55
g11
sS'block_loop.thisTrial'
p7005
Nsg70
Vn
sS'block_loop.thisTrialN'
p7006
I0
sg39
F0.80002839590542862
sg34
g753
(S'\x07\xdf\x07\x0b\x0b%4\x006\xb0'
tRp7007
sa(dp7008
S'trial_loop.thisTrialN'
p7009
I41
sg6371
g6738
sS'block_loop.thisIndex'
p7010
g6365
sg38
S'right'
p7011
sg59
g63
sS'trial_loop.thisN'
p7012
I41
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p7013
g60
(g99
S')\x00\x00\x00'
tRp7014
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7015
I0
sg6380
g6746
sS'block_loop.thisRepN'
p7016
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7017
I2
sg6386
g6749
sg55
g11
sS'block_loop.thisTrial'
p7018
Nsg70
Vn
sS'block_loop.thisTrialN'
p7019
I0
sg39
F0.83332459028406447
sg34
g753
(S'\x07\xdf\x07\x0b\x0b%9\x0c\xf0\x80'
tRp7020
sa(dp7021
S'trial_loop.thisTrialN'
p7022
I42
sg6371
g6980
sS'block_loop.thisIndex'
p7023
g6365
sg38
S'left'
p7024
sg59
g63
sS'trial_loop.thisN'
p7025
I42
sg33
g6991
sg64
g65
sS'trial_loop.thisIndex'
p7026
g60
(g99
S'*\x00\x00\x00'
tRp7027
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7028
I0
sg6380
g6988
sS'block_loop.thisRepN'
p7029
I2
sg6383
g6984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7030
I2
sg6386
g6991
sg55
g11
sS'block_loop.thisTrial'
p7031
Nsg70
Vn
sS'block_loop.thisTrialN'
p7032
I0
sg39
F0.91665231666138425
sg34
g753
(S'\x07\xdf\x07\x0b\x0b&\x03\n\xe5\x10'
tRp7033
sa(dp7034
S'trial_loop.thisTrialN'
p7035
I43
sg6371
S'43-mrporky_pork_crackles_redo.png'
p7036
sS'block_loop.thisIndex'
p7037
g6365
sg38
S'right'
p7038
sg59
g63
sS'trial_loop.thisN'
p7039
I43
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7040
g60
(g99
S'+\x00\x00\x00'
tRp7041
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7042
I0
sg6380
S'18-mms.png'
p7043
sS'block_loop.thisRepN'
p7044
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7045
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p7046
Nsg70
Vn
sS'block_loop.thisTrialN'
p7047
I0
sg39
F0.81658583146963792
sg34
g753
(S'\x07\xdf\x07\x0b\x0b&\t\n\x06h'
tRp7048
sa(dp7049
S'trial_loop.thisTrialN'
p7050
I44
sg6371
g6708
sS'block_loop.thisIndex'
p7051
g6365
sg38
S'left'
p7052
sg59
g63
sS'trial_loop.thisN'
p7053
I44
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7054
g60
(g99
S',\x00\x00\x00'
tRp7055
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7056
I0
sg6380
g6716
sS'block_loop.thisRepN'
p7057
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7058
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p7059
Nsg70
Vn
sS'block_loop.thisTrialN'
p7060
I0
sg39
F0.86643033823020232
sg34
g753
(S'\x07\xdf\x07\x0b\x0b&\x0f\x07\xbcx'
tRp7061
sa(dp7062
S'trial_loop.thisTrialN'
p7063
I45
sg6371
g6862
sS'block_loop.thisIndex'
p7064
g6365
sg38
S'left'
p7065
sg59
g63
sS'trial_loop.thisN'
p7066
I45
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p7067
g60
(g99
S'-\x00\x00\x00'
tRp7068
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7069
I0
sg6380
g6869
sS'block_loop.thisRepN'
p7070
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7071
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p7072
Nsg70
Vn
sS'block_loop.thisTrialN'
p7073
I0
sg39
F0.79991777731902403
sg34
g753
(S'\x07\xdf\x07\x0b\x0b&\x15\x06h\xa0'
tRp7074
sa(dp7075
S'trial_loop.thisTrialN'
p7076
I46
sg6371
S'3-ellas_strawberries_apples.png'
p7077
sS'block_loop.thisIndex'
p7078
g6365
sg38
S'left'
p7079
sg59
g63
sS'trial_loop.thisN'
p7080
I46
sg33
g6628
sg64
g65
sS'trial_loop.thisIndex'
p7081
g60
(g99
S'.\x00\x00\x00'
tRp7082
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7083
I0
sg6380
S'13-mccoys_steak_crisps.png'
p7084
sS'block_loop.thisRepN'
p7085
I2
sg6383
g6628
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7086
I2
sg6386
g6635
sg55
g11
sS'block_loop.thisTrial'
p7087
Nsg70
Vn
sS'block_loop.thisTrialN'
p7088
I0
sg39
F0.7837848548333568
sg34
g753
(S'\x07\xdf\x07\x0b\x0b&\x1b\x03\xe00'
tRp7089
sa(dp7090
S'trial_loop.thisTrialN'
p7091
I47
sg6371
g6980
sS'block_loop.thisIndex'
p7092
g6365
sg38
S'left'
p7093
sg59
g63
sS'trial_loop.thisN'
p7094
I47
sg33
g6984
sg64
g65
sS'trial_loop.thisIndex'
p7095
g60
(g99
S'/\x00\x00\x00'
tRp7096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7097
I0
sg6380
g6988
sS'block_loop.thisRepN'
p7098
I2
sg6383
g6984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7099
I2
sg6386
g6991
sg55
g11
sS'block_loop.thisTrial'
p7100
Nsg70
Vn
sS'block_loop.thisTrialN'
p7101
I0
sg39
F0.76669314290211332
sg34
g753
(S'\x07\xdf\x07\x0b\x0b&!\x00\xde\xa8'
tRp7102
sa(dp7103
S'trial_loop.thisTrialN'
p7104
I48
sg6371
g6409
sS'block_loop.thisIndex'
p7105
g6365
sg38
S'left'
p7106
sg59
g63
sS'trial_loop.thisN'
p7107
I48
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7108
g60
(g99
S'0\x00\x00\x00'
tRp7109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7110
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7111
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7112
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p7113
Nsg70
Vn
sS'block_loop.thisTrialN'
p7114
I0
sg39
F0.7667336270233136
sg34
g753
(S'\x07\xdf\x07\x0b\x0b&&\r#H'
tRp7115
sa(dp7116
S'trial_loop.thisTrialN'
p7117
I49
sg6371
g6426
sS'block_loop.thisIndex'
p7118
g6365
sg38
S'left'
p7119
sg59
g63
sS'trial_loop.thisN'
p7120
I49
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7121
g60
(g99
S'1\x00\x00\x00'
tRp7122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7123
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7124
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7125
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7126
Nsg70
Vn
sS'block_loop.thisTrialN'
p7127
I0
sg39
F0.75002594405032141
sg34
g753
(S'\x07\xdf\x07\x0b\x0b&,\n!\xc0'
tRp7128
sa(dp7129
S'trial_loop.thisTrialN'
p7130
I50
sg6371
g6862
sS'block_loop.thisIndex'
p7131
g6365
sg38
S'left'
p7132
sg59
g63
sS'trial_loop.thisN'
p7133
I50
sg33
g6584
sg64
g65
sS'trial_loop.thisIndex'
p7134
g60
(g99
S'2\x00\x00\x00'
tRp7135
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7136
I0
sg6380
g6869
sS'block_loop.thisRepN'
p7137
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7138
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p7139
Nsg70
Vn
sS'block_loop.thisTrialN'
p7140
I0
sg39
F0.71660088472071948
sg34
g753
(S'\x07\xdf\x07\x0b\x0b&2\x06\xe5\xa0'
tRp7141
sa(dp7142
S'trial_loop.thisTrialN'
p7143
I51
sg6371
g6847
sS'block_loop.thisIndex'
p7144
g6365
sg38
S'left'
p7145
sg59
g63
sS'trial_loop.thisN'
p7146
I51
sg33
g6611
sg64
g65
sS'trial_loop.thisIndex'
p7147
g60
(g99
S'3\x00\x00\x00'
tRp7148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7149
I0
sg6380
g6854
sS'block_loop.thisRepN'
p7150
I2
sg6383
g6611
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7151
I2
sg6386
g6618
sg55
g11
sS'block_loop.thisTrial'
p7152
Nsg70
Vn
sS'block_loop.thisTrialN'
p7153
I0
sg39
F0.91638631887508382
sg34
g753
(S'\x07\xdf\x07\x0b\x0b&8\x02\xee\x00'
tRp7154
sa(dp7155
S'trial_loop.thisTrialN'
p7156
I52
sg6371
S'4-corn.png'
p7157
sS'block_loop.thisIndex'
p7158
g6365
sg38
S'left'
p7159
sg59
g63
sS'trial_loop.thisN'
p7160
I52
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p7161
g60
(g99
S'4\x00\x00\x00'
tRp7162
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7163
I0
sg6380
S'10-bounty_redo.png'
p7164
sS'block_loop.thisRepN'
p7165
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7166
I2
sg6386
g6518
sg55
g11
sS'block_loop.thisTrial'
p7167
Nsg70
Vn
sS'block_loop.thisTrialN'
p7168
I0
sg39
F1.1667523865680778
sg34
g753
(S"\x07\xdf\x07\x0b\x0b'\x02\x02Q\xc0"
tRp7169
sa(dp7170
S'trial_loop.thisTrialN'
p7171
I53
sg6371
g6590
sS'block_loop.thisIndex'
p7172
g6365
sg38
S'right'
p7173
sg59
g63
sS'trial_loop.thisN'
p7174
I53
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p7175
g60
(g99
S'5\x00\x00\x00'
tRp7176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7177
I0
sg6380
g6598
sS'block_loop.thisRepN'
p7178
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7179
I2
sg6386
g6601
sg55
g11
sS'block_loop.thisTrial'
p7180
Nsg70
Vn
sS'block_loop.thisTrialN'
p7181
I0
sg39
F0.96660801220605208
sg34
g753
(S"\x07\xdf\x07\x0b\x0b'\x08\x05C\xa8"
tRp7182
sa(dp7183
S'trial_loop.thisTrialN'
p7184
I54
sg6371
g6963
sS'block_loop.thisIndex'
p7185
g6365
sg38
S'left'
p7186
sg59
g63
sS'trial_loop.thisN'
p7187
I54
sg33
g6967
sg64
g65
sS'trial_loop.thisIndex'
p7188
g60
(g99
S'6\x00\x00\x00'
tRp7189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7190
I0
sg6380
g6971
sS'block_loop.thisRepN'
p7191
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7192
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p7193
Nsg70
Vn
sS'block_loop.thisTrialN'
p7194
I0
sg39
F0.69999954384093144
sg34
g753
(S"\x07\xdf\x07\x0b\x0b'\x0e\x05[\x18"
tRp7195
sa(dp7196
S'trial_loop.thisTrialN'
p7197
I55
sg6371
g6800
sS'block_loop.thisIndex'
p7198
g6365
sg38
S'left'
p7199
sg59
g63
sS'trial_loop.thisN'
p7200
I55
sg33
g6500
sg64
g65
sS'trial_loop.thisIndex'
p7201
g60
(g99
S'7\x00\x00\x00'
tRp7202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7203
I0
sg6380
g6807
sS'block_loop.thisRepN'
p7204
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7205
I2
sg6386
g6494
sg55
g11
sS'block_loop.thisTrial'
p7206
Nsg70
Vn
sS'block_loop.thisTrialN'
p7207
I0
sg39
F0.76668259422331175
sg34
g753
(S"\x07\xdf\x07\x0b\x0b'\x14\x01(\xe0"
tRp7208
sa(dp7209
S'trial_loop.thisTrialN'
p7210
I56
sg6371
S'8-liquorice_catherine_wheels.png'
p7211
sS'block_loop.thisIndex'
p7212
g6365
sg38
S'right'
p7213
sg59
g63
sS'trial_loop.thisN'
p7214
I56
sg33
S'17-jacobs_mini_cheddars_redo.png'
p7215
sg64
g65
sS'trial_loop.thisIndex'
p7216
g60
(g99
S'8\x00\x00\x00'
tRp7217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7218
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p7219
sS'block_loop.thisRepN'
p7220
I2
sg6383
g7215
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7221
I2
sg6386
S'8-liquorice_catherine_wheels.png'
p7222
sg55
g11
sS'block_loop.thisTrial'
p7223
Nsg70
Vn
sS'block_loop.thisTrialN'
p7224
I0
sg39
F0.71666417679807637
sg34
g753
(S"\x07\xdf\x07\x0b\x0b'\x19\ri\x98"
tRp7225
sa(dp7226
S'trial_loop.thisTrialN'
p7227
I57
sg6371
g6933
sS'block_loop.thisIndex'
p7228
g6365
sg38
S'right'
p7229
sg59
g63
sS'trial_loop.thisN'
p7230
I57
sg33
g6552
sg64
g65
sS'trial_loop.thisIndex'
p7231
g60
(g99
S'9\x00\x00\x00'
tRp7232
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7233
I0
sg6380
g6940
sS'block_loop.thisRepN'
p7234
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7235
I2
sg6386
g6552
sg55
g11
sS'block_loop.thisTrial'
p7236
Nsg70
Vn
sS'block_loop.thisTrialN'
p7237
I0
sg39
F0.65001590854899405
sg34
g753
(S"\x07\xdf\x07\x0b\x0b'\x1f\t\xb4`"
tRp7238
sa(dp7239
S'trial_loop.thisTrialN'
p7240
I58
sg6371
g6392
sS'block_loop.thisIndex'
p7241
g6365
sg38
S'right'
p7242
sg59
g63
sS'trial_loop.thisN'
p7243
I58
sg33
g6402
sg64
g65
sS'trial_loop.thisIndex'
p7244
g60
(g99
S':\x00\x00\x00'
tRp7245
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7246
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7247
I2
sg6383
g6402
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7248
I2
sg6386
g6396
sg55
g11
sS'block_loop.thisTrial'
p7249
Nsg70
Vn
sS'block_loop.thisTrialN'
p7250
I0
sg39
F0.66666885242921126
sg34
g753
(S"\x07\xdf\x07\x0b\x0b'%\x04\xca\x90"
tRp7251
sa(dp7252
S'trial_loop.thisTrialN'
p7253
I59
sg6371
g6948
sS'block_loop.thisIndex'
p7254
g6365
sg38
S'left'
p7255
sg59
g63
sS'trial_loop.thisN'
p7256
I59
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p7257
g60
(g99
S';\x00\x00\x00'
tRp7258
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7259
I0
sg6380
g6955
sS'block_loop.thisRepN'
p7260
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7261
I2
sg6386
g6601
sg55
g11
sS'block_loop.thisTrial'
p7262
Nsg70
Vn
sS'block_loop.thisTrialN'
p7263
I0
sg39
F0.68334831055744871
sg34
g753
(S"\x07\xdf\x07\x0b\x0b'+\x00\x1f@"
tRp7264
sa(dp7265
S'trial_loop.thisTrialN'
p7266
I60
sg6371
g6815
sS'block_loop.thisIndex'
p7267
g6365
sg38
S'left'
p7268
sg59
g63
sS'trial_loop.thisN'
p7269
I60
sg33
g6534
sg64
g65
sS'trial_loop.thisIndex'
p7270
g60
(g99
S'<\x00\x00\x00'
tRp7271
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7272
I0
sg6380
g6822
sS'block_loop.thisRepN'
p7273
I2
sg6383
g6534
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7274
I2
sg6386
g6528
sg55
g11
sS'block_loop.thisTrial'
p7275
Nsg70
Vn
sS'block_loop.thisTrialN'
p7276
I0
sg39
F0.91654797026330925
sg34
g753
(S"\x07\xdf\x07\x0b\x0b'0\x0b/H"
tRp7277
sa(dp7278
S'trial_loop.thisTrialN'
p7279
I61
sg6371
S'50-polo.png'
p7280
sS'block_loop.thisIndex'
p7281
g6365
sg38
S'right'
p7282
sg59
g63
sS'trial_loop.thisN'
p7283
I61
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7284
g60
(g99
S'=\x00\x00\x00'
tRp7285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7286
I0
sg6380
S'48-twix.png'
p7287
sS'block_loop.thisRepN'
p7288
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7289
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p7290
Nsg70
Vn
sS'block_loop.thisTrialN'
p7291
I0
sg39
F1.483241284225187
sg34
g753
(S"\x07\xdf\x07\x0b\x0b'6\nT\x88"
tRp7292
sa(dp7293
S'trial_loop.thisTrialN'
p7294
I62
sg6371
g7077
sS'block_loop.thisIndex'
p7295
g6365
sg38
S'left'
p7296
sg59
g63
sS'trial_loop.thisN'
p7297
I62
sg33
g6628
sg64
g65
sS'trial_loop.thisIndex'
p7298
g60
(g99
S'>\x00\x00\x00'
tRp7299
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7300
I0
sg6380
g7084
sS'block_loop.thisRepN'
p7301
I2
sg6383
g6628
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7302
I2
sg6386
g6635
sg55
g11
sS'block_loop.thisTrial'
p7303
Nsg70
Vn
sS'block_loop.thisTrialN'
p7304
I0
sg39
F0.74994953739769699
sg34
g753
(S'\x07\xdf\x07\x0b\x0b(\x01\x03\x05p'
tRp7305
sa(dp7306
S'trial_loop.thisTrialN'
p7307
I63
sg6371
g6473
sS'block_loop.thisIndex'
p7308
g6365
sg38
S'left'
p7309
sg59
g63
sS'trial_loop.thisN'
p7310
I63
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p7311
g60
(g99
S'?\x00\x00\x00'
tRp7312
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7313
I0
sg6380
g6481
sS'block_loop.thisRepN'
p7314
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7315
I2
sg6386
g6477
sg55
g11
sS'block_loop.thisTrial'
p7316
Nsg70
Vn
sS'block_loop.thisTrialN'
p7317
I0
sg39
F0.70000182463627425
sg34
g753
(S'\x07\xdf\x07\x0b\x0b(\x06\x0f\x07\xa8'
tRp7318
sa(dp7319
S'trial_loop.thisTrialN'
p7320
I64
sg6371
g6785
sS'block_loop.thisIndex'
p7321
g6365
sg38
S'left'
p7322
sg59
g63
sS'trial_loop.thisN'
p7323
I64
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p7324
g60
(g99
S'@\x00\x00\x00'
tRp7325
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7326
I0
sg6380
g6792
sS'block_loop.thisRepN'
p7327
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7328
I2
sg6386
g6749
sg55
g11
sS'block_loop.thisTrial'
p7329
Nsg70
Vn
sS'block_loop.thisTrialN'
p7330
I0
sg39
F0.78353311201954057
sg34
g753
(S'\x07\xdf\x07\x0b\x0b(\x0c\n\xd5p'
tRp7331
sa(dp7332
S'trial_loop.thisTrialN'
p7333
I65
sg6371
g6918
sS'block_loop.thisIndex'
p7334
g6365
sg38
S'left'
p7335
sg59
g63
sS'trial_loop.thisN'
p7336
I65
sg33
g6402
sg64
g65
sS'trial_loop.thisIndex'
p7337
g60
(g99
S'A\x00\x00\x00'
tRp7338
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7339
I0
sg6380
g6925
sS'block_loop.thisRepN'
p7340
I2
sg6383
g6402
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7341
I2
sg6386
g6396
sg55
g11
sS'block_loop.thisTrial'
p7342
Nsg70
Vn
sS'block_loop.thisTrialN'
p7343
I0
sg39
F0.73322959514734976
sg34
g753
(S'\x07\xdf\x07\x0b\x0b(\x12\x08\x12h'
tRp7344
sa(dp7345
S'trial_loop.thisTrialN'
p7346
I66
sg6371
g6558
sS'block_loop.thisIndex'
p7347
g6365
sg38
S'right'
p7348
sg59
g63
sS'trial_loop.thisN'
p7349
I66
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7350
g60
(g99
S'B\x00\x00\x00'
tRp7351
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7352
I0
sg6380
g6565
sS'block_loop.thisRepN'
p7353
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7354
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7355
Nsg70
Vn
sS'block_loop.thisTrialN'
p7356
I0
sg39
F0.79991150513069442
sg34
g753
(S'\x07\xdf\x07\x0b\x0b(\x18\x04\x97\xc8'
tRp7357
sa(dp7358
S'trial_loop.thisTrialN'
p7359
I67
sg6371
g6490
sS'block_loop.thisIndex'
p7360
g6365
sg38
S'right'
p7361
sg59
g63
sS'trial_loop.thisN'
p7362
I67
sg33
g6500
sg64
g65
sS'trial_loop.thisIndex'
p7363
g60
(g99
S'C\x00\x00\x00'
tRp7364
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7365
I0
sg6380
g6498
sS'block_loop.thisRepN'
p7366
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7367
I2
sg6386
g6494
sg55
g11
sS'block_loop.thisTrial'
p7368
Nsg70
Vn
sS'block_loop.thisTrialN'
p7369
I0
sg39
F1.3000346680928487
sg34
g753
(S'\x07\xdf\x07\x0b\x0b(\x1e\x02\x13@'
tRp7370
sa(dp7371
S'trial_loop.thisTrialN'
p7372
I68
sg6371
g6933
sS'block_loop.thisIndex'
p7373
g6365
sg38
S'right'
p7374
sg59
g63
sS'trial_loop.thisN'
p7375
I68
sg33
g6545
sg64
g65
sS'trial_loop.thisIndex'
p7376
g60
(g99
S'D\x00\x00\x00'
tRp7377
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7378
I0
sg6380
g6940
sS'block_loop.thisRepN'
p7379
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7380
I2
sg6386
g6552
sg55
g11
sS'block_loop.thisTrial'
p7381
Nsg70
Vn
sS'block_loop.thisTrialN'
p7382
I0
sg39
F0.68339307117093995
sg34
g753
(S'\x07\xdf\x07\x0b\x0b($\x07(\x08'
tRp7383
sa(dp7384
S'trial_loop.thisTrialN'
p7385
I69
sg6371
g6830
sS'block_loop.thisIndex'
p7386
g6365
sg38
S'right'
p7387
sg59
g63
sS'trial_loop.thisN'
p7388
I69
sg33
g6834
sg64
g65
sS'trial_loop.thisIndex'
p7389
g60
(g99
S'E\x00\x00\x00'
tRp7390
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7391
I0
sg6380
g6838
sS'block_loop.thisRepN'
p7392
I2
sg6383
g6834
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7393
I2
sg6386
g6841
sg55
g11
sS'block_loop.thisTrial'
p7394
Nsg70
Vn
sS'block_loop.thisTrialN'
p7395
I0
sg39
F0.69975692421030544
sg34
g753
(S'\x07\xdf\x07\x0b\x0b(*\x02\xbb8'
tRp7396
sa(dp7397
S'trial_loop.thisTrialN'
p7398
I70
sg6371
g6755
sS'block_loop.thisIndex'
p7399
g6365
sg38
S'right'
p7400
sg59
g63
sS'trial_loop.thisN'
p7401
I70
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p7402
g60
(g99
S'F\x00\x00\x00'
tRp7403
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7404
I0
sg6380
g6762
sS'block_loop.thisRepN'
p7405
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7406
I2
sg6386
g6477
sg55
g11
sS'block_loop.thisTrial'
p7407
Nsg70
Vn
sS'block_loop.thisTrialN'
p7408
I0
sg39
F0.68357353912142571
sg34
g753
(S'\x07\xdf\x07\x0b\x0b(/\x0e\t\xc0'
tRp7409
sa(dp7410
S'trial_loop.thisTrialN'
p7411
I71
sg6371
g7077
sS'block_loop.thisIndex'
p7412
g6365
sg38
S'left'
p7413
sg59
g63
sS'trial_loop.thisN'
p7414
I71
sg33
g6628
sg64
g65
sS'trial_loop.thisIndex'
p7415
g60
(g99
S'G\x00\x00\x00'
tRp7416
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7417
I0
sg6380
g7084
sS'block_loop.thisRepN'
p7418
I2
sg6383
g6628
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7419
I2
sg6386
g6635
sg55
g11
sS'block_loop.thisTrial'
p7420
Nsg70
Vn
sS'block_loop.thisTrialN'
p7421
I0
sg39
F0.7167089374115676
sg34
g753
(S'\x07\xdf\x07\x0b\x0b(5\t\x99\x08'
tRp7422
sa(dp7423
S'trial_loop.thisTrialN'
p7424
I72
sg6371
S'26-walkers_smoky_bacon.png'
p7425
sS'block_loop.thisIndex'
p7426
g6365
sg38
S'right'
p7427
sg59
g63
sS'trial_loop.thisN'
p7428
I72
sg33
g6967
sg64
g65
sS'trial_loop.thisIndex'
p7429
g60
(g99
S'H\x00\x00\x00'
tRp7430
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7431
I0
sg6380
S'44-crunch.png'
p7432
sS'block_loop.thisRepN'
p7433
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7434
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p7435
Nsg70
Vn
sS'block_loop.thisTrialN'
p7436
I0
sg39
F0.65001448305156373
sg34
g753
(S'\x07\xdf\x07\x0b\x0b(;\x05\xe3\xd0'
tRp7437
sa(dp7438
S'trial_loop.thisTrialN'
p7439
I73
sg6371
g6933
sS'block_loop.thisIndex'
p7440
g6365
sg38
S'right'
p7441
sg59
g63
sS'trial_loop.thisN'
p7442
I73
sg33
g6552
sg64
g65
sS'trial_loop.thisIndex'
p7443
g60
(g99
S'I\x00\x00\x00'
tRp7444
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7445
I0
sg6380
g6940
sS'block_loop.thisRepN'
p7446
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7447
I2
sg6386
g6552
sg55
g11
sS'block_loop.thisTrial'
p7448
Nsg70
Vn
sS'block_loop.thisTrialN'
p7449
I0
sg39
F0.6999208563929642
sg34
g753
(S'\x07\xdf\x07\x0b\x0b)\x05\x00\xfa\x00'
tRp7450
sa(dp7451
S'trial_loop.thisTrialN'
p7452
I74
sg6371
g6963
sS'block_loop.thisIndex'
p7453
g6365
sg38
S'left'
p7454
sg59
g63
sS'trial_loop.thisN'
p7455
I74
sg33
g6974
sg64
g65
sS'trial_loop.thisIndex'
p7456
g60
(g99
S'J\x00\x00\x00'
tRp7457
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7458
I0
sg6380
g6971
sS'block_loop.thisRepN'
p7459
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7460
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p7461
Nsg70
Vn
sS'block_loop.thisTrialN'
p7462
I0
sg39
F0.63329226000587369
sg34
g753
(S'\x07\xdf\x07\x0b\x0b)\n\x0c\n\x08'
tRp7463
sa(dp7464
S'trial_loop.thisTrialN'
p7465
I75
sg6371
g6738
sS'block_loop.thisIndex'
p7466
g6365
sg38
S'right'
p7467
sg59
g63
sS'trial_loop.thisN'
p7468
I75
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p7469
g60
(g99
S'K\x00\x00\x00'
tRp7470
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7471
I0
sg6380
g6746
sS'block_loop.thisRepN'
p7472
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7473
I2
sg6386
g6749
sg55
g11
sS'block_loop.thisTrial'
p7474
Nsg70
Vn
sS'block_loop.thisTrialN'
p7475
I0
sg39
F0.89999538138908974
sg34
g753
(S'\x07\xdf\x07\x0b\x0b)\x10\x07$ '
tRp7476
sa(dp7477
S'trial_loop.thisTrialN'
p7478
I76
sg6371
g7280
sS'block_loop.thisIndex'
p7479
g6365
sg38
S'right'
p7480
sg59
g63
sS'trial_loop.thisN'
p7481
I76
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7482
g60
(g99
S'L\x00\x00\x00'
tRp7483
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7484
I0
sg6380
g7287
sS'block_loop.thisRepN'
p7485
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7486
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p7487
Nsg70
Vn
sS'block_loop.thisTrialN'
p7488
I0
sg39
F1.1169894182494318
sg34
g753
(S'\x07\xdf\x07\x0b\x0b)\x16\x06\n\xe0'
tRp7489
sa(dp7490
S'trial_loop.thisTrialN'
p7491
I77
sg6371
g6755
sS'block_loop.thisIndex'
p7492
g6365
sg38
S'right'
p7493
sg59
g63
sS'trial_loop.thisN'
p7494
I77
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p7495
g60
(g99
S'M\x00\x00\x00'
tRp7496
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7497
I0
sg6380
g6762
sS'block_loop.thisRepN'
p7498
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7499
I2
sg6386
g6477
sg55
g11
sS'block_loop.thisTrial'
p7500
Nsg70
Vn
sS'block_loop.thisTrialN'
p7501
I0
sg39
F0.79997764820291195
sg34
g753
(S'\x07\xdf\x07\x0b\x0b)\x1c\x08E0'
tRp7502
sa(dp7503
S'trial_loop.thisTrialN'
p7504
I78
sg6371
g6877
sS'block_loop.thisIndex'
p7505
g6365
sg38
S'left'
p7506
sg59
g63
sS'trial_loop.thisN'
p7507
I78
sg33
g6834
sg64
g65
sS'trial_loop.thisIndex'
p7508
g60
(g99
S'N\x00\x00\x00'
tRp7509
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7510
I0
sg6380
g6884
sS'block_loop.thisRepN'
p7511
I2
sg6383
g6834
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7512
I2
sg6386
g6841
sg55
g11
sS'block_loop.thisTrial'
p7513
Nsg70
Vn
sS'block_loop.thisTrialN'
p7514
I0
sg39
F0.98327635145687964
sg34
g753
(S'\x07\xdf\x07\x0b\x0b)"\x05\xc0\xa8'
tRp7515
sa(dp7516
S'trial_loop.thisTrialN'
p7517
I79
sg6371
g7157
sS'block_loop.thisIndex'
p7518
g6365
sg38
S'left'
p7519
sg59
g63
sS'trial_loop.thisN'
p7520
I79
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p7521
g60
(g99
S'O\x00\x00\x00'
tRp7522
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7523
I0
sg6380
g7164
sS'block_loop.thisRepN'
p7524
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7525
I2
sg6386
g6518
sg55
g11
sS'block_loop.thisTrial'
p7526
Nsg70
Vn
sS'block_loop.thisTrialN'
p7527
I0
sg39
F0.86662591645199427
sg34
g753
(S'\x07\xdf\x07\x0b\x0b)(\x06\x12\xb0'
tRp7528
sa(dp7529
S'trial_loop.thisTrialN'
p7530
I80
sg6371
g6372
sS'block_loop.thisIndex'
p7531
g6365
sg38
S'right'
p7532
sg59
g63
sS'trial_loop.thisN'
p7533
I80
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p7534
g60
(g99
S'P\x00\x00\x00'
tRp7535
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7536
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7537
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7538
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7539
Nsg70
Vn
sS'block_loop.thisTrialN'
p7540
I0
sg39
F0.88328114112755429
sg34
g753
(S'\x07\xdf\x07\x0b\x0b).\x04\x80X'
tRp7541
sa(dp7542
S'trial_loop.thisTrialN'
p7543
I81
sg6371
g6443
sS'block_loop.thisIndex'
p7544
g6365
sg38
S'left'
p7545
sg59
g63
sS'trial_loop.thisN'
p7546
I81
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7547
g60
(g99
S'Q\x00\x00\x00'
tRp7548
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7549
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7550
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7551
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p7552
Nsg70
Vn
sS'block_loop.thisTrialN'
p7553
I0
sg39
F0.79994115547378897
sg34
g753
(S'\x07\xdf\x07\x0b\x0b)4\x03(\x98'
tRp7554
sa(dp7555
S'trial_loop.thisTrialN'
p7556
I82
sg6371
g6847
sS'block_loop.thisIndex'
p7557
g6365
sg38
S'left'
p7558
sg59
g63
sS'trial_loop.thisN'
p7559
I82
sg33
g6611
sg64
g65
sS'trial_loop.thisIndex'
p7560
g60
(g99
S'R\x00\x00\x00'
tRp7561
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7562
I0
sg6380
g6854
sS'block_loop.thisRepN'
p7563
I2
sg6383
g6611
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7564
I2
sg6386
g6618
sg55
g11
sS'block_loop.thisTrial'
p7565
Nsg70
Vn
sS'block_loop.thisTrialN'
p7566
I0
sg39
F0.86678300624771509
sg34
g753
(S'\x07\xdf\x07\x0b\x0b):\x00\xa4\x10'
tRp7567
sa(dp7568
S'trial_loop.thisTrialN'
p7569
I83
sg6371
g6490
sS'block_loop.thisIndex'
p7570
g6365
sg38
S'right'
p7571
sg59
g63
sS'trial_loop.thisN'
p7572
I83
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p7573
g60
(g99
S'S\x00\x00\x00'
tRp7574
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7575
I0
sg6380
g6498
sS'block_loop.thisRepN'
p7576
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7577
I2
sg6386
g6494
sg55
g11
sS'block_loop.thisTrial'
p7578
Nsg70
Vn
sS'block_loop.thisTrialN'
p7579
I0
sg39
F0.88336381996759883
sg34
g753
(S'\x07\xdf\x07\x0b\x0b*\x03\x0eS\xf8'
tRp7580
sa(dp7581
S'trial_loop.thisTrialN'
p7582
I84
sg6371
g6847
sS'block_loop.thisIndex'
p7583
g6365
sg38
S'left'
p7584
sg59
g63
sS'trial_loop.thisN'
p7585
I84
sg33
g6611
sg64
g65
sS'trial_loop.thisIndex'
p7586
g60
(g99
S'T\x00\x00\x00'
tRp7587
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7588
I0
sg6380
g6854
sS'block_loop.thisRepN'
p7589
I2
sg6383
g6611
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7590
I2
sg6386
g6618
sg55
g11
sS'block_loop.thisTrial'
p7591
Nsg70
Vn
sS'block_loop.thisTrialN'
p7592
I0
sg39
F0.78298001909024606
sg34
g753
(S'\x07\xdf\x07\x0b\x0b*\t\r:\xb8'
tRp7593
sa(dp7594
S'trial_loop.thisTrialN'
p7595
I85
sg6371
g6590
sS'block_loop.thisIndex'
p7596
g6365
sg38
S'right'
p7597
sg59
g63
sS'trial_loop.thisN'
p7598
I85
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p7599
g60
(g99
S'U\x00\x00\x00'
tRp7600
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7601
I0
sg6380
g6598
sS'block_loop.thisRepN'
p7602
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7603
I2
sg6386
g6601
sg55
g11
sS'block_loop.thisTrial'
p7604
Nsg70
Vn
sS'block_loop.thisTrialN'
p7605
I0
sg39
F0.65001419795316906
sg34
g753
(S'\x07\xdf\x07\x0b\x0b*\x0f\ns\xc8'
tRp7606
sa(dp7607
S'trial_loop.thisTrialN'
p7608
I86
sg6371
g7157
sS'block_loop.thisIndex'
p7609
g6365
sg38
S'left'
p7610
sg59
g63
sS'trial_loop.thisN'
p7611
I86
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p7612
g60
(g99
S'V\x00\x00\x00'
tRp7613
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7614
I0
sg6380
g7164
sS'block_loop.thisRepN'
p7615
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7616
I2
sg6386
g6518
sg55
g11
sS'block_loop.thisTrial'
p7617
Nsg70
Vn
sS'block_loop.thisTrialN'
p7618
I0
sg39
F0.9333500211541832
sg34
g753
(S'\x07\xdf\x07\x0b\x0b*\x15\x05\x8d\xe0'
tRp7619
sa(dp7620
S'trial_loop.thisTrialN'
p7621
I87
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p7622
sS'block_loop.thisIndex'
p7623
g6365
sg38
S'left'
p7624
sg59
g63
sS'trial_loop.thisN'
p7625
I87
sg33
g7215
sg64
g65
sS'trial_loop.thisIndex'
p7626
g60
(g99
S'W\x00\x00\x00'
tRp7627
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7628
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p7629
sS'block_loop.thisRepN'
p7630
I2
sg6383
g7215
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7631
I2
sg6386
g7222
sg55
g11
sS'block_loop.thisTrial'
p7632
Nsg70
Vn
sS'block_loop.thisTrialN'
p7633
I0
sg39
F0.78324630197494116
sg34
g753
(S'\x07\xdf\x07\x0b\x0b*\x1b\x04\xed\xb8'
tRp7634
sa(dp7635
S'trial_loop.thisTrialN'
p7636
I88
sg6371
g6426
sS'block_loop.thisIndex'
p7637
g6365
sg38
S'left'
p7638
sg59
g63
sS'trial_loop.thisN'
p7639
I88
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p7640
g60
(g99
S'X\x00\x00\x00'
tRp7641
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7642
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7643
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7644
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7645
Nsg70
Vn
sS'block_loop.thisTrialN'
p7646
I0
sg39
F1.3501343388597888
sg34
g753
(S'\x07\xdf\x07\x0b\x0b*!\x02*\xb0'
tRp7647
sa(dp7648
S'trial_loop.thisTrialN'
p7649
I89
sg6371
g6980
sS'block_loop.thisIndex'
p7650
g6365
sg38
S'left'
p7651
sg59
g63
sS'trial_loop.thisN'
p7652
I89
sg33
g6984
sg64
g65
sS'trial_loop.thisIndex'
p7653
g60
(g99
S'Y\x00\x00\x00'
tRp7654
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7655
I0
sg6380
g6988
sS'block_loop.thisRepN'
p7656
I2
sg6383
g6984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7657
I2
sg6386
g6991
sg55
g11
sS'block_loop.thisTrial'
p7658
Nsg70
Vn
sS'block_loop.thisTrialN'
p7659
I0
sg39
F1.0832430518412366
sg34
g753
(S"\x07\xdf\x07\x0b\x0b*'\x07\xf7\x10"
tRp7660
sa(dp7661
S'trial_loop.thisTrialN'
p7662
I90
sg6371
g7622
sS'block_loop.thisIndex'
p7663
g6365
sg38
S'left'
p7664
sg59
g63
sS'trial_loop.thisN'
p7665
I90
sg33
g7222
sg64
g65
sS'trial_loop.thisIndex'
p7666
g60
(g99
S'Z\x00\x00\x00'
tRp7667
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7668
I0
sg6380
g7629
sS'block_loop.thisRepN'
p7669
I2
sg6383
g7215
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7670
I2
sg6386
g7222
sg55
g11
sS'block_loop.thisTrial'
p7671
Nsg70
Vn
sS'block_loop.thisTrialN'
p7672
I0
sg39
F0.71677679108051962
sg34
g753
(S'\x07\xdf\x07\x0b\x0b*-\t\xbc0'
tRp7673
sa(dp7674
S'trial_loop.thisTrialN'
p7675
I91
sg6371
g7036
sS'block_loop.thisIndex'
p7676
g6365
sg38
S'right'
p7677
sg59
g63
sS'trial_loop.thisN'
p7678
I91
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p7679
g60
(g99
S'[\x00\x00\x00'
tRp7680
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7681
I0
sg6380
g7043
sS'block_loop.thisRepN'
p7682
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7683
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p7684
Nsg70
Vn
sS'block_loop.thisTrialN'
p7685
I0
sg39
F0.83337334228872351
sg34
g753
(S'\x07\xdf\x07\x0b\x0b*3\x06\x03\x10'
tRp7686
sa(dp7687
S'trial_loop.thisTrialN'
p7688
I92
sg6371
g6541
sS'block_loop.thisIndex'
p7689
g6365
sg38
S'left'
p7690
sg59
g63
sS'trial_loop.thisN'
p7691
I92
sg33
g6545
sg64
g65
sS'trial_loop.thisIndex'
p7692
g60
(g99
S'\\\x00\x00\x00'
tRp7693
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7694
I0
sg6380
g6549
sS'block_loop.thisRepN'
p7695
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7696
I2
sg6386
g6552
sg55
g11
sS'block_loop.thisTrial'
p7697
Nsg70
Vn
sS'block_loop.thisTrialN'
p7698
I0
sg39
F0.78335007817440783
sg34
g753
(S'\x07\xdf\x07\x0b\x0b*9\x03\xf7\xa0'
tRp7699
sa(dp7700
S'trial_loop.thisTrialN'
p7701
I93
sg6371
g6558
sS'block_loop.thisIndex'
p7702
g6365
sg38
S'right'
p7703
sg59
g63
sS'trial_loop.thisN'
p7704
I93
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7705
g60
(g99
S']\x00\x00\x00'
tRp7706
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7707
I0
sg6380
g6565
sS'block_loop.thisRepN'
p7708
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7709
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7710
Nsg70
Vn
sS'block_loop.thisTrialN'
p7711
I0
sg39
F0.76665322897861188
sg34
g753
(S'\x07\xdf\x07\x0b\x0b+\x03\x010\xb0'
tRp7712
sa(dp7713
S'trial_loop.thisTrialN'
p7714
I94
sg6371
g6641
sS'block_loop.thisIndex'
p7715
g6365
sg38
S'right'
p7716
sg59
g63
sS'trial_loop.thisN'
p7717
I94
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7718
g60
(g99
S'^\x00\x00\x00'
tRp7719
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7720
I0
sg6380
g6648
sS'block_loop.thisRepN'
p7721
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7722
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p7723
Nsg70
Vn
sS'block_loop.thisTrialN'
p7724
I0
sg39
F0.86707323748669296
sg34
g753
(S'\x07\xdf\x07\x0b\x0b+\x08\ruP'
tRp7725
sa(dp7726
S'trial_loop.thisTrialN'
p7727
I95
sg6371
g6708
sS'block_loop.thisIndex'
p7728
g6365
sg38
S'left'
p7729
sg59
g63
sS'trial_loop.thisN'
p7730
I95
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7731
g60
(g99
S'_\x00\x00\x00'
tRp7732
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7733
I0
sg6380
g6716
sS'block_loop.thisRepN'
p7734
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7735
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p7736
Nsg70
Vn
sS'block_loop.thisTrialN'
p7737
I0
sg39
F0.86667923004915792
sg34
g753
(S'\x07\xdf\x07\x0b\x0b+\x0e\x0b\xdf\x10'
tRp7738
sa(dp7739
S'trial_loop.thisTrialN'
p7740
I96
sg6371
g7211
sS'block_loop.thisIndex'
p7741
g6365
sg38
S'right'
p7742
sg59
g63
sS'trial_loop.thisN'
p7743
I96
sg33
g7215
sg64
g65
sS'trial_loop.thisIndex'
p7744
g60
(g99
S'`\x00\x00\x00'
tRp7745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7746
I0
sg6380
g7219
sS'block_loop.thisRepN'
p7747
I2
sg6383
g7215
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7748
I2
sg6386
g7222
sg55
g11
sS'block_loop.thisTrial'
p7749
Nsg70
Vn
sS'block_loop.thisTrialN'
p7750
I0
sg39
F0.8332667150953057
sg34
g753
(S'\x07\xdf\x07\x0b\x0b+\x14\nL\xb8'
tRp7751
sa(dp7752
S'trial_loop.thisTrialN'
p7753
I97
sg6371
g6800
sS'block_loop.thisIndex'
p7754
g6365
sg38
S'left'
p7755
sg59
g63
sS'trial_loop.thisN'
p7756
I97
sg33
g6500
sg64
g65
sS'trial_loop.thisIndex'
p7757
g60
(g99
S'a\x00\x00\x00'
tRp7758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7759
I0
sg6380
g6807
sS'block_loop.thisRepN'
p7760
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7761
I2
sg6386
g6494
sg55
g11
sS'block_loop.thisTrial'
p7762
Nsg70
Vn
sS'block_loop.thisTrialN'
p7763
I0
sg39
F1.2166698787868881
sg34
g753
(S'\x07\xdf\x07\x0b\x0b+\x1a\x08AH'
tRp7764
sa(dp7765
S'trial_loop.thisTrialN'
p7766
I98
sg6371
g6524
sS'block_loop.thisIndex'
p7767
g6365
sg38
S'right'
p7768
sg59
g63
sS'trial_loop.thisN'
p7769
I98
sg33
g6534
sg64
g65
sS'trial_loop.thisIndex'
p7770
g60
(g99
S'b\x00\x00\x00'
tRp7771
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7772
I0
sg6380
g6532
sS'block_loop.thisRepN'
p7773
I2
sg6383
g6534
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7774
I2
sg6386
g6528
sg55
g11
sS'block_loop.thisTrial'
p7775
Nsg70
Vn
sS'block_loop.thisTrialN'
p7776
I0
sg39
F0.96646660288024577
sg34
g753
(S'\x07\xdf\x07\x0b\x0b+ \x0c%`'
tRp7777
sa(dp7778
S'trial_loop.thisTrialN'
p7779
I99
sg6371
g6473
sS'block_loop.thisIndex'
p7780
g6365
sg38
S'left'
p7781
sg59
g63
sS'trial_loop.thisN'
p7782
I99
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p7783
g60
(g99
S'c\x00\x00\x00'
tRp7784
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7785
I0
sg6380
g6481
sS'block_loop.thisRepN'
p7786
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7787
I2
sg6386
g6477
sg55
g11
sS'block_loop.thisTrial'
p7788
Nsg70
Vn
sS'block_loop.thisTrialN'
p7789
I0
sg39
F0.80003352769472258
sg34
g753
(S'\x07\xdf\x07\x0b\x0b+&\x0c\x028'
tRp7790
sa(dp7791
S'trial_loop.thisTrialN'
p7792
I100
sg6371
g7157
sS'block_loop.thisIndex'
p7793
g6365
sg38
S'left'
p7794
sg59
g63
sS'trial_loop.thisN'
p7795
I100
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p7796
g60
(g99
S'd\x00\x00\x00'
tRp7797
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7798
I0
sg6380
g7164
sS'block_loop.thisRepN'
p7799
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7800
I2
sg6386
g6518
sg55
g11
sS'block_loop.thisTrial'
p7801
Nsg70
Vn
sS'block_loop.thisTrialN'
p7802
I0
sg39
F0.79999475417025678
sg34
g753
(S'\x07\xdf\x07\x0b\x0b+,\ty\xc8'
tRp7803
sa(dp7804
S'trial_loop.thisTrialN'
p7805
I101
sg6371
g6541
sS'block_loop.thisIndex'
p7806
g6365
sg38
S'left'
p7807
sg59
g63
sS'trial_loop.thisN'
p7808
I101
sg33
g6545
sg64
g65
sS'trial_loop.thisIndex'
p7809
g60
(g99
S'e\x00\x00\x00'
tRp7810
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7811
I0
sg6380
g6549
sS'block_loop.thisRepN'
p7812
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7813
I2
sg6386
g6552
sg55
g11
sS'block_loop.thisTrial'
p7814
Nsg70
Vn
sS'block_loop.thisTrialN'
p7815
I0
sg39
F0.51658223921731405
sg34
g753
(S'\x07\xdf\x07\x0b\x0b+2\x06\xf5@'
tRp7816
sa(dp7817
S'trial_loop.thisTrialN'
p7818
I102
sg6371
g6607
sS'block_loop.thisIndex'
p7819
g6365
sg38
S'right'
p7820
sg59
g63
sS'trial_loop.thisN'
p7821
I102
sg33
g6611
sg64
g65
sS'trial_loop.thisIndex'
p7822
g60
(g99
S'f\x00\x00\x00'
tRp7823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7824
I0
sg6380
g6615
sS'block_loop.thisRepN'
p7825
I2
sg6383
g6611
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7826
I2
sg6386
g6618
sg55
g11
sS'block_loop.thisTrial'
p7827
Nsg70
Vn
sS'block_loop.thisTrialN'
p7828
I0
sg39
F0.63303395990624267
sg34
g753
(S'\x07\xdf\x07\x0b\x0b+8\x00#('
tRp7829
sa(dp7830
S'trial_loop.thisTrialN'
p7831
I103
sg6371
g6877
sS'block_loop.thisIndex'
p7832
g6365
sg38
S'left'
p7833
sg59
g63
sS'trial_loop.thisN'
p7834
I103
sg33
g6834
sg64
g65
sS'trial_loop.thisIndex'
p7835
g60
(g99
S'g\x00\x00\x00'
tRp7836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7837
I0
sg6380
g6884
sS'block_loop.thisRepN'
p7838
I2
sg6383
g6834
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7839
I2
sg6386
g6841
sg55
g11
sS'block_loop.thisTrial'
p7840
Nsg70
Vn
sS'block_loop.thisTrialN'
p7841
I0
sg39
F0.61646540546280448
sg34
g753
(S'\x07\xdf\x07\x0b\x0b,\x01\nA\x00'
tRp7842
sa(dp7843
S'trial_loop.thisTrialN'
p7844
I104
sg6371
g6426
sS'block_loop.thisIndex'
p7845
g6365
sg38
S'left'
p7846
sg59
g63
sS'trial_loop.thisN'
p7847
I104
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7848
g60
(g99
S'h\x00\x00\x00'
tRp7849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7850
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7851
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7852
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7853
Nsg70
Vn
sS'block_loop.thisTrialN'
p7854
I0
sg39
F0.59995358580999891
sg34
g753
(S'\x07\xdf\x07\x0b\x0b,\x07\x05\x1c\x98'
tRp7855
sa(dp7856
S'trial_loop.thisTrialN'
p7857
I105
sg6371
g6573
sS'block_loop.thisIndex'
p7858
g6365
sg38
S'right'
p7859
sg59
g63
sS'trial_loop.thisN'
p7860
I105
sg33
g6584
sg64
g65
sS'trial_loop.thisIndex'
p7861
g60
(g99
S'i\x00\x00\x00'
tRp7862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7863
I0
sg6380
g6581
sS'block_loop.thisRepN'
p7864
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7865
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p7866
Nsg70
Vn
sS'block_loop.thisTrialN'
p7867
I0
sg39
F0.63368626744340872
sg34
g753
(S'\x07\xdf\x07\x0b\x0b,\x0c\x0e\xbdp'
tRp7868
sa(dp7869
S'trial_loop.thisTrialN'
p7870
I106
sg6371
g7211
sS'block_loop.thisIndex'
p7871
g6365
sg38
S'right'
p7872
sg59
g63
sS'trial_loop.thisN'
p7873
I106
sg33
g7215
sg64
g65
sS'trial_loop.thisIndex'
p7874
g60
(g99
S'j\x00\x00\x00'
tRp7875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7876
I0
sg6380
g7219
sS'block_loop.thisRepN'
p7877
I2
sg6383
g7215
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7878
I2
sg6386
g7222
sg55
g11
sS'block_loop.thisTrial'
p7879
Nsg70
Vn
sS'block_loop.thisTrialN'
p7880
I0
sg39
F0.60006135340154287
sg34
g753
(S'\x07\xdf\x07\x0b\x0b,\x12\t\x99\x08'
tRp7881
sa(dp7882
S'trial_loop.thisTrialN'
p7883
I107
sg6371
g7280
sS'block_loop.thisIndex'
p7884
g6365
sg38
S'right'
p7885
sg59
g63
sS'trial_loop.thisN'
p7886
I107
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7887
g60
(g99
S'k\x00\x00\x00'
tRp7888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7889
I0
sg6380
g7287
sS'block_loop.thisRepN'
p7890
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7891
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p7892
Nsg70
Vn
sS'block_loop.thisTrialN'
p7893
I0
sg39
F0.94991486930484825
sg34
g753
(S'\x07\xdf\x07\x0b\x0b,\x18\x03\xfb\x88'
tRp7894
sa(dp7895
S'trial_loop.thisTrialN'
p7896
I108
sg6371
g6830
sS'block_loop.thisIndex'
p7897
g6365
sg38
S'right'
p7898
sg59
g63
sS'trial_loop.thisN'
p7899
I108
sg33
g6841
sg64
g65
sS'trial_loop.thisIndex'
p7900
g60
(g99
S'l\x00\x00\x00'
tRp7901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7902
I0
sg6380
g6838
sS'block_loop.thisRepN'
p7903
I2
sg6383
g6834
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7904
I2
sg6386
g6841
sg55
g11
sS'block_loop.thisTrial'
p7905
Nsg70
Vn
sS'block_loop.thisTrialN'
p7906
I0
sg39
F0.83325417071955599
sg34
g753
(S'\x07\xdf\x07\x0b\x0b,\x1e\x03\xd4x'
tRp7907
sa(dp7908
S'trial_loop.thisTrialN'
p7909
I109
sg6371
g7425
sS'block_loop.thisIndex'
p7910
g6365
sg38
S'right'
p7911
sg59
g63
sS'trial_loop.thisN'
p7912
I109
sg33
g6967
sg64
g65
sS'trial_loop.thisIndex'
p7913
g60
(g99
S'm\x00\x00\x00'
tRp7914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7915
I0
sg6380
g7432
sS'block_loop.thisRepN'
p7916
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7917
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p7918
Nsg70
Vn
sS'block_loop.thisTrialN'
p7919
I0
sg39
F0.74993243143035215
sg34
g753
(S'\x07\xdf\x07\x0b\x0b,$\x01\xc9\x08'
tRp7920
sa(dp7921
S'trial_loop.thisTrialN'
p7922
I110
sg6371
g6933
sS'block_loop.thisIndex'
p7923
g6365
sg38
S'right'
p7924
sg59
g63
sS'trial_loop.thisN'
p7925
I110
sg33
g6545
sg64
g65
sS'trial_loop.thisIndex'
p7926
g60
(g99
S'n\x00\x00\x00'
tRp7927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7928
I0
sg6380
g6940
sS'block_loop.thisRepN'
p7929
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7930
I2
sg6386
g6552
sg55
g11
sS'block_loop.thisTrial'
p7931
Nsg70
Vn
sS'block_loop.thisTrialN'
p7932
I0
sg39
F0.6666235216162022
sg34
g753
(S'\x07\xdf\x07\x0b\x0b,)\r\x90\xa8'
tRp7933
sa(dp7934
S'trial_loop.thisTrialN'
p7935
I111
sg6371
g6443
sS'block_loop.thisIndex'
p7936
g6365
sg38
S'left'
p7937
sg59
g63
sS'trial_loop.thisN'
p7938
I111
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7939
g60
(g99
S'o\x00\x00\x00'
tRp7940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7941
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7942
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7943
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p7944
Nsg70
Vn
sS'block_loop.thisTrialN'
p7945
I0
sg39
F0.70003632166935859
sg34
g753
(S'\x07\xdf\x07\x0b\x0b,/\t#\xd8'
tRp7946
sa(dp7947
S'trial_loop.thisTrialN'
p7948
I112
sg6371
g6558
sS'block_loop.thisIndex'
p7949
g6365
sg38
S'right'
p7950
sg59
g63
sS'trial_loop.thisN'
p7951
I112
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7952
g60
(g99
S'p\x00\x00\x00'
tRp7953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7954
I0
sg6380
g6565
sS'block_loop.thisRepN'
p7955
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7956
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7957
Nsg70
Vn
sS'block_loop.thisTrialN'
p7958
I0
sg39
F0.68334403406606725
sg34
g753
(S'\x07\xdf\x07\x0b\x0b,5\x04\xf1\xa0'
tRp7959
sa(dp7960
S'trial_loop.thisTrialN'
p7961
I113
sg6371
g7211
sS'block_loop.thisIndex'
p7962
g6365
sg38
S'right'
p7963
sg59
g63
sS'trial_loop.thisN'
p7964
I113
sg33
g7215
sg64
g65
sS'trial_loop.thisIndex'
p7965
g60
(g99
S'q\x00\x00\x00'
tRp7966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7967
I0
sg6380
g7219
sS'block_loop.thisRepN'
p7968
I2
sg6383
g7215
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7969
I2
sg6386
g7222
sg55
g11
sS'block_loop.thisTrial'
p7970
Nsg70
Vn
sS'block_loop.thisTrialN'
p7971
I0
sg39
F0.56667506759731623
sg34
g753
(S'\x07\xdf\x07\x0b\x0b,;\x00\xbfh'
tRp7972
sa(dp7973
S'trial_loop.thisTrialN'
p7974
I114
sg6371
g7036
sS'block_loop.thisIndex'
p7975
g6365
sg38
S'right'
p7976
sg59
g63
sS'trial_loop.thisN'
p7977
I114
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p7978
g60
(g99
S'r\x00\x00\x00'
tRp7979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7980
I0
sg6380
g7043
sS'block_loop.thisRepN'
p7981
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7982
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p7983
Nsg70
Vn
sS'block_loop.thisTrialN'
p7984
I0
sg39
F0.58334939393625973
sg34
g753
(S'\x07\xdf\x07\x0b\x0b-\x04\t\xe7('
tRp7985
sa(dp7986
S'trial_loop.thisTrialN'
p7987
I115
sg6371
g7280
sS'block_loop.thisIndex'
p7988
g6365
sg38
S'right'
p7989
sg59
g63
sS'trial_loop.thisN'
p7990
I115
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7991
g60
(g99
S's\x00\x00\x00'
tRp7992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7993
I0
sg6380
g7287
sS'block_loop.thisRepN'
p7994
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7995
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p7996
Nsg70
Vn
sS'block_loop.thisTrialN'
p7997
I0
sg39
F0.74996892415947514
sg34
g753
(S'\x07\xdf\x07\x0b\x0b-\n\x04\x0b('
tRp7998
sa(dp7999
S'trial_loop.thisTrialN'
p8000
I116
sg6371
g6815
sS'block_loop.thisIndex'
p8001
g6365
sg38
S'left'
p8002
sg59
g63
sS'trial_loop.thisN'
p8003
I116
sg33
g6534
sg64
g65
sS'trial_loop.thisIndex'
p8004
g60
(g99
S't\x00\x00\x00'
tRp8005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8006
I0
sg6380
g6822
sS'block_loop.thisRepN'
p8007
I2
sg6383
g6534
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8008
I2
sg6386
g6528
sg55
g11
sS'block_loop.thisTrial'
p8009
Nsg70
Vn
sS'block_loop.thisTrialN'
p8010
I0
sg39
F0.71636710317307006
sg34
g753
(S'\x07\xdf\x07\x0b\x0b-\x10\x00\x90\x88'
tRp8011
sa(dp8012
S'trial_loop.thisTrialN'
p8013
I117
sg6371
g6755
sS'block_loop.thisIndex'
p8014
g6365
sg38
S'right'
p8015
sg59
g63
sS'trial_loop.thisN'
p8016
I117
sg33
g6477
sg64
g65
sS'trial_loop.thisIndex'
p8017
g60
(g99
S'u\x00\x00\x00'
tRp8018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8019
I0
sg6380
g6762
sS'block_loop.thisRepN'
p8020
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8021
I2
sg6386
g6477
sg55
g11
sS'block_loop.thisTrial'
p8022
Nsg70
Vn
sS'block_loop.thisTrialN'
p8023
I0
sg39
F0.58371574672764837
sg34
g753
(S'\x07\xdf\x07\x0b\x0b-\x15\x0c\x1d\x90'
tRp8024
sa(dp8025
S'trial_loop.thisTrialN'
p8026
I118
sg6371
g6708
sS'block_loop.thisIndex'
p8027
g6365
sg38
S'left'
p8028
sg59
g63
sS'trial_loop.thisN'
p8029
I118
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p8030
g60
(g99
S'v\x00\x00\x00'
tRp8031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8032
I0
sg6380
g6716
sS'block_loop.thisRepN'
p8033
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8034
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p8035
Nsg70
Vn
sS'block_loop.thisTrialN'
p8036
I0
sg39
F0.61650702998213092
sg34
g753
(S'\x07\xdf\x07\x0b\x0b-\x1b\x06A\x90'
tRp8037
sa(dp8038
S'trial_loop.thisTrialN'
p8039
I119
sg6371
g6590
sS'block_loop.thisIndex'
p8040
g6365
sg38
S'right'
p8041
sg59
g63
sS'trial_loop.thisN'
p8042
I119
sg33
g6601
sg64
g65
sS'trial_loop.thisIndex'
p8043
g60
(g99
S'w\x00\x00\x00'
tRp8044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8045
I0
sg6380
g6598
sS'block_loop.thisRepN'
p8046
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8047
I2
sg6386
g6601
sg55
g11
sS'block_loop.thisTrial'
p8048
Nsg70
Vn
sS'block_loop.thisTrialN'
p8049
I0
sg39
F0.58326671509621519
sg34
g753
(S'\x07\xdf\x07\x0b\x0b-!\x00\xde\xa8'
tRp8050
sa(dp8051
S'trial_loop.thisTrialN'
p8052
I120
sg6371
g6980
sS'block_loop.thisIndex'
p8053
g6365
sg38
S'left'
p8054
sg59
g63
sS'trial_loop.thisN'
p8055
I120
sg33
g6984
sg64
g65
sS'trial_loop.thisIndex'
p8056
g60
(g99
S'x\x00\x00\x00'
tRp8057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8058
I0
sg6380
g6988
sS'block_loop.thisRepN'
p8059
I2
sg6383
g6984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8060
I2
sg6386
g6991
sg55
g11
sS'block_loop.thisTrial'
p8061
Nsg70
Vn
sS'block_loop.thisTrialN'
p8062
I0
sg39
F0.68324111316542258
sg34
g753
(S'\x07\xdf\x07\x0b\x0b-&\nD\xe8'
tRp8063
sa(dp8064
S'trial_loop.thisTrialN'
p8065
I121
sg6371
g6948
sS'block_loop.thisIndex'
p8066
g6365
sg38
S'left'
p8067
sg59
g63
sS'trial_loop.thisN'
p8068
I121
sg33
g6601
sg64
g65
sS'trial_loop.thisIndex'
p8069
g60
(g99
S'y\x00\x00\x00'
tRp8070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8071
I0
sg6380
g6955
sS'block_loop.thisRepN'
p8072
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8073
I2
sg6386
g6601
sg55
g11
sS'block_loop.thisTrial'
p8074
Nsg70
Vn
sS'block_loop.thisTrialN'
p8075
I0
sg39
F0.63335954347530787
sg34
g753
(S'\x07\xdf\x07\x0b\x0b-,\x06\x12\xb0'
tRp8076
sa(dp8077
S'trial_loop.thisTrialN'
p8078
I122
sg6371
g6443
sS'block_loop.thisIndex'
p8079
g6365
sg38
S'left'
p8080
sg59
g63
sS'trial_loop.thisN'
p8081
I122
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8082
g60
(g99
S'z\x00\x00\x00'
tRp8083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8084
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8085
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8086
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p8087
Nsg70
Vn
sS'block_loop.thisTrialN'
p8088
I0
sg39
F0.59999264443467837
sg34
g753
(S'\x07\xdf\x07\x0b\x0b-2\x00\xeeH'
tRp8089
sa(dp8090
S'trial_loop.thisTrialN'
p8091
I123
sg6371
g6607
sS'block_loop.thisIndex'
p8092
g6365
sg38
S'right'
p8093
sg59
g63
sS'trial_loop.thisN'
p8094
I123
sg33
g6618
sg64
g65
sS'trial_loop.thisIndex'
p8095
g60
(g99
S'{\x00\x00\x00'
tRp8096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8097
I0
sg6380
g6615
sS'block_loop.thisRepN'
p8098
I2
sg6383
g6611
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8099
I2
sg6386
g6618
sg55
g11
sS'block_loop.thisTrial'
p8100
Nsg70
Vn
sS'block_loop.thisTrialN'
p8101
I0
sg39
F0.68346662682870374
sg34
g753
(S'\x07\xdf\x07\x0b\x0b-7\n\x93\x08'
tRp8102
sa(dp8103
S'trial_loop.thisTrialN'
p8104
I124
sg6371
g6392
sS'block_loop.thisIndex'
p8105
g6365
sg38
S'right'
p8106
sg59
g63
sS'trial_loop.thisN'
p8107
I124
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8108
g60
(g99
S'|\x00\x00\x00'
tRp8109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8110
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8111
I2
sg6383
g6402
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8112
I2
sg6386
g6396
sg55
g11
sS'block_loop.thisTrial'
p8113
Nsg70
Vn
sS'block_loop.thisTrialN'
p8114
I0
sg39
F0.64991726413973083
sg34
g753
(S'\x07\xdf\x07\x0b\x0b.\x01\x06"P'
tRp8115
sa(dp8116
S'trial_loop.thisTrialN'
p8117
I125
sg6371
g6624
sS'block_loop.thisIndex'
p8118
g6365
sg38
S'right'
p8119
sg59
g63
sS'trial_loop.thisN'
p8120
I125
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p8121
g60
(g99
S'}\x00\x00\x00'
tRp8122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8123
I0
sg6380
g6632
sS'block_loop.thisRepN'
p8124
I2
sg6383
g6628
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8125
I2
sg6386
g6635
sg55
g11
sS'block_loop.thisTrial'
p8126
Nsg70
Vn
sS'block_loop.thisTrialN'
p8127
I0
sg39
F0.68337596520450461
sg34
g753
(S'\x07\xdf\x07\x0b\x0b.\x07\x01w\x00'
tRp8128
sa(dp8129
S'trial_loop.thisTrialN'
p8130
I126
sg6371
g6770
sS'block_loop.thisIndex'
p8131
g6365
sg38
S'left'
p8132
sg59
g63
sS'trial_loop.thisN'
p8133
I126
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p8134
g60
(g99
S'~\x00\x00\x00'
tRp8135
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8136
I0
sg6380
g6777
sS'block_loop.thisRepN'
p8137
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8138
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8139
Nsg70
Vn
sS'block_loop.thisTrialN'
p8140
I0
sg39
F0.71652732906295569
sg34
g753
(S'\x07\xdf\x07\x0b\x0b.\x0c\x0cLp'
tRp8141
sa(dp8142
S'trial_loop.thisTrialN'
p8143
I127
sg6371
g6800
sS'block_loop.thisIndex'
p8144
g6365
sg38
S'left'
p8145
sg59
g63
sS'trial_loop.thisN'
p8146
I127
sg33
g6500
sg64
g65
sS'trial_loop.thisIndex'
p8147
g60
(g99
S'\x7f\x00\x00\x00'
tRp8148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8149
I0
sg6380
g6807
sS'block_loop.thisRepN'
p8150
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8151
I2
sg6386
g6494
sg55
g11
sS'block_loop.thisTrial'
p8152
Nsg70
Vn
sS'block_loop.thisTrialN'
p8153
I0
sg39
F0.73331598028016742
sg34
g753
(S'\x07\xdf\x07\x0b\x0b.\x12\x08\x93P'
tRp8154
sa(dp8155
S'trial_loop.thisTrialN'
p8156
I128
sg6371
g7077
sS'block_loop.thisIndex'
p8157
g6365
sg38
S'left'
p8158
sg59
g63
sS'trial_loop.thisN'
p8159
I128
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p8160
g60
(g99
S'\x80\x00\x00\x00'
tRp8161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8162
I0
sg6380
g7084
sS'block_loop.thisRepN'
p8163
I2
sg6383
g6628
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8164
I2
sg6386
g6635
sg55
g11
sS'block_loop.thisTrial'
p8165
Nsg70
Vn
sS'block_loop.thisTrialN'
p8166
I0
sg39
F0.68336684202131437
sg34
g753
(S'\x07\xdf\x07\x0b\x0b.\x18\x05\x18\xb0'
tRp8167
sa(dp8168
S'trial_loop.thisTrialN'
p8169
I129
sg6371
g6490
sS'block_loop.thisIndex'
p8170
g6365
sg38
S'right'
p8171
sg59
g63
sS'trial_loop.thisN'
p8172
I129
sg33
g6500
sg64
g65
sS'trial_loop.thisIndex'
p8173
g60
(g99
S'\x81\x00\x00\x00'
tRp8174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8175
I0
sg6380
g6498
sS'block_loop.thisRepN'
p8176
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8177
I2
sg6386
g6494
sg55
g11
sS'block_loop.thisTrial'
p8178
Nsg70
Vn
sS'block_loop.thisTrialN'
p8179
I0
sg39
F0.56710271677002311
sg34
g753
(S'\x07\xdf\x07\x0b\x0b.\x1e\x00\xab\xe0'
tRp8180
sa(dp8181
S'trial_loop.thisTrialN'
p8182
I130
sg6371
g7425
sS'block_loop.thisIndex'
p8183
g6365
sg38
S'right'
p8184
sg59
g63
sS'trial_loop.thisN'
p8185
I130
sg33
g6967
sg64
g65
sS'trial_loop.thisIndex'
p8186
g60
(g99
S'\x82\x00\x00\x00'
tRp8187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8188
I0
sg6380
g7432
sS'block_loop.thisRepN'
p8189
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8190
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p8191
Nsg70
Vn
sS'block_loop.thisTrialN'
p8192
I0
sg39
F0.61661565287249687
sg34
g753
(S'\x07\xdf\x07\x0b\x0b.#\t\xd3\xa0'
tRp8193
sa(dp8194
S'trial_loop.thisTrialN'
p8195
I131
sg6371
g6507
sS'block_loop.thisIndex'
p8196
g6365
sg38
S'right'
p8197
sg59
g63
sS'trial_loop.thisN'
p8198
I131
sg33
g6518
sg64
g65
sS'trial_loop.thisIndex'
p8199
g60
(g99
S'\x83\x00\x00\x00'
tRp8200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8201
I0
sg6380
g6515
sS'block_loop.thisRepN'
p8202
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8203
I2
sg6386
g6518
sg55
g11
sS'block_loop.thisTrial'
p8204
Nsg70
Vn
sS'block_loop.thisTrialN'
p8205
I0
sg39
F0.6500099214608781
sg34
g753
(S'\x07\xdf\x07\x0b\x0b.)\x04t\xa0'
tRp8206
sa(dp8207
S'trial_loop.thisTrialN'
p8208
I132
sg6371
g6490
sS'block_loop.thisIndex'
p8209
g6365
sg38
S'right'
p8210
sg59
g63
sS'trial_loop.thisN'
p8211
I132
sg33
g6500
sg64
g65
sS'trial_loop.thisIndex'
p8212
g60
(g99
S'\x84\x00\x00\x00'
tRp8213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8214
I0
sg6380
g6498
sS'block_loop.thisRepN'
p8215
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8216
I2
sg6386
g6494
sg55
g11
sS'block_loop.thisTrial'
p8217
Nsg70
Vn
sS'block_loop.thisTrialN'
p8218
I0
sg39
F0.58336079791388329
sg34
g753
(S'\x07\xdf\x07\x0b\x0b..\x0e\xcd\x10'
tRp8219
sa(dp8220
S'trial_loop.thisTrialN'
p8221
I133
sg6371
g6918
sS'block_loop.thisIndex'
p8222
g6365
sg38
S'left'
p8223
sg59
g63
sS'trial_loop.thisN'
p8224
I133
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8225
g60
(g99
S'\x85\x00\x00\x00'
tRp8226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8227
I0
sg6380
g6925
sS'block_loop.thisRepN'
p8228
I2
sg6383
g6402
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8229
I2
sg6386
g6396
sg55
g11
sS'block_loop.thisTrial'
p8230
Nsg70
Vn
sS'block_loop.thisTrialN'
p8231
I0
sg39
F0.70001294351459364
sg34
g753
(S'\x07\xdf\x07\x0b\x0b.4\x08\xf1\x10'
tRp8232
sa(dp8233
S'trial_loop.thisTrialN'
p8234
I134
sg6371
g6785
sS'block_loop.thisIndex'
p8235
g6365
sg38
S'left'
p8236
sg59
g63
sS'trial_loop.thisN'
p8237
I134
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p8238
g60
(g99
S'\x86\x00\x00\x00'
tRp8239
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8240
I0
sg6380
g6792
sS'block_loop.thisRepN'
p8241
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8242
I2
sg6386
g6749
sg55
g11
sS'block_loop.thisTrial'
p8243
Nsg70
Vn
sS'block_loop.thisTrialN'
p8244
I0
sg39
F0.79995141905419587
sg34
g753
(S'\x07\xdf\x07\x0b\x0b.:\x04\xfdX'
tRp8245
sa(dp8246
S'trial_loop.thisTrialN'
p8247
I135
sg6371
g6948
sS'block_loop.thisIndex'
p8248
g6365
sg38
S'left'
p8249
sg59
g63
sS'trial_loop.thisN'
p8250
I135
sg33
g6601
sg64
g65
sS'trial_loop.thisIndex'
p8251
g60
(g99
S'\x87\x00\x00\x00'
tRp8252
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8253
I0
sg6380
g6955
sS'block_loop.thisRepN'
p8254
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8255
I2
sg6386
g6601
sg55
g11
sS'block_loop.thisTrial'
p8256
Nsg70
Vn
sS'block_loop.thisTrialN'
p8257
I0
sg39
F0.68368301731061365
sg34
g753
(S'\x07\xdf\x07\x0b\x0b/\x04\x02t\xe8'
tRp8258
sa(dp8259
S'trial_loop.thisTrialN'
p8260
I136
sg6371
g6392
sS'block_loop.thisIndex'
p8261
g6365
sg38
S'right'
p8262
sg59
g63
sS'trial_loop.thisN'
p8263
I136
sg33
g6402
sg64
g65
sS'trial_loop.thisIndex'
p8264
g60
(g99
S'\x88\x00\x00\x00'
tRp8265
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8266
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8267
I2
sg6383
g6402
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8268
I2
sg6386
g6396
sg55
g11
sS'block_loop.thisTrial'
p8269
Nsg70
Vn
sS'block_loop.thisTrialN'
p8270
I0
sg39
F0.75002252285594295
sg34
g753
(S'\x07\xdf\x07\x0b\x0b/\t\rJX'
tRp8271
sa(dp8272
S'trial_loop.thisTrialN'
p8273
I137
sg6371
S'30-spaghetti_hoops.png'
p8274
sS'block_loop.thisIndex'
p8275
g6365
sg38
S'right'
p8276
sg59
g63
sS'trial_loop.thisN'
p8277
I137
sg33
g6984
sg64
g65
sS'trial_loop.thisIndex'
p8278
g60
(g99
S'\x89\x00\x00\x00'
tRp8279
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8280
I0
sg6380
S'19-caramello_redo.png'
p8281
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6386
g6991
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vn
sS'block_loop.thisTrialN'
p8285
I0
sg39
F0.64984142768662423
sg34
g753
(S'\x07\xdf\x07\x0b\x0b/\x0f\n\nP'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g7622
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'left'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g7215
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g7629
sS'block_loop.thisRepN'
p8295
I2
sg6383
g7215
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6386
g7222
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vn
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.68333776187773765
sg34
g753
(S'\x07\xdf\x07\x0b\x0b/\x15\x05$h'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g6862
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'left'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g6869
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vn
sS'block_loop.thisTrialN'
p8311
I0
sg39
F0.66663093420174846
sg34
g753
(S'\x07\xdf\x07\x0b\x0b/\x1b\x00\xf20'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g6541
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'right'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6552
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g6549
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6386
g6552
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vn
sS'block_loop.thisTrialN'
p8324
I0
sg39
F0.58324704323331389
sg34
g753
(S'\x07\xdf\x07\x0b\x0b/ \x0b\x89 '
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6372
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'right'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vn
sS'block_loop.thisTrialN'
p8337
I0
sg39
F0.75035894020584237
sg34
g753
(S'\x07\xdf\x07\x0b\x0b/&\x05\xad '
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g7425
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'right'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6967
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g7432
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vn
sS'block_loop.thisTrialN'
p8350
I0
sg39
F0.66665830374950019
sg34
g753
(S'\x07\xdf\x07\x0b\x0b/,\x02q\x00'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g6409
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'left'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vn
sS'block_loop.thisTrialN'
p8363
I0
sg39
F0.83326015780858143
sg34
g753
(S'\x07\xdf\x07\x0b\x0b/1\r\x07\xf0'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g6770
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'left'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g6777
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vn
sS'block_loop.thisTrialN'
p8376
I0
sg39
F0.94997702098407899
sg34
g753
(S'\x07\xdf\x07\x0b\x0b/7\n\xf8\x98'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g6815
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'left'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6534
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g6822
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6534
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6386
g6528
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vn
sS'block_loop.thisTrialN'
p8389
I0
sg39
F0.84988630233965523
sg34
g753
(S'\x07\xdf\x07\x0b\x0b0\x01\n\xd5p'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g7036
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'right'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g7043
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vn
sS'block_loop.thisTrialN'
p8402
I0
sg39
F0.89992496182549075
sg34
g753
(S'\x07\xdf\x07\x0b\x0b0\x07\t\x04\x98'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g6847
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'left'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6611
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g6854
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6611
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6386
g6618
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vn
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.80012190852448839
sg34
g753
(S'\x07\xdf\x07\x0b\x0b0\r\x07\xebX'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g6785
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'left'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6749
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g6792
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6386
g6749
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vn
sS'block_loop.thisTrialN'
p8428
I0
sg39
F0.83323649455451232
sg34
g753
(S'\x07\xdf\x07\x0b\x0b0\x13\x05b\xe8'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g6948
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'left'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6601
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g6955
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6386
g6601
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vn
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.68320889692677156
sg34
g753
(S'\x07\xdf\x07\x0b\x0b0\x19\x03Wx'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g7622
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'left'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g7215
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g7629
sS'block_loop.thisRepN'
p8451
I2
sg6383
g7215
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6386
g7222
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vn
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.71668071256590338
sg34
g753
(S'\x07\xdf\x07\x0b\x0b0\x1e\x0eg\x80'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g6963
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'left'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6967
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g6971
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vn
sS'block_loop.thisTrialN'
p8467
I0
sg39
F0.70002662828846951
sg34
g753
(S'\x07\xdf\x07\x0b\x0b0$\ns\xc8'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g7036
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'right'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g7043
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vn
sS'block_loop.thisTrialN'
p8480
I0
sg39
F1.0000367778284271
sg34
g753
(S'\x07\xdf\x07\x0b\x0b0*\x06\x80\x10'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g7157
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'left'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6518
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g7164
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6386
g6518
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vn
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.70013382568049565
sg34
g753
(S'\x07\xdf\x07\x0b\x0b00\x07\x10\x98'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g6473
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'left'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g6481
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6386
g6477
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vn
sS'block_loop.thisTrialN'
p8506
I0
sg39
F0.63334329280769452
sg34
g753
(S'\x07\xdf\x07\x0b\x0b06\x02\xde`'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g7280
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'right'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g7287
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vn
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.95007623559195054
sg34
g753
(S'\x07\xdf\x07\x0b\x0b0;\x0c\xfc8'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g6830
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'right'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6834
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g6838
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6834
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6386
g6841
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vn
sS'block_loop.thisTrialN'
p8532
I0
sg39
F1.0499804991977726
sg34
g753
(S'\x07\xdf\x07\x0b\x0b1\x05\x0c\xd5('
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g6409
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'left'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vn
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.7332766365561838
sg34
g753
(S'\x07\xdf\x07\x0b\x0b1\x0b\x0e\x1dH'
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g6738
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'right'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g6746
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6386
g6749
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vn
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.7999756525068733
sg34
g753
(S'\x07\xdf\x07\x0b\x0b1\x11\n\xa2\xa8'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g6830
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'right'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6834
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g6838
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6834
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6386
g6841
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vn
sS'block_loop.thisTrialN'
p8571
I0
sg39
F0.8337265805057541
sg34
g753
(S'\x07\xdf\x07\x0b\x0b1\x17\x08\x1e '
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g6573
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'right'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g6581
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vn
sS'block_loop.thisTrialN'
p8584
I0
sg39
F0.73330913789322949
sg34
g753
(S'\x07\xdf\x07\x0b\x0b1\x1d\x06\x0e\xc8'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g7077
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'left'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6628
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g7084
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6628
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6386
g6635
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vn
sS'block_loop.thisTrialN'
p8597
I0
sg39
F0.78336091195251356
sg34
g753
(S'\x07\xdf\x07\x0b\x0b1#\x02Y\x90'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g8274
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'right'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6984
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g8281
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6386
g6991
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vn
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.83328353596334637
sg34
g753
(S'\x07\xdf\x07\x0b\x0b1(\x0e\xd8\xc8'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g6862
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'left'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g6869
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vn
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.64998283701243054
sg34
g753
(S'\x07\xdf\x07\x0b\x0b1.\x0c\xc9p'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g6738
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'right'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g6746
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6386
g6749
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vn
sS'block_loop.thisTrialN'
p8636
I0
sg39
F0.76663384221683373
sg34
g753
(S'\x07\xdf\x07\x0b\x0b14\x07\xe3\x88'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g6918
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'left'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g6925
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6402
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6386
g6396
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vn
sS'block_loop.thisTrialN'
p8649
I0
sg39
F0.86686254899450432
sg34
g753
(S'\x07\xdf\x07\x0b\x0b1:\x04\xe2\x00'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6573
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'right'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6584
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g6581
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vn
sS'block_loop.thisTrialN'
p8662
I0
sg39
F0.76660390677443502
sg34
g753
(S'\x07\xdf\x07\x0b\x0b2\x04\x03O\xa8'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g6641
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'right'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g6648
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vn
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.99997434104989225
sg34
g753
(S'\x07\xdf\x07\x0b\x0b2\n\x00N '
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g6770
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'left'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g6777
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vn
sS'block_loop.thisTrialN'
p8688
I0
sg39
F0.83329208894610929
sg34
g753
(S'\x07\xdf\x07\x0b\x0b2\x10\x00\xde\xa8'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g6641
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'right'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g6648
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vn
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.7000038203323129
sg34
g753
(S'\x07\xdf\x07\x0b\x0b2\x15\x0e\x15x'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g6541
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'left'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6545
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g6549
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6545
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6386
g6552
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vn
sS'block_loop.thisTrialN'
p8714
I0
sg39
F1.0666998712495115
sg34
g753
(S'\x07\xdf\x07\x0b\x0b2\x1b\n!\xc0'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6800
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'left'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6500
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6807
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6386
g6494
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vn
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.85039948134726728
sg34
g753
(S'\x07\xdf\x07\x0b\x0b2!\x0b\xa4x'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g6877
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'left'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6834
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g6884
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6834
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6386
g6841
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vn
sS'block_loop.thisTrialN'
p8740
I0
sg39
F0.98329117662888166
sg34
g753
(S"\x07\xdf\x07\x0b\x0b2'\t\xd3\xa0"
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g6785
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'left'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g6792
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6386
g6749
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vn
sS'block_loop.thisTrialN'
p8753
I0
sg39
F0.86666925156805519
sg34
g753
(S'\x07\xdf\x07\x0b\x0b2-\t\xeb\x10'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g6507
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'right'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g6515
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6386
g6518
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vn
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.86662135486039915
sg34
g753
(S'\x07\xdf\x07\x0b\x0b23\x08\x978'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g8274
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'right'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6984
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g8281
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6386
g6991
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vn
sS'block_loop.thisTrialN'
p8779
I0
sg39
F1.0999578623013804
sg34
g753
(S'\x07\xdf\x07\x0b\x0b29\x07\x04\xe0'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6624
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'right'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6632
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6628
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6386
g6635
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vn
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.71655241781445511
sg34
g753
(S'\x07\xdf\x07\x0b\x0b3\x03\t\x00\xb0'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g7211
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'right'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g7215
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g7219
sS'block_loop.thisRepN'
p8802
I2
sg6383
g7215
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6386
g7222
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vn
sS'block_loop.thisTrialN'
p8805
I0
sg39
F0.93312137139673723
sg34
g753
(S'\x07\xdf\x07\x0b\x0b3\t\x05Kx'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6590
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'right'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6598
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6594
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6386
g6601
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vn
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.7333533283081124
sg34
g753
(S'\x07\xdf\x07\x0b\x0b3\x0f\x04\xabP'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g6426
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'left'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vn
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.86663247373962804
sg34
g753
(S'\x07\xdf\x07\x0b\x0b3\x15\x010\xb0'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6507
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'right'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6511
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g6515
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6511
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6386
g6518
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vn
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.85004880902488367
sg34
g753
(S'\x07\xdf\x07\x0b\x0b3\x1a\x0e\xe0\x98'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6558
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'right'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6565
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vn
sS'block_loop.thisTrialN'
p8857
I0
sg39
F0.80003267239681009
sg34
g753
(S'\x07\xdf\x07\x0b\x0b3 \r\x0f\xc0'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g8274
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'right'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6984
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g8281
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6386
g6991
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vn
sS'block_loop.thisTrialN'
p8870
I0
sg39
F1.1666699928273374
sg34
g753
(S'\x07\xdf\x07\x0b\x0b3&\n\x87P'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g6607
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'right'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6611
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g6615
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6611
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6386
g6618
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vn
sS'block_loop.thisTrialN'
p8883
I0
sg39
F0.80005719094879169
sg34
g753
(S'\x07\xdf\x07\x0b\x0b3,\r} '
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g6770
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'left'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g6777
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vn
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.98329089152957749
sg34
g753
(S'\x07\xdf\x07\x0b\x0b32\n\xf4\xb0'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6641
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'right'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6648
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vn
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.83339615024578961
sg34
g753
(S'\x07\xdf\x07\x0b\x0b38\x0bJ\xa0'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g6392
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'right'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6402
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6386
g6396
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vn
sS'block_loop.thisTrialN'
p8922
I0
sg39
F0.68332835359615274
sg34
g753
(S'\x07\xdf\x07\x0b\x0b4\x02\t;H'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g6372
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'right'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vn
sS'block_loop.thisTrialN'
p8935
I0
sg39
F1.0666953096579164
sg34
g753
(S'\x07\xdf\x07\x0b\x0b4\x08\x05\x0c\xf8'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g7622
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'left'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g7215
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g7629
sS'block_loop.thisRepN'
p8945
I2
sg6383
g7215
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6386
g7222
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vn
sS'block_loop.thisTrialN'
p8948
I0
sg39
F0.86668664263470419
sg34
g753
(S'\x07\xdf\x07\x0b\x0b4\x0e\x06\x8f\xb0'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g8274
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'right'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6984
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g8281
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6386
g6991
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vn
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.98340920779992302
sg34
g753
(S'\x07\xdf\x07\x0b\x0b4\x14\x04\xfdX'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g6524
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'right'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6534
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g6532
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6534
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6386
g6528
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vn
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.68323883236917027
sg34
g753
(S'\x07\xdf\x07\x0b\x0b4\x1a\x05\x14\xc8'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g7425
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'right'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6967
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g7432
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vn
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.73333451174494257
sg34
g753
(S'\x07\xdf\x07\x0b\x0b4 \x00\xe2\x90'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6815
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'left'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6534
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6822
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6534
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6386
g6528
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vn
sS'block_loop.thisTrialN'
p9000
I0
sg39
F0.9498758106801688
sg34
g753
(S'\x07\xdf\x07\x0b\x0b4%\x0c\xaa0'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g6607
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'right'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6618
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g6615
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6611
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6386
g6618
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vn
sS'block_loop.thisTrialN'
p9013
I0
sg39
F0.83299986201200227
sg34
g753
(S'\x07\xdf\x07\x0b\x0b4+\x0cH\x88'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g6918
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'left'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6402
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g6925
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6402
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6386
g6396
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vn
sS'block_loop.thisTrialN'
p9026
I0
sg39
F0.63333588022123877
sg34
g753
(S'\x07\xdf\x07\x0b\x0b41\n=\x18'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g6524
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'right'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6534
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g6532
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6534
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6386
g6528
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vn
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.66670933655132103
sg34
g753
(S'\x07\xdf\x07\x0b\x0b47\x05\x14\xc8'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g6708
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'left'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g6716
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vn
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.88332191034805874
sg34
g753
(S'\x07\xdf\x07\x0b\x0b5\x01\x00\xa7\xf8'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g6877
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'left'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6834
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g6884
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6834
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6386
g6841
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vn
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.9332496661481855
sg34
g753
(S'\x07\xdf\x07\x0b\x0b5\x06\x0e\x92x'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g6963
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'left'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6967
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g6971
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vn
sS'block_loop.thisTrialN'
p9078
I0
sg39
F0.70007195910056907
sg34
g753
(S'\x07\xdf\x07\x0b\x0b5\x0c\x0e0\xd0'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6473
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'left'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6483
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6481
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6483
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6386
g6477
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vn
sS'block_loop.thisTrialN'
p9091
I0
sg39
F0.80000131145789055
sg34
g753
(S'\x07\xdf\x07\x0b\x0b5\x12\t\xfe\x98'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vn
sa(dp9099
g64
g65
sg43
I35
sg56
g57
sg58
Vn
sg42
I565
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp9100
g64
g65
sg43
I35
sg55
g11
sg56
g57
sg45
F2.7200000000000002
sg42
I565
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I00
sg48
I25
sg47
g526
sg51
F30.649999999999999
sg46
F0.35999999999999854
sg66
g67
sg68
g69
sg50
I0
sg70
Vn
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I81854800
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\n\xd7#?\x00\x00\x00\x00\x00\x00\x00\x00\xecQ\xb8>\x9a\x99\x99>\xaeGa>H\xe1z?\x00\x00\x00\x00\x00\x00\x00?R\xb8\x1e?\x8f\xc2u=\x8f\xc2\xf5>q=\n?\x00\x00\x00?\x1f\x85\xeb>\x00\x00\x00\x00=\n\xd7>\x1f\x85\xeb>\n\xd7\xa3>\x8f\xc2\xf5>\x00\x00\x00\x00\\\x8f\xc2>\n\xd7\xa3<q=\n?\x00\x00\x00\x00)\\\x0f?\x8f\xc2\xf5>)\\\x0f>\xb8\x1e\x05?\xaeGa?)\\\x0f?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\xcd\xcc\xcc=\x00\x00\x80?\\\x8f\xc2>\xe1z\x14?\xaeGa>=\n\xd7>'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'!\xb0:@!\xb0:@\xdb\xf9n@\xaa\xf1\x9e@\x98n\x96@T\xe3\x95@\x00\x00(A\x87\x16q@\x87\x16\xd1@d;\xc3@\xbaI\xc4@w\xbe\xbb@\xee|\xbf@1\x08\x88@T\xe3\xad@B`\x15@\x02\xab.B\xaa\xf1\nA1\x08\x80@\xbaI\x94@B`\xf5@\x87\x16\x91@\xe9&Q@\xdb\xf9^@\x98n\xbe@\x0e-r@\x0e-r@u\x93h@/\xdd\\@\xee|\xe7@/\xdd\\@T\xe3\x85@\xaa\xf1\x86@\xbaI\xbc@!\xb0\n@D\x8b\xa8@\xbaI\xd4@\x10X\xd5@\x96Cc@\xbaI\xb4@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x14B\x00\x00\x1cB\x00\x00\xa8A\x00\x00\x08B\x00\x00`A\x00\x00\x10B\x00\x00\x00@\x00\x00\xa0@\x00\x00\xc0@\x00\x00@A\x00\x00\xe0@\x00\x00\xc8A\x00\x00\xb8A\x00\x00\x98A\x00\x00\x10A\x00\x00\xd8A\x00\x00\x00\x00\x00\x00\x80?\x00\x00\xb0A\x00\x00\xf8A\x00\x00\x00A\x00\x00\xd0A\x00\x00\xc0A\x00\x00\x88A\x00\x00\x80@\x00\x00\xa0A\x00\x00\xe0A\x00\x00PA\x00\x00\xf0A\x00\x00@@\x00\x00\x0cB\x00\x00\x04B\x00\x00 A\x00\x000A\x00\x00\x00B\x00\x00\x18B\x00\x00\xe8A\x00\x00pA\x00\x00\x90A\x00\x00\x80A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'\xcd\xcc\x8c?\x00\x00\xc0?33\xf3?\x00\x00\x00@\x00\x00\x80?\xcd\xcc\xcc?\x00\x00\x00@\x9a\x99\x99?33\xb3?ff\xe6?\x9a\x99\xd9?\xcd\xcc\x8c?\xcd\xcc\x8c?\x00\x00\xc0?\x00\x00\x00@\xcd\xcc\x8c?\xcd\xcc\xcc?\x00\x00\x80?33\xb3?ff\xa6?33\xf3?\xcd\xcc\xcc?\xcd\xcc\x8c?\x00\x00\xc0?\xcd\xcc\x8c?\xcd\xcc\x8c?ff\xe6?ff\xe6?\x9a\x99\xd9?\x9a\x99\xd9?33\xf3?ff\xa6?\x9a\x99\xd9?\x00\x00\x00@\x00\x00\x80?ff\xe6?ff\xe6?\xcd\xcc\xcc?\x00\x00\x80?ff\xa6?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'\x10\x00\x00\x00\x11\x00\x00\x00\x06\x00\x00\x00\x1d\x00\x00\x00\x18\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\n\x00\x00\x00\x14\x00\x00\x00\x0e\x00\x00\x00 \x00\x00\x00!\x00\x00\x00\t\x00\x00\x00\x1b\x00\x00\x00\x04\x00\x00\x00%\x00\x00\x00\'\x00\x00\x00\x17\x00\x00\x00&\x00\x00\x00\r\x00\x00\x00\x19\x00\x00\x00\x02\x00\x00\x00\x12\x00\x00\x00\x0c\x00\x00\x00\x16\x00\x00\x00\x0b\x00\x00\x00\x15\x00\x00\x00\x0f\x00\x00\x00\x1a\x00\x00\x00$\x00\x00\x00\x1c\x00\x00\x00\x13\x00\x00\x00"\x00\x00\x00\x1f\x00\x00\x00\x03\x00\x00\x00\x1e\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00#\x00\x00\x00\x01\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g362
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g376
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g250
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g341
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g201
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g355
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g117
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g138
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g145
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g187
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g152
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g278
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g264
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g236
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g166
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g292
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g103
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g110
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g257
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g320
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g159
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g285
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g271
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g222
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g131
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g243
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g299
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g194
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g313
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g124
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g348
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g334
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g173
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g180
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g327
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g369
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g306
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g208
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g229
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g215
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I81854800
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'ff\xb6@\x00\x00\xc0@33\xa3@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@33\xb3@\x00\x00\xc0@33\xf3?\x00\x00\xc0@\xcd\xcc\x8c@\x00\x00\xc0@\x9a\x99\xb9@33\xa3@\x9a\x99\xb9@\x00\x00\xc0@ffF@\x00\x00\xc0@\x9a\x99\xd9?\x00\x00\xc0@\x00\x00\xc0@33\xf3?ff\xa6@\x00\x00\xc0@\x00\x00\xc0@33\x83@\x00\x00\xc0@\x00\x00\xc0@\xcd\xcc\x8c@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x9a\x99\xb9@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'j\x000@\xd1\xbb\x83@\xb6D\x94@ Y\xbd@>\x03\xc0?\xaeWu@\xa2\xf0\xce?w\xf4\xae?M[\xb5?\x83\xac\xaa?v\xcc\x1cA\x19V\xf5?\xa7]u@\x07\xe0\xbd?\x13\x13\xd1?~\xae\x8a@jf\x06@\xad4\xb3?lj\xb6@\x12y\xb7?TT\x19A\x9d\xce\xac?\x00\x02\xa0?\x851\xf3@6\xd3\xac?\xc33\xe2?!5\x13@*\x01\x90@V\x03\xc0?H5\x93?\xb4D\xb4@\x8d\xdd\x9d?\x89#\xc2?V\xde\x1d@|\xf3\xae?:5\x93?G\xcf\xac?\x1bG\xc4?\x1c\x8a\x97?\xb9\x9f\xf9?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'ff\x86@ffF@\x9a\x999@\x00\x00\x80@ff\x86@\x9a\x99Y@333@33s@\x00\x00`@\xcd\xccL@\x9a\x99y@\x9a\x999@33s@fff@33\x83@33\x83@\x9a\x99Y@333@ffF@\x00\x00\x80@\xcd\xcc,@ffF@333@\x00\x00\x80@\x00\x00@@33\x83@\x9a\x99\x89@ffF@\xcd\xccl@33s@\xcd\xccl@\x00\x00@@33S@33\x83@\xcd\xccl@\xcd\xccl@\x00\x00@@33s@\x00\x00`@\x00\x00`@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S"\xa0\ta\x0c\xc0\x06\x9d\x04\xa0y\x04\x0c`\x11\x9b\x04\xe0y\x04\x0c\x80\x11\x9b\x04`\x10\x9b\x04\x00\x11\x9b\x04 \x10\x9b\x04\xc0&\x06\x0c\x80#\x06\x0c`-\x06\x0c\x00+\x06\x0c\xa0%\x06\x0c\xc0\x10\x9b\x04@\x10\x9b\x04\xa0\x05\x9d\x04@,\x06\x0c\x00,\x06\x0c\xa0&\x06\x0c\xe0u\x04\x0c\x80\x05\x9d\x04\x80p\x04\x0c`z\x04\x0c \x13\x9b\x04\x00x\x04\x0c\xe0'\x06\x0c\xe0+\x06\x0c`&\x06\x0c\x80&\x06\x0c\xa0\xb2\x9d\x04\x80\x0ba\x0c\x00\x05a\x0c \x0ca\x0c\x00\x06a\x0c\xe0\ta\x0c`\na\x0c \x08a\x0c@\x0ca\x0c@\x00a\x0c"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'\x98n\xee@w\xbe\x9b@\xaa\xf1\xbe@o\x12-AT\xe3\x95@\xbaI\xb4@b\x10`@\xee|\x17@\xdb\xf9N@\x83\xc0\xea?\xdd$\x02A\x0e-\xe2?\xaa\xf1\x96@\xdd$\xda@\x10X\xbd@\xcb\xa1\xb9@\xfe\xd4\xfc@\xa8\xc6\xbb?D\x8b\x90@\xc9v&@\x87\x16\tA\xc5 \xa0?\x1dZ\xa4?!\xb0*@T\xe3\r@\xc5 \xc0?D\x8b\x98@!\xb0\x92@\xc9v\x16@\x91\xed\xac?B`\xb5@\xe9&\x91?+\x87\xc6?\xfc\xa9y@u\x93\x88?\xf8S\xb3?+\x87\xa6?\xdb\xf9\xce?\x1dZ\xc4?\xaa\xf1\x86@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I81854800
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'\xe0\xf6{\x0c\x80\xf6{\x0c(l\x92\x0cPl\x92\x0c\xb0\xf6{\x0cxl\x92\x0c\xa0l\x92\x0c\xb0\xf6{\x0c\xc8l\x92\x0c\x80\xf6{\x0cPl\x92\x0c\xc8l\x92\x0c\x18m\x92\x0c\xa0l\x92\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'\x086\xd1\x04 9\xd1\x04\x00>\xd1\x04`8\xd1\x04H2\xd1\x04\xa8>\xd1\x04(1\xd1\x040+\xf2\x04\xe8$\xf2\x04\xc0"\xf2\x04h)\xf2\x04\x00.\xf2\x04\x10$\xf2\x04\xa0!\xf2\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g744
sg83
g767
sg84
g749
sg85
g771
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g776
sg83
g777
sg84
g781
sg85
g782
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g787
sg83
g788
sg84
g792
sg85
g793
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g798
sg83
g799
sg84
g803
sg85
g804
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g809
sg83
g810
sg84
g814
sg85
g815
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g787
sg83
g820
sg84
g792
sg85
g824
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g829
sg83
g830
sg84
g834
sg85
g835
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g756
sg83
g840
sg84
g761
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g776
sg83
g849
sg84
g781
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g829
sg83
g858
sg84
g834
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g798
sg83
g867
sg84
g803
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g809
sg83
g876
sg84
g814
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I81854800
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I81854800
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'`{\x94\x0c\x80\xe5_\x0c\xa0\xe1_\x0c\x88{\x94\x0c@\xe5_\x0c\xb0{\x94\x0c\xc0\xe0_\x0c\x00|\x94\x0c\x88{\x94\x0cP\x86\x94\x0c`{\x94\x0c(|\x94\x0c\x88{\x94\x0c\x80\x86\x94\x0c@\xe5_\x0cP\x86\x94\x0c\xb0\x86\x94\x0c\x80\x86\x94\x0c\xb0\x86\x94\x0c@\xe5_\x0cX\xa0\x94\x0cP|\x94\x0c\xb0{\x94\x0cx|\x94\x0c\xe0\x86\x94\x0c\x00\x88\x94\x0c@}\x94\x0c\xb0\x86\x94\x0c`\x88\x94\x0cP\x86\x94\x0ch}\x94\x0c\x80\xe5_\x0c\xd8{\x94\x0c\xa0|\x94\x0c\x90\xa0\x94\x0c@\xe5_\x0c\xa0|\x94\x0c\xe0\x86\x94\x0c\xc8|\x94\x0c\x00|\x94\x0c`{\x94\x0c\x88{\x94\x0cx|\x94\x0c`\xe5_\x0c\x00\x88\x94\x0c\xc8\xa0\x94\x0c\x88{\x94\x0cP\x86\x94\x0c \xe0_\x0c\xb8}\x94\x0c\xe0\x86\x94\x0cP|\x94\x0c \xa0\x94\x0cp\x87\x94\x0c\x00|\x94\x0c\x88{\x94\x0c\xe0\x86\x94\x0cp\x87\x94\x0c\x80\x86\x94\x0c\xb0\x86\x94\x0cx|\x94\x0c\xa0\xe1_\x0c@\x87\x94\x0c\xd8{\x94\x0c\xb0{\x94\x0c`{\x94\x0c@\xe5_\x0c\x80\x86\x94\x0c\x80\xe5_\x0c\x88{\x94\x0c\xc8|\x94\x0cP|\x94\x0c\xd0\x87\x94\x0c\xd8{\x94\x0c`{\x94\x0c \xe0_\x0c\xa0\xe1_\x0c\xc8|\x94\x0cP\x86\x94\x0c(|\x94\x0cX\xa0\x94\x0c\xe0\x86\x94\x0c\x10\x87\x94\x0c\xc8|\x94\x0c\x80\x86\x94\x0c\xa8\x1f\x94\x0cx|\x94\x0c\xc8|\x94\x0c\xa8\x1f\x94\x0c\x88{\x94\x0c\xc8|\x94\x0cP|\x94\x0c\xe0\x86\x94\x0c\xc0\xe0_\x0c@\x87\x94\x0c\xe0\x86\x94\x0c\x90\xa0\x94\x0c\xb0\x86\x94\x0c\xa0\xe1_\x0c\xe0\x86\x94\x0c\xa0|\x94\x0c\x80\xe5_\x0c\xa0\xe1_\x0c \xa0\x94\x0c`{\x94\x0c \xe0_\x0c\x90}\x94\x0c\x00|\x94\x0cx|\x94\x0c\x80\xe5_\x0cx|\x94\x0c\xb0{\x94\x0c\xb0\x86\x94\x0c \xe0_\x0c\xd8{\x94\x0c@\xe5_\x0ch}\x94\x0c\xa0|\x94\x0c@\xe5_\x0c\xa0|\x94\x0c(|\x94\x0c\xa0\xe1_\x0c\xa0|\x94\x0c`\x88\x94\x0c\xb0\x86\x94\x0cP\x86\x94\x0c\xb0{\x94\x0c\xa0\x87\x94\x0c(|\x94\x0ch}\x94\x0c@\x87\x94\x0c \xa0\x94\x0cP\x86\x94\x0c\xa0\xe1_\x0c\xc0\xe0_\x0c\xc8|\x94\x0c\xe0\x86\x94\x0c \xa0\x94\x0c`\xe5_\x0c`{\x94\x0c \xa0\x94\x0c\xa0\x87\x94\x0c \xe0_\x0cP|\x94\x0c\xb0\x86\x94\x0cx|\x94\x0c\x80\x86\x94\x0c\xd8{\x94\x0c\xd0\x87\x94\x0c \xe0_\x0c\xb8}\x94\x0c\xa8\x1f\x94\x0c\x88{\x94\x0c@\xe5_\x0c`\xe5_\x0ch}\x94\x0c\xa0\xe1_\x0c \xa0\x94\x0c\xd8{\x94\x0c`\xe5_\x0c \xa0\x94\x0c(|\x94\x0c\xa8\x1f\x94\x0c \xe0_\x0cx|\x94\x0c@\xe5_\x0c\xa8\x1f\x94\x0c \xa0\x94\x0c\x80\x86\x94\x0c \xe0_\x0c \xa0\x94\x0c\xa0|\x94\x0c(|\x94\x0c\xe0\x86\x94\x0c\x00\x88\x94\x0c \xe0_\x0c\xa0|\x94\x0cx|\x94\x0c\x00|\x94\x0c`{\x94\x0cP|\x94\x0c\x88{\x94\x0c`{\x94\x0c`\xe5_\x0c\xa8\x1f\x94\x0c\x00|\x94\x0c \xe0_\x0c`\x88\x94\x0c\xa0|\x94\x0c(|\x94\x0c\xb0{\x94\x0c\xa0\x87\x94\x0cP\x86\x94\x0c`\x88\x94\x0cP|\x94\x0c@\x87\x94\x0c\xd8{\x94\x0c \xa0\x94\x0c\xb8}\x94\x0c(|\x94\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'\xa0\x1c|\x0c\x80\x1e|\x0c\x80\x1f|\x0c\x80\x1d|\x0c@\x1d|\x0c\xc0\x1e|\x0c\x00\x1f|\x0c\x00\x1e|\x0c\xa0\x1d|\x0c\xa0\x19|\x0c\xc0\x1d|\x0c\xe0\x1e|\x0c`\x1f|\x0c\xc0\x1c|\x0c \x1f|\x0c\xe0\x1f|\x0c\x00\x1a|\x0c\xe0\x1d|\x0c\xe0\x1c|\x0c`\x1d|\x0c\xa0\x1e|\x0c`\x1a|\x0c\xc0\xbe\x9a\x04\x00\xcc^\x0c\x00\x1c|\x0c\xc0\x1f|\x0c\xa0\xf1a\x0c\xa0?`\x0c\x00?`\x0c@\xcb^\x0c\xe0=`\x0c\xc0?`\x0c\xa0\x00\x9d\x04\xc0\x9ba\x0c@\x9ca\x0c\x00\x9ca\x0c\x00\x9ea\x0c@\x9ba\x0c\xc0\x9ca\x0c@\x9ea\x0c@\x9da\x0c \x97a\x0c`\x97a\x0c\xc0\x9aa\x0c\xe0\x96a\x0c\x00\x96a\x0c@\x96a\x0c`\x06\xe1\x04\x80\x9ba\x0c\x00\x9da\x0c\x80\x99a\x0c`\x95a\x0c\x80\x96a\x0c\x80\x9da\x0c\x00\x9fa\x0c@\x9aa\x0c\xc0\x95a\x0c\xc0\x98a\x0c\xc0\x97a\x0c\x00\x99a\x0c\x80\x9ca\x0c@\x90a\x0c\xa0\x90a\x0c \x90a\x0c\xc0\x90a\x0c\x80\x90a\x0c\x00\x9ba\x0c\xc0\x99a\x0c\xe0\x90a\x0c\x80\x9ea\x0c`\x90a\x0c\x80\x9aa\x0c@\x9fa\x0c \x91a\x0c@\x99a\x0c\x00\x91a\x0c\x80\x98a\x0c\xc0\x9ea\x0c\xa0\x96a\x0c\x00\x9aa\x0c\x80\xaf\x06\x0c\x00\x98a\x0c\xc0\x0ea\x0c@\x0fa\x0c\xc0\x01a\x0c`\x0ea\x0c\x00\x03a\x0c \x0fa\x0c`\x0fa\x0c\xe0\x01a\x0c\xa0\x0fa\x0c\x80\x0fa\x0c\x80\x02a\x0c`\x00a\x0c\xe0\x0fa\x0c@\x0ea\x0c@\x01a\x0c \x01a\x0c\x00\x01a\x0c`\x01a\x0c\x80\x01a\x0c\xa0\x01a\x0c\xa0\x02a\x0c`\x02a\x0c`=`\x0c\xa0\x03a\x0c \x0ea\x0c\xa0\x0ea\x0c\x80\x03a\x0c\x80\x0ea\x0c\xc0\x03a\x0c\x00\x0fa\x0c\xc0\x0fa\x0c\xe0\x03a\x0c\xe0>`\x0c \x02\x9c\x04\x00\x08\x9c\x04\xc0\x9da\x0c\x00\x02a\x0c`\x03a\x0c\x80\x0ca\x0c\xc0\x02a\x0c\xc0\x0ba\x0c\x00\x04a\x0c \x02a\x0c\xe0\x02a\x0c@\x02a\x0c@\x03a\x0c \x03a\x0c\xe0\xbd\x9a\x04@\x18|\x0c\xe0\x19|\x0c\x80\x1b|\x0c@\x1a|\x0c`\x1b|\x0c \x1d|\x0c\x00\x1d|\x0c \x1b|\x0c@\x1f|\x0c@\x1e|\x0c\x00\x13\x9b\x04\xc0\x00\x9c\x04@\xc8\xa7\x04\x00\xc8\xa7\x04@\xc9\xa7\x04\xc0\xc8\xa7\x04\xa0\xc9\xa7\x04\x00\xc9\xa7\x04\x80\xc7\xa7\x04\x00\xca\xa7\x04\xc0\xcd\xa7\x04 \xc9\xa7\x04`\xc9\xa7\x04\xe0\xc8\xa7\x04 \xcd\xa7\x04 \xc8\xa7\x04\x80\xc8\xa7\x04\xe0\xcf\xa7\x04`\xcd\xa7\x04\xe0\xc9\xa7\x04\x80\xc9\xa7\x04@\xc0^\x0c\xe0\xcc\xa7\x04 \x0b\x9c\x04\x80\xc6\xa7\x04\xe0\xf1\x03\x0c\xa0\xf3\x03\x0c\x00\xf4\x03\x0c\x80\xf0\x03\x0c \xf2\x03\x0c@\xcd\xa7\x04\xc0\xf1\x03\x0c@\x81{\x0c\xa0\x80{\x0c\x80\x80{\x0c\xe0\x81{\x0c@\x82{\x0c`\x81{\x0c\x00\x82{\x0c\xa0\xc8\xa7\x04 \x80{\x0c`\x80{\x0c\x00\x81{\x0c \x82{\x0c\xe0\x80{\x0c\xa0\x81{\x0c\x00\x84{\x0c@\x83{\x0c \x83{\x0c`\x82{\x0c \x84{\x0c\x80\x81{\x0c\xc0\x05a\x0c@\x04a\x0c`\x0ca\x0c\xe0\x08a\x0c\xe0\x07a\x0c\x80\x08a\x0c\xe0\x05a\x0c@\x07a\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\xc1t\x17@>D\x14@\xf7\x0e\xf1?$2\x93?\x9b@\x04@\x0c3#@<2\x93?\xb2e\xe6?i\xa5j?5\x05 @\xcb\x0eA@\x1b\xd6\xfd?<\x10\xd1?\xe2s\xb7?\xdf\x161@r\xbbK@\xe6\xb9\x1b@\xa8\xea\xce?/xG@\xf1e\x06@`\xbb+@\xd1\xc3\xcc?H!\x02@\x92f\x16@s\x10\xf1?\xa4\xf6\xdf?\x02\xa8\n@\xa5\xcc\xec?;J\x14@\xedv\x17@\xf9\x878@_\xdc\xb5@8\x89\xa8@5\xed\xee?\x9c\x858@\xe0\x87\x88@\xbew\'@O\x10\xf1?\xb7\x989@t\x1e\xe2?\x11\xdb\xbd?W\x8c8@\xa5\xba\x1b@\xe4C\x04@6\xe8>@\xa0\xff\xbf?\xc4\xdc\xdd?\xa6*\xf3?\x81fv@\x97u\'@\xc4\xafJ@t/\xc3@q\xfd\xff?\xfb\x99\x19@\xe1]\xd5?A\xa9J@\x8b\xdb\xbd?\xb6\xee\xae?\x893\xd3?rv\xb7?\xa6W\xd5?\x8a2s@\xe6C\xe4?L\x05P@Y\xed\xee?\xda0\xd3?\x83B4@\x03S\x95?vZ\x05@\x82\x88\xe8?\x8eQ\xd5?\xe5\xeb\x9e@u\x82\xb7?\xbaC\xa4@Q\xda\xdd?\xc3a\xe6?\xd9\x1b\xd1?\xe6\x10\xd1?\xc6\xbc\x9b?\xf8/c@\xdf\x10A@\xd2\xaa\xea?\xb4 \xa2?\x80\x1c\xe2?\xc8\xbb\x9b?\xf5\x86\xe8?.V\x95?\x7f\x0f\x91?\xae\xde\xdd?\xfcg\xc6?\n3\xb3?7$2@\xc1\xcc\xec?\xb0\x85\xc8?\xd5\xfe\x9f?\xde\xed\x8e?G+\xc2?\xf0e\x86?v\x0f!@\xe6\xe9n?u\xec\xee?y\xe8\xfd?\x87d\x86?\xf4\xff\xbf?j\xfa\x7f?A\xed\x8e?\xb9\x88\xa8?\x0c\xff?@\x13\x90Y?l\x1f\xc2?\xe6\x88Y?\x93\xd3\xac?\xdc\xe9n?\x0fD\x84?\xa7\xa7\xaa?\x15\xba\xdb?\x1e>\x93?\t\xbc\x9b?\x8d\x10\x91?\n0\x93?\x1a\x95\x99?\x99\xa6\xb9?\xab\x89H?\xabU\xd5?\xd4-s?eH\xa4?\x97D\xa4?\x1c\xa8\x8a?\xa6\xe6n?\x84\x98I@C\xf1n?\xda\xb2\x8a?Eqw?\x7f\xee\xae?\xfaT\x95?\x02\xab\xca?}\xa5\x99?\xd1B\x84?\\T\xb5?\xaf2s?r\xa9j?\xdd\x8cw?\xce\x0c\x91?\xbe\x82\x08@\xeb\xe7n?\xbf\xbb\x9b?(\xbb{?X\x00\x80?{,s?\'ff?A\x11\x91?S\x97Y?yf\xa6?\x17\x89\xa8?\x13"\xa2?\xd8\xba+@\xcb<\xb3?\x11#\x82?\xb3\xff\x9f?\xe2c\x86?\x1a\xa8\x8a?\xe5\x07\xa0?\x0c"\x82?Q\xcd\xac?If\x86?\x91-s?\xf8\x89w?\xd5\xcaL?["\x82?\x9b\xccL?/c\xa6?\x88\xcd\xac?\xc2\xe8\xae?*\x88\xa8?\x94L\xf5?<\xca\xac?\n\xd9\x8c?\xd8FD?\xa4\xbc\x9b?\xd3\xc4\xac?\x9a\x1b\x02@|s\x86?\xc9\x81H?R3\x93?\x99\xba\x9b?\xd8T\xf5?N\x9fH?\x0e\xde]?\x90\x0c\x91?\t\x1e\x02@x\x90Y?~\xaa\xaa?:\x0f\x91?\xbb \x82?\xd4\xf3\x9f?\xdbxw?q"\x82?\xcb\xaa\x8a?\xd8-s?\\O\x95?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'\xc8)\xf2\x04\x00+\xf2\x04\xc89\xd0\x04h9\xd0\x04\xb09\xd0\x04\x884\xd0\x0480\xd0\x04p:\xd0\x04X7\xd0\x0408\xd0\x04\x80<\xd0\x04`5\xd0\x04\xf0>\xd0\x04\xa82\xd0\x04\x002\xd0\x04\xb0?\xd0\x04`2\xd0\x04\xc8<\xd0\x04\x800\xd0\x04\xc86\xd0\x04(1\xd0\x04\x188\xd0\x04P0\xd0\x04\xf0;\xd0\x04p7\xd0\x04p4\xd0\x04\xe8DO\x02\xb06\xd0\x04\x089\xd0\x04\xa8;\xd0\x04\xd04\xd0\x04\xb03\xd0\x04\xd82\xd0\x04\xe00\xd0\x04\x905\xd0\x04\xf8<\xd0\x04\x88=\xd0\x04 9\xd0\x04P9\xd0\x04\x806\xd0\x04\x086\xd0\x04\xb8=\xd0\x04\xa85\xd0\x04\xc80\xd0\x04\x10:\xd0\x0405\xd0\x04h?\xd0\x04\x18;\xd0\x04\xd0=\xd0\x04@7\xd0\x04\xe8=\xd0\x04\xf83\xd0\x04\xc05\xd0\x04\x90>\xd0\x04\x08<\xd0\x04\xa0=\xd0\x04`8\xd0\x04 ?\xd0\x04\x107\xd0\x04\x989\xd0\x04`;\xd0\x04H;\xd0\x04\x08?\xd0\x04x5\xd0\x04\xa0:\xd0\x04\xe81\xd0\x04x2\xd0\x04\x986\xd0\x04\xc8?\xd0\x04@:\xd0\x04@4\xd0\x04\xb87\xd0\x04\x182\xd0\x04(=\xd0\x04`>\xd0\x04\x98?\xd0\x04\xd8;\xd0\x04\xb0<\xd0\x040>\xd0\x04(4\xd0\x04\x00>\xd0\x04\xc0;\xd0\x04\x185\xd0\x04\x90;\xd0\x04 0\xd0\x04P?\xd0\x04\x10=\xd0\x040;\xd0\x04\xc0>\xd0\x04\x908\xd0\x04\xe8:\xd0\x04\xb81\xd0\x04\x887\xd0\x04\xc02\xd0\x0483\xd0\x04\xe0?\xd0\x04\x881\xd0\x04H>\xd0\x04\x980\xd0\x04\xb8:\xd0\x04(:\xd0\x04h6\xd0\x04\x80?\xd0\x04\x809\xd0\x04\xd07\xd0\x04h0\xd0\x04\xa88\xd0\x04\xd01\xd0\x04\xe0<\xd0\x04X\xf7O\x03 \xfcO\x03 S\xd1\x04p]\xd1\x04\x88T\xd1\x04\x80Y\xd1\x040U\xd1\x04pW\xd1\x04P_\xd1\x04\xd0]\xd1\x048_\xd1\x04xR\xd1\x04\x10]\xd1\x04\xa8^\xd1\x04\x10T\xd1\x04H^\xd1\x04\xf0X\xd1\x04\xe0V\xd1\x04\xd07\xd1\x04P6\xd1\x04\x185\xd1\x04\xc86\xd1\x04`;\xd1\x04P3\xd1\x04\xd82\xd1\x04\x10:\xd1\x04\xb81\xd1\x04X4\xd1\x04p=\xd1\x04(7\xd1\x04\xe09\xd1\x04X7\xd1\x04\xa88\xd1\x04\x10\x91\xd8\x04x\x98\xd8\x04\x80\x93\xd8\x04\xa07\xd0\x04\xa04\xd0\x04 3\xd0\x04P6\xd0\x048<\xd0\x04x8\xd0\x04H5\xd0\x04\xf05\xd0\x04\x983\xd0\x04h<\xd0\x04\x902\xd0\x0486\xd0\x04\xe06\xd0\x04\xd88\xd0\x04X1\xd0\x04p1\xd0\x04\xf80\xd0\x04\xc83\xd0\x04H8\xd0\x04 6\xd0\x0402\xd0\x04 <\xd0\x04\xf02\xd0\x04\x101\xd0\x04\xa01\xd0\x04\xc08\xd0\x04\x104\xd0\x04\xe84\xd0\x04\x88:\xd0\x04(7\xd0\x04\x083\xd0\x04\xd85\xd0\x04\x005\xd0\x04\xb00\xd0\x04P<\xd0\x04\xf08\xd0\x04X:\xd0\x04\x008\xd0\x04\xa8>\xd0\x04@1\xd0\x04P3\xd0\x04p=\xd0\x04x>\xd0\x0489\xd0\x04\x00;\xd0\x04x;\xd0\x04\xe03\xd0\x04\x806\xd1\x04X1\xd1\x0489\xd1\x04\x005\xd1\x04\x881\xd1\x04h3\xd1\x04\x101\xd1\x04\xd01\xd1\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1011
sg895
g1001
sg909
g1005
sg904
g1009
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1052
sg895
g1048
sg909
g1059
sg904
g1056
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g900
sg895
g1065
sg909
g910
sg904
g1072
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1084
sg895
g1080
sg909
g1091
sg904
g1088
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g954
sg895
g1097
sg909
g961
sg904
g1104
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g971
sg895
g1129
sg909
g978
sg904
g1136
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1052
sg895
g1048
sg909
g1059
sg904
g1056
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g1161
sg895
g1157
sg909
g1168
sg904
g1165
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1116
sg895
g1174
sg909
g1123
sg904
g1181
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1161
sg895
g1189
sg909
g1168
sg904
g1196
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g971
sg895
g1129
sg909
g978
sg904
g1136
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g937
sg895
g1217
sg909
g944
sg904
g1224
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1236
sg895
g1232
sg909
g1243
sg904
g1240
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1266
sg895
g1262
sg909
g1273
sg904
g1270
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1283
sg895
g1279
sg909
g1290
sg904
g1287
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1236
sg895
g1232
sg909
g1243
sg904
g1240
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1161
sg895
g1189
sg909
g1168
sg904
g1196
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1345
sg895
g1335
sg909
g1339
sg904
g1343
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g1052
sg895
g1352
sg909
g1059
sg904
g1359
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1022
sg895
g1367
sg909
g1029
sg904
g1374
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g920
sg895
g1382
sg909
g927
sg904
g1389
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1011
sg895
g1001
sg909
g1005
sg904
g1009
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1414
sg895
g1410
sg909
g1421
sg904
g1418
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g1084
sg895
g1427
sg909
g1091
sg904
g1434
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g971
sg895
g1129
sg909
g978
sg904
g1136
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1414
sg895
g1455
sg909
g1421
sg904
g1462
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1283
sg895
g1279
sg909
g1290
sg904
g1287
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g1487
sg895
g1483
sg909
g1494
sg904
g1491
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1022
sg895
g1367
sg909
g1029
sg904
g1374
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1266
sg895
g1539
sg909
g1273
sg904
g1546
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g920
sg895
g1382
sg909
g927
sg904
g1389
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1236
sg895
g1567
sg909
g1243
sg904
g1574
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1414
sg895
g1455
sg909
g1421
sg904
g1462
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1052
sg895
g1352
sg909
g1059
sg904
g1359
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1625
sg895
g1621
sg909
g1632
sg904
g1629
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1487
sg895
g1483
sg909
g1494
sg904
g1491
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g1283
sg895
g1651
sg909
g1290
sg904
g1658
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1236
sg895
g1567
sg909
g1243
sg904
g1574
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g1683
sg895
g1679
sg909
g1690
sg904
g1687
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g1052
sg895
g1048
sg909
g1059
sg904
g1056
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g1022
sg895
g1367
sg909
g1029
sg904
g1374
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g954
sg895
g1097
sg909
g961
sg904
g1104
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g1283
sg895
g1279
sg909
g1290
sg904
g1287
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g1052
sg895
g1352
sg909
g1059
sg904
g1359
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1116
sg895
g1174
sg909
g1123
sg904
g1181
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g1161
sg895
g1189
sg909
g1168
sg904
g1196
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1266
sg895
g1539
sg909
g1273
sg904
g1546
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g937
sg895
g1217
sg909
g944
sg904
g1224
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g988
sg895
g1813
sg909
g995
sg904
g1820
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g1011
sg895
g1828
sg909
g1005
sg904
g1835
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g988
sg895
g1813
sg909
g995
sg904
g1820
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g900
sg895
g1065
sg909
g910
sg904
g1072
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g971
sg895
g1129
sg909
g978
sg904
g1136
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g920
sg895
g1382
sg909
g927
sg904
g1389
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g954
sg895
g1097
sg909
g961
sg904
g1104
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1487
sg895
g1483
sg909
g1494
sg904
g1491
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1236
sg895
g1567
sg909
g1243
sg904
g1574
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1161
sg895
g1157
sg909
g1168
sg904
g1165
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1011
sg895
g1828
sg909
g1005
sg904
g1835
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1625
sg895
g1621
sg909
g1632
sg904
g1629
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1487
sg895
g2012
sg909
g1494
sg904
g2019
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g1052
sg895
g1352
sg909
g1059
sg904
g1359
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1084
sg895
g1080
sg909
g1091
sg904
g1088
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g937
sg895
g1217
sg909
g944
sg904
g1224
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g1283
sg895
g1651
sg909
g1290
sg904
g1658
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g900
sg895
g1065
sg909
g910
sg904
g1072
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1487
sg895
g2012
sg909
g1494
sg904
g2019
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g1116
sg895
g1174
sg909
g1123
sg904
g1181
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1345
sg895
g2118
sg909
g1339
sg904
g2125
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1266
sg895
g1539
sg909
g1273
sg904
g1546
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1487
sg895
g1483
sg909
g1494
sg904
g1491
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1345
sg895
g2118
sg909
g1339
sg904
g2125
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g954
sg895
g1097
sg909
g961
sg904
g1104
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1487
sg895
g2012
sg909
g1494
sg904
g2019
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1236
sg895
g1567
sg909
g1243
sg904
g1574
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g1283
sg895
g1651
sg909
g1290
sg904
g1658
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g1011
sg895
g1001
sg909
g1005
sg904
g1009
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1283
sg895
g1651
sg909
g1290
sg904
g1658
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1084
sg895
g1427
sg909
g1091
sg904
g1434
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1161
sg895
g1157
sg909
g1168
sg904
g1165
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g937
sg895
g1217
sg909
g944
sg904
g1224
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1283
sg895
g1279
sg909
g1290
sg904
g1287
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g1414
sg895
g1410
sg909
g1421
sg904
g1418
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g920
sg895
g1382
sg909
g927
sg904
g1389
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g937
sg895
g1217
sg909
g944
sg904
g1224
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1683
sg895
g1679
sg909
g1690
sg904
g1687
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g900
sg895
g1065
sg909
g910
sg904
g1072
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g1625
sg895
g2380
sg909
g1632
sg904
g2387
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1266
sg895
g1539
sg909
g1273
sg904
g1546
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1266
sg895
g1262
sg909
g1273
sg904
g1270
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1266
sg895
g1262
sg909
g1273
sg904
g1270
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g988
sg895
g1813
sg909
g995
sg904
g1820
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1161
sg895
g1189
sg909
g1168
sg904
g1196
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1625
sg895
g1621
sg909
g1632
sg904
g1629
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g1011
sg895
g1828
sg909
g1005
sg904
g1835
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g971
sg895
g1129
sg909
g978
sg904
g1136
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1022
sg895
g1367
sg909
g1029
sg904
g1374
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g1414
sg895
g1410
sg909
g1421
sg904
g1418
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1414
sg895
g1410
sg909
g1421
sg904
g1418
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g1084
sg895
g1080
sg909
g1091
sg904
g1088
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1414
sg895
g1455
sg909
g1421
sg904
g1462
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1345
sg895
g2118
sg909
g1339
sg904
g2125
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1161
sg895
g1157
sg909
g1168
sg904
g1165
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g1052
sg895
g1048
sg909
g1059
sg904
g1056
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g988
sg895
g1813
sg909
g995
sg904
g1820
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g1084
sg895
g1080
sg909
g1091
sg904
g1088
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g988
sg895
g1813
sg909
g995
sg904
g1820
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1683
sg895
g2720
sg909
g1690
sg904
g2727
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1052
sg895
g1352
sg909
g1059
sg904
g1359
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1011
sg895
g1828
sg909
g1005
sg904
g1835
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1487
sg895
g1483
sg909
g1494
sg904
g1491
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g1283
sg895
g1651
sg909
g1290
sg904
g1658
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g1683
sg895
g2720
sg909
g1690
sg904
g2727
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g900
sg895
g1065
sg909
g910
sg904
g1072
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g1683
sg895
g2720
sg909
g1690
sg904
g2727
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1625
sg895
g2380
sg909
g1632
sg904
g2387
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1236
sg895
g1232
sg909
g1243
sg904
g1240
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g1161
sg895
g1189
sg909
g1168
sg904
g1196
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1266
sg895
g1539
sg909
g1273
sg904
g1546
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g1011
sg895
g1001
sg909
g1005
sg904
g1009
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1161
sg895
g1157
sg909
g1168
sg904
g1165
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g1625
sg895
g1621
sg909
g1632
sg904
g1629
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g1487
sg895
g2012
sg909
g1494
sg904
g2019
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1345
sg895
g1335
sg909
g1339
sg904
g1343
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g1683
sg895
g2720
sg909
g1690
sg904
g2727
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1011
sg895
g1828
sg909
g1005
sg904
g1835
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g920
sg895
g1382
sg909
g927
sg904
g1389
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1683
sg895
g1679
sg909
g1690
sg904
g1687
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1084
sg895
g1427
sg909
g1091
sg904
g1434
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1345
sg895
g1335
sg909
g1339
sg904
g1343
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g1625
sg895
g1621
sg909
g1632
sg904
g1629
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1266
sg895
g1262
sg909
g1273
sg904
g1270
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1345
sg895
g1335
sg909
g1339
sg904
g1343
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g1683
sg895
g1679
sg909
g1690
sg904
g1687
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1116
sg895
g1174
sg909
g1123
sg904
g1181
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1625
sg895
g2380
sg909
g1632
sg904
g2387
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1683
sg895
g2720
sg909
g1690
sg904
g2727
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1414
sg895
g1410
sg909
g1421
sg904
g1418
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g1084
sg895
g1427
sg909
g1091
sg904
g1434
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1283
sg895
g1279
sg909
g1290
sg904
g1287
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g1236
sg895
g1567
sg909
g1243
sg904
g1574
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1625
sg895
g2380
sg909
g1632
sg904
g2387
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g1414
sg895
g1455
sg909
g1421
sg904
g1462
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1266
sg895
g1262
sg909
g1273
sg904
g1270
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1236
sg895
g1232
sg909
g1243
sg904
g1240
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g954
sg895
g1097
sg909
g961
sg904
g1104
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g1345
sg895
g2118
sg909
g1339
sg904
g2125
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1022
sg895
g1367
sg909
g1029
sg904
g1374
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g1625
sg895
g2380
sg909
g1632
sg904
g2387
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g1345
sg895
g1335
sg909
g1339
sg904
g1343
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1414
sg895
g1455
sg909
g1421
sg904
g1462
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1084
sg895
g1427
sg909
g1091
sg904
g1434
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1116
sg895
g1174
sg909
g1123
sg904
g1181
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1052
sg895
g1048
sg909
g1059
sg904
g1056
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g1345
sg895
g2118
sg909
g1339
sg904
g2125
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g1236
sg895
g1232
sg909
g1243
sg904
g1240
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1011
sg895
g1001
sg909
g1005
sg904
g1009
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1683
sg895
g1679
sg909
g1690
sg904
g1687
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g1487
sg895
g2012
sg909
g1494
sg904
g2019
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1084
sg895
g1080
sg909
g1091
sg904
g1088
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I81854800
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'\x98*\x05\x0c@\xa4\xca\x1eHk\x05\x0c8!\x05\x0c\x98*\x05\x0c\x80k\x05\x0c\xd8!\x05\x0c\x80)\x05\x0c\x80k\x05\x0c\x98*\x05\x0c \x04a\x0c\xa0\x08a\x0c\x08.\x05\x0c\xc0\x06a\x0c\xd8!\x05\x0c@\xa4\xca\x1e(l\x05\x0ch-\x05\x0c\xd0)\x05\x0cp\xa4\xca\x1e0$\x05\x0c\x08.\x05\x0c`l\x05\x0c\xd8&\x05\x0cHk\x05\x0c\xd0)\x05\x0c\x90#\x05\x0c\xc8,\x05\x0c \xa6\xca\x1e\xc0\xa5\xca\x1e\xc0\x06a\x0c\x98*\x05\x0c\xd8&\x05\x0c\x80k\x05\x0c\x10+\x05\x0c\xd0)\x05\x0c\x80k\x05\x0c\xf0k\x05\x0cHk\x05\x0c\xd0\xa4\xca\x1e\x10+\x05\x0ch-\x05\x0cp\xa4\xca\x1e \x04a\x0c\x90#\x05\x0c\x10+\x05\x0c\xc0\x06a\x0c\xd0\xa4\xca\x1e0$\x05\x0c\xa0\na\x0c\xf0k\x05\x0c0$\x05\x0c\xc0\x06a\x0c@\xa4\xca\x1e\xa0\xa4\xca\x1e\xd8!\x05\x0c \xa6\xca\x1e\x00"\x05\x0c\x98*\x05\x0c\x08.\x05\x0c`l\x05\x0c\x10+\x05\x0c\xd8!\x05\x0c(l\x05\x0c\xd8!\x05\x0c\xc0\x06a\x0cp\xa4\xca\x1e\xc0\xa5\xca\x1e\xd0\xa4\xca\x1e\x90\xa5\xca\x1e\xd0)\x05\x0c@\xa4\xca\x1e\xa0\na\x0c0$\x05\x0c\x98*\x05\x0cP\xa6\xca\x1e\x80k\x05\x0c\xc8,\x05\x0c\xa0\xa4\xca\x1e\xd0)\x05\x0c \x04a\x0c\xa0\na\x0c \x04a\x0c\xa0\x08a\x0c\xc8,\x05\x0c\xd8&\x05\x0c\xb8-\x05\x0c0$\x05\x0c`\xa5\xca\x1e\xf0\xa5\xca\x1e`l\x05\x0cp\xa4\xca\x1e \xa6\xca\x1ep\xa4\xca\x1e\x90\xa5\xca\x1e\x10+\x05\x0c@\xa4\xca\x1eHk\x05\x0c@\xa4\xca\x1e\x08.\x05\x0c\x80)\x05\x0c\x10+\x05\x0c\xa0\xa4\xca\x1e\x80k\x05\x0cHk\x05\x0c\xc8,\x05\x0c\xa0\xa4\xca\x1e@\xa4\xca\x1eP\xa6\xca\x1e\xd8&\x05\x0c\x08.\x05\x0c\xd8&\x05\x0cHk\x05\x0c\xd8&\x05\x0cp\xa4\xca\x1e\xc0\x06a\x0c\xd8!\x05\x0c`l\x05\x0c\xb8-\x05\x0c@\xa4\xca\x1e\x98*\x05\x0c\x90\xa5\xca\x1e0$\x05\x0c\xc0\xa5\xca\x1e\x10+\x05\x0c8!\x05\x0c\xa0\xa4\xca\x1e\xc0\x06a\x0c \x04a\x0c\x08.\x05\x0c\xd8!\x05\x0c\xb8-\x05\x0c\xa0\x08a\x0c\x80k\x05\x0c\xd0)\x05\x0c \x04a\x0c0\xa5\xca\x1e\xd0\xa4\xca\x1e\x10+\x05\x0c\xc8,\x05\x0c \x04a\x0c\xd8&\x05\x0c\xb8-\x05\x0c\xd0)\x05\x0c8!\x05\x0c\xa0\na\x0c\xa0\x08a\x0c\x08.\x05\x0c\xa0\na\x0c\xc0\x06a\x0c\xd0)\x05\x0c\xa0\na\x0cHk\x05\x0cp\xa4\xca\x1e\xd0\xa4\xca\x1e\xa0\x08a\x0cp\xa4\xca\x1e\x98l\x05\x0c\xa0\x08a\x0c\xa0\xa4\xca\x1eh-\x05\x0c\xd8&\x05\x0c\xd0\xa4\xca\x1e\xb8k\x05\x0c@\xa4\xca\x1e\x98*\x05\x0c0$\x05\x0c\xb8-\x05\x0c\xd8&\x05\x0c\xb8-\x05\x0c\xd8&\x05\x0cHk\x05\x0c \x04a\x0c\xc0\xa5\xca\x1e\xa0\xa4\xca\x1e\xc8,\x05\x0c\xd8!\x05\x0c\x80k\x05\x0c0$\x05\x0c\xa0\x08a\x0c\xb8-\x05\x0c\xe0\x0ba\x0c\xb8-\x05\x0c@\xa4\xca\x1eHk\x05\x0c\xa0\x08a\x0c\xc0\xa5\xca\x1e\xd0\xa4\xca\x1e\xb8-\x05\x0c\xd8!\x05\x0ch-\x05\x0c\x10+\x05\x0c \x04a\x0c\xb8-\x05\x0ch-\x05\x0c\xd0\xa4\xca\x1e\xc0\x06a\x0c\xc8,\x05\x0c\xf0\xa5\xca\x1e\x80k\x05\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S'\xe0\x85{\x0c\x00\x87{\x0c \x88{\x0c\xe0\x87{\x0c`\x88{\x0c\x00\x86{\x0c\xc0\x87{\x0c\x00\x88{\x0c\xc0\x88{\x0c \x85{\x0c \x86{\x0c`\x87{\x0c`\x86{\x0c@\x87{\x0c@\x88{\x0c\xa0\x87{\x0c\xc0\x86{\x0c\x80\x87{\x0c\x00\x89{\x0c\x80\x88{\x0c\x80\x86{\x0c\xc0\x85{\x0c \x8a{\x0c@\x86{\x0c\x00\x8a{\x0c\xe0\x86{\x0c`\x89{\x0c\xe0\x88{\x0c\xa0\x89{\x0c\x00\x8b{\x0c\xa0\x8a{\x0c \x87{\x0c\xe0\x89{\x0c\xe0\x8a{\x0c\xa0\x8b{\x0c\xa0\x85{\x0c\x80\x8b{\x0c`\x8a{\x0c\x80\x85{\x0c \x89{\x0c@\x8c{\x0c\xc0\x89{\x0c\x80\x8c{\x0c\xa0\x8c{\x0c\x80\x89{\x0c@\x8a{\x0c\xa0\x88{\x0c \x8b{\x0c@\x8b{\x0c\xc0\x8b{\x0c\xc0\x8c{\x0c \x8c{\x0c\xe0\x8c{\x0c\x00\x8c{\x0c\xc0\x8d{\x0c\x80\x8a{\x0c\x00\x8d{\x0c\xe0\x8b{\x0c\x80\x8e{\x0c \x8e{\x0c@\x8e{\x0c@\x8d{\x0c@\x89{\x0c\xa0\x8e{\x0c\xc0\x8a{\x0c\x00\x8f{\x0c\xa0\x8d{\x0c\x80\x8d{\x0c`\x8f{\x0c\x80\x8f{\x0c`\x8e{\x0c\xa0\x8f{\x0c\x00\x8e{\x0c`\x8c{\x0c\xc0\x8f{\x0c\xc0\x8e{\x0c\xe0\x8e{\x0c \x8d{\x0c`\x8b{\x0c\xa0\x86{\x0c\x80\x05a\x0c\xa0\x06a\x0c@\x8f{\x0c \na\x0c \xa0\xeb\x1e@\xa2\xeb\x1e\x80\xa0\xeb\x1e\x80\xa1\xeb\x1e \xa1\xeb\x1e@\xa0\xeb\x1e\xe0\xa1\xeb\x1e`\xa2\xeb\x1e\xc0\xa1\xeb\x1e\xe0\xa0\xeb\x1e\xa0\xa2\xeb\x1e\xe0\xa2\xeb\x1e`\xa0\xeb\x1e\x00\x07a\x0c\x00\xa3\xeb\x1e \xa3\xeb\x1e\xa0\xa3\xeb\x1e \xa4\xeb\x1e\xa0\xa0\xeb\x1e\x00\xa1\xeb\x1e`\xa4\xeb\x1e@\xa3\xeb\x1e\xc0\xa4\xeb\x1e\x00\xa2\xeb\x1e\x00\xa4\xeb\x1e\xc0\xa0\xeb\x1e`\xa1\xeb\x1e\xc0\xa2\xeb\x1e \xa5\xeb\x1e\xa0\xa5\xeb\x1e\x80\xa4\xeb\x1e\x80\xa2\xeb\x1e\xe0\xa5\xeb\x1e`\xa3\xeb\x1e\x80\xa5\xeb\x1e@\xa6\xeb\x1e\x00\xa6\xeb\x1e\x00\xa5\xeb\x1e\xe0\xa3\xeb\x1e\xe0\xa6\xeb\x1e@\xa5\xeb\x1e\x80\xa6\xeb\x1e\xa0\xa4\xeb\x1e\xa0\xa6\xeb\x1e`\xa5\xeb\x1e@\xa4\xeb\x1e\x00\xa7\xeb\x1e\xc0\xa7\xeb\x1e\xa0\xa1\xeb\x1e\x80\xa3\xeb\x1e \xa7\xeb\x1e \xa6\xeb\x1e`\xa6\xeb\x1e\xa0\xa8\xeb\x1e\xc0\xa3\xeb\x1e@\xa1\xeb\x1e \xa8\xeb\x1e\xe0\xa7\xeb\x1e\x80\xa8\xeb\x1e`\xa9\xeb\x1e\x80\xa7\xeb\x1e\xe0\xa4\xeb\x1e@\xa7\xeb\x1e\xa0\xa7\xeb\x1e\x00\xa9\xeb\x1e\xc0\xa8\xeb\x1e \xa9\xeb\x1e\x00\xaa\xeb\x1e\xa0\xa9\xeb\x1e\xa0\xaa\xeb\x1e\xe0\xa8\xeb\x1e`\xaa\xeb\x1e\x80\xaa\xeb\x1e\x00\xab\xeb\x1e\xc0\xa9\xeb\x1e\x00\xa8\xeb\x1e\xe0\xa9\xeb\x1e \xab\xeb\x1e\xc0\xab\xeb\x1e\x80\xa9\xeb\x1e \xaa\xeb\x1e@\xab\xeb\x1e`\xa7\xeb\x1e\x80\xab\xeb\x1e\xc0\xaa\xeb\x1e\xc0\xa6\xeb\x1e\xe0\xaa\xeb\x1e\xa0\xab\xeb\x1e@\xa9\xeb\x1e \xac\xeb\x1e\xa0\xac\xeb\x1e`\xac\xeb\x1e\x80\xad\xeb\x1e\xc0\xa5\xeb\x1e\xe0\xac\xeb\x1e \xa2\xeb\x1e@\xa8\xeb\x1e \xae\xeb\x1e`\xad\xeb\x1e@\xac\xeb\x1e \xad\xeb\x1e`\xab\xeb\x1e`\xae\xeb\x1e\x00\xac\xeb\x1e\x80\xae\xeb\x1e@\xad\xeb\x1e\x00\xae\xeb\x1e\xc0\xad\xeb\x1e`\xa8\xeb\x1e@\xae\xeb\x1e\xe0\xae\xeb\x1e\xa0\xad\xeb\x1e\xc0\xaf\xeb\x1e\x80\xac\xeb\x1e@\xaa\xeb\x1e\x00\xaf\xeb\x1e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'\x03\x1e\xa2?\x19v\x97?\xddw7?\xc5\x1cb?\xf4\x11Q?\xa4QD?\xe4\xfd??1BD?n\x00@?\x08D\x84?\x8b3\xb3?\xc9\xef\x8e?\xd4I\x95?-\x86\x88?]\xdd]?\xcd.\x82?\xba\xc9\xac?\xad\x0bQ?\xf3\x82\x88?\xde\xb5;?\xa1,3?\xd1\xc3\x8c?s\xa3*?$\xda\xfd?+\xfc??\x91+\x82?\x1d\x00\x80?\x9f\x1cb?:y7?\x1f\xcaL?\xdb?\xa4?\x90\x1cb?;\xee>@\xdc\xb6;?\xec\xab\x8a?\x03h\x86?g\xc8L?\xac\xa9\x8a?\xbd\xb7;?\xc9\xcbL?\xc3x7?\x85\xbc;?\xc8\x83H?\xcc2s?\x7f\x01@?0\xb8;?\xd0\xcc\x8c?\xf5f\x86?\xdbf\x86?p\xb5;?X\xf0\xee?\x8d\xceL?W\x0b\x80?\xa6gf?\xdb\xaa\x8a?\xdb\x8bH?\xef\xed.?\xf2VU?E\x1c@?3\xb0\xbb?q23?\x082s?F\x1bb?\xc4\xcd{?o33?\xf9\x0fQ?k\x86H?\x1b43?t)s?Fh\xe6?f\x95j?B\xa9j?\x03.3?\x1ew7?\x03CD?\x084b?\xbc\x9bY?\x08\xe8.?\x94\xef.?\x9b\x01Q?\xd3"\x82?dr&?MUU?L\xcd\x8c?\xc243?[\xde\x9d?\x00\xde]?)CD?a>D?\x94\x02@?\x19\xe7.?a\'3?-\xd0;?~\x95\x19?\xff\xddn?Q\xb8;?B\x9aY?\xc3\xab;?\xccK3?^Lf?3if?\xba\xa9*?\xa4>D?\xa9u7?\x9d\n/?\x8d\x95Y?\xec\xaa*?\x15\xceL?\tnw?\xd7\xa1*?\x07p\x97?\x08\xc4L?\x97\xb1;?V\xba;?e/3?F\x0e\x91?\x8d\x847?\xe6\xfc??L\x9aY?\xcc\x1bb?\x01\x8a\x88?>\x11b?U\xa2H?1b&?>\xef.?0\x11Q?\xe8\x01@?\xb6\x11Q?\x8a\x9aH?\x95sH?\xac\xf1.?\xbcSU?\x88\xaaj?\x9fBD?L\x8bw?J\xc8L??""?\xf5\x1f\x82?n\x00@?\x9763?\xa0\xf4]?\xdf!b?\xccAD?\xd5\xc7\x8c?\x93x7?\r\xad*?y\x1aQ?\x1b=U?\x0343?\x99"b?\x04p7?J\xa6*?[J3?$#"?\x9c\xa0j?\x9cU\x95?\xb3%"?;\x8aH?\xe8\x07o?r\xcdL?\x0e\x00@?\xddUU?\x94\x13Q?f\x83\x88?\xfcv\x97?u\x01@?\x13\xc7L?\xd2\xed\x8e?J\xec.?\xd2=b?*\x96\x19?Pcf?}y7?\xbc\xac*?\x9e\xeb.?\xf4\x96H?\xbf\x00@?p\xf2.?\xec\x8aH?]\xdf]?\xafGD?*\x0c@?#\xa8*?jQU?P03?\x7f\xea.?\x9e\xeb.?\x9eJ3?z\xb9;?\xe4.3?s\xa3*?\x95\x0fQ?J\xff\x7f?\xd0\xee.?\xdc\xa5*?\x10\xb9;?\x0b\xab\x8a?B\xe0]?\x8ft7?\x87DD?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'\xc0X\xd1\x04\x08_\xd1\x04\xc0+\xf2\x04\x18"\xf2\x04\xa0-\xf2\x04\xb0/\xf2\x04\x10\'\xf2\x04\x18(\xf2\x04\xf0+\xf2\x04h/\xf2\x04\xd0-\xf2\x04X!\xf2\x04@\'\xf2\x04P&\xf2\x04\xf0"\xf2\x04\xd0$\xf2\x04h&\xf2\x04\x80#\xf2\x04`.\xf2\x04\x08)\xf2\x04\xe0&\xf2\x04\xa0*\xf2\x04\xd0!\xf2\x04\xc0%\xf2\x04x(\xf2\x04\x98#\xf2\x04P,\xf2\x04\xb8*\xf2\x04\x80)\xf2\x04\xd8+\xf2\x04P#\xf2\x04\xb8$\xf2\x04\xc8 \xf2\x04\x08,\xf2\x04 &\xf2\x04\x80 \xf2\x04h#\xf2\x04\xb8\'\xf2\x04\xb0&\xf2\x040%\xf2\x04\x10-\xf2\x04\xf0%\xf2\x04\xa0$\xf2\x04\xf8,\xf2\x04  \xf2\x04H+\xf2\x04\x80&\xf2\x04\x08&\xf2\x04\x98/\xf2\x04\xa8+\xf2\x04x.\xf2\x04\x90+\xf2\x040"\xf2\x04X-\xf2\x04@-\xf2\x04p$\xf2\x040.\xf2\x04 )\xf2\x04h \xf2\x04\xe0 \xf2\x04\xc8/\xf2\x048&\xf2\x04\x90.\xf2\x04\x88*\xf2\x04\xd8\x92\xd8\x04\xe0\x9c\xd8\x04\xf8\x99\xd8\x04\xf8\x90\xd8\x04\x98\x93\xd8\x04\x80\x96\xd8\x04\xd0\x9d\xd8\x04p\x91\xd8\x04\xe0\x99\xd8\x04\xc8\x93\xd8\x04\x18\x98\xd8\x04\xc8\x9f\xd8\x04 \x9c\xd8\x04\x88\x94\xd8\x04p\x97\xd8\x04\x08\x99\xd8\x04\xd8\x95\xd8\x04\xb8\x97\xd8\x04\xd0\x9a\xd8\x04(\x94\xd8\x04P\x99\xd8\x04\x98\x99\xd8\x04\xa8\x9b\xd8\x04\x00\x95\xd8\x048\x99\xd8\x04@\x94\xd8\x04\xf8\x9c\xd8\x04\x18\x95\xd8\x04h\x96\xd8\x04X\x91\xd8\x04\x08\x96\xd8\x04P\x96\xd8\x04\xb0\x96\xd8\x04\xf8\x96\xd8\x04h\x90\xd8\x04\x18\x9b\xd8\x04\xa0\x91\xd8\x04h\x9f\xd8\x04\x90\x92\xd8\x04\x88\x91\xd8\x04@\x91\xd8\x04\xf0\x9b\xd8\x04\x80\x99\xd8\x04\xc0\x9b\xd8\x04\x00\x9b\xd8\x04P\x9c\xd8\x04\x00\x98\xd8\x04\xe0\x96\xd8\x04h\x93\xd8\x04\x18\x9e\xd8\x04\xa0\x94\xd8\x04H\x98\xd8\x040\x9e\xd8\x04\xf0\x98\xd8\x04@\x97\xd8\x04\xa0\x97\xd8\x04P\x9f\xd8\x04h\x99\xd8\x04\xa8\x95\xd8\x04\x80\x9c\xd8\x04\x90\x95\xd8\x04p\x9a\xd8\x04\xb0\x93\xd8\x04\x00\x9e\xd8\x04\x10\x9d\xd8\x04@\x9d\xd8\x04\xa8\x9e\xd8\x04\xd8\x9e\xd8\x04\xf0\x92\xd8\x04x\x9b\xd8\x04\xc8\x99\xd8\x04 \x9f\xd8\x04\x98\x9c\xd8\x04 \x93\xd8\x04X\x97\xd8\x04\xc0\x98\xd8\x04(\x9a\xd8\x04 \x99\xd8\x04X$\xf2\x04\xa8%\xf2\x04\xf0(\xf2\x04h,\xf2\x04`(\xf2\x04\xd0\'\xf2\x04\xc8#\xf2\x04\xb0,\xf2\x04\xb0 \xf2\x04\xe8\'\xf2\x04\x08#\xf2\x04\xb0#\xf2\x04`%\xf2\x04 ,\xf2\x04\x98)\xf2\x04\xc0.\xf2\x04P \xf2\x04\xe8-\xf2\x04p*\xf2\x04\xd8%\xf2\x04\x18%\xf2\x04\xd0*\xf2\x04\xc0(\xf2\x04\xb8-\xf2\x04\xa8"\xf2\x04\xd8.\xf2\x04x+\xf2\x04\x98&\xf2\x040(\xf2\x04\xd8(\xf2\x04\xa8(\xf2\x048,\xf2\x04\x98,\xf2\x04\xe0/\xf2\x04H(\xf2\x04\xa0\'\xf2\x048)\xf2\x04X\'\xf2\x04\x90(\xf2\x04\x90"\xf2\x04\xe0)\xf2\x04\xa8.\xf2\x04(\'\xf2\x04\x10*\xf2\x04X*\xf2\x04($\xf2\x04\xf8 \xf2\x04\x90%\xf2\x04\x80,\xf2\x04(*\xf2\x04\xf8)\xf2\x04\x88-\xf2\x04\xc8&\xf2\x04\xb0)\xf2\x04\x18+\xf2\x04`"\xf2\x04\xb8!\xf2\x04p\'\xf2\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3722
sg3633
g3718
sg3647
g3729
sg3642
g3726
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3739
sg3633
g3735
sg3647
g3746
sg3642
g3743
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3762
sg3633
g3752
sg3647
g3756
sg3642
g3760
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3722
sg3633
g3769
sg3647
g3729
sg3642
g3776
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3638
sg3633
g3784
sg3647
g3648
sg3642
g3791
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3837
sg3633
g3833
sg3647
g3844
sg3642
g3841
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3739
sg3633
g3867
sg3647
g3746
sg3642
g3874
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3905
sg3633
g3895
sg3647
g3899
sg3642
g3903
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3916
sg3633
g3912
sg3647
g3923
sg3642
g3920
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3905
sg3633
g3895
sg3647
g3899
sg3642
g3903
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3946
sg3633
g3942
sg3647
g3953
sg3642
g3950
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3762
sg3633
g3752
sg3647
g3756
sg3642
g3760
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3837
sg3633
g3833
sg3647
g3844
sg3642
g3841
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3995
sg3633
g3985
sg3647
g3989
sg3642
g3993
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g4006
sg3633
g4002
sg3647
g4013
sg3642
g4010
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3675
sg3633
g4019
sg3647
g3682
sg3642
g4026
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g3905
sg3633
g4034
sg3647
g3899
sg3642
g4041
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3638
sg3633
g3784
sg3647
g3648
sg3642
g3791
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g3698
sg3633
g4062
sg3647
g3692
sg3642
g4069
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g4087
sg3633
g4077
sg3647
g4081
sg3642
g4085
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3916
sg3633
g4094
sg3647
g3923
sg3642
g4101
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g3638
sg3633
g3784
sg3647
g3648
sg3642
g3791
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g4006
sg3633
g4135
sg3647
g4013
sg3642
g4142
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g3722
sg3633
g3718
sg3647
g3729
sg3642
g3726
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g4167
sg3633
g4163
sg3647
g4174
sg3642
g4171
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g3905
sg3633
g4034
sg3647
g3899
sg3642
g4041
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g3722
sg3633
g3769
sg3647
g3729
sg3642
g3776
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g4236
sg3633
g4232
sg3647
g4243
sg3642
g4240
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g4167
sg3633
g4249
sg3647
g4174
sg3642
g4256
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3916
sg3633
g3912
sg3647
g3923
sg3642
g3920
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3946
sg3633
g3942
sg3647
g3953
sg3642
g3950
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g4167
sg3633
g4249
sg3647
g4174
sg3642
g4256
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g4236
sg3633
g4342
sg3647
g4243
sg3642
g4349
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g3762
sg3633
g4357
sg3647
g3756
sg3642
g4364
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g3995
sg3633
g3985
sg3647
g3989
sg3642
g3993
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3820
sg3633
g4385
sg3647
g3827
sg3642
g4392
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3762
sg3633
g3752
sg3647
g3756
sg3642
g3760
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3658
sg3633
g4426
sg3647
g3665
sg3642
g4433
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g4087
sg3633
g4441
sg3647
g4081
sg3642
g4448
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3739
sg3633
g3735
sg3647
g3746
sg3642
g3743
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g4087
sg3633
g4441
sg3647
g4081
sg3642
g4448
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g3837
sg3633
g4508
sg3647
g3844
sg3642
g4515
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3995
sg3633
g3985
sg3647
g3989
sg3642
g3993
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g4167
sg3633
g4163
sg3647
g4174
sg3642
g4171
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g3739
sg3633
g3867
sg3647
g3746
sg3642
g3874
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g3905
sg3633
g4034
sg3647
g3899
sg3642
g4041
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3739
sg3633
g3735
sg3647
g3746
sg3642
g3743
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3854
sg3633
g4588
sg3647
g3861
sg3642
g4595
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g3946
sg3633
g3942
sg3647
g3953
sg3642
g3950
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3916
sg3633
g3912
sg3647
g3923
sg3642
g3920
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g4236
sg3633
g4342
sg3647
g4243
sg3642
g4349
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3837
sg3633
g3833
sg3647
g3844
sg3642
g3841
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g3905
sg3633
g3895
sg3647
g3899
sg3642
g3903
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g3995
sg3633
g4681
sg3647
g3989
sg3642
g4688
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g3762
sg3633
g4357
sg3647
g3756
sg3642
g4364
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g4236
sg3633
g4342
sg3647
g4243
sg3642
g4349
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g3722
sg3633
g3718
sg3647
g3729
sg3642
g3726
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3698
sg3633
g4062
sg3647
g3692
sg3642
g4069
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g4087
sg3633
g4077
sg3647
g4081
sg3642
g4085
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g3905
sg3633
g3895
sg3647
g3899
sg3642
g3903
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g3803
sg3633
g4787
sg3647
g3810
sg3642
g4794
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g3995
sg3633
g4681
sg3647
g3989
sg3642
g4688
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3803
sg3633
g4787
sg3647
g3810
sg3642
g4794
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3820
sg3633
g4385
sg3647
g3827
sg3642
g4392
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g4006
sg3633
g4002
sg3647
g4013
sg3642
g4010
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g4871
sg3633
g4867
sg3647
g4878
sg3642
g4875
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g3762
sg3633
g4357
sg3647
g3756
sg3642
g4364
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g3739
sg3633
g3735
sg3647
g3746
sg3642
g3743
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g3946
sg3633
g4910
sg3647
g3953
sg3642
g4917
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3995
sg3633
g4681
sg3647
g3989
sg3642
g4688
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3946
sg3633
g4910
sg3647
g3953
sg3642
g4917
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g4087
sg3633
g4077
sg3647
g4081
sg3642
g4085
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3946
sg3633
g4910
sg3647
g3953
sg3642
g4917
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g3837
sg3633
g3833
sg3647
g3844
sg3642
g3841
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g4167
sg3633
g4249
sg3647
g4174
sg3642
g4256
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3675
sg3633
g4019
sg3647
g3682
sg3642
g4026
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g3658
sg3633
g4426
sg3647
g3665
sg3642
g4433
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g3837
sg3633
g4508
sg3647
g3844
sg3642
g4515
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g3762
sg3633
g3752
sg3647
g3756
sg3642
g3760
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g4167
sg3633
g4249
sg3647
g4174
sg3642
g4256
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g4087
sg3633
g4077
sg3647
g4081
sg3642
g4085
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3722
sg3633
g3769
sg3647
g3729
sg3642
g3776
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g4087
sg3633
g4077
sg3647
g4081
sg3642
g4085
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3658
sg3633
g4426
sg3647
g3665
sg3642
g4433
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g4236
sg3633
g4342
sg3647
g4243
sg3642
g4349
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g4006
sg3633
g4002
sg3647
g4013
sg3642
g4010
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g3837
sg3633
g4508
sg3647
g3844
sg3642
g4515
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g4006
sg3633
g4135
sg3647
g4013
sg3642
g4142
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g3675
sg3633
g4019
sg3647
g3682
sg3642
g4026
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g4006
sg3633
g4002
sg3647
g4013
sg3642
g4010
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3946
sg3633
g4910
sg3647
g3953
sg3642
g4917
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3739
sg3633
g3867
sg3647
g3746
sg3642
g3874
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g3995
sg3633
g3985
sg3647
g3989
sg3642
g3993
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g4871
sg3633
g5289
sg3647
g4878
sg3642
g5296
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3658
sg3633
g4426
sg3647
g3665
sg3642
g4433
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g3638
sg3633
g3784
sg3647
g3648
sg3642
g3791
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g3837
sg3633
g4508
sg3647
g3844
sg3642
g4515
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g3762
sg3633
g4357
sg3647
g3756
sg3642
g4364
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3916
sg3633
g4094
sg3647
g3923
sg3642
g4101
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g4167
sg3633
g4249
sg3647
g4174
sg3642
g4256
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g4087
sg3633
g4441
sg3647
g4081
sg3642
g4448
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3854
sg3633
g4588
sg3647
g3861
sg3642
g4595
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g3803
sg3633
g4787
sg3647
g3810
sg3642
g4794
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g3837
sg3633
g4508
sg3647
g3844
sg3642
g4515
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3739
sg3633
g3867
sg3647
g3746
sg3642
g3874
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g4871
sg3633
g4867
sg3647
g4878
sg3642
g4875
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3820
sg3633
g4385
sg3647
g3827
sg3642
g4392
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g3722
sg3633
g3718
sg3647
g3729
sg3642
g3726
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3905
sg3633
g4034
sg3647
g3899
sg3642
g4041
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3675
sg3633
g4019
sg3647
g3682
sg3642
g4026
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g4236
sg3633
g4232
sg3647
g4243
sg3642
g4240
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g4167
sg3633
g4163
sg3647
g4174
sg3642
g4171
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3698
sg3633
g4062
sg3647
g3692
sg3642
g4069
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3803
sg3633
g4787
sg3647
g3810
sg3642
g4794
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g4006
sg3633
g4135
sg3647
g4013
sg3642
g4142
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g4871
sg3633
g5289
sg3647
g4878
sg3642
g5296
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g3905
sg3633
g3895
sg3647
g3899
sg3642
g3903
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3698
sg3633
g4062
sg3647
g3692
sg3642
g4069
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3995
sg3633
g4681
sg3647
g3989
sg3642
g4688
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g3837
sg3633
g3833
sg3647
g3844
sg3642
g3841
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g3995
sg3633
g3985
sg3647
g3989
sg3642
g3993
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g3854
sg3633
g4588
sg3647
g3861
sg3642
g4595
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g3905
sg3633
g4034
sg3647
g3899
sg3642
g4041
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3995
sg3633
g4681
sg3647
g3989
sg3642
g4688
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3675
sg3633
g4019
sg3647
g3682
sg3642
g4026
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g3946
sg3633
g4910
sg3647
g3953
sg3642
g4917
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g4236
sg3633
g4232
sg3647
g4243
sg3642
g4240
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3820
sg3633
g4385
sg3647
g3827
sg3642
g4392
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g3946
sg3633
g3942
sg3647
g3953
sg3642
g3950
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g4167
sg3633
g4163
sg3647
g4174
sg3642
g4171
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g4087
sg3633
g4441
sg3647
g4081
sg3642
g4448
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3916
sg3633
g3912
sg3647
g3923
sg3642
g3920
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g4006
sg3633
g4002
sg3647
g4013
sg3642
g4010
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g4236
sg3633
g4232
sg3647
g4243
sg3642
g4240
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3722
sg3633
g3718
sg3647
g3729
sg3642
g3726
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3638
sg3633
g3784
sg3647
g3648
sg3642
g3791
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3762
sg3633
g3752
sg3647
g3756
sg3642
g3760
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g4871
sg3633
g4867
sg3647
g4878
sg3642
g4875
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g4006
sg3633
g4135
sg3647
g4013
sg3642
g4142
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g4871
sg3633
g4867
sg3647
g4878
sg3642
g4875
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g4006
sg3633
g4135
sg3647
g4013
sg3642
g4142
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3916
sg3633
g3912
sg3647
g3923
sg3642
g3920
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g4087
sg3633
g4441
sg3647
g4081
sg3642
g4448
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g3739
sg3633
g3735
sg3647
g3746
sg3642
g3743
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3722
sg3633
g3769
sg3647
g3729
sg3642
g3776
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g3762
sg3633
g4357
sg3647
g3756
sg3642
g4364
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3820
sg3633
g4385
sg3647
g3827
sg3642
g4392
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g4871
sg3633
g5289
sg3647
g4878
sg3642
g5296
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g3854
sg3633
g4588
sg3647
g3861
sg3642
g4595
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g4871
sg3633
g5289
sg3647
g4878
sg3642
g5296
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g3658
sg3633
g4426
sg3647
g3665
sg3642
g4433
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3916
sg3633
g4094
sg3647
g3923
sg3642
g4101
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g4236
sg3633
g4232
sg3647
g4243
sg3642
g4240
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g4871
sg3633
g5289
sg3647
g4878
sg3642
g5296
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g3739
sg3633
g3867
sg3647
g3746
sg3642
g3874
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3916
sg3633
g4094
sg3647
g3923
sg3642
g4101
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g4167
sg3633
g4163
sg3647
g4174
sg3642
g4171
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g3803
sg3633
g4787
sg3647
g3810
sg3642
g4794
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g4871
sg3633
g4867
sg3647
g4878
sg3642
g4875
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3916
sg3633
g4094
sg3647
g3923
sg3642
g4101
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g4236
sg3633
g4342
sg3647
g4243
sg3642
g4349
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g3854
sg3633
g4588
sg3647
g3861
sg3642
g4595
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g3698
sg3633
g4062
sg3647
g3692
sg3642
g4069
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g3946
sg3633
g3942
sg3647
g3953
sg3642
g3950
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g3722
sg3633
g3769
sg3647
g3729
sg3642
g3776
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I81854800
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'\xa8\x8e\x0c\x1f\xd0\x8e\x0c\x1f \xc1\x0c\x1f\x90\xdb\x0b\x1f@\x8d\x0c\x1f \xc1\x0c\x1f\x80\xdc\x0b\x1f\xf8\x8e\x0c\x1f@\xc1\x0c\x1f\xa0\xb3\x0c\x1f\xe0\x8d\x0c\x1f\x90\xdb\x0b\x1f\xc0\xdb\x0b\x1f`\xc1\x0c\x1f\x08\x8e\x0c\x1f\xc0\xb2\x0c\x1f@\x8d\x0c\x1f\xc0\xb2\x0c\x1f\xb8\x8d\x0c\x1f\xf0\x8c\x0c\x1f\xc0\xdb\x0b\x1f\x80\xc1\x0c\x1f@\xc1\x0c\x1f0\x8e\x0c\x1fh\x8d\x0c\x1f\xf0\x8c\x0c\x1f\xc0\xc1\x0c\x1f\x90\x8d\x0c\x1f\xb8\x8d\x0c\x1f\xf0\xdb\x0b\x1f\x08\x8e\x0c\x1f\xc0\xdb\x0b\x1f\xf0\xdb\x0b\x1fh\x8d\x0c\x1f@\x8d\x0c\x1f\xd0\x8e\x0c\x1fH\x8f\x0c\x1f\xd8\xb3\x0c\x1fX\x8e\x0c\x1f \xdc\x0b\x1f\x10\xdd\x0b\x1f0\x8e\x0c\x1f\xa0\xdd\x0b\x1f \xc1\x0c\x1f\x80\xc1\x0c\x1f\xc0\xdb\x0b\x1f\xc0\xb2\x0c\x1f \xdc\x0b\x1f \xc1\x0c\x1f\x90\xdb\x0b\x1f\xb0\xdc\x0b\x1f\x08\x8e\x0c\x1f@\xc1\x0c\x1f`\xc1\x0c\x1fX\x8e\x0c\x1f\x90\x8d\x0c\x1f\xf8\xb2\x0c\x1fH\x8f\x0c\x1f\x18\x8d\x0c\x1f`\xc1\x0c\x1f\xb8\x8d\x0c\x1f\x80\xc1\x0c\x1f\xc0\xb2\x0c\x1fh\x8d\x0c\x1f0\x8e\x0c\x1f\x18\x8d\x0c\x1f\x90\xdb\x0b\x1f\x90\x8d\x0c\x1f\xe0\x8d\x0c\x1f\xf0\xdb\x0b\x1fh\x8d\x0c\x1f\xc0\xb2\x0c\x1fX\x8e\x0c\x1fH\x8f\x0c\x1fp\xdd\x0b\x1f0\x8e\x0c\x1f\x80\xc1\x0c\x1fh\x8d\x0c\x1f\xf0\xdb\x0b\x1f@\xc1\x0c\x1f\xf0\x8c\x0c\x1f@\x8d\x0c\x1f\x08\x8e\x0c\x1f\xf8\x8e\x0c\x1f\x08\x8e\x0c\x1f`\xc1\x0c\x1f@\xc1\x0c\x1f\xf8\xb2\x0c\x1fP\xdc\x0b\x1f \xdc\x0b\x1f\x10\xb4\x0c\x1f0\xb3\x0c\x1f\xe0\x8d\x0c\x1f\x90\xdb\x0b\x1f@\x8d\x0c\x1f\x80\xc1\x0c\x1f\xf8\xb2\x0c\x1f\x90\x8d\x0c\x1f\xb8\x8d\x0c\x1fh\x8d\x0c\x1f@\xc1\x0c\x1f\xe0\x8d\x0c\x1f\x08\x8e\x0c\x1f\xf0\xdb\x0b\x1f\x90\xdb\x0b\x1f\xb0\xdc\x0b\x1f\xf8\xb2\x0c\x1f\x80\xc1\x0c\x1f@\xdd\x0b\x1fX\x8e\x0c\x1f\xe0\x8d\x0c\x1f@\x8d\x0c\x1f\x90\xdb\x0b\x1f\xf8\xb2\x0c\x1f0\xb3\x0c\x1f\x80\xc1\x0c\x1f\xb8\x8d\x0c\x1f\x80\xdc\x0b\x1f\x80\xc1\x0c\x1f\xd8\xb3\x0c\x1f \xdc\x0b\x1f\xd8\xb3\x0c\x1f@\x8d\x0c\x1f\xe0\xdc\x0b\x1f\xd0\x8e\x0c\x1f\x10\xdd\x0b\x1f\xf0\x8c\x0c\x1f\x90\x8d\x0c\x1f\x10\xdd\x0b\x1f\x90\x8d\x0c\x1fX\x8e\x0c\x1f \x8f\x0c\x1f\x90\x8d\x0c\x1f\xd0\x8e\x0c\x1f0\x8e\x0c\x1f\xd8\xb3\x0c\x1f\x18\x8d\x0c\x1f \xdc\x0b\x1f\xf8\xb2\x0c\x1f\xc0\xdb\x0b\x1fH\x8f\x0c\x1f\xf0\x8c\x0c\x1fX\x8e\x0c\x1f \xc1\x0c\x1f\xf0\x8c\x0c\x1f\xb8\x8d\x0c\x1f \xc1\x0c\x1f\x08\x8e\x0c\x1f\xc0\xc1\x0c\x1f\xd8\xb3\x0c\x1f\xf8\xb2\x0c\x1fX\x8e\x0c\x1f0\xb3\x0c\x1f \x8f\x0c\x1fh\x8d\x0c\x1f\x80\xc1\x0c\x1f\xf0\xdb\x0b\x1f \xc1\x0c\x1f0\x8e\x0c\x1f\xf0\xdb\x0b\x1f\xc0\xdb\x0b\x1f\xc0\xb2\x0c\x1f \xdc\x0b\x1f\xc0\xdb\x0b\x1f0\x8e\x0c\x1f\xd0\x8e\x0c\x1f\xb0\xdc\x0b\x1f@\x8d\x0c\x1f\xf0\x8c\x0c\x1f@\x8d\x0c\x1f\xe0\x8d\x0c\x1f\x90\x8d\x0c\x1f\xf0\xdb\x0b\x1f0\x8e\x0c\x1f@\xc1\x0c\x1f \xdc\x0b\x1f\x10\xdd\x0b\x1f\xf8\xb2\x0c\x1f`\xc1\x0c\x1f\x90\xdb\x0b\x1f@\xc1\x0c\x1fP\xdc\x0b\x1f \xdc\x0b\x1f\x08\x8e\x0c\x1f\xf0\x8c\x0c\x1f@\x8d\x0c\x1f\xd0\x8e\x0c\x1f\xa8\x8e\x0c\x1f\xf8\xb2\x0c\x1f \xdc\x0b\x1f\xb8\x8d\x0c\x1fX\x8e\x0c\x1f\xb8\x8d\x0c\x1f\xe0\xdc\x0b\x1f\x18\x8d\x0c\x1f\xb8\x8d\x0c\x1f\x80\xc1\x0c\x1f\xf0\xdb\x0b\x1fX\x8e\x0c\x1fh\x8d\x0c\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'@\xc4\x0c\x1f\xc0\xc2\x0c\x1f@\xc2\x0c\x1f\x00\xc3\x0c\x1f\xa0\xc2\x0c\x1f\x80\xc4\x0c\x1f \xc4\x0c\x1f\xe0\xc2\x0c\x1f\x80\xc3\x0c\x1f\xc0\xc3\x0c\x1f\xa0\xc3\x0c\x1f\x00\xc4\x0c\x1f`\xc3\x0c\x1f`\xc4\x0c\x1f \xc3\x0c\x1f\x80\xc2\x0c\x1f\x80\xc5\x0c\x1f\xe0\xc4\x0c\x1f@\xc5\x0c\x1f\xa0\xc5\x0c\x1f`\xc5\x0c\x1f\x00\xc6\x0c\x1f\xe0\xc5\x0c\x1f@\xc6\x0c\x1f \xc6\x0c\x1f`\xc2\x0c\x1f`\xc6\x0c\x1f\x80\xc6\x0c\x1f\xa0\xc6\x0c\x1f\xc0\xc6\x0c\x1f \xc7\x0c\x1f@\xc7\x0c\x1f\x00\xc5\x0c\x1f\x80\xc7\x0c\x1f\xa0\xc7\x0c\x1f\xc0\xc7\x0c\x1f\xe0\xc1\x0c\x1f\x00\xc8\x0c\x1f \xc8\x0c\x1f@\xc8\x0c\x1f`\xc8\x0c\x1f\x80\xc8\x0c\x1f \xc2\x0c\x1f\xe0\xc8\x0c\x1f\xc0\xc8\x0c\x1f\xa0\xc8\x0c\x1f \xc9\x0c\x1f\xc0\xc4\x0c\x1f@\xc3\x0c\x1f@\xc9\x0c\x1f`\xc9\x0c\x1f\xc0\xc9\x0c\x1f\xa0\xc9\x0c\x1f \xc5\x0c\x1f \xca\x0c\x1f\x00\xca\x0c\x1f`\xca\x0c\x1f@\xca\x0c\x1f\xa0\xca\x0c\x1f\x80\xca\x0c\x1f\x00\xc7\x0c\x1f\x00\xcb\x0c\x1f \xcb\x0c\x1f\xc0\xc5\x0c\x1f\xe0\xc6\x0c\x1f@\xcb\x0c\x1f\xa0\xcb\x0c\x1f\x80\xcb\x0c\x1f\xa0\xc4\x0c\x1f\x00\xcc\x0c\x1f\xe0\xcb\x0c\x1f@\xcc\x0c\x1f \xcc\x0c\x1f\x80\xc9\x0c\x1f`\xcc\x0c\x1f\xc0\xcc\x0c\x1f\xe0\xcc\x0c\x1f\x00\xc9\x0c\x1f\xc0\xcb\x0c\x1f\x00\xcd\x0c\x1f \xcd\x0c\x1f@\xcd\x0c\x1f`\xcd\x0c\x1f\xc0\xcd\x0c\x1f\xe0\xcd\x0c\x1f\x00\xce\x0c\x1f\xe0\xc9\x0c\x1f@\xce\x0c\x1f \xce\x0c\x1f`\xc7\x0c\x1f`\xce\x0c\x1f\x80\xce\x0c\x1f\xe0\xce\x0c\x1f\xc0\xce\x0c\x1f\xe0\xc3\x0c\x1f\xa0\xcf\x0c\x1f\xe0\xca\x0c\x1f \xcf\x0c\x1f\xa0\xcc\x0c\x1f\xe0\xcf\x0c\x1f\x80\xcc\x0c\x1f\xa0\xcd\x0c\x1f\xc0\xca\x0c\x1f\x00\xcf\x0c\x1f\xa0\xce\x0c\x1f\x80\xcd\x0c\x1f`\xcb\x0c\x1f@\xcf\x0c\x1f`\xcf\x0c\x1f\x80\xcf\x0c\x1f@\xaf\xeb\x1e\xe0\x8d{\x0c \xd2-\x1f\xa0\xd0-\x1f`\xd1-\x1f\x00\xd1-\x1f \xd0-\x1f\xc0\xd1-\x1f \xd1-\x1f\xa0\xd2-\x1f@\xd2-\x1f@\xd0-\x1f\xc0\xd2-\x1f\xe0\xd2-\x1f\x80\xd0-\x1f\x00\xd2-\x1f\x00\xd3-\x1f \xd3-\x1f\x80\xd3-\x1f`\xd3-\x1f\xc0\xd0-\x1f\xe0\xd3-\x1f\x00\xd4-\x1f \xd4-\x1f`\xd2-\x1f\x80\xd2-\x1f@\xd4-\x1f`\xd4-\x1f\x80\xd4-\x1f\xe0\xd4-\x1f\xc0\xd4-\x1f\xc0\xd3-\x1f\x00\xd5-\x1f`\xd5-\x1f@\xd5-\x1f\xa0\xd5-\x1f\x80\xd5-\x1f\xa0\xd3-\x1f`\xd0-\x1f\xc0\xd5-\x1f@\xd6-\x1f`\xd6-\x1f\x00\xd6-\x1f@\xd1-\x1f\x80\xd6-\x1f\xa0\xd6-\x1f\xc0\xd6-\x1f\xe0\xd6-\x1f\x00\xd7-\x1f`\xd7-\x1f\x80\xd7-\x1f \xd5-\x1f\xc0\xd7-\x1f\xe0\xd7-\x1f \xd6-\x1f \xd8-\x1f\x00\xd8-\x1f\xa0\xd1-\x1f\x80\xd8-\x1f\xa0\xd8-\x1f\xe0\xd0-\x1f\xe0\xd8-\x1f\xc0\xd8-\x1f\xe0\xd5-\x1f@\xd9-\x1f \xd9-\x1f@\xd7-\x1f\x00\xad\xeb\x1e\xa0\xd7-\x1f\xa0\xd9-\x1f`\xd9-\x1f\xe0\xd9-\x1f\xc0\xda-\x1f@\xd3-\x1f\xa0\xda-\x1f \xda-\x1f`\xd8-\x1f@\xdb-\x1f \xd7-\x1f\x80\xd9-\x1f\x00\xda-\x1f \xdb-\x1f\x00\xd9-\x1f \xdc-\x1f@\xd8-\x1f@\xdc-\x1f`\xda-\x1f\x80\xdb-\x1f`\xdc-\x1f\x00\xdb-\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'\x84\xb3{?\xe61s?\xa1\x0cQ?*\xbe;?y\xceL?i\x08/?\x0c\xe8.?\x93CD?^ED?\xf0\xc3L?Ltw?\xbd\xbb*?\xb1\xb6;?\xe5\xf1.?\x9d\x83Y?\xeev7?=VU?\x96\xc3*?W\xe9.?=af?/\xa9*?M\x10\x91?5\xb2;?\x0c\xd7]?K\xfb??\x8e\xe8n?\x0f\xfc\x7f?\xe15s?+]f?\x1d\xcf{?U\xcd]?\x90\x11Q?\xd5\xcaL?\xc303?(\xdd]?\x1a\xfa]?\x00\xcdL?4\xef.?\x94\xcdL?\xcdtw?\xa9\xceL?\xc3TU?\xba\xa9j?\xc5\x0bQ?a\xce]?i\xc7L? \xa6H?\x00FD?\xa8HD?\xb3\x01@?(s7?K\x98j?$X\x95?\x9fsw?,33?OED?Nw7?qg&?\xcf\xaa*?\xea\xef.?\xe3\xa2j?\xda\xda\xbd?\xb1\xfc??R33?\xa0\x95H?\xef\xb4;?\x00\xc7L?\x89g\xa6?\xd9\xf2.?E#3?\xad\xfe.?=z7?Yg&?\x03.3?q\x1f"?\x19ff?\x82\xf9\x8e?V\xcbL?\x00\xb8{?2\xdb]?\xb6\x1eb?\xf2\xc8L?~\xe5]?"$b?aqH?Ug&?\x07\xf0n?\xd4\x82H?4\xd1\xac?\xb5\xa7\x8a?\xaf~7?\xf5WU?\xa1\x89H?cCD?\x83\xf8]?\xb1\xde]?\xf8PU?\xd7\xbb\x9b?[jw?\xff\xceL?u\xccL?\xbc>\x04?\x83\x0e"?\xad\xd0\x1d?\x8f\x96\x19?C9"?\x9f\x9d\x19?\x9f-s?%PU?\x92\xfb??\xd7\xa7*?\x9553?\xa2\xef.?\x9e\x11\x11?cV\x15?\xf7\xfd??\xd6c7?en\x15?h\xd3\x1d?\xf8P\x15?\xe4\xe8.?\xda#"?\x1e\x99\x19?\xab\xf7.?\xfa`&?\xba\xf1.?Vn7?\x99\xba;?!\xf1.?\xa5-\x11?\x86\xda\x1d?\rg&?"W\x15?\x0c43?\x9e\xc9L?\xda\x05/?z\x01@?\x02\\&?9\xef.?S\xa8*?\xaeO\x15?\x86\x17@?\x1e\xaa*?\x8aPU?\xb21s?&\x92Y?{af?\xca\xd4L?\xfdNU?\xc7\xe6.?cx7?\xf243?5\x01\x80?\xf8;3?\xc9""?28s?\xc3e\x86?\x05\xb8;?4\xcbL?\x1boU?&\xba;?W\x8aH?\x12RU?Fe&?\x1eBD?\xb4\xea]?\'@D?R\xfe\x7f?\xa1RU?s33?\x9f\x89\x88?\xc8\xb3Y?\xf8\xb8{?\t\xde]?\xe6\xda]?k\xcb\x8c?\xfbo7?\x0b\xe1n?\x0b\xbd;?\xa0\xdb]?\xcc\x9cY?\xf1\xceL?qU\x95?\x8c\xd0L?\xf4\xb8{?sYU?\x9b\xee.?y\x89\x88?-\xdf]?\xb5\xc0{?\xbd\xe8.?\xd0\xbb;?\x10+s?{?U?M""?w\xad*?b!b?s\xe9n?\xea73?\xe3\xccL?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'\x00\x92\xd8\x04(\x9d\xd8\x04P\xff\n\x0ch\xff\n\x0c \xf9\n\x0c\xf0\xf8\n\x0c(\xf1\n\x0cH\xf8\n\x0c\xa8\xfb\n\x0c\xb0\xff\n\x0cp\xfd\n\x0c\x08\xf9\n\x0c \xf6\n\x0c(\xf4\n\x0c0\xf5\n\x0c\xd0\xf7\n\x0c\xe0\xff\n\x0c \xf3\n\x0c\x90\xf5\n\x0c`\xf5\n\x0cX\xf4\n\x0c0\xf2\n\x0c\xa0\xfa\n\x0c0\xfb\n\x0c\xc8\xfc\n\x0c0>\xd8\x04h<\xd8\x04X=\xd8\x04\xe06\xd8\x04\x800\xd8\x04 6\xd8\x04\x884\xd8\x04X4\xd8\x04(7\xd8\x04h?\xd8\x04@7\xd8\x04\xa88\xd8\x04\xe81\xd8\x04\xe84\xd8\x04\xa0:\xd8\x04\x88:\xd8\x04\xa04\xd8\x04`5\xd8\x04H8\xd8\x04\x80?\xd8\x04x2\xd8\x04\xc02\xd8\x04@1\xd8\x04\xb84\xd8\x04P0\xd8\x04\x803\xd8\x04\xf0;\xd8\x04\xc83\xd8\x04P?\xd8\x04\xd82\xd8\x04\x80<\xd8\x04\xc89\xd8\x04\xd07\xd8\x04\xa01\xd8\x04\xb81\xd8\x04x>\xd8\x04\xd85\xd8\x04`2\xd8\x04\x908\xd8\x04\x809\xd8\x04H>\xd8\x04\xc05\xd8\x04X1\xd8\x04x;\xd8\x04\x002\xd8\x04P6\xd8\x0408\xd8\x04\x983\xd8\x04\xa82\xd8\x04\xc80\xd8\x04\x980\xd8\x04\x104\xd8\x04\xd8;\xd8\x04\xb87\xd8\x04h6\xd8\x04\xe0<\xd8\x04\xe03\xd8\x04 0\xd8\x04\x185\xd8\x04H2\xd8\x04\x10:\xd8\x04\x88=\xd8\x04\xf83\xd8\x04\xb03\xd8\x04\x00;\xd8\x04\x086\xd8\x04\x188\xd8\x04\x083\xd8\x04\xb8:\xd8\x04\x182\xd8\x04\xe0?\xd8\x048?\xd8\x04(=\xd8\x04\xa8>\xd8\x04\xd88\xd8\x04\xd01\xd8\x04\xf86\xd8\x04\xa8;\xd8\x04\xf8<\xd8\x04\x98<\xd8\x04 ?\xd8\x04(4\xd8\x04h9\xd8\x04\x887\xd8\x04\xe00\xd8\x04\x90>\xd8\x04X:\xd8\x04x8\xd8\x04\xe8:\xd8\x04\xf89\xd8\x04`>\xd8\x04@4\xd8\x04\x005\xd8\x04\x008\xd8\x04`;\xd8\x04\x986\xd8\x04\x90;\xd8\x04@:\xd8\x04\x107\xd8\x04x5\xd8\x04\xf05\xd8\x04\xf0>\xd8\x04\xc0;\xd8\x04(:\xd8\x04\xd0=\xd8\x04p7\xd8\x04(1\xd8\x04\xc0>\xd8\x04\xa07\xd8\x04\x18;\xd8\x04p:\xd8\x04H5\xd8\x0486\xd8\x04\xf02\xd8\x04P<\xd8\x0402\xd8\x0489\xd8\x04\xe87\xd8\x04\x10=\xd8\x04 <\xd8\x04\xd8>\xd8\x04\x089\xd8\x040;\xd8\x04\x08?\xd8\x0483\xd8\x0405\xd8\x04\xb0?\xd8\x04p1\xd8\x04X7\xd8\x04H;\xd8\x04@=\xd8\x04\xa85\xd8\x04\xb06\xd8\x04\x18>\xd8\x04\xb8=\xd8\x04\x905\xd8\x04\xf08\xd8\x04\xb0<\xd8\x04\x989\xd8\x04P3\xd8\x048<\xd8\x04\xb00\xd8\x04\x08<\xd8\x04\xe8=\xd8\x04\x101\xd8\x04h3\xd8\x04\xc08\xd8\x04`8\xd8\x04\x881\xd8\x04 9\xd8\x04\xc86\xd8\x04\xc8?\xd8\x04p=\xd8\x04\xc8<\xd8\x04\xa0=\xd8\x04\x98?\xd8\x04\x803\xd0\x04\xe87\xd0\x04\xf86\xd0\x04X4\xd0\x04H2\xd0\x04h3\xd0\x048?\xd0\x04\xb84\xd0\x04\xd0:\xd0\x04\x88\xfd\n\x0c \xfc\n\x0c\x00\xf5\n\x0c\xf8\xf9\n\x0c`\xfb\n\x0cx\xfb\n\x0c\xd0\xfa\n\x0c\x98\xff\n\x0c\x00\xfe\n\x0c\xb8\xf4\n\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6402
sg6371
g6392
sg6386
g6396
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6483
sg6371
g6473
sg6386
g6477
sg6380
g6481
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6500
sg6371
g6490
sg6386
g6494
sg6380
g6498
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6511
sg6371
g6507
sg6386
g6518
sg6380
g6515
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6534
sg6371
g6524
sg6386
g6528
sg6380
g6532
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6545
sg6371
g6541
sg6386
g6552
sg6380
g6549
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6430
sg6371
g6558
sg6386
g6437
sg6380
g6565
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6577
sg6371
g6573
sg6386
g6584
sg6380
g6581
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6594
sg6371
g6590
sg6386
g6601
sg6380
g6598
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6611
sg6371
g6607
sg6386
g6618
sg6380
g6615
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6628
sg6371
g6624
sg6386
g6635
sg6380
g6632
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6447
sg6371
g6641
sg6386
g6454
sg6380
g6648
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6628
sg6371
g6624
sg6386
g6635
sg6380
g6632
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6534
sg6371
g6524
sg6386
g6528
sg6380
g6532
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6577
sg6371
g6573
sg6386
g6584
sg6380
g6581
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6712
sg6371
g6708
sg6386
g6719
sg6380
g6716
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6511
sg6371
g6507
sg6386
g6518
sg6380
g6515
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6742
sg6371
g6738
sg6386
g6749
sg6380
g6746
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6483
sg6371
g6755
sg6386
g6477
sg6380
g6762
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6384
sg6371
g6770
sg6386
g6376
sg6380
g6777
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6742
sg6371
g6785
sg6386
g6749
sg6380
g6792
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6500
sg6371
g6800
sg6386
g6494
sg6380
g6807
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6534
sg6371
g6815
sg6386
g6528
sg6380
g6822
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6834
sg6371
g6830
sg6386
g6841
sg6380
g6838
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6611
sg6371
g6847
sg6386
g6618
sg6380
g6854
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6577
sg6371
g6862
sg6386
g6584
sg6380
g6869
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6834
sg6371
g6877
sg6386
g6841
sg6380
g6884
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6483
sg6371
g6755
sg6386
g6477
sg6380
g6762
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6402
sg6371
g6918
sg6386
g6396
sg6380
g6925
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6545
sg6371
g6933
sg6386
g6552
sg6380
g6940
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6594
sg6371
g6948
sg6386
g6601
sg6380
g6955
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6967
sg6371
g6963
sg6386
g6974
sg6380
g6971
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6984
sg6371
g6980
sg6386
g6991
sg6380
g6988
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6628
sg6371
g6624
sg6386
g6635
sg6380
g6632
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6742
sg6371
g6738
sg6386
g6749
sg6380
g6746
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6984
sg6371
g6980
sg6386
g6991
sg6380
g6988
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6413
sg6371
g7036
sg6386
g6420
sg6380
g7043
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6712
sg6371
g6708
sg6386
g6719
sg6380
g6716
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6577
sg6371
g6862
sg6386
g6584
sg6380
g6869
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6628
sg6371
g7077
sg6386
g6635
sg6380
g7084
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6984
sg6371
g6980
sg6386
g6991
sg6380
g6988
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6577
sg6371
g6862
sg6386
g6584
sg6380
g6869
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6611
sg6371
g6847
sg6386
g6618
sg6380
g6854
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6511
sg6371
g7157
sg6386
g6518
sg6380
g7164
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6594
sg6371
g6590
sg6386
g6601
sg6380
g6598
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6967
sg6371
g6963
sg6386
g6974
sg6380
g6971
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6500
sg6371
g6800
sg6386
g6494
sg6380
g6807
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g7215
sg6371
g7211
sg6386
g7222
sg6380
g7219
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6545
sg6371
g6933
sg6386
g6552
sg6380
g6940
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6402
sg6371
g6392
sg6386
g6396
sg6380
g6400
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6594
sg6371
g6948
sg6386
g6601
sg6380
g6955
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6534
sg6371
g6815
sg6386
g6528
sg6380
g6822
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6712
sg6371
g7280
sg6386
g6719
sg6380
g7287
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6628
sg6371
g7077
sg6386
g6635
sg6380
g7084
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6483
sg6371
g6473
sg6386
g6477
sg6380
g6481
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6742
sg6371
g6785
sg6386
g6749
sg6380
g6792
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6402
sg6371
g6918
sg6386
g6396
sg6380
g6925
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6430
sg6371
g6558
sg6386
g6437
sg6380
g6565
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6500
sg6371
g6490
sg6386
g6494
sg6380
g6498
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6545
sg6371
g6933
sg6386
g6552
sg6380
g6940
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6834
sg6371
g6830
sg6386
g6841
sg6380
g6838
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6483
sg6371
g6755
sg6386
g6477
sg6380
g6762
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6628
sg6371
g7077
sg6386
g6635
sg6380
g7084
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6967
sg6371
g7425
sg6386
g6974
sg6380
g7432
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6545
sg6371
g6933
sg6386
g6552
sg6380
g6940
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6967
sg6371
g6963
sg6386
g6974
sg6380
g6971
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6742
sg6371
g6738
sg6386
g6749
sg6380
g6746
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6712
sg6371
g7280
sg6386
g6719
sg6380
g7287
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6483
sg6371
g6755
sg6386
g6477
sg6380
g6762
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6834
sg6371
g6877
sg6386
g6841
sg6380
g6884
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6511
sg6371
g7157
sg6386
g6518
sg6380
g7164
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6611
sg6371
g6847
sg6386
g6618
sg6380
g6854
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6500
sg6371
g6490
sg6386
g6494
sg6380
g6498
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6611
sg6371
g6847
sg6386
g6618
sg6380
g6854
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6594
sg6371
g6590
sg6386
g6601
sg6380
g6598
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6511
sg6371
g7157
sg6386
g6518
sg6380
g7164
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g7215
sg6371
g7622
sg6386
g7222
sg6380
g7629
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6984
sg6371
g6980
sg6386
g6991
sg6380
g6988
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g7215
sg6371
g7622
sg6386
g7222
sg6380
g7629
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6413
sg6371
g7036
sg6386
g6420
sg6380
g7043
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6545
sg6371
g6541
sg6386
g6552
sg6380
g6549
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6430
sg6371
g6558
sg6386
g6437
sg6380
g6565
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6447
sg6371
g6641
sg6386
g6454
sg6380
g6648
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6712
sg6371
g6708
sg6386
g6719
sg6380
g6716
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g7215
sg6371
g7211
sg6386
g7222
sg6380
g7219
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6500
sg6371
g6800
sg6386
g6494
sg6380
g6807
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6534
sg6371
g6524
sg6386
g6528
sg6380
g6532
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6483
sg6371
g6473
sg6386
g6477
sg6380
g6481
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6511
sg6371
g7157
sg6386
g6518
sg6380
g7164
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6545
sg6371
g6541
sg6386
g6552
sg6380
g6549
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6611
sg6371
g6607
sg6386
g6618
sg6380
g6615
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6834
sg6371
g6877
sg6386
g6841
sg6380
g6884
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6577
sg6371
g6573
sg6386
g6584
sg6380
g6581
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g7215
sg6371
g7211
sg6386
g7222
sg6380
g7219
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6712
sg6371
g7280
sg6386
g6719
sg6380
g7287
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6834
sg6371
g6830
sg6386
g6841
sg6380
g6838
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6967
sg6371
g7425
sg6386
g6974
sg6380
g7432
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6545
sg6371
g6933
sg6386
g6552
sg6380
g6940
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6430
sg6371
g6558
sg6386
g6437
sg6380
g6565
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g7215
sg6371
g7211
sg6386
g7222
sg6380
g7219
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6413
sg6371
g7036
sg6386
g6420
sg6380
g7043
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6712
sg6371
g7280
sg6386
g6719
sg6380
g7287
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6534
sg6371
g6815
sg6386
g6528
sg6380
g6822
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6483
sg6371
g6755
sg6386
g6477
sg6380
g6762
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6712
sg6371
g6708
sg6386
g6719
sg6380
g6716
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6594
sg6371
g6590
sg6386
g6601
sg6380
g6598
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6984
sg6371
g6980
sg6386
g6991
sg6380
g6988
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6594
sg6371
g6948
sg6386
g6601
sg6380
g6955
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6611
sg6371
g6607
sg6386
g6618
sg6380
g6615
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6402
sg6371
g6392
sg6386
g6396
sg6380
g6400
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6628
sg6371
g6624
sg6386
g6635
sg6380
g6632
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6384
sg6371
g6770
sg6386
g6376
sg6380
g6777
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6500
sg6371
g6800
sg6386
g6494
sg6380
g6807
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6628
sg6371
g7077
sg6386
g6635
sg6380
g7084
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6500
sg6371
g6490
sg6386
g6494
sg6380
g6498
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6967
sg6371
g7425
sg6386
g6974
sg6380
g7432
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6511
sg6371
g6507
sg6386
g6518
sg6380
g6515
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6500
sg6371
g6490
sg6386
g6494
sg6380
g6498
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6402
sg6371
g6918
sg6386
g6396
sg6380
g6925
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6742
sg6371
g6785
sg6386
g6749
sg6380
g6792
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6594
sg6371
g6948
sg6386
g6601
sg6380
g6955
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6402
sg6371
g6392
sg6386
g6396
sg6380
g6400
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6984
sg6371
g8274
sg6386
g6991
sg6380
g8281
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g7215
sg6371
g7622
sg6386
g7222
sg6380
g7629
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6577
sg6371
g6862
sg6386
g6584
sg6380
g6869
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6545
sg6371
g6541
sg6386
g6552
sg6380
g6549
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6967
sg6371
g7425
sg6386
g6974
sg6380
g7432
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6384
sg6371
g6770
sg6386
g6376
sg6380
g6777
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6534
sg6371
g6815
sg6386
g6528
sg6380
g6822
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6413
sg6371
g7036
sg6386
g6420
sg6380
g7043
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6611
sg6371
g6847
sg6386
g6618
sg6380
g6854
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6742
sg6371
g6785
sg6386
g6749
sg6380
g6792
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6594
sg6371
g6948
sg6386
g6601
sg6380
g6955
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g7215
sg6371
g7622
sg6386
g7222
sg6380
g7629
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6967
sg6371
g6963
sg6386
g6974
sg6380
g6971
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6413
sg6371
g7036
sg6386
g6420
sg6380
g7043
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6511
sg6371
g7157
sg6386
g6518
sg6380
g7164
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6483
sg6371
g6473
sg6386
g6477
sg6380
g6481
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6712
sg6371
g7280
sg6386
g6719
sg6380
g7287
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6834
sg6371
g6830
sg6386
g6841
sg6380
g6838
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6742
sg6371
g6738
sg6386
g6749
sg6380
g6746
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6834
sg6371
g6830
sg6386
g6841
sg6380
g6838
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6577
sg6371
g6573
sg6386
g6584
sg6380
g6581
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6628
sg6371
g7077
sg6386
g6635
sg6380
g7084
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6984
sg6371
g8274
sg6386
g6991
sg6380
g8281
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6577
sg6371
g6862
sg6386
g6584
sg6380
g6869
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6742
sg6371
g6738
sg6386
g6749
sg6380
g6746
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6402
sg6371
g6918
sg6386
g6396
sg6380
g6925
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6577
sg6371
g6573
sg6386
g6584
sg6380
g6581
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6447
sg6371
g6641
sg6386
g6454
sg6380
g6648
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6384
sg6371
g6770
sg6386
g6376
sg6380
g6777
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6447
sg6371
g6641
sg6386
g6454
sg6380
g6648
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6545
sg6371
g6541
sg6386
g6552
sg6380
g6549
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6500
sg6371
g6800
sg6386
g6494
sg6380
g6807
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6834
sg6371
g6877
sg6386
g6841
sg6380
g6884
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6742
sg6371
g6785
sg6386
g6749
sg6380
g6792
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6511
sg6371
g6507
sg6386
g6518
sg6380
g6515
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6984
sg6371
g8274
sg6386
g6991
sg6380
g8281
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6628
sg6371
g6624
sg6386
g6635
sg6380
g6632
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g7215
sg6371
g7211
sg6386
g7222
sg6380
g7219
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6594
sg6371
g6590
sg6386
g6601
sg6380
g6598
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6511
sg6371
g6507
sg6386
g6518
sg6380
g6515
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6430
sg6371
g6558
sg6386
g6437
sg6380
g6565
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6984
sg6371
g8274
sg6386
g6991
sg6380
g8281
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6611
sg6371
g6607
sg6386
g6618
sg6380
g6615
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6384
sg6371
g6770
sg6386
g6376
sg6380
g6777
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6447
sg6371
g6641
sg6386
g6454
sg6380
g6648
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6402
sg6371
g6392
sg6386
g6396
sg6380
g6400
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g7215
sg6371
g7622
sg6386
g7222
sg6380
g7629
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6984
sg6371
g8274
sg6386
g6991
sg6380
g8281
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6534
sg6371
g6524
sg6386
g6528
sg6380
g6532
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6967
sg6371
g7425
sg6386
g6974
sg6380
g7432
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6534
sg6371
g6815
sg6386
g6528
sg6380
g6822
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6611
sg6371
g6607
sg6386
g6618
sg6380
g6615
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6402
sg6371
g6918
sg6386
g6396
sg6380
g6925
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6534
sg6371
g6524
sg6386
g6528
sg6380
g6532
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6712
sg6371
g6708
sg6386
g6719
sg6380
g6716
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6834
sg6371
g6877
sg6386
g6841
sg6380
g6884
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6967
sg6371
g6963
sg6386
g6974
sg6380
g6971
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6483
sg6371
g6473
sg6386
g6477
sg6380
g6481
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.