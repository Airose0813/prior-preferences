ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E25_infer_design1_2015_Jul_12_1815
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x1cf\xbcGp\x04N@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_12_1815
p67
sVparticipant
p68
VE25
p69
sVglasses
p70
Vy
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F0.40019010322794202
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F38.449198704060109
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P12'
tbsg70
Vy
sa(dp96
g64
g65
sg20
F18.266999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F0.69999999999999907
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x05\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p103
sg21
F1.7
sg70
Vy
sa(dp104
g64
g65
sg20
F8.7509999999999994
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F1.5
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x06\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V7-olives.png
p110
sg21
F1.5
sg70
Vy
sa(dp111
g64
g65
sg20
F20.884
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F1.7200000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x01\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p117
sg21
F1
sg70
Vy
sa(dp118
g64
g65
sg20
F7.9669999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0.69999999999999973
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'\x08\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p124
sg21
F1
sg70
Vy
sa(dp125
g64
g65
sg20
F12.234
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F1.1599999999999993
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\x13\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p131
sg21
F1.8999999999999999
sg70
Vy
sa(dp132
g64
g65
sg20
F11.317
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F1.5199999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x0b\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p138
sg21
F1.8
sg70
Vy
sa(dp139
g64
g65
sg20
F6.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F0.81999999999999984
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x11\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p145
sg21
F1.1000000000000001
sg70
Vy
sa(dp146
g64
g65
sg20
F13.134
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F2
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\t\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p152
sg21
F1.7
sg70
Vy
sa(dp153
g64
g65
sg20
F9.9169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F2.2600000000000011
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x04\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p159
sg21
F1.1000000000000001
sg70
Vy
sa(dp160
g64
g65
sg20
F9.6500000000000004
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F2.3200000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x1a\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V35-raisins.png
p166
sg21
F1.8999999999999999
sg70
Vy
sa(dp167
g64
g65
sg20
F5.8170000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0.87999999999999945
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x10\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V22-daim.png
p173
sg21
F1.6000000000000001
sg70
Vy
sa(dp174
g64
g65
sg20
F7.4669999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F2.0200000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x19\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p180
sg21
F1.1000000000000001
sg70
Vy
sa(dp181
g64
g65
sg20
F6.867
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F1.7199999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x03\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V4-corn.png
p187
sg21
F1.8999999999999999
sg70
Vy
sa(dp188
g64
g65
sg20
F5.0010000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0.79999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\x0f\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p194
sg21
F1.6000000000000001
sg70
Vy
sa(dp195
g64
g65
sg20
F2.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F1.2200000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x1e\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p201
sg21
F1.1000000000000001
sg70
Vy
sa(dp202
g64
g65
sg20
F5.117
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F1.1399999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\x1b\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p208
sg21
F1.6000000000000001
sg70
Vy
sa(dp209
g64
g65
sg20
F3.6509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F0.93999999999999972
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x17\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p215
sg21
F1.2
sg70
Vy
sa(dp216
g64
g65
sg20
F7.5670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F0.75999999999999934
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'$\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V48-twix.png
p222
sg21
F1.6000000000000001
sg70
Vy
sa(dp223
g64
g65
sg20
F6.3339999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0.47999999999999932
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\x14\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p229
sg21
F1.3
sg70
Vy
sa(dp230
g64
g65
sg20
F4.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F1.7199999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x16\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p236
sg21
F2
sg70
Vy
sa(dp237
g64
g65
sg20
F4.1509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F0.83999999999999964
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x18\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p243
sg21
F1.3
sg70
Vy
sa(dp244
g64
g65
sg20
F6.5010000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F1.6399999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\x1f\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p250
sg21
F1.8999999999999999
sg70
Vy
sa(dp251
g64
g65
sg20
F5.5670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F1.98
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S' \x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p257
sg21
F1.8
sg70
Vy
sa(dp258
g64
g65
sg20
F4.2670000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F0.87999999999999945
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S"'\x00\x00\x00"
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V51-mars.png
p264
sg21
F1.5
sg70
Vy
sa(dp265
g64
g65
sg20
F5.617
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F1.1799999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x07\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p271
sg21
F1.3
sg70
Vy
sa(dp272
g64
g65
sg20
F4.6669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F1.22
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x02\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p278
sg21
F1.2
sg70
Vy
sa(dp279
g64
g65
sg20
F3.117
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F1.4799999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'%\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p285
sg21
F1.7
sg70
Vy
sa(dp286
g64
g65
sg20
F4.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F1.3600000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\n\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p292
sg21
F1
sg70
Vy
sa(dp293
g64
g65
sg20
F9.0340000000000007
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F2.0200000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x15\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V29-beans.png
p299
sg21
F1.1000000000000001
sg70
Vy
sa(dp300
g64
g65
sg20
F4.3339999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F1.2599999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\x00\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p306
sg21
F1.8
sg70
Vy
sa(dp307
g64
g65
sg20
F4.1680000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F1.1000000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x0e\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p313
sg21
F1.1000000000000001
sg70
Vy
sa(dp314
g64
g65
sg20
F4.1840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F1.2000000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'"\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p320
sg21
F1
sg70
Vy
sa(dp321
g64
g65
sg20
F4.7670000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F1.5399999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'\x0c\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V18-mms.png
p327
sg21
F1.8999999999999999
sg70
Vy
sa(dp328
g64
g65
sg20
F5.3010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'#\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p334
sg21
F1.7
sg70
Vy
sa(dp335
g64
g65
sg20
F3.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F1.2599999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\r\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p341
sg21
F1.6000000000000001
sg70
Vy
sa(dp342
g64
g65
sg20
F3.6840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F1.2
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x12\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p348
sg21
F1.2
sg70
Vy
sa(dp349
g64
g65
sg20
F7.9169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F2.2000000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x1d\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V40-sardines.png
p355
sg21
F1.2
sg70
Vy
sa(dp356
g64
g65
sg20
F4.0839999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F1.1999999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x1c\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p362
sg21
F1.8
sg70
Vy
sa(dp363
g64
g65
sg20
F4.601
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0.85999999999999943
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'&\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V50-polo.png
p369
sg21
F1.6000000000000001
sg70
Vy
sa(dp370
g64
g65
sg20
F3.5840000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F1.1599999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'!\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V44-crunch.png
p376
sg21
F1.7
sg70
Vy
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F60.715333245141665
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vy
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'50-polo.png'
p381
sg26
F5.6999999999999984
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'left'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F44.766089780725451
sg27
F16.350000000000001
sg70
Vy
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'31-hobnobs.png'
p390
sg26
F4.4000000000000012
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'left'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F5.7166555288458767
sg27
F9.3840000000000003
sg70
Vy
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'38-maltesers.png'
p399
sg26
F4.5
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'left'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F3.0663972872353042
sg27
F5.4509999999999996
sg70
Vy
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'40-sardines.png'
p408
sg26
F5.8999999999999968
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'right'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F3.5666778234954108
sg27
F3.5169999999999999
sg70
Vy
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p417
sg26
F5.5999999999999996
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'right'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F2.6832973729942751
sg27
F5.7169999999999996
sg70
Vy
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p426
sg26
F5.3999999999999995
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'right'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F2.9499242780148052
sg27
F3.2170000000000001
sg70
Vy
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'49-yorkie.png'
p435
sg26
F5.6999999999999993
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'right'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F3.3000537694460945
sg27
F3.3010000000000002
sg70
Vy
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'48-twix.png'
p444
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'right'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F1.5334171711001545
sg27
F3.2669999999999999
sg70
Vy
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'5-pineapple.png'
p453
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'left'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F2.2505140313769516
sg27
F3.234
sg70
Vy
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'35-raisins.png'
p462
sg26
F5.8999999999999977
sg28
F4
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'left'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F1.6835194641971611
sg27
F3.117
sg70
Vy
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p471
sg26
F4.4000000000000004
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'right'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F2.333255406592798
sg27
F3.6339999999999999
sg70
Vy
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'25-kitkat.png'
p480
sg26
F5.3999999999999995
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'right'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F3.3166840956473607
sg27
F2.5510000000000002
sg70
Vy
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'51-mars.png'
p489
sg26
F5.1000000000000005
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'left'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F4.2001087363096303
sg27
F2.5510000000000002
sg70
Vy
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p498
sg26
F5.2999999999999998
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'left'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F2.9165567139389168
sg27
F2.734
sg70
Vy
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p507
sg26
F5.5999999999999988
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'right'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F5.3833174438805145
sg27
F2.4169999999999998
sg70
Vy
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'44-crunch.png'
p516
sg26
F4.7000000000000011
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'right'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F1.8835557856618834
sg27
F9.7669999999999995
sg70
Vy
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p525
sg26
F5.799999999999998
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'left'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F2.2000280536267383
sg27
F2.6840000000000002
sg70
Vy
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p534
sg26
F4.4000000000000012
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'left'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F1.8666851219968521
sg27
F2.1669999999999998
sg70
Vy
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p543
sg26
F4.8000000000000007
sg28
F4
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'right'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F2.4666680731497763
sg27
F2.0169999999999999
sg70
Vy
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p552
sg26
F5.2000000000000002
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F5.1999872846390645
sg27
F3.7509999999999999
sg70
Vy
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'46-pistachios.png'
p561
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'left'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F2.4833445851909346
sg27
F2.5339999999999998
sg70
Vy
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p570
sg26
F4.2000000000000011
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'left'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F5.1666616299371526
sg27
F2.3839999999999999
sg70
Vy
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p579
sg26
F4.7000000000000011
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'left'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F5.3334005213873752
sg27
F3.2839999999999998
sg70
Vy
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'22-daim.png'
p588
sg26
F4.3000000000000007
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'right'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F5.1666462346584012
sg27
F1.5669999999999999
sg70
Vy
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p597
sg26
F5.2000000000000002
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'right'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F1.4002274510421557
sg27
F2.3839999999999999
sg70
Vy
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p606
sg26
F5.2000000000000002
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'right'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F2.1334588524005085
sg27
F3.101
sg70
Vy
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p615
sg26
F5.2999999999999998
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'right'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F1.1168211136609898
sg27
F3.1840000000000002
sg70
Vy
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p624
sg26
F5.0000000000000018
sg28
F3
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'left'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F4.8001005254918709
sg27
F3.9510000000000001
sg70
Vy
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p633
sg26
F5.4999999999999991
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'right'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F1.9833505722490372
sg27
F2.1840000000000002
sg70
Vy
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p642
sg26
F5.5999999999999988
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'right'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F1.2331036775358371
sg27
F1.8169999999999999
sg70
Vy
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p651
sg26
F5.2000000000000002
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'right'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F2.6333354050439084
sg27
F1.484
sg70
Vy
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'18-mms.png'
p660
sg26
F4.7000000000000011
sg28
F3
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'left'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F1.466723382127384
sg27
F1.867
sg70
Vy
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p669
sg26
F5.2999999999999998
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'left'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F2.4333495458959078
sg27
F2.734
sg70
Vy
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p678
sg26
F4.5
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'left'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F1.5666721215384314
sg27
F3.984
sg70
Vy
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p687
sg26
F4.8000000000000016
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'right'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F2.0166836394928396
sg27
F1.984
sg70
Vy
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p696
sg26
F5.6999999999999984
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'left'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F1.4002801941423968
sg27
F2.0009999999999999
sg70
Vy
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'29-beans.png'
p705
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'right'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F1.4667299393768189
sg27
F1.667
sg70
Vy
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p714
sg26
F4.5
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'left'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F2.5165864211303415
sg27
F1.417
sg70
Vy
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'4-corn.png'
p723
sg26
F4.4000000000000012
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'right'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F1.5500455016153865
sg27
F2.0009999999999999
sg70
Vy
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'7-olives.png'
p732
sg26
F5.1000000000000005
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'left'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F3.6167184784462734
sg27
F3.2839999999999998
sg70
Vy
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F367.44027799318428
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F5.4667077017475094
sg66
g67
sg68
g69
sg70
Vy
sa(dp743
g64
g65
sg82
S'53-cheestrings.png'
p744
sg83
S'53-cheestrings.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'47-picnic.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\x0c\x12#\t\x00\xcb '
tRp754
sa(dp755
g64
g65
sg82
S'15-walnut_whip.png'
p756
sg83
S'28-maple_pecan.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'28-maple_pecan.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\x0c\x12#\x13\x08hX'
tRp765
sa(dp766
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p767
sg83
S'37-nakd_cashew_cookie.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'9-yu_mango_pieces.png'
p772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\x0c\x12#\x1d\nL\xb8'
tRp776
sa(dp777
g64
g65
sg82
S'12-topic.png'
p778
sg83
S'12-topic.png'
p779
sg56
g57
sS'practice_loop.thisN'
p780
I3
sS'practice_loop.thisTrialN'
p781
I3
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p782
I0
sg84
S'39-mackerel.png'
p783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p784
sS'practice_loop.thisIndex'
p785
g60
(g99
S'\x03\x00\x00\x00'
tRp786
sg34
g753
(S'\x07\xdf\x07\x0c\x12#&\x02x\xd0'
tRp787
sa(dp788
g64
g65
sg82
S'32-hovis_crackers.png'
p789
sg83
S'32-hovis_crackers.png'
p790
sg56
g57
sS'practice_loop.thisN'
p791
I4
sS'practice_loop.thisTrialN'
p792
I4
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p793
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p794
sg33
g789
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p795
sS'practice_loop.thisIndex'
p796
g60
(g99
S'\x04\x00\x00\x00'
tRp797
sg34
g753
(S'\x07\xdf\x07\x0c\x12#0\x0b\xbf\xd0'
tRp798
sa(dp799
g64
g65
sg82
g744
sg83
S'47-picnic.png'
p800
sg56
g57
sS'practice_loop.thisN'
p801
I5
sS'practice_loop.thisTrialN'
p802
I5
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p803
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p804
sS'practice_loop.thisIndex'
p805
g60
(g99
S'\x05\x00\x00\x00'
tRp806
sg34
g753
(S'\x07\xdf\x07\x0c\x12#9\x0c\xb5\xe8'
tRp807
sa(dp808
g64
g65
sg82
S'52-aero_mousse.png'
p809
sg83
S'14-discos_salt_vinegar.png'
p810
sg56
g57
sS'practice_loop.thisN'
p811
I6
sS'practice_loop.thisTrialN'
p812
I6
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p813
I0
sg84
S'14-discos_salt_vinegar.png'
p814
sg33
g814
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p815
sS'practice_loop.thisIndex'
p816
g60
(g99
S'\x06\x00\x00\x00'
tRp817
sg34
g753
(S'\x07\xdf\x07\x0c\x12$\x04\x06\x97\x80'
tRp818
sa(dp819
g64
g65
sg82
g756
sg83
S'15-walnut_whip.png'
p820
sg56
g57
sS'practice_loop.thisN'
p821
I7
sS'practice_loop.thisTrialN'
p822
I7
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p823
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p824
sS'practice_loop.thisIndex'
p825
g60
(g99
S'\x07\x00\x00\x00'
tRp826
sg34
g753
(S'\x07\xdf\x07\x0c\x12$\r\r\xfe\x08'
tRp827
sa(dp828
g64
g65
sg82
g767
sg83
S'9-yu_mango_pieces.png'
p829
sg56
g57
sS'practice_loop.thisN'
p830
I8
sS'practice_loop.thisTrialN'
p831
I8
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p832
I0
sg84
g772
sg33
g772
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p833
sS'practice_loop.thisIndex'
p834
g60
(g99
S'\x08\x00\x00\x00'
tRp835
sg34
g753
(S'\x07\xdf\x07\x0c\x12$\x18\x05b\xe8'
tRp836
sa(dp837
g64
g65
sg82
S'11-snickers.png'
p838
sg83
S'54-frubes_yogurt.png'
p839
sg56
g57
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p842
I0
sg84
S'54-frubes_yogurt.png'
p843
sg33
g838
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\x0c\x12$ \x04=\xf0'
tRp847
sa(dp848
g64
g65
sg82
g809
sg83
S'52-aero_mousse.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g814
sg33
g809
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S"\x07\xdf\x07\x0c\x12$'\rY\xf8"
tRp856
sa(dp857
g64
g65
sg82
g838
sg83
S'11-snickers.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g843
sg33
g838
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\x0c\x12$.\x02\xf1\xe8'
tRp865
sa(dp866
g64
g65
sg82
g778
sg83
S'39-mackerel.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\x0c\x12$4\x0ew '
tRp874
sa(dp875
g64
g65
sg82
g789
sg83
S'24-food_doctor_apple_walnut_bar.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g794
sg33
g789
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\x0c\x12%\x00\t\x81\x98'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F128.16379240544848
sg66
g67
sg68
g69
sg70
Vy
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vy
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'20-fruit_pastilles.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'left'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'2-steamed_puddings.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'2-steamed_puddings.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'20-fruit_pastilles.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vy
sS'block_loop.thisTrialN'
p912
I0
sg39
F2.2831429069956357
sg34
g753
(S'\x07\xdf\x07\x0c\x12*&\x01\xfb\xd0'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'8-liquorice_catherine_wheels.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'left'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'8-liquorice_catherine_wheels.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
S'17-jacobs_mini_cheddars_redo.png'
p926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p927
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vy
sS'block_loop.thisTrialN'
p929
I0
sg39
F1.8499367653057561
sg34
g753
(S'\x07\xdf\x07\x0c\x12*-\x06\x93\x98'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'25-kitkat.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'left'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'31-hobnobs.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'31-hobnobs.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p943
I0
sg909
S'25-kitkat.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vy
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.6665284892551426
sg34
g753
(S'\x07\xdf\x07\x0c\x12*4\x04\xba\xf0'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'45-chewy_nougat_redo.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'right'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'45-chewy_nougat_redo.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'41-peanuts_redo.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p960
I0
sg909
S'41-peanuts_redo.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vy
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.8499162382577197
sg34
g753
(S'\x07\xdf\x07\x0c\x12*;\x00\x0b\xb8'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'40-sardines.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'right'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'5-pineapple.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'5-pineapple.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p977
I0
sg909
S'40-sardines.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vy
sS'block_loop.thisTrialN'
p980
I0
sg39
F1.6003062520831008
sg34
g753
(S'\x07\xdf\x07\x0c\x12+\x05\r\xb3\xd0'
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
S'51-mars.png'
p984
sS'block_loop.thisIndex'
p985
g889
sg38
S'left'
p986
sg59
g63
sS'trial_loop.thisN'
p987
I5
sg33
S'51-mars.png'
p988
sg64
g65
sS'trial_loop.thisIndex'
p989
g60
(g99
S'\x05\x00\x00\x00'
tRp990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p991
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p992
sS'block_loop.thisRepN'
p993
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p994
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p995
sg55
g11
sS'block_loop.thisTrial'
p996
Nsg70
Vy
sS'block_loop.thisTrialN'
p997
I0
sg39
F1.6499948112214042
sg34
g753
(S'\x07\xdf\x07\x0c\x12+\x0c\x08\x0e\x80'
tRp998
sa(dp999
S'trial_loop.thisTrialN'
p1000
I6
sg895
S'13-mccoys_steak_crisps.png'
p1001
sS'block_loop.thisIndex'
p1002
g889
sg38
S'right'
p1003
sg59
g63
sS'trial_loop.thisN'
p1004
I6
sg33
S'3-ellas_strawberries_apples.png'
p1005
sg64
g65
sS'trial_loop.thisIndex'
p1006
g60
(g99
S'\x06\x00\x00\x00'
tRp1007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1008
I0
sg904
S'3-ellas_strawberries_apples.png'
p1009
sS'block_loop.thisRepN'
p1010
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1011
I0
sg909
S'13-mccoys_steak_crisps.png'
p1012
sg55
g11
sS'block_loop.thisTrial'
p1013
Nsg70
Vy
sS'block_loop.thisTrialN'
p1014
I0
sg39
F3.8832647007839114
sg34
g753
(S'\x07\xdf\x07\x0c\x12+\x13\x03 \xc8'
tRp1015
sa(dp1016
S'trial_loop.thisTrialN'
p1017
I7
sg895
S'41-peanuts_redo.png'
p1018
sS'block_loop.thisIndex'
p1019
g889
sg38
S'right'
p1020
sg59
g63
sS'trial_loop.thisN'
p1021
I7
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1022
g60
(g99
S'\x07\x00\x00\x00'
tRp1023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1024
I0
sg904
S'45-chewy_nougat_redo.png'
p1025
sS'block_loop.thisRepN'
p1026
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1027
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1028
Nsg70
Vy
sS'block_loop.thisTrialN'
p1029
I0
sg39
F2.7665596219376312
sg34
g753
(S'\x07\xdf\x07\x0c\x12+\x1c\x01\xf4\x00'
tRp1030
sa(dp1031
S'trial_loop.thisTrialN'
p1032
I8
sg895
S'36-fig_rolls.png'
p1033
sS'block_loop.thisIndex'
p1034
g889
sg38
S'left'
p1035
sg59
g63
sS'trial_loop.thisN'
p1036
I8
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p1037
sg64
g65
sS'trial_loop.thisIndex'
p1038
g60
(g99
S'\x08\x00\x00\x00'
tRp1039
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1040
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1041
sS'block_loop.thisRepN'
p1042
I0
sg907
S'36-fig_rolls.png'
p1043
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1044
I0
sg909
g1037
sg55
g11
sS'block_loop.thisTrial'
p1045
Nsg70
Vy
sS'block_loop.thisTrialN'
p1046
I0
sg39
F2.2835639964796428
sg34
g753
(S'\x07\xdf\x07\x0c\x12+#\x0e)\x00'
tRp1047
sa(dp1048
S'trial_loop.thisTrialN'
p1049
I9
sg895
S'19-caramello_redo.png'
p1050
sS'block_loop.thisIndex'
p1051
g889
sg38
S'left'
p1052
sg59
g63
sS'trial_loop.thisN'
p1053
I9
sg33
S'19-caramello_redo.png'
p1054
sg64
g65
sS'trial_loop.thisIndex'
p1055
g60
(g99
S'\t\x00\x00\x00'
tRp1056
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1057
I0
sg904
S'30-spaghetti_hoops.png'
p1058
sS'block_loop.thisRepN'
p1059
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1060
I0
sg909
S'30-spaghetti_hoops.png'
p1061
sg55
g11
sS'block_loop.thisTrial'
p1062
Nsg70
Vy
sS'block_loop.thisTrialN'
p1063
I0
sg39
F1.1998116643771937
sg34
g753
(S'\x07\xdf\x07\x0c\x12++\x03\xb9 '
tRp1064
sa(dp1065
S'trial_loop.thisTrialN'
p1066
I10
sg895
S'27-hartleys_raspberries_jelly.png'
p1067
sS'block_loop.thisIndex'
p1068
g889
sg38
S'right'
p1069
sg59
g63
sS'trial_loop.thisN'
p1070
I10
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1071
g60
(g99
S'\n\x00\x00\x00'
tRp1072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1073
I0
sg904
S'51-mars.png'
p1074
sS'block_loop.thisRepN'
p1075
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1076
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1077
Nsg70
Vy
sS'block_loop.thisTrialN'
p1078
I0
sg39
F1.8665049401752185
sg34
g753
(S'\x07\xdf\x07\x0c\x12+1\x07(\x08'
tRp1079
sa(dp1080
S'trial_loop.thisTrialN'
p1081
I11
sg895
g1018
sS'block_loop.thisIndex'
p1082
g889
sg38
S'right'
p1083
sg59
g63
sS'trial_loop.thisN'
p1084
I11
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1085
g60
(g99
S'\x0b\x00\x00\x00'
tRp1086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1087
I0
sg904
g1025
sS'block_loop.thisRepN'
p1088
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1089
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1090
Nsg70
Vy
sS'block_loop.thisTrialN'
p1091
I0
sg39
F2.4832596260421269
sg34
g753
(S'\x07\xdf\x07\x0c\x12+8\x05\xcc`'
tRp1092
sa(dp1093
S'trial_loop.thisTrialN'
p1094
I12
sg895
g896
sS'block_loop.thisIndex'
p1095
g889
sg38
S'left'
p1096
sg59
g63
sS'trial_loop.thisN'
p1097
I12
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1098
g60
(g99
S'\x0c\x00\x00\x00'
tRp1099
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1100
I0
sg904
g905
sS'block_loop.thisRepN'
p1101
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1102
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1103
Nsg70
Vy
sS'block_loop.thisTrialN'
p1104
I0
sg39
F2.6665957723416795
sg34
g753
(S'\x07\xdf\x07\x0c\x12,\x03\ry8'
tRp1105
sa(dp1106
S'trial_loop.thisTrialN'
p1107
I13
sg895
S'33-ambrosia_rice.png'
p1108
sS'block_loop.thisIndex'
p1109
g889
sg38
S'right'
p1110
sg59
g63
sS'trial_loop.thisN'
p1111
I13
sg33
S'23-crunchie_redo.png'
p1112
sg64
g65
sS'trial_loop.thisIndex'
p1113
g60
(g99
S'\r\x00\x00\x00'
tRp1114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1115
I0
sg904
S'23-crunchie_redo.png'
p1116
sS'block_loop.thisRepN'
p1117
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1118
I0
sg909
S'33-ambrosia_rice.png'
p1119
sg55
g11
sS'block_loop.thisTrial'
p1120
Nsg70
Vy
sS'block_loop.thisTrialN'
p1121
I0
sg39
F1.5665857368985598
sg34
g753
(S'\x07\xdf\x07\x0c\x12,\x0b\t\x00\xb0'
tRp1122
sa(dp1123
S'trial_loop.thisTrialN'
p1124
I14
sg895
S'43-mrporky_pork_crackles_redo.png'
p1125
sS'block_loop.thisIndex'
p1126
g889
sg38
S'right'
p1127
sg59
g63
sS'trial_loop.thisN'
p1128
I14
sg33
S'18-mms.png'
p1129
sg64
g65
sS'trial_loop.thisIndex'
p1130
g60
(g99
S'\x0e\x00\x00\x00'
tRp1131
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1132
I0
sg904
S'18-mms.png'
p1133
sS'block_loop.thisRepN'
p1134
I0
sg907
g1129
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1135
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p1136
sg55
g11
sS'block_loop.thisTrial'
p1137
Nsg70
Vy
sS'block_loop.thisTrialN'
p1138
I0
sg39
F2.3332003827163135
sg34
g753
(S'\x07\xdf\x07\x0c\x12,\x12\x02\xe2H'
tRp1139
sa(dp1140
S'trial_loop.thisTrialN'
p1141
I15
sg895
S'4-corn.png'
p1142
sS'block_loop.thisIndex'
p1143
g889
sg38
S'right'
p1144
sg59
g63
sS'trial_loop.thisN'
p1145
I15
sg33
S'10-bounty_redo.png'
p1146
sg64
g65
sS'trial_loop.thisIndex'
p1147
g60
(g99
S'\x0f\x00\x00\x00'
tRp1148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1149
I0
sg904
S'10-bounty_redo.png'
p1150
sS'block_loop.thisRepN'
p1151
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1152
I0
sg909
S'4-corn.png'
p1153
sg55
g11
sS'block_loop.thisTrial'
p1154
Nsg70
Vy
sS'block_loop.thisTrialN'
p1155
I0
sg39
F1.9498626968888857
sg34
g753
(S'\x07\xdf\x07\x0c\x12,\x19\x08l@'
tRp1156
sa(dp1157
S'trial_loop.thisTrialN'
p1158
I16
sg895
S'2-steamed_puddings.png'
p1159
sS'block_loop.thisIndex'
p1160
g889
sg38
S'left'
p1161
sg59
g63
sS'trial_loop.thisN'
p1162
I16
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1163
g60
(g99
S'\x10\x00\x00\x00'
tRp1164
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1165
I0
sg904
S'20-fruit_pastilles.png'
p1166
sS'block_loop.thisRepN'
p1167
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1168
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1169
Nsg70
Vy
sS'block_loop.thisTrialN'
p1170
I0
sg39
F1.0832420069964428
sg34
g753
(S'\x07\xdf\x07\x0c\x12, \x08AH'
tRp1171
sa(dp1172
S'trial_loop.thisTrialN'
p1173
I17
sg895
g1108
sS'block_loop.thisIndex'
p1174
g889
sg38
S'right'
p1175
sg59
g63
sS'trial_loop.thisN'
p1176
I17
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p1177
g60
(g99
S'\x11\x00\x00\x00'
tRp1178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1179
I0
sg904
g1116
sS'block_loop.thisRepN'
p1180
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1181
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p1182
Nsg70
Vy
sS'block_loop.thisTrialN'
p1183
I0
sg39
F1.3832056855317205
sg34
g753
(S'\x07\xdf\x07\x0c\x12,&\n\x02\x80'
tRp1184
sa(dp1185
S'trial_loop.thisTrialN'
p1186
I18
sg895
S'3-ellas_strawberries_apples.png'
p1187
sS'block_loop.thisIndex'
p1188
g889
sg38
S'left'
p1189
sg59
g63
sS'trial_loop.thisN'
p1190
I18
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p1191
g60
(g99
S'\x12\x00\x00\x00'
tRp1192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1193
I0
sg904
S'13-mccoys_steak_crisps.png'
p1194
sS'block_loop.thisRepN'
p1195
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1196
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1197
Nsg70
Vy
sS'block_loop.thisTrialN'
p1198
I0
sg39
F1.7163541804475244
sg34
g753
(S'\x07\xdf\x07\x0c\x12,-\x01\x05\xb8'
tRp1199
sa(dp1200
S'trial_loop.thisTrialN'
p1201
I19
sg895
S'29-beans.png'
p1202
sS'block_loop.thisIndex'
p1203
g889
sg38
S'right'
p1204
sg59
g63
sS'trial_loop.thisN'
p1205
I19
sg33
S'46-pistachios.png'
p1206
sg64
g65
sS'trial_loop.thisIndex'
p1207
g60
(g99
S'\x13\x00\x00\x00'
tRp1208
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1209
I0
sg904
S'46-pistachios.png'
p1210
sS'block_loop.thisRepN'
p1211
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1212
I0
sg909
S'29-beans.png'
p1213
sg55
g11
sS'block_loop.thisTrial'
p1214
Nsg70
Vy
sS'block_loop.thisTrialN'
p1215
I0
sg39
F1.499935852989438
sg34
g753
(S'\x07\xdf\x07\x0c\x12,3\x0c\x8a\xf0'
tRp1216
sa(dp1217
S'trial_loop.thisTrialN'
p1218
I20
sg895
S'1-treacle_cookies.png'
p1219
sS'block_loop.thisIndex'
p1220
g889
sg38
S'left'
p1221
sg59
g63
sS'trial_loop.thisN'
p1222
I20
sg33
S'1-treacle_cookies.png'
p1223
sg64
g65
sS'trial_loop.thisIndex'
p1224
g60
(g99
S'\x14\x00\x00\x00'
tRp1225
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1226
I0
sg904
S'21-nakd_banana_crunch.png'
p1227
sS'block_loop.thisRepN'
p1228
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1229
I0
sg909
S'21-nakd_banana_crunch.png'
p1230
sg55
g11
sS'block_loop.thisTrial'
p1231
Nsg70
Vy
sS'block_loop.thisTrialN'
p1232
I0
sg39
F3.2497465480337269
sg34
g753
(S'\x07\xdf\x07\x0c\x12,:\x05zX'
tRp1233
sa(dp1234
S'trial_loop.thisTrialN'
p1235
I21
sg895
S'23-crunchie_redo.png'
p1236
sS'block_loop.thisIndex'
p1237
g889
sg38
S'left'
p1238
sg59
g63
sS'trial_loop.thisN'
p1239
I21
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p1240
g60
(g99
S'\x15\x00\x00\x00'
tRp1241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1242
I0
sg904
S'33-ambrosia_rice.png'
p1243
sS'block_loop.thisRepN'
p1244
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1245
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p1246
Nsg70
Vy
sS'block_loop.thisTrialN'
p1247
I0
sg39
F1.7997940453315096
sg34
g753
(S'\x07\xdf\x07\x0c\x12-\x06\t\xcb\xd0'
tRp1248
sa(dp1249
S'trial_loop.thisTrialN'
p1250
I22
sg895
S'38-maltesers.png'
p1251
sS'block_loop.thisIndex'
p1252
g889
sg38
S'left'
p1253
sg59
g63
sS'trial_loop.thisN'
p1254
I22
sg33
S'38-maltesers.png'
p1255
sg64
g65
sS'trial_loop.thisIndex'
p1256
g60
(g99
S'\x16\x00\x00\x00'
tRp1257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1258
I0
sg904
S'6-sour_patch_kids.png'
p1259
sS'block_loop.thisRepN'
p1260
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1261
I0
sg909
S'6-sour_patch_kids.png'
p1262
sg55
g11
sS'block_loop.thisTrial'
p1263
Nsg70
Vy
sS'block_loop.thisTrialN'
p1264
I0
sg39
F1.5328962973762827
sg34
g753
(S'\x07\xdf\x07\x0c\x12-\r\x07?x'
tRp1265
sa(dp1266
S'trial_loop.thisTrialN'
p1267
I23
sg895
S'18-mms.png'
p1268
sS'block_loop.thisIndex'
p1269
g889
sg38
S'left'
p1270
sg59
g63
sS'trial_loop.thisN'
p1271
I23
sg33
g1129
sg64
g65
sS'trial_loop.thisIndex'
p1272
g60
(g99
S'\x17\x00\x00\x00'
tRp1273
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1274
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1275
sS'block_loop.thisRepN'
p1276
I0
sg907
g1129
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1277
I0
sg909
g1136
sg55
g11
sS'block_loop.thisTrial'
p1278
Nsg70
Vy
sS'block_loop.thisTrialN'
p1279
I0
sg39
F2.9000809107637906
sg34
g753
(S'\x07\xdf\x07\x0c\x12-\x14\x00\xa7\xf8'
tRp1280
sa(dp1281
S'trial_loop.thisTrialN'
p1282
I24
sg895
g1159
sS'block_loop.thisIndex'
p1283
g889
sg38
S'left'
p1284
sg59
g63
sS'trial_loop.thisN'
p1285
I24
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1286
g60
(g99
S'\x18\x00\x00\x00'
tRp1287
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1288
I0
sg904
g1166
sS'block_loop.thisRepN'
p1289
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1290
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1291
Nsg70
Vy
sS'block_loop.thisTrialN'
p1292
I0
sg39
F1.616609285978484
sg34
g753
(S'\x07\xdf\x07\x0c\x12-\x1b\x0e\xc1X'
tRp1293
sa(dp1294
S'trial_loop.thisTrialN'
p1295
I25
sg895
S'42-mrkipling_lemon_slices.png'
p1296
sS'block_loop.thisIndex'
p1297
g889
sg38
S'left'
p1298
sg59
g63
sS'trial_loop.thisN'
p1299
I25
sg33
S'16-skips_prawn.png'
p1300
sg64
g65
sS'trial_loop.thisIndex'
p1301
g60
(g99
S'\x19\x00\x00\x00'
tRp1302
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1303
I0
sg904
S'16-skips_prawn.png'
p1304
sS'block_loop.thisRepN'
p1305
I0
sg907
S'42-mrkipling_lemon_slices.png'
p1306
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1307
I0
sg909
g1300
sg55
g11
sS'block_loop.thisTrial'
p1308
Nsg70
Vy
sS'block_loop.thisTrialN'
p1309
I0
sg39
F1.7498266605216486
sg34
g753
(S'\x07\xdf\x07\x0c\x12-"\t\x99\x08'
tRp1310
sa(dp1311
S'trial_loop.thisTrialN'
p1312
I26
sg895
g1033
sS'block_loop.thisIndex'
p1313
g889
sg38
S'left'
p1314
sg59
g63
sS'trial_loop.thisN'
p1315
I26
sg33
g1043
sg64
g65
sS'trial_loop.thisIndex'
p1316
g60
(g99
S'\x1a\x00\x00\x00'
tRp1317
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1318
I0
sg904
g1041
sS'block_loop.thisRepN'
p1319
I0
sg907
g1043
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1320
I0
sg909
g1037
sg55
g11
sS'block_loop.thisTrial'
p1321
Nsg70
Vy
sS'block_loop.thisTrialN'
p1322
I0
sg39
F1.2832047732226783
sg34
g753
(S'\x07\xdf\x07\x0c\x12-)\x06\x16\x98'
tRp1323
sa(dp1324
S'trial_loop.thisTrialN'
p1325
I27
sg895
g1296
sS'block_loop.thisIndex'
p1326
g889
sg38
S'left'
p1327
sg59
g63
sS'trial_loop.thisN'
p1328
I27
sg33
g1306
sg64
g65
sS'trial_loop.thisIndex'
p1329
g60
(g99
S'\x1b\x00\x00\x00'
tRp1330
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1331
I0
sg904
g1304
sS'block_loop.thisRepN'
p1332
I0
sg907
g1306
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1333
I0
sg909
g1300
sg55
g11
sS'block_loop.thisTrial'
p1334
Nsg70
Vy
sS'block_loop.thisTrialN'
p1335
I0
sg39
F1.9999062028146
sg34
g753
(S'\x07\xdf\x07\x0c\x12-/\n\xf0\xc8'
tRp1336
sa(dp1337
S'trial_loop.thisTrialN'
p1338
I28
sg895
g1219
sS'block_loop.thisIndex'
p1339
g889
sg38
S'left'
p1340
sg59
g63
sS'trial_loop.thisN'
p1341
I28
sg33
g1223
sg64
g65
sS'trial_loop.thisIndex'
p1342
g60
(g99
S'\x1c\x00\x00\x00'
tRp1343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1344
I0
sg904
g1227
sS'block_loop.thisRepN'
p1345
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1346
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p1347
Nsg70
Vy
sS'block_loop.thisTrialN'
p1348
I0
sg39
F0.86700813783318154
sg34
g753
(S'\x07\xdf\x07\x0c\x12-6\x0b}h'
tRp1349
sa(dp1350
S'trial_loop.thisTrialN'
p1351
I29
sg895
S'26-walkers_smoky_bacon.png'
p1352
sS'block_loop.thisIndex'
p1353
g889
sg38
S'left'
p1354
sg59
g63
sS'trial_loop.thisN'
p1355
I29
sg33
S'44-crunch.png'
p1356
sg64
g65
sS'trial_loop.thisIndex'
p1357
g60
(g99
S'\x1d\x00\x00\x00'
tRp1358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1359
I0
sg904
S'44-crunch.png'
p1360
sS'block_loop.thisRepN'
p1361
I0
sg907
g1356
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1362
I0
sg909
S'26-walkers_smoky_bacon.png'
p1363
sg55
g11
sS'block_loop.thisTrial'
p1364
Nsg70
Vy
sS'block_loop.thisTrialN'
p1365
I0
sg39
F3.0666108255063591
sg34
g753
(S'\x07\xdf\x07\x0c\x12.\x00\t\xeb\x10'
tRp1366
sa(dp1367
S'trial_loop.thisTrialN'
p1368
I30
sg895
S'22-daim.png'
p1369
sS'block_loop.thisIndex'
p1370
g889
sg38
S'right'
p1371
sg59
g63
sS'trial_loop.thisN'
p1372
I30
sg33
S'7-olives.png'
p1373
sg64
g65
sS'trial_loop.thisIndex'
p1374
g60
(g99
S'\x1e\x00\x00\x00'
tRp1375
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1376
I0
sg904
S'7-olives.png'
p1377
sS'block_loop.thisRepN'
p1378
I0
sg907
S'22-daim.png'
p1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1380
I0
sg909
g1373
sg55
g11
sS'block_loop.thisTrial'
p1381
Nsg70
Vy
sS'block_loop.thisTrialN'
p1382
I0
sg39
F2.1832466255837062
sg34
g753
(S'\x07\xdf\x07\x0c\x12.\x08\x0b\xa0\x90'
tRp1383
sa(dp1384
S'trial_loop.thisTrialN'
p1385
I31
sg895
S'10-bounty_redo.png'
p1386
sS'block_loop.thisIndex'
p1387
g889
sg38
S'left'
p1388
sg59
g63
sS'trial_loop.thisN'
p1389
I31
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p1390
g60
(g99
S'\x1f\x00\x00\x00'
tRp1391
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1392
I0
sg904
S'4-corn.png'
p1393
sS'block_loop.thisRepN'
p1394
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1395
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p1396
Nsg70
Vy
sS'block_loop.thisTrialN'
p1397
I0
sg39
F1.2502845276248991
sg34
g753
(S'\x07\xdf\x07\x0c\x12.\x0f\x0e\xc9('
tRp1398
sa(dp1399
S'trial_loop.thisTrialN'
p1400
I32
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1401
sS'block_loop.thisIndex'
p1402
g889
sg38
S'right'
p1403
sg59
g63
sS'trial_loop.thisN'
p1404
I32
sg33
g1043
sg64
g65
sS'trial_loop.thisIndex'
p1405
g60
(g99
S' \x00\x00\x00'
tRp1406
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1407
I0
sg904
S'36-fig_rolls.png'
p1408
sS'block_loop.thisRepN'
p1409
I0
sg907
g1043
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1410
I0
sg909
g1037
sg55
g11
sS'block_loop.thisTrial'
p1411
Nsg70
Vy
sS'block_loop.thisTrialN'
p1412
I0
sg39
F1.4498772368751816
sg34
g753
(S'\x07\xdf\x07\x0c\x12.\x16\x03\xe8\x00'
tRp1413
sa(dp1414
S'trial_loop.thisTrialN'
p1415
I33
sg895
S'30-spaghetti_hoops.png'
p1416
sS'block_loop.thisIndex'
p1417
g889
sg38
S'right'
p1418
sg59
g63
sS'trial_loop.thisN'
p1419
I33
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p1420
g60
(g99
S'!\x00\x00\x00'
tRp1421
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1422
I0
sg904
S'19-caramello_redo.png'
p1423
sS'block_loop.thisRepN'
p1424
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1425
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p1426
Nsg70
Vy
sS'block_loop.thisTrialN'
p1427
I0
sg39
F1.3334792083842331
sg34
g753
(S'\x07\xdf\x07\x0c\x12.\x1c\x0b^('
tRp1428
sa(dp1429
S'trial_loop.thisTrialN'
p1430
I34
sg895
g896
sS'block_loop.thisIndex'
p1431
g889
sg38
S'right'
p1432
sg59
g63
sS'trial_loop.thisN'
p1433
I34
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p1434
g60
(g99
S'"\x00\x00\x00'
tRp1435
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1436
I0
sg904
g905
sS'block_loop.thisRepN'
p1437
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1438
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1439
Nsg70
Vy
sS'block_loop.thisTrialN'
p1440
I0
sg39
F0.96653179638815345
sg34
g753
(S'\x07\xdf\x07\x0c\x12.#\x01\xad\xb0'
tRp1441
sa(dp1442
S'trial_loop.thisTrialN'
p1443
I35
sg895
g1236
sS'block_loop.thisIndex'
p1444
g889
sg38
S'left'
p1445
sg59
g63
sS'trial_loop.thisN'
p1446
I35
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p1447
g60
(g99
S'#\x00\x00\x00'
tRp1448
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1449
I0
sg904
g1243
sS'block_loop.thisRepN'
p1450
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1451
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p1452
Nsg70
Vy
sS'block_loop.thisTrialN'
p1453
I0
sg39
F1.1331922859353654
sg34
g753
(S'\x07\xdf\x07\x0c\x12.)\x01\x86\xa0'
tRp1454
sa(dp1455
S'trial_loop.thisTrialN'
p1456
I36
sg895
S'7-olives.png'
p1457
sS'block_loop.thisIndex'
p1458
g889
sg38
S'left'
p1459
sg59
g63
sS'trial_loop.thisN'
p1460
I36
sg33
g1373
sg64
g65
sS'trial_loop.thisIndex'
p1461
g60
(g99
S'$\x00\x00\x00'
tRp1462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1463
I0
sg904
S'22-daim.png'
p1464
sS'block_loop.thisRepN'
p1465
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1466
I0
sg909
g1373
sg55
g11
sS'block_loop.thisTrial'
p1467
Nsg70
Vy
sS'block_loop.thisTrialN'
p1468
I0
sg39
F1.7331612672933261
sg34
g753
(S'\x07\xdf\x07\x0c\x12./\x04=\xf0'
tRp1469
sa(dp1470
S'trial_loop.thisTrialN'
p1471
I37
sg895
S'49-yorkie.png'
p1472
sS'block_loop.thisIndex'
p1473
g889
sg38
S'right'
p1474
sg59
g63
sS'trial_loop.thisN'
p1475
I37
sg33
S'49-yorkie.png'
p1476
sg64
g65
sS'trial_loop.thisIndex'
p1477
g60
(g99
S'%\x00\x00\x00'
tRp1478
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1479
I0
sg904
S'35-raisins.png'
p1480
sS'block_loop.thisRepN'
p1481
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1482
I0
sg909
S'35-raisins.png'
p1483
sg55
g11
sS'block_loop.thisTrial'
p1484
Nsg70
Vy
sS'block_loop.thisTrialN'
p1485
I0
sg39
F1.5999307782476535
sg34
g753
(S'\x07\xdf\x07\x0c\x12.6\x00\x80\xe8'
tRp1486
sa(dp1487
S'trial_loop.thisTrialN'
p1488
I38
sg895
g1386
sS'block_loop.thisIndex'
p1489
g889
sg38
S'left'
p1490
sg59
g63
sS'trial_loop.thisN'
p1491
I38
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p1492
g60
(g99
S'&\x00\x00\x00'
tRp1493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1494
I0
sg904
g1393
sS'block_loop.thisRepN'
p1495
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1496
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p1497
Nsg70
Vy
sS'block_loop.thisTrialN'
p1498
I0
sg39
F0.70033453378346167
sg34
g753
(S'\x07\xdf\x07\x0c\x12/\x00\nXp'
tRp1499
sa(dp1500
S'trial_loop.thisTrialN'
p1501
I39
sg895
g1416
sS'block_loop.thisIndex'
p1502
g889
sg38
S'right'
p1503
sg59
g63
sS'trial_loop.thisN'
p1504
I39
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p1505
g60
(g99
S"'\x00\x00\x00"
tRp1506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1507
I0
sg904
g1423
sS'block_loop.thisRepN'
p1508
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1509
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p1510
Nsg70
Vy
sS'block_loop.thisTrialN'
p1511
I0
sg39
F1.1666037550785404
sg34
g753
(S'\x07\xdf\x07\x0c\x12/\x06\x06* '
tRp1512
sa(dp1513
S'trial_loop.thisTrialN'
p1514
I40
sg895
g1001
sS'block_loop.thisIndex'
p1515
g889
sg38
S'right'
p1516
sg59
g63
sS'trial_loop.thisN'
p1517
I40
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1518
g60
(g99
S'(\x00\x00\x00'
tRp1519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1520
I0
sg904
g1009
sS'block_loop.thisRepN'
p1521
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1522
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1523
Nsg70
Vy
sS'block_loop.thisTrialN'
p1524
I0
sg39
F1.5999319186375942
sg34
g753
(S'\x07\xdf\x07\x0c\x12/\x0c\tV\xa0'
tRp1525
sa(dp1526
S'trial_loop.thisTrialN'
p1527
I41
sg895
g984
sS'block_loop.thisIndex'
p1528
g889
sg38
S'left'
p1529
sg59
g63
sS'trial_loop.thisN'
p1530
I41
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1531
g60
(g99
S')\x00\x00\x00'
tRp1532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1533
I0
sg904
g992
sS'block_loop.thisRepN'
p1534
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1535
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1536
Nsg70
Vy
sS'block_loop.thisTrialN'
p1537
I0
sg39
F1.349951305292052
sg34
g753
(S'\x07\xdf\x07\x0c\x12/\x13\x03\xb1P'
tRp1538
sa(dp1539
S'trial_loop.thisTrialN'
p1540
I42
sg895
S'5-pineapple.png'
p1541
sS'block_loop.thisIndex'
p1542
g889
sg38
S'left'
p1543
sg59
g63
sS'trial_loop.thisN'
p1544
I42
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1545
g60
(g99
S'*\x00\x00\x00'
tRp1546
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1547
I0
sg904
S'40-sardines.png'
p1548
sS'block_loop.thisRepN'
p1549
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1550
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1551
Nsg70
Vy
sS'block_loop.thisTrialN'
p1552
I0
sg39
F1.5832066548682633
sg34
g753
(S'\x07\xdf\x07\x0c\x12/\x19\t\x81\x98'
tRp1553
sa(dp1554
S'trial_loop.thisTrialN'
p1555
I43
sg895
S'44-crunch.png'
p1556
sS'block_loop.thisIndex'
p1557
g889
sg38
S'left'
p1558
sg59
g63
sS'trial_loop.thisN'
p1559
I43
sg33
g1356
sg64
g65
sS'trial_loop.thisIndex'
p1560
g60
(g99
S'+\x00\x00\x00'
tRp1561
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1562
I0
sg904
S'26-walkers_smoky_bacon.png'
p1563
sS'block_loop.thisRepN'
p1564
I0
sg907
g1356
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1565
I0
sg909
g1363
sg55
g11
sS'block_loop.thisTrial'
p1566
Nsg70
Vy
sS'block_loop.thisTrialN'
p1567
I0
sg39
F2.1003150901124172
sg34
g753
(S'\x07\xdf\x07\x0c\x12/ \x03\x9d\xc8'
tRp1568
sa(dp1569
S'trial_loop.thisTrialN'
p1570
I44
sg895
g933
sS'block_loop.thisIndex'
p1571
g889
sg38
S'left'
p1572
sg59
g63
sS'trial_loop.thisN'
p1573
I44
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1574
g60
(g99
S',\x00\x00\x00'
tRp1575
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1576
I0
sg904
g941
sS'block_loop.thisRepN'
p1577
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1578
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1579
Nsg70
Vy
sS'block_loop.thisTrialN'
p1580
I0
sg39
F1.3499142425753234
sg34
g753
(S"\x07\xdf\x07\x0c\x12/'\x05\x95\xb0"
tRp1581
sa(dp1582
S'trial_loop.thisTrialN'
p1583
I45
sg895
S'17-jacobs_mini_cheddars_redo.png'
p1584
sS'block_loop.thisIndex'
p1585
g889
sg38
S'left'
p1586
sg59
g63
sS'trial_loop.thisN'
p1587
I45
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p1588
g60
(g99
S'-\x00\x00\x00'
tRp1589
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1590
I0
sg904
S'8-liquorice_catherine_wheels.png'
p1591
sS'block_loop.thisRepN'
p1592
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1593
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p1594
Nsg70
Vy
sS'block_loop.thisTrialN'
p1595
I0
sg39
F2.2164762023130606
sg34
g753
(S'\x07\xdf\x07\x0c\x12/-\x0b\xa0\x90'
tRp1596
sa(dp1597
S'trial_loop.thisTrialN'
p1598
I46
sg895
g1159
sS'block_loop.thisIndex'
p1599
g889
sg38
S'left'
p1600
sg59
g63
sS'trial_loop.thisN'
p1601
I46
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1602
g60
(g99
S'.\x00\x00\x00'
tRp1603
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1604
I0
sg904
g1166
sS'block_loop.thisRepN'
p1605
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1606
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1607
Nsg70
Vy
sS'block_loop.thisTrialN'
p1608
I0
sg39
F0.89987478503462626
sg34
g753
(S'\x07\xdf\x07\x0c\x12/5\x00\x03\xe8'
tRp1609
sa(dp1610
S'trial_loop.thisTrialN'
p1611
I47
sg895
g1541
sS'block_loop.thisIndex'
p1612
g889
sg38
S'left'
p1613
sg59
g63
sS'trial_loop.thisN'
p1614
I47
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1615
g60
(g99
S'/\x00\x00\x00'
tRp1616
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1617
I0
sg904
g1548
sS'block_loop.thisRepN'
p1618
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1619
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1620
Nsg70
Vy
sS'block_loop.thisTrialN'
p1621
I0
sg39
F1.3331972466403386
sg34
g753
(S'\x07\xdf\x07\x0c\x12/:\x0ekh'
tRp1622
sa(dp1623
S'trial_loop.thisTrialN'
p1624
I48
sg895
g1159
sS'block_loop.thisIndex'
p1625
g889
sg38
S'left'
p1626
sg59
g63
sS'trial_loop.thisN'
p1627
I48
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1628
g60
(g99
S'0\x00\x00\x00'
tRp1629
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1630
I0
sg904
g1166
sS'block_loop.thisRepN'
p1631
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1632
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1633
Nsg70
Vy
sS'block_loop.thisTrialN'
p1634
I0
sg39
F0.78370540499963681
sg34
g753
(S'\x07\xdf\x07\x0c\x120\x05\x04\xb7\x08'
tRp1635
sa(dp1636
S'trial_loop.thisTrialN'
p1637
I49
sg895
g1296
sS'block_loop.thisIndex'
p1638
g889
sg38
S'left'
p1639
sg59
g63
sS'trial_loop.thisN'
p1640
I49
sg33
g1306
sg64
g65
sS'trial_loop.thisIndex'
p1641
g60
(g99
S'1\x00\x00\x00'
tRp1642
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1643
I0
sg904
g1304
sS'block_loop.thisRepN'
p1644
I0
sg907
g1306
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1645
I0
sg909
g1300
sg55
g11
sS'block_loop.thisTrial'
p1646
Nsg70
Vy
sS'block_loop.thisTrialN'
p1647
I0
sg39
F1.499860302068555
sg34
g753
(S'\x07\xdf\x07\x0c\x120\x0b\x01\xf4\x00'
tRp1648
sa(dp1649
S'trial_loop.thisTrialN'
p1650
I50
sg895
g1159
sS'block_loop.thisIndex'
p1651
g889
sg38
S'left'
p1652
sg59
g63
sS'trial_loop.thisN'
p1653
I50
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p1654
g60
(g99
S'2\x00\x00\x00'
tRp1655
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1656
I0
sg904
g1166
sS'block_loop.thisRepN'
p1657
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1658
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1659
Nsg70
Vy
sS'block_loop.thisTrialN'
p1660
I0
sg39
F0.74985460011157556
sg34
g753
(S'\x07\xdf\x07\x0c\x120\x11\t\xe7('
tRp1661
sa(dp1662
S'trial_loop.thisTrialN'
p1663
I51
sg895
g1187
sS'block_loop.thisIndex'
p1664
g889
sg38
S'left'
p1665
sg59
g63
sS'trial_loop.thisN'
p1666
I51
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1667
g60
(g99
S'3\x00\x00\x00'
tRp1668
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1669
I0
sg904
g1194
sS'block_loop.thisRepN'
p1670
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1671
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1672
Nsg70
Vy
sS'block_loop.thisTrialN'
p1673
I0
sg39
F2.1165209056525782
sg34
g753
(S'\x07\xdf\x07\x0c\x120\x17\x06\xab\x08'
tRp1674
sa(dp1675
S'trial_loop.thisTrialN'
p1676
I52
sg895
g1352
sS'block_loop.thisIndex'
p1677
g889
sg38
S'right'
p1678
sg59
g63
sS'trial_loop.thisN'
p1679
I52
sg33
g1356
sg64
g65
sS'trial_loop.thisIndex'
p1680
g60
(g99
S'4\x00\x00\x00'
tRp1681
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1682
I0
sg904
g1360
sS'block_loop.thisRepN'
p1683
I0
sg907
g1356
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1684
I0
sg909
g1363
sg55
g11
sS'block_loop.thisTrial'
p1685
Nsg70
Vy
sS'block_loop.thisTrialN'
p1686
I0
sg39
F2.6164653115774854
sg34
g753
(S'\x07\xdf\x07\x0c\x120\x1e\x08\xdd\x88'
tRp1687
sa(dp1688
S'trial_loop.thisTrialN'
p1689
I53
sg895
g1584
sS'block_loop.thisIndex'
p1690
g889
sg38
S'left'
p1691
sg59
g63
sS'trial_loop.thisN'
p1692
I53
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1693
g60
(g99
S'5\x00\x00\x00'
tRp1694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1695
I0
sg904
g1591
sS'block_loop.thisRepN'
p1696
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1697
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p1698
Nsg70
Vy
sS'block_loop.thisTrialN'
p1699
I0
sg39
F1.3503991939724074
sg34
g753
(S'\x07\xdf\x07\x0c\x120&\x03\xadh'
tRp1700
sa(dp1701
S'trial_loop.thisTrialN'
p1702
I54
sg895
S'31-hobnobs.png'
p1703
sS'block_loop.thisIndex'
p1704
g889
sg38
S'right'
p1705
sg59
g63
sS'trial_loop.thisN'
p1706
I54
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1707
g60
(g99
S'6\x00\x00\x00'
tRp1708
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1709
I0
sg904
S'25-kitkat.png'
p1710
sS'block_loop.thisRepN'
p1711
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1712
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1713
Nsg70
Vy
sS'block_loop.thisTrialN'
p1714
I0
sg39
F2.699820502410148
sg34
g753
(S'\x07\xdf\x07\x0c\x120,\ty\xc8'
tRp1715
sa(dp1716
S'trial_loop.thisTrialN'
p1717
I55
sg895
S'35-raisins.png'
p1718
sS'block_loop.thisIndex'
p1719
g889
sg38
S'right'
p1720
sg59
g63
sS'trial_loop.thisN'
p1721
I55
sg33
g1476
sg64
g65
sS'trial_loop.thisIndex'
p1722
g60
(g99
S'7\x00\x00\x00'
tRp1723
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1724
I0
sg904
S'49-yorkie.png'
p1725
sS'block_loop.thisRepN'
p1726
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1727
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p1728
Nsg70
Vy
sS'block_loop.thisTrialN'
p1729
I0
sg39
F1.3666052946100535
sg34
g753
(S'\x07\xdf\x07\x0c\x1204\x05zX'
tRp1730
sa(dp1731
S'trial_loop.thisTrialN'
p1732
I56
sg895
g1369
sS'block_loop.thisIndex'
p1733
g889
sg38
S'right'
p1734
sg59
g63
sS'trial_loop.thisN'
p1735
I56
sg33
g1379
sg64
g65
sS'trial_loop.thisIndex'
p1736
g60
(g99
S'8\x00\x00\x00'
tRp1737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1738
I0
sg904
g1377
sS'block_loop.thisRepN'
p1739
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1740
I0
sg909
g1373
sg55
g11
sS'block_loop.thisTrial'
p1741
Nsg70
Vy
sS'block_loop.thisTrialN'
p1742
I0
sg39
F1.9166123080140096
sg34
g753
(S'\x07\xdf\x07\x0c\x120:\x0b\x858'
tRp1743
sa(dp1744
S'trial_loop.thisTrialN'
p1745
I57
sg895
g950
sS'block_loop.thisIndex'
p1746
g889
sg38
S'left'
p1747
sg59
g63
sS'trial_loop.thisN'
p1748
I57
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1749
g60
(g99
S'9\x00\x00\x00'
tRp1750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1751
I0
sg904
g958
sS'block_loop.thisRepN'
p1752
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1753
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1754
Nsg70
Vy
sS'block_loop.thisTrialN'
p1755
I0
sg39
F1.4500032501127862
sg34
g753
(S'\x07\xdf\x07\x0c\x121\x05\n\xa2\xa8'
tRp1756
sa(dp1757
S'trial_loop.thisTrialN'
p1758
I58
sg895
S'6-sour_patch_kids.png'
p1759
sS'block_loop.thisIndex'
p1760
g889
sg38
S'right'
p1761
sg59
g63
sS'trial_loop.thisN'
p1762
I58
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p1763
g60
(g99
S':\x00\x00\x00'
tRp1764
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1765
I0
sg904
S'38-maltesers.png'
p1766
sS'block_loop.thisRepN'
p1767
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1768
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p1769
Nsg70
Vy
sS'block_loop.thisTrialN'
p1770
I0
sg39
F1.5163802954084531
sg34
g753
(S'\x07\xdf\x07\x0c\x121\x0c\x02\xdax'
tRp1771
sa(dp1772
S'trial_loop.thisTrialN'
p1773
I59
sg895
g1556
sS'block_loop.thisIndex'
p1774
g889
sg38
S'left'
p1775
sg59
g63
sS'trial_loop.thisN'
p1776
I59
sg33
g1363
sg64
g65
sS'trial_loop.thisIndex'
p1777
g60
(g99
S';\x00\x00\x00'
tRp1778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1779
I0
sg904
g1563
sS'block_loop.thisRepN'
p1780
I0
sg907
g1356
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1781
I0
sg909
g1363
sg55
g11
sS'block_loop.thisTrial'
p1782
Nsg70
Vy
sS'block_loop.thisTrialN'
p1783
I0
sg39
F1.0833124261589546
sg34
g753
(S'\x07\xdf\x07\x0c\x121\x12\x0bF\xb8'
tRp1784
sa(dp1785
S'trial_loop.thisTrialN'
p1786
I60
sg895
S'21-nakd_banana_crunch.png'
p1787
sS'block_loop.thisIndex'
p1788
g889
sg38
S'right'
p1789
sg59
g63
sS'trial_loop.thisN'
p1790
I60
sg33
g1223
sg64
g65
sS'trial_loop.thisIndex'
p1791
g60
(g99
S'<\x00\x00\x00'
tRp1792
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1793
I0
sg904
S'1-treacle_cookies.png'
p1794
sS'block_loop.thisRepN'
p1795
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1796
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p1797
Nsg70
Vy
sS'block_loop.thisTrialN'
p1798
I0
sg39
F1.6332142384708277
sg34
g753
(S'\x07\xdf\x07\x0c\x121\x18\r\x07\xf0'
tRp1799
sa(dp1800
S'trial_loop.thisTrialN'
p1801
I61
sg895
S'16-skips_prawn.png'
p1802
sS'block_loop.thisIndex'
p1803
g889
sg38
S'right'
p1804
sg59
g63
sS'trial_loop.thisN'
p1805
I61
sg33
g1306
sg64
g65
sS'trial_loop.thisIndex'
p1806
g60
(g99
S'=\x00\x00\x00'
tRp1807
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1808
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1809
sS'block_loop.thisRepN'
p1810
I0
sg907
g1306
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1811
I0
sg909
g1300
sg55
g11
sS'block_loop.thisTrial'
p1812
Nsg70
Vy
sS'block_loop.thisTrialN'
p1813
I0
sg39
F1.1331503765541129
sg34
g753
(S'\x07\xdf\x07\x0c\x121\x1f\x07\xdb\xb8'
tRp1814
sa(dp1815
S'trial_loop.thisTrialN'
p1816
I62
sg895
g1125
sS'block_loop.thisIndex'
p1817
g889
sg38
S'right'
p1818
sg59
g63
sS'trial_loop.thisN'
p1819
I62
sg33
g1129
sg64
g65
sS'trial_loop.thisIndex'
p1820
g60
(g99
S'>\x00\x00\x00'
tRp1821
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1822
I0
sg904
g1133
sS'block_loop.thisRepN'
p1823
I0
sg907
g1129
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1824
I0
sg909
g1136
sg55
g11
sS'block_loop.thisTrial'
p1825
Nsg70
Vy
sS'block_loop.thisTrialN'
p1826
I0
sg39
F1.1166640247611213
sg34
g753
(S'\x07\xdf\x07\x0c\x121%\n\x93\x08'
tRp1827
sa(dp1828
S'trial_loop.thisTrialN'
p1829
I63
sg895
g1759
sS'block_loop.thisIndex'
p1830
g889
sg38
S'right'
p1831
sg59
g63
sS'trial_loop.thisN'
p1832
I63
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p1833
g60
(g99
S'?\x00\x00\x00'
tRp1834
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1835
I0
sg904
g1766
sS'block_loop.thisRepN'
p1836
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1837
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p1838
Nsg70
Vy
sS'block_loop.thisTrialN'
p1839
I0
sg39
F1.3167148862085014
sg34
g753
(S'\x07\xdf\x07\x0c\x121+\x0c\xcdX'
tRp1840
sa(dp1841
S'trial_loop.thisTrialN'
p1842
I64
sg895
g1584
sS'block_loop.thisIndex'
p1843
g889
sg38
S'left'
p1844
sg59
g63
sS'trial_loop.thisN'
p1845
I64
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p1846
g60
(g99
S'@\x00\x00\x00'
tRp1847
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1848
I0
sg904
g1591
sS'block_loop.thisRepN'
p1849
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1850
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p1851
Nsg70
Vy
sS'block_loop.thisTrialN'
p1852
I0
sg39
F1.8999711480973929
sg34
g753
(S'\x07\xdf\x07\x0c\x1212\x02\xde`'
tRp1853
sa(dp1854
S'trial_loop.thisTrialN'
p1855
I65
sg895
g1759
sS'block_loop.thisIndex'
p1856
g889
sg38
S'right'
p1857
sg59
g63
sS'trial_loop.thisN'
p1858
I65
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p1859
g60
(g99
S'A\x00\x00\x00'
tRp1860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1861
I0
sg904
g1766
sS'block_loop.thisRepN'
p1862
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1863
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p1864
Nsg70
Vy
sS'block_loop.thisTrialN'
p1865
I0
sg39
F1.1329345575068146
sg34
g753
(S'\x07\xdf\x07\x0c\x1219\x01\xc18'
tRp1866
sa(dp1867
S'trial_loop.thisTrialN'
p1868
I66
sg895
g1067
sS'block_loop.thisIndex'
p1869
g889
sg38
S'left'
p1870
sg59
g63
sS'trial_loop.thisN'
p1871
I66
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1872
g60
(g99
S'B\x00\x00\x00'
tRp1873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1874
I0
sg904
g1074
sS'block_loop.thisRepN'
p1875
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1876
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1877
Nsg70
Vy
sS'block_loop.thisTrialN'
p1878
I0
sg39
F1.0665252961625811
sg34
g753
(S'\x07\xdf\x07\x0c\x122\x03\x04t\xa0'
tRp1879
sa(dp1880
S'trial_loop.thisTrialN'
p1881
I67
sg895
g933
sS'block_loop.thisIndex'
p1882
g889
sg38
S'right'
p1883
sg59
g63
sS'trial_loop.thisN'
p1884
I67
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1885
g60
(g99
S'C\x00\x00\x00'
tRp1886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1887
I0
sg904
g941
sS'block_loop.thisRepN'
p1888
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1889
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1890
Nsg70
Vy
sS'block_loop.thisTrialN'
p1891
I0
sg39
F1.2332775872055208
sg34
g753
(S'\x07\xdf\x07\x0c\x122\t\x05\xfb@'
tRp1892
sa(dp1893
S'trial_loop.thisTrialN'
p1894
I68
sg895
S'50-polo.png'
p1895
sS'block_loop.thisIndex'
p1896
g889
sg38
S'right'
p1897
sg59
g63
sS'trial_loop.thisN'
p1898
I68
sg33
S'50-polo.png'
p1899
sg64
g65
sS'trial_loop.thisIndex'
p1900
g60
(g99
S'D\x00\x00\x00'
tRp1901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1902
I0
sg904
S'48-twix.png'
p1903
sS'block_loop.thisRepN'
p1904
I0
sg907
S'48-twix.png'
p1905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1906
I0
sg909
g1899
sg55
g11
sS'block_loop.thisTrial'
p1907
Nsg70
Vy
sS'block_loop.thisTrialN'
p1908
I0
sg39
F1.5832938948005904
sg34
g753
(S'\x07\xdf\x07\x0c\x122\x0f\x0bN\x88'
tRp1909
sa(dp1910
S'trial_loop.thisTrialN'
p1911
I69
sg895
g1472
sS'block_loop.thisIndex'
p1912
g889
sg38
S'left'
p1913
sg59
g63
sS'trial_loop.thisN'
p1914
I69
sg33
g1476
sg64
g65
sS'trial_loop.thisIndex'
p1915
g60
(g99
S'E\x00\x00\x00'
tRp1916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1917
I0
sg904
g1480
sS'block_loop.thisRepN'
p1918
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1919
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p1920
Nsg70
Vy
sS'block_loop.thisTrialN'
p1921
I0
sg39
F1.3166273611786892
sg34
g753
(S'\x07\xdf\x07\x0c\x122\x16\x05n\xa0'
tRp1922
sa(dp1923
S'trial_loop.thisTrialN'
p1924
I70
sg895
g1050
sS'block_loop.thisIndex'
p1925
g889
sg38
S'left'
p1926
sg59
g63
sS'trial_loop.thisN'
p1927
I70
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p1928
g60
(g99
S'F\x00\x00\x00'
tRp1929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1930
I0
sg904
g1058
sS'block_loop.thisRepN'
p1931
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1932
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p1933
Nsg70
Vy
sS'block_loop.thisTrialN'
p1934
I0
sg39
F0.8165669204427104
sg34
g753
(S'\x07\xdf\x07\x0c\x122\x1c\n\xc1\xe8'
tRp1935
sa(dp1936
S'trial_loop.thisTrialN'
p1937
I71
sg895
g1541
sS'block_loop.thisIndex'
p1938
g889
sg38
S'left'
p1939
sg59
g63
sS'trial_loop.thisN'
p1940
I71
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1941
g60
(g99
S'G\x00\x00\x00'
tRp1942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1943
I0
sg904
g1548
sS'block_loop.thisRepN'
p1944
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1945
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1946
Nsg70
Vy
sS'block_loop.thisTrialN'
p1947
I0
sg39
F0.8332708018788253
sg34
g753
(S'\x07\xdf\x07\x0c\x122"\x08w\xf8'
tRp1948
sa(dp1949
S'trial_loop.thisTrialN'
p1950
I72
sg895
S'48-twix.png'
p1951
sS'block_loop.thisIndex'
p1952
g889
sg38
S'right'
p1953
sg59
g63
sS'trial_loop.thisN'
p1954
I72
sg33
g1905
sg64
g65
sS'trial_loop.thisIndex'
p1955
g60
(g99
S'H\x00\x00\x00'
tRp1956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1957
I0
sg904
S'50-polo.png'
p1958
sS'block_loop.thisRepN'
p1959
I0
sg907
g1905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1960
I0
sg909
g1899
sg55
g11
sS'block_loop.thisTrial'
p1961
Nsg70
Vy
sS'block_loop.thisTrialN'
p1962
I0
sg39
F2.9165102429942635
sg34
g753
(S'\x07\xdf\x07\x0c\x122(\x06h\xa0'
tRp1963
sa(dp1964
S'trial_loop.thisTrialN'
p1965
I73
sg895
g1472
sS'block_loop.thisIndex'
p1966
g889
sg38
S'left'
p1967
sg59
g63
sS'trial_loop.thisN'
p1968
I73
sg33
g1476
sg64
g65
sS'trial_loop.thisIndex'
p1969
g60
(g99
S'I\x00\x00\x00'
tRp1970
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1971
I0
sg904
g1480
sS'block_loop.thisRepN'
p1972
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1973
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p1974
Nsg70
Vy
sS'block_loop.thisTrialN'
p1975
I0
sg39
F1.4000803405651823
sg34
g753
(S'\x07\xdf\x07\x0c\x1220\x05\xbc\xc0'
tRp1976
sa(dp1977
S'trial_loop.thisTrialN'
p1978
I74
sg895
g1067
sS'block_loop.thisIndex'
p1979
g889
sg38
S'right'
p1980
sg59
g63
sS'trial_loop.thisN'
p1981
I74
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p1982
g60
(g99
S'J\x00\x00\x00'
tRp1983
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1984
I0
sg904
g1074
sS'block_loop.thisRepN'
p1985
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1986
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1987
Nsg70
Vy
sS'block_loop.thisTrialN'
p1988
I0
sg39
F1.3165033436271187
sg34
g753
(S'\x07\xdf\x07\x0c\x1226\x0cD\xa0'
tRp1989
sa(dp1990
S'trial_loop.thisTrialN'
p1991
I75
sg895
g1268
sS'block_loop.thisIndex'
p1992
g889
sg38
S'left'
p1993
sg59
g63
sS'trial_loop.thisN'
p1994
I75
sg33
g1129
sg64
g65
sS'trial_loop.thisIndex'
p1995
g60
(g99
S'K\x00\x00\x00'
tRp1996
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1997
I0
sg904
g1275
sS'block_loop.thisRepN'
p1998
I0
sg907
g1129
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1999
I0
sg909
g1136
sg55
g11
sS'block_loop.thisTrial'
p2000
Nsg70
Vy
sS'block_loop.thisTrialN'
p2001
I0
sg39
F1.116619264405017
sg34
g753
(S'\x07\xdf\x07\x0c\x123\x01\x02U\xa8'
tRp2002
sa(dp2003
S'trial_loop.thisTrialN'
p2004
I76
sg895
g1352
sS'block_loop.thisIndex'
p2005
g889
sg38
S'right'
p2006
sg59
g63
sS'trial_loop.thisN'
p2007
I76
sg33
g1363
sg64
g65
sS'trial_loop.thisIndex'
p2008
g60
(g99
S'L\x00\x00\x00'
tRp2009
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2010
I0
sg904
g1360
sS'block_loop.thisRepN'
p2011
I0
sg907
g1356
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2012
I0
sg909
g1363
sg55
g11
sS'block_loop.thisTrial'
p2013
Nsg70
Vy
sS'block_loop.thisTrialN'
p2014
I0
sg39
F1.4499476560413314
sg34
g753
(S'\x07\xdf\x07\x0c\x123\x07\x04\x8f\xf8'
tRp2015
sa(dp2016
S'trial_loop.thisTrialN'
p2017
I77
sg895
g1108
sS'block_loop.thisIndex'
p2018
g889
sg38
S'right'
p2019
sg59
g63
sS'trial_loop.thisN'
p2020
I77
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p2021
g60
(g99
S'M\x00\x00\x00'
tRp2022
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2023
I0
sg904
g1116
sS'block_loop.thisRepN'
p2024
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2025
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p2026
Nsg70
Vy
sS'block_loop.thisTrialN'
p2027
I0
sg39
F0.8666238259684178
sg34
g753
(S'\x07\xdf\x07\x0c\x123\r\x0c\n\x08'
tRp2028
sa(dp2029
S'trial_loop.thisTrialN'
p2030
I78
sg895
g1703
sS'block_loop.thisIndex'
p2031
g889
sg38
S'left'
p2032
sg59
g63
sS'trial_loop.thisN'
p2033
I78
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p2034
g60
(g99
S'N\x00\x00\x00'
tRp2035
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2036
I0
sg904
g1710
sS'block_loop.thisRepN'
p2037
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2038
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2039
Nsg70
Vy
sS'block_loop.thisTrialN'
p2040
I0
sg39
F1.8333754327795759
sg34
g753
(S'\x07\xdf\x07\x0c\x123\x13\nw\xb0'
tRp2041
sa(dp2042
S'trial_loop.thisTrialN'
p2043
I79
sg895
g1125
sS'block_loop.thisIndex'
p2044
g889
sg38
S'right'
p2045
sg59
g63
sS'trial_loop.thisN'
p2046
I79
sg33
g1129
sg64
g65
sS'trial_loop.thisIndex'
p2047
g60
(g99
S'O\x00\x00\x00'
tRp2048
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2049
I0
sg904
g1133
sS'block_loop.thisRepN'
p2050
I0
sg907
g1129
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2051
I0
sg909
g1136
sg55
g11
sS'block_loop.thisTrial'
p2052
Nsg70
Vy
sS'block_loop.thisTrialN'
p2053
I0
sg39
F0.84988373710802989
sg34
g753
(S'\x07\xdf\x07\x0c\x123\x1a\x08dp'
tRp2054
sa(dp2055
S'trial_loop.thisTrialN'
p2056
I80
sg895
S'46-pistachios.png'
p2057
sS'block_loop.thisIndex'
p2058
g889
sg38
S'left'
p2059
sg59
g63
sS'trial_loop.thisN'
p2060
I80
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p2061
g60
(g99
S'P\x00\x00\x00'
tRp2062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2063
I0
sg904
S'29-beans.png'
p2064
sS'block_loop.thisRepN'
p2065
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2066
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p2067
Nsg70
Vy
sS'block_loop.thisTrialN'
p2068
I0
sg39
F0.98326960446865996
sg34
g753
(S'\x07\xdf\x07\x0c\x123 \x06\x93\x98'
tRp2069
sa(dp2070
S'trial_loop.thisTrialN'
p2071
I81
sg895
g1401
sS'block_loop.thisIndex'
p2072
g889
sg38
S'right'
p2073
sg59
g63
sS'trial_loop.thisN'
p2074
I81
sg33
g1043
sg64
g65
sS'trial_loop.thisIndex'
p2075
g60
(g99
S'Q\x00\x00\x00'
tRp2076
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2077
I0
sg904
g1408
sS'block_loop.thisRepN'
p2078
I0
sg907
g1043
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2079
I0
sg909
g1037
sg55
g11
sS'block_loop.thisTrial'
p2080
Nsg70
Vy
sS'block_loop.thisTrialN'
p2081
I0
sg39
F1.7665553454717156
sg34
g753
(S'\x07\xdf\x07\x0c\x123&\x06\xe5\xa0'
tRp2082
sa(dp2083
S'trial_loop.thisTrialN'
p2084
I82
sg895
g1018
sS'block_loop.thisIndex'
p2085
g889
sg38
S'right'
p2086
sg59
g63
sS'trial_loop.thisN'
p2087
I82
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p2088
g60
(g99
S'R\x00\x00\x00'
tRp2089
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2090
I0
sg904
g1025
sS'block_loop.thisRepN'
p2091
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2092
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2093
Nsg70
Vy
sS'block_loop.thisTrialN'
p2094
I0
sg39
F1.4665560297071352
sg34
g753
(S'\x07\xdf\x07\x0c\x123-\x03\xe00'
tRp2095
sa(dp2096
S'trial_loop.thisTrialN'
p2097
I83
sg895
g1142
sS'block_loop.thisIndex'
p2098
g889
sg38
S'right'
p2099
sg59
g63
sS'trial_loop.thisN'
p2100
I83
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p2101
g60
(g99
S'S\x00\x00\x00'
tRp2102
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2103
I0
sg904
g1150
sS'block_loop.thisRepN'
p2104
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2105
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p2106
Nsg70
Vy
sS'block_loop.thisTrialN'
p2107
I0
sg39
F1.0666495988116367
sg34
g753
(S'\x07\xdf\x07\x0c\x1233\x0b\x94\xd8'
tRp2108
sa(dp2109
S'trial_loop.thisTrialN'
p2110
I84
sg895
g1703
sS'block_loop.thisIndex'
p2111
g889
sg38
S'right'
p2112
sg59
g63
sS'trial_loop.thisN'
p2113
I84
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2114
g60
(g99
S'T\x00\x00\x00'
tRp2115
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2116
I0
sg904
g1710
sS'block_loop.thisRepN'
p2117
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2118
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2119
Nsg70
Vy
sS'block_loop.thisTrialN'
p2120
I0
sg39
F1.5999473139236216
sg34
g753
(S'\x07\xdf\x07\x0c\x1239\r\x1bx'
tRp2121
sa(dp2122
S'trial_loop.thisTrialN'
p2123
I85
sg895
g1401
sS'block_loop.thisIndex'
p2124
g889
sg38
S'right'
p2125
sg59
g63
sS'trial_loop.thisN'
p2126
I85
sg33
g1043
sg64
g65
sS'trial_loop.thisIndex'
p2127
g60
(g99
S'U\x00\x00\x00'
tRp2128
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2129
I0
sg904
g1408
sS'block_loop.thisRepN'
p2130
I0
sg907
g1043
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2131
I0
sg909
g1037
sg55
g11
sS'block_loop.thisTrial'
p2132
Nsg70
Vy
sS'block_loop.thisTrialN'
p2133
I0
sg39
F0.96667006883217255
sg34
g753
(S'\x07\xdf\x07\x0c\x124\x04\x07v('
tRp2134
sa(dp2135
S'trial_loop.thisTrialN'
p2136
I86
sg895
g1472
sS'block_loop.thisIndex'
p2137
g889
sg38
S'left'
p2138
sg59
g63
sS'trial_loop.thisN'
p2139
I86
sg33
g1476
sg64
g65
sS'trial_loop.thisIndex'
p2140
g60
(g99
S'V\x00\x00\x00'
tRp2141
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2142
I0
sg904
g1480
sS'block_loop.thisRepN'
p2143
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2144
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p2145
Nsg70
Vy
sS'block_loop.thisTrialN'
p2146
I0
sg39
F1.0499414409096062
sg34
g753
(S'\x07\xdf\x07\x0c\x124\n\x07O\x18'
tRp2147
sa(dp2148
S'trial_loop.thisTrialN'
p2149
I87
sg895
g967
sS'block_loop.thisIndex'
p2150
g889
sg38
S'right'
p2151
sg59
g63
sS'trial_loop.thisN'
p2152
I87
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2153
g60
(g99
S'W\x00\x00\x00'
tRp2154
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2155
I0
sg904
g975
sS'block_loop.thisRepN'
p2156
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2157
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2158
Nsg70
Vy
sS'block_loop.thisTrialN'
p2159
I0
sg39
F0.98307630814451841
sg34
g753
(S'\x07\xdf\x07\x0c\x124\x10\x08\x978'
tRp2160
sa(dp2161
S'trial_loop.thisTrialN'
p2162
I88
sg895
g1251
sS'block_loop.thisIndex'
p2163
g889
sg38
S'left'
p2164
sg59
g63
sS'trial_loop.thisN'
p2165
I88
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p2166
g60
(g99
S'X\x00\x00\x00'
tRp2167
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2168
I0
sg904
g1259
sS'block_loop.thisRepN'
p2169
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2170
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p2171
Nsg70
Vy
sS'block_loop.thisTrialN'
p2172
I0
sg39
F1.1501142672059359
sg34
g753
(S'\x07\xdf\x07\x0c\x124\x16\x08\xed('
tRp2173
sa(dp2174
S'trial_loop.thisTrialN'
p2175
I89
sg895
g1187
sS'block_loop.thisIndex'
p2176
g889
sg38
S'left'
p2177
sg59
g63
sS'trial_loop.thisN'
p2178
I89
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2179
g60
(g99
S'Y\x00\x00\x00'
tRp2180
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2181
I0
sg904
g1194
sS'block_loop.thisRepN'
p2182
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2183
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2184
Nsg70
Vy
sS'block_loop.thisTrialN'
p2185
I0
sg39
F0.93335866902634734
sg34
g753
(S'\x07\xdf\x07\x0c\x124\x1c\x0b\xa4x'
tRp2186
sa(dp2187
S'trial_loop.thisTrialN'
p2188
I90
sg895
g916
sS'block_loop.thisIndex'
p2189
g889
sg38
S'right'
p2190
sg59
g63
sS'trial_loop.thisN'
p2191
I90
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p2192
g60
(g99
S'Z\x00\x00\x00'
tRp2193
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2194
I0
sg904
g924
sS'block_loop.thisRepN'
p2195
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2196
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p2197
Nsg70
Vy
sS'block_loop.thisTrialN'
p2198
I0
sg39
F1.3165213047905127
sg34
g753
(S'\x07\xdf\x07\x0c\x124"\x0b>\xe8'
tRp2199
sa(dp2200
S'trial_loop.thisTrialN'
p2201
I91
sg895
g1202
sS'block_loop.thisIndex'
p2202
g889
sg38
S'right'
p2203
sg59
g63
sS'trial_loop.thisN'
p2204
I91
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p2205
g60
(g99
S'[\x00\x00\x00'
tRp2206
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2207
I0
sg904
g1210
sS'block_loop.thisRepN'
p2208
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2209
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p2210
Nsg70
Vy
sS'block_loop.thisTrialN'
p2211
I0
sg39
F0.99988653106629499
sg34
g753
(S'\x07\xdf\x07\x0c\x124)\x01S\xd8'
tRp2212
sa(dp2213
S'trial_loop.thisTrialN'
p2214
I92
sg895
g1067
sS'block_loop.thisIndex'
p2215
g889
sg38
S'right'
p2216
sg59
g63
sS'trial_loop.thisN'
p2217
I92
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2218
g60
(g99
S'\\\x00\x00\x00'
tRp2219
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2220
I0
sg904
g1074
sS'block_loop.thisRepN'
p2221
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2222
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2223
Nsg70
Vy
sS'block_loop.thisTrialN'
p2224
I0
sg39
F0.99985460010793759
sg34
g753
(S'\x07\xdf\x07\x0c\x124/\x01\xe4`'
tRp2225
sa(dp2226
S'trial_loop.thisTrialN'
p2227
I93
sg895
g1416
sS'block_loop.thisIndex'
p2228
g889
sg38
S'right'
p2229
sg59
g63
sS'trial_loop.thisN'
p2230
I93
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p2231
g60
(g99
S']\x00\x00\x00'
tRp2232
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2233
I0
sg904
g1423
sS'block_loop.thisRepN'
p2234
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2235
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p2236
Nsg70
Vy
sS'block_loop.thisTrialN'
p2237
I0
sg39
F1.0833460677022231
sg34
g753
(S'\x07\xdf\x07\x0c\x1245\x026h'
tRp2238
sa(dp2239
S'trial_loop.thisTrialN'
p2240
I94
sg895
g1352
sS'block_loop.thisIndex'
p2241
g889
sg38
S'right'
p2242
sg59
g63
sS'trial_loop.thisN'
p2243
I94
sg33
g1363
sg64
g65
sS'trial_loop.thisIndex'
p2244
g60
(g99
S'^\x00\x00\x00'
tRp2245
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2246
I0
sg904
g1360
sS'block_loop.thisRepN'
p2247
I0
sg907
g1356
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2248
I0
sg909
g1363
sg55
g11
sS'block_loop.thisTrial'
p2249
Nsg70
Vy
sS'block_loop.thisTrialN'
p2250
I0
sg39
F0.76654992860858329
sg34
g753
(S'\x07\xdf\x07\x0c\x124;\x046 '
tRp2251
sa(dp2252
S'trial_loop.thisTrialN'
p2253
I95
sg895
g1251
sS'block_loop.thisIndex'
p2254
g889
sg38
S'left'
p2255
sg59
g63
sS'trial_loop.thisN'
p2256
I95
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p2257
g60
(g99
S'_\x00\x00\x00'
tRp2258
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2259
I0
sg904
g1259
sS'block_loop.thisRepN'
p2260
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2261
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p2262
Nsg70
Vy
sS'block_loop.thisTrialN'
p2263
I0
sg39
F0.91634488625641097
sg34
g753
(S'\x07\xdf\x07\x0c\x125\x05\x00\xfa\x00'
tRp2264
sa(dp2265
S'trial_loop.thisTrialN'
p2266
I96
sg895
g1050
sS'block_loop.thisIndex'
p2267
g889
sg38
S'left'
p2268
sg59
g63
sS'trial_loop.thisN'
p2269
I96
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p2270
g60
(g99
S'`\x00\x00\x00'
tRp2271
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2272
I0
sg904
g1058
sS'block_loop.thisRepN'
p2273
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2274
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p2275
Nsg70
Vy
sS'block_loop.thisTrialN'
p2276
I0
sg39
F0.8997499121906003
sg34
g753
(S'\x07\xdf\x07\x0c\x125\x0b\x00Y\xd8'
tRp2277
sa(dp2278
S'trial_loop.thisTrialN'
p2279
I97
sg895
g1219
sS'block_loop.thisIndex'
p2280
g889
sg38
S'left'
p2281
sg59
g63
sS'trial_loop.thisN'
p2282
I97
sg33
g1223
sg64
g65
sS'trial_loop.thisIndex'
p2283
g60
(g99
S'a\x00\x00\x00'
tRp2284
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2285
I0
sg904
g1227
sS'block_loop.thisRepN'
p2286
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2287
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p2288
Nsg70
Vy
sS'block_loop.thisTrialN'
p2289
I0
sg39
F1.3333383700628474
sg34
g753
(S'\x07\xdf\x07\x0c\x125\x10\x0e\x82\xd8'
tRp2290
sa(dp2291
S'trial_loop.thisTrialN'
p2292
I98
sg895
g2057
sS'block_loop.thisIndex'
p2293
g889
sg38
S'left'
p2294
sg59
g63
sS'trial_loop.thisN'
p2295
I98
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p2296
g60
(g99
S'b\x00\x00\x00'
tRp2297
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2298
I0
sg904
g2064
sS'block_loop.thisRepN'
p2299
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2300
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p2301
Nsg70
Vy
sS'block_loop.thisTrialN'
p2302
I0
sg39
F0.69988578981065075
sg34
g753
(S'\x07\xdf\x07\x0c\x125\x17\x04\xd2`'
tRp2303
sa(dp2304
S'trial_loop.thisTrialN'
p2305
I99
sg895
g1050
sS'block_loop.thisIndex'
p2306
g889
sg38
S'left'
p2307
sg59
g63
sS'trial_loop.thisN'
p2308
I99
sg33
g1061
sg64
g65
sS'trial_loop.thisIndex'
p2309
g60
(g99
S'c\x00\x00\x00'
tRp2310
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2311
I0
sg904
g1058
sS'block_loop.thisRepN'
p2312
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2313
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p2314
Nsg70
Vy
sS'block_loop.thisTrialN'
p2315
I0
sg39
F0.81706498633866431
sg34
g753
(S'\x07\xdf\x07\x0c\x125\x1d\x00\xde\xa8'
tRp2316
sa(dp2317
S'trial_loop.thisTrialN'
p2318
I100
sg895
g1369
sS'block_loop.thisIndex'
p2319
g889
sg38
S'left'
p2320
sg59
g63
sS'trial_loop.thisN'
p2321
I100
sg33
g1379
sg64
g65
sS'trial_loop.thisIndex'
p2322
g60
(g99
S'd\x00\x00\x00'
tRp2323
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2324
I0
sg904
g1377
sS'block_loop.thisRepN'
p2325
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2326
I0
sg909
g1373
sg55
g11
sS'block_loop.thisTrial'
p2327
Nsg70
Vy
sS'block_loop.thisTrialN'
p2328
I0
sg39
F1.3999583186960081
sg34
g753
(S'\x07\xdf\x07\x0c\x125"\r\xd6\xf8'
tRp2329
sa(dp2330
S'trial_loop.thisTrialN'
p2331
I101
sg895
g1236
sS'block_loop.thisIndex'
p2332
g889
sg38
S'left'
p2333
sg59
g63
sS'trial_loop.thisN'
p2334
I101
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p2335
g60
(g99
S'e\x00\x00\x00'
tRp2336
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2337
I0
sg904
g1243
sS'block_loop.thisRepN'
p2338
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2339
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p2340
Nsg70
Vy
sS'block_loop.thisTrialN'
p2341
I0
sg39
F0.88319513691749307
sg34
g753
(S'\x07\xdf\x07\x0c\x125)\x05\x18\xb0'
tRp2342
sa(dp2343
S'trial_loop.thisTrialN'
p2344
I102
sg895
g1219
sS'block_loop.thisIndex'
p2345
g889
sg38
S'left'
p2346
sg59
g63
sS'trial_loop.thisN'
p2347
I102
sg33
g1223
sg64
g65
sS'trial_loop.thisIndex'
p2348
g60
(g99
S'f\x00\x00\x00'
tRp2349
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2350
I0
sg904
g1227
sS'block_loop.thisRepN'
p2351
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2352
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p2353
Nsg70
Vy
sS'block_loop.thisTrialN'
p2354
I0
sg39
F0.76662319875322282
sg34
g753
(S'\x07\xdf\x07\x0c\x125/\x03\xc0\xf0'
tRp2355
sa(dp2356
S'trial_loop.thisTrialN'
p2357
I103
sg895
g1142
sS'block_loop.thisIndex'
p2358
g889
sg38
S'right'
p2359
sg59
g63
sS'trial_loop.thisN'
p2360
I103
sg33
g1153
sg64
g65
sS'trial_loop.thisIndex'
p2361
g60
(g99
S'g\x00\x00\x00'
tRp2362
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2363
I0
sg904
g1150
sS'block_loop.thisRepN'
p2364
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2365
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p2366
Nsg70
Vy
sS'block_loop.thisTrialN'
p2367
I0
sg39
F1.6165214758511866
sg34
g753
(S'\x07\xdf\x07\x0c\x1255\x00\xc3P'
tRp2368
sa(dp2369
S'trial_loop.thisTrialN'
p2370
I104
sg895
g1472
sS'block_loop.thisIndex'
p2371
g889
sg38
S'left'
p2372
sg59
g63
sS'trial_loop.thisN'
p2373
I104
sg33
g1476
sg64
g65
sS'trial_loop.thisIndex'
p2374
g60
(g99
S'h\x00\x00\x00'
tRp2375
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2376
I0
sg904
g1480
sS'block_loop.thisRepN'
p2377
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2378
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p2379
Nsg70
Vy
sS'block_loop.thisTrialN'
p2380
I0
sg39
F1.0002831021374732
sg34
g753
(S'\x07\xdf\x07\x0c\x125;\n\x9a\xd8'
tRp2381
sa(dp2382
S'trial_loop.thisTrialN'
p2383
I105
sg895
g1033
sS'block_loop.thisIndex'
p2384
g889
sg38
S'left'
p2385
sg59
g63
sS'trial_loop.thisN'
p2386
I105
sg33
g1043
sg64
g65
sS'trial_loop.thisIndex'
p2387
g60
(g99
S'i\x00\x00\x00'
tRp2388
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2389
I0
sg904
g1041
sS'block_loop.thisRepN'
p2390
I0
sg907
g1043
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2391
I0
sg909
g1037
sg55
g11
sS'block_loop.thisTrial'
p2392
Nsg70
Vy
sS'block_loop.thisTrialN'
p2393
I0
sg39
F0.94979313301882939
sg34
g753
(S'\x07\xdf\x07\x0c\x126\x05\x0b+`'
tRp2394
sa(dp2395
S'trial_loop.thisTrialN'
p2396
I106
sg895
g1125
sS'block_loop.thisIndex'
p2397
g889
sg38
S'right'
p2398
sg59
g63
sS'trial_loop.thisN'
p2399
I106
sg33
g1136
sg64
g65
sS'trial_loop.thisIndex'
p2400
g60
(g99
S'j\x00\x00\x00'
tRp2401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2402
I0
sg904
g1133
sS'block_loop.thisRepN'
p2403
I0
sg907
g1129
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2404
I0
sg909
g1136
sg55
g11
sS'block_loop.thisTrial'
p2405
Nsg70
Vy
sS'block_loop.thisTrialN'
p2406
I0
sg39
F1.133375888934097
sg34
g753
(S'\x07\xdf\x07\x0c\x126\x0b\x0b\x088'
tRp2407
sa(dp2408
S'trial_loop.thisTrialN'
p2409
I107
sg895
g984
sS'block_loop.thisIndex'
p2410
g889
sg38
S'left'
p2411
sg59
g63
sS'trial_loop.thisN'
p2412
I107
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2413
g60
(g99
S'k\x00\x00\x00'
tRp2414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2415
I0
sg904
g992
sS'block_loop.thisRepN'
p2416
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2417
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2418
Nsg70
Vy
sS'block_loop.thisTrialN'
p2419
I0
sg39
F0.74981839268366457
sg34
g753
(S'\x07\xdf\x07\x0c\x126\x11\r\x81\x08'
tRp2420
sa(dp2421
S'trial_loop.thisTrialN'
p2422
I108
sg895
g1369
sS'block_loop.thisIndex'
p2423
g889
sg38
S'left'
p2424
sg59
g63
sS'trial_loop.thisN'
p2425
I108
sg33
g1379
sg64
g65
sS'trial_loop.thisIndex'
p2426
g60
(g99
S'l\x00\x00\x00'
tRp2427
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2428
I0
sg904
g1377
sS'block_loop.thisRepN'
p2429
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2430
I0
sg909
g1373
sg55
g11
sS'block_loop.thisTrial'
p2431
Nsg70
Vy
sS'block_loop.thisTrialN'
p2432
I0
sg39
F1.249845476977498
sg34
g753
(S'\x07\xdf\x07\x0c\x126\x17\nA\x00'
tRp2433
sa(dp2434
S'trial_loop.thisTrialN'
p2435
I109
sg895
g1001
sS'block_loop.thisIndex'
p2436
g889
sg38
S'right'
p2437
sg59
g63
sS'trial_loop.thisN'
p2438
I109
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2439
g60
(g99
S'm\x00\x00\x00'
tRp2440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2441
I0
sg904
g1009
sS'block_loop.thisRepN'
p2442
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2443
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2444
Nsg70
Vy
sS'block_loop.thisTrialN'
p2445
I0
sg39
F1.8336377227751655
sg34
g753
(S'\x07\xdf\x07\x0c\x126\x1d\x0e\xa2\x18'
tRp2446
sa(dp2447
S'trial_loop.thisTrialN'
p2448
I110
sg895
g1067
sS'block_loop.thisIndex'
p2449
g889
sg38
S'right'
p2450
sg59
g63
sS'trial_loop.thisN'
p2451
I110
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2452
g60
(g99
S'n\x00\x00\x00'
tRp2453
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2454
I0
sg904
g1074
sS'block_loop.thisRepN'
p2455
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2456
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2457
Nsg70
Vy
sS'block_loop.thisTrialN'
p2458
I0
sg39
F1.0166149309152388
sg34
g753
(S'\x07\xdf\x07\x0c\x126$\x0c\x8e\xd8'
tRp2459
sa(dp2460
S'trial_loop.thisTrialN'
p2461
I111
sg895
g1457
sS'block_loop.thisIndex'
p2462
g889
sg38
S'right'
p2463
sg59
g63
sS'trial_loop.thisN'
p2464
I111
sg33
g1379
sg64
g65
sS'trial_loop.thisIndex'
p2465
g60
(g99
S'o\x00\x00\x00'
tRp2466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2467
I0
sg904
g1464
sS'block_loop.thisRepN'
p2468
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2469
I0
sg909
g1373
sg55
g11
sS'block_loop.thisTrial'
p2470
Nsg70
Vy
sS'block_loop.thisTrialN'
p2471
I0
sg39
F2.8165914388555393
sg34
g753
(S'\x07\xdf\x07\x0c\x126*\r\x1f`'
tRp2472
sa(dp2473
S'trial_loop.thisTrialN'
p2474
I112
sg895
g1802
sS'block_loop.thisIndex'
p2475
g889
sg38
S'right'
p2476
sg59
g63
sS'trial_loop.thisN'
p2477
I112
sg33
g1306
sg64
g65
sS'trial_loop.thisIndex'
p2478
g60
(g99
S'p\x00\x00\x00'
tRp2479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2480
I0
sg904
g1809
sS'block_loop.thisRepN'
p2481
I0
sg907
g1306
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2482
I0
sg909
g1300
sg55
g11
sS'block_loop.thisTrial'
p2483
Nsg70
Vy
sS'block_loop.thisTrialN'
p2484
I0
sg39
F1.2497667899806402
sg34
g753
(S'\x07\xdf\x07\x0c\x1262\x0b\x088'
tRp2485
sa(dp2486
S'trial_loop.thisTrialN'
p2487
I113
sg895
g1219
sS'block_loop.thisIndex'
p2488
g889
sg38
S'left'
p2489
sg59
g63
sS'trial_loop.thisN'
p2490
I113
sg33
g1230
sg64
g65
sS'trial_loop.thisIndex'
p2491
g60
(g99
S'q\x00\x00\x00'
tRp2492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2493
I0
sg904
g1227
sS'block_loop.thisRepN'
p2494
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2495
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p2496
Nsg70
Vy
sS'block_loop.thisTrialN'
p2497
I0
sg39
F1.0499961796886055
sg34
g753
(S'\x07\xdf\x07\x0c\x1268\x0f*\xd0'
tRp2498
sa(dp2499
S'trial_loop.thisTrialN'
p2500
I114
sg895
g1584
sS'block_loop.thisIndex'
p2501
g889
sg38
S'left'
p2502
sg59
g63
sS'trial_loop.thisN'
p2503
I114
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p2504
g60
(g99
S'r\x00\x00\x00'
tRp2505
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2506
I0
sg904
g1591
sS'block_loop.thisRepN'
p2507
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2508
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p2509
Nsg70
Vy
sS'block_loop.thisTrialN'
p2510
I0
sg39
F1.9836519206473895
sg34
g753
(S'\x07\xdf\x07\x0c\x127\x03\x010\xb0'
tRp2511
sa(dp2512
S'trial_loop.thisTrialN'
p2513
I115
sg895
g933
sS'block_loop.thisIndex'
p2514
g889
sg38
S'left'
p2515
sg59
g63
sS'trial_loop.thisN'
p2516
I115
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p2517
g60
(g99
S's\x00\x00\x00'
tRp2518
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2519
I0
sg904
g941
sS'block_loop.thisRepN'
p2520
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2521
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2522
Nsg70
Vy
sS'block_loop.thisTrialN'
p2523
I0
sg39
F2.9998528895230265
sg34
g753
(S'\x07\xdf\x07\x0c\x127\n\x01~\xd0'
tRp2524
sa(dp2525
S'trial_loop.thisTrialN'
p2526
I116
sg895
g2057
sS'block_loop.thisIndex'
p2527
g889
sg38
S'left'
p2528
sg59
g63
sS'trial_loop.thisN'
p2529
I116
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p2530
g60
(g99
S't\x00\x00\x00'
tRp2531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2532
I0
sg904
g2064
sS'block_loop.thisRepN'
p2533
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2534
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p2535
Nsg70
Vy
sS'block_loop.thisTrialN'
p2536
I0
sg39
F0.78320591361261904
sg34
g753
(S'\x07\xdf\x07\x0c\x127\x12\x02\x03\xa0'
tRp2537
sa(dp2538
S'trial_loop.thisTrialN'
p2539
I117
sg895
g1386
sS'block_loop.thisIndex'
p2540
g889
sg38
S'left'
p2541
sg59
g63
sS'trial_loop.thisN'
p2542
I117
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p2543
g60
(g99
S'u\x00\x00\x00'
tRp2544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2545
I0
sg904
g1393
sS'block_loop.thisRepN'
p2546
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2547
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p2548
Nsg70
Vy
sS'block_loop.thisTrialN'
p2549
I0
sg39
F0.73331464992224937
sg34
g753
(S'\x07\xdf\x07\x0c\x127\x17\x0e\x82\xd8'
tRp2550
sa(dp2551
S'trial_loop.thisTrialN'
p2552
I118
sg895
g1556
sS'block_loop.thisIndex'
p2553
g889
sg38
S'left'
p2554
sg59
g63
sS'trial_loop.thisN'
p2555
I118
sg33
g1356
sg64
g65
sS'trial_loop.thisIndex'
p2556
g60
(g99
S'v\x00\x00\x00'
tRp2557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2558
I0
sg904
g1563
sS'block_loop.thisRepN'
p2559
I0
sg907
g1356
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2560
I0
sg909
g1363
sg55
g11
sS'block_loop.thisTrial'
p2561
Nsg70
Vy
sS'block_loop.thisTrialN'
p2562
I0
sg39
F1.1165702275757212
sg34
g753
(S'\x07\xdf\x07\x0c\x127\x1d\x0b\x088'
tRp2563
sa(dp2564
S'trial_loop.thisTrialN'
p2565
I119
sg895
g916
sS'block_loop.thisIndex'
p2566
g889
sg38
S'right'
p2567
sg59
g63
sS'trial_loop.thisN'
p2568
I119
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p2569
g60
(g99
S'w\x00\x00\x00'
tRp2570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2571
I0
sg904
g924
sS'block_loop.thisRepN'
p2572
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2573
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p2574
Nsg70
Vy
sS'block_loop.thisTrialN'
p2575
I0
sg39
F1.8670246735055116
sg34
g753
(S'\x07\xdf\x07\x0c\x127#\rB\x88'
tRp2576
sa(dp2577
S'trial_loop.thisTrialN'
p2578
I120
sg895
g950
sS'block_loop.thisIndex'
p2579
g889
sg38
S'left'
p2580
sg59
g63
sS'trial_loop.thisN'
p2581
I120
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2582
g60
(g99
S'x\x00\x00\x00'
tRp2583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2584
I0
sg904
g958
sS'block_loop.thisRepN'
p2585
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2586
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2587
Nsg70
Vy
sS'block_loop.thisTrialN'
p2588
I0
sg39
F1.1498998736460635
sg34
g753
(S'\x07\xdf\x07\x0c\x127*\x0b\xacH'
tRp2589
sa(dp2590
S'trial_loop.thisTrialN'
p2591
I121
sg895
g1251
sS'block_loop.thisIndex'
p2592
g889
sg38
S'left'
p2593
sg59
g63
sS'trial_loop.thisN'
p2594
I121
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p2595
g60
(g99
S'y\x00\x00\x00'
tRp2596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2597
I0
sg904
g1259
sS'block_loop.thisRepN'
p2598
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2599
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p2600
Nsg70
Vy
sS'block_loop.thisTrialN'
p2601
I0
sg39
F0.91627532238635467
sg34
g753
(S'\x07\xdf\x07\x0c\x1270\x0e\x9e0'
tRp2602
sa(dp2603
S'trial_loop.thisTrialN'
p2604
I122
sg895
g1802
sS'block_loop.thisIndex'
p2605
g889
sg38
S'right'
p2606
sg59
g63
sS'trial_loop.thisN'
p2607
I122
sg33
g1306
sg64
g65
sS'trial_loop.thisIndex'
p2608
g60
(g99
S'z\x00\x00\x00'
tRp2609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2610
I0
sg904
g1809
sS'block_loop.thisRepN'
p2611
I0
sg907
g1306
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2612
I0
sg909
g1300
sg55
g11
sS'block_loop.thisTrial'
p2613
Nsg70
Vy
sS'block_loop.thisTrialN'
p2614
I0
sg39
F1.1331945667188847
sg34
g753
(S'\x07\xdf\x07\x0c\x1276\r\xbf\x88'
tRp2615
sa(dp2616
S'trial_loop.thisTrialN'
p2617
I123
sg895
g1556
sS'block_loop.thisIndex'
p2618
g889
sg38
S'left'
p2619
sg59
g63
sS'trial_loop.thisN'
p2620
I123
sg33
g1356
sg64
g65
sS'trial_loop.thisIndex'
p2621
g60
(g99
S'{\x00\x00\x00'
tRp2622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2623
I0
sg904
g1563
sS'block_loop.thisRepN'
p2624
I0
sg907
g1356
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2625
I0
sg909
g1363
sg55
g11
sS'block_loop.thisTrial'
p2626
Nsg70
Vy
sS'block_loop.thisTrialN'
p2627
I0
sg39
F1.4332363620633259
sg34
g753
(S'\x07\xdf\x07\x0c\x128\x01\x00\xf6\x18'
tRp2628
sa(dp2629
S'trial_loop.thisTrialN'
p2630
I124
sg895
g1268
sS'block_loop.thisIndex'
p2631
g889
sg38
S'left'
p2632
sg59
g63
sS'trial_loop.thisN'
p2633
I124
sg33
g1136
sg64
g65
sS'trial_loop.thisIndex'
p2634
g60
(g99
S'|\x00\x00\x00'
tRp2635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2636
I0
sg904
g1275
sS'block_loop.thisRepN'
p2637
I0
sg907
g1129
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2638
I0
sg909
g1136
sg55
g11
sS'block_loop.thisTrial'
p2639
Nsg70
Vy
sS'block_loop.thisTrialN'
p2640
I0
sg39
F1.1004086022003321
sg34
g753
(S'\x07\xdf\x07\x0c\x128\x07\x081\xa8'
tRp2641
sa(dp2642
S'trial_loop.thisTrialN'
p2643
I125
sg895
g896
sS'block_loop.thisIndex'
p2644
g889
sg38
S'right'
p2645
sg59
g63
sS'trial_loop.thisN'
p2646
I125
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2647
g60
(g99
S'}\x00\x00\x00'
tRp2648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2649
I0
sg904
g905
sS'block_loop.thisRepN'
p2650
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2651
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vy
sS'block_loop.thisTrialN'
p2653
I0
sg39
F1.5832174885836139
sg34
g753
(S'\x07\xdf\x07\x0c\x128\r\n1`'
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g1001
sS'block_loop.thisIndex'
p2657
g889
sg38
S'right'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g1009
sS'block_loop.thisRepN'
p2663
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2664
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vy
sS'block_loop.thisTrialN'
p2666
I0
sg39
F1.1999410987882584
sg34
g753
(S'\x07\xdf\x07\x0c\x128\x14\x04Qx'
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g1895
sS'block_loop.thisIndex'
p2670
g889
sg38
S'left'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g1905
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g1903
sS'block_loop.thisRepN'
p2676
I0
sg907
g1905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2677
I0
sg909
g1899
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vy
sS'block_loop.thisTrialN'
p2679
I0
sg39
F2.6831454158527777
sg34
g753
(S'\x07\xdf\x07\x0c\x128\x1a\x07\xfa\xf8'
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g1018
sS'block_loop.thisIndex'
p2683
g889
sg38
S'right'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g1025
sS'block_loop.thisRepN'
p2689
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2690
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vy
sS'block_loop.thisTrialN'
p2692
I0
sg39
F0.98328214877255959
sg34
g753
(S'\x07\xdf\x07\x0c\x128"\x03~\x88'
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g1951
sS'block_loop.thisIndex'
p2696
g889
sg38
S'right'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g1905
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g1958
sS'block_loop.thisRepN'
p2702
I0
sg907
g1905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2703
I0
sg909
g1899
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vy
sS'block_loop.thisTrialN'
p2705
I0
sg39
F1.5167070175120898
sg34
g753
(S'\x07\xdf\x07\x0c\x128(\x03\xd4x'
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g1001
sS'block_loop.thisIndex'
p2709
g889
sg38
S'right'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g1009
sS'block_loop.thisRepN'
p2715
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2716
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vy
sS'block_loop.thisTrialN'
p2718
I0
sg39
F1.2165714249858866
sg34
g753
(S'\x07\xdf\x07\x0c\x128.\x0c@\xb8'
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g1951
sS'block_loop.thisIndex'
p2722
g889
sg38
S'left'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g1899
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g1958
sS'block_loop.thisRepN'
p2728
I0
sg907
g1905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg909
g1899
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vy
sS'block_loop.thisTrialN'
p2731
I0
sg39
F1.86648441313082
sg34
g753
(S'\x07\xdf\x07\x0c\x1285\x00\xa7\xf8'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g933
sS'block_loop.thisIndex'
p2735
g889
sg38
S'left'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g941
sS'block_loop.thisRepN'
p2741
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vy
sS'block_loop.thisTrialN'
p2744
I0
sg39
F2.6499249622502248
sg34
g753
(S'\x07\xdf\x07\x0c\x128;\x0e\x8a\xa8'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g1142
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1153
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g1150
sS'block_loop.thisRepN'
p2754
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vy
sS'block_loop.thisTrialN'
p2757
I0
sg39
F0.89998084142644075
sg34
g753
(S'\x07\xdf\x07\x0c\x129\x07\t\x99\x08'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g2057
sS'block_loop.thisIndex'
p2761
g889
sg38
S'left'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g2064
sS'block_loop.thisRepN'
p2767
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vy
sS'block_loop.thisTrialN'
p2770
I0
sg39
F0.76694051262893481
sg34
g753
(S'\x07\xdf\x07\x0c\x129\r\x08\xba`'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g1386
sS'block_loop.thisIndex'
p2774
g889
sg38
S'left'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g1393
sS'block_loop.thisRepN'
p2780
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vy
sS'block_loop.thisTrialN'
p2783
I0
sg39
F2.1999117337145435
sg34
g753
(S'\x07\xdf\x07\x0c\x129\x13\x05~@'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g950
sS'block_loop.thisIndex'
p2787
g889
sg38
S'left'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g958
sS'block_loop.thisRepN'
p2793
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vy
sS'block_loop.thisTrialN'
p2796
I0
sg39
F2.4331536836907617
sg34
g753
(S'\x07\xdf\x07\x0c\x129\x1a\t\x1f\xf0'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g1541
sS'block_loop.thisIndex'
p2800
g889
sg38
S'left'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g1548
sS'block_loop.thisRepN'
p2806
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vy
sS'block_loop.thisTrialN'
p2809
I0
sg39
F0.84984154262929223
sg34
g753
(S'\x07\xdf\x07\x0c\x129"\x01\x15X'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g1268
sS'block_loop.thisIndex'
p2813
g889
sg38
S'left'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g1129
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g1275
sS'block_loop.thisRepN'
p2819
I0
sg907
g1129
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g1136
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vy
sS'block_loop.thisTrialN'
p2822
I0
sg39
F1.0332846006131149
sg34
g753
(S"\x07\xdf\x07\x0c\x129'\x0e\x86\xc0"
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1033
sS'block_loop.thisIndex'
p2826
g889
sg38
S'left'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1041
sS'block_loop.thisRepN'
p2832
I0
sg907
g1043
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g1037
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vy
sS'block_loop.thisTrialN'
p2835
I0
sg39
F0.90026793493234436
sg34
g753
(S'\x07\xdf\x07\x0c\x129.\x00N '
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g1202
sS'block_loop.thisIndex'
p2839
g889
sg38
S'right'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g1210
sS'block_loop.thisRepN'
p2845
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vy
sS'block_loop.thisTrialN'
p2848
I0
sg39
F2.8831600698831608
sg34
g753
(S'\x07\xdf\x07\x0c\x12:\r\x06\xcaH'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1895
sS'block_loop.thisIndex'
p2852
g889
sg38
S'left'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1905
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1903
sS'block_loop.thisRepN'
p2858
I0
sg907
g1905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g1899
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vy
sS'block_loop.thisTrialN'
p2861
I0
sg39
F2.5502744351651927
sg34
g753
(S'\x07\xdf\x07\x0c\x12:\x15\x05\xa5P'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g1050
sS'block_loop.thisIndex'
p2865
g889
sg38
S'left'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g1058
sS'block_loop.thisRepN'
p2871
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vy
sS'block_loop.thisTrialN'
p2874
I0
sg39
F0.74999828941508895
sg34
g753
(S'\x07\xdf\x07\x0c\x12:\x1c\x0e\x86\xc0'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g1125
sS'block_loop.thisIndex'
p2878
g889
sg38
S'right'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1129
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g1133
sS'block_loop.thisRepN'
p2884
I0
sg907
g1129
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g1136
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vy
sS'block_loop.thisTrialN'
p2887
I0
sg39
F0.81663192274572793
sg34
g753
(S'\x07\xdf\x07\x0c\x12:"\x0bF\xb8'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1718
sS'block_loop.thisIndex'
p2891
g889
sg38
S'right'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g1483
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1725
sS'block_loop.thisRepN'
p2897
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vy
sS'block_loop.thisTrialN'
p2900
I0
sg39
F0.9332517573457153
sg34
g753
(S'\x07\xdf\x07\x0c\x12:(\x08\xfc\xc8'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1457
sS'block_loop.thisIndex'
p2904
g889
sg38
S'right'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1373
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1464
sS'block_loop.thisRepN'
p2910
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g1373
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vy
sS'block_loop.thisTrialN'
p2913
I0
sg39
F1.9832291205748334
sg34
g753
(S'\x07\xdf\x07\x0c\x12:.\x08\\\xa0'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1018
sS'block_loop.thisIndex'
p2917
g889
sg38
S'right'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1025
sS'block_loop.thisRepN'
p2923
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vy
sS'block_loop.thisTrialN'
p2926
I0
sg39
F1.0503596794114856
sg34
g753
(S'\x07\xdf\x07\x0c\x12:5\x08\xaa\xc0'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g967
sS'block_loop.thisIndex'
p2930
g889
sg38
S'right'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g975
sS'block_loop.thisRepN'
p2936
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vy
sS'block_loop.thisTrialN'
p2939
I0
sg39
F0.98322113783797249
sg34
g753
(S'\x07\xdf\x07\x0c\x12:;\t\xf2\xe0'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1457
sS'block_loop.thisIndex'
p2943
g889
sg38
S'right'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1379
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1464
sS'block_loop.thisRepN'
p2949
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g1373
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vy
sS'block_loop.thisTrialN'
p2952
I0
sg39
F0.68332730826659827
sg34
g753
(S'\x07\xdf\x07\x0c\x12;\x05\n\nP'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1236
sS'block_loop.thisIndex'
p2956
g889
sg38
S'left'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1243
sS'block_loop.thisRepN'
p2962
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vy
sS'block_loop.thisTrialN'
p2965
I0
sg39
F1.9500240622546698
sg34
g753
(S'\x07\xdf\x07\x0c\x12;\x0b\x05\xdc\x00'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g1251
sS'block_loop.thisIndex'
p2969
g889
sg38
S'left'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g1259
sS'block_loop.thisRepN'
p2975
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vy
sS'block_loop.thisTrialN'
p2978
I0
sg39
F0.94965172450247337
sg34
g753
(S'\x07\xdf\x07\x0c\x12;\x12\x05\xb1\x08'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1951
sS'block_loop.thisIndex'
p2982
g889
sg38
S'left'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1905
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1958
sS'block_loop.thisRepN'
p2988
I0
sg907
g1905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g1899
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vy
sS'block_loop.thisTrialN'
p2991
I0
sg39
F1.3668727163676522
sg34
g753
(S'\x07\xdf\x07\x0c\x12;\x18\x05Kx'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g1296
sS'block_loop.thisIndex'
p2995
g889
sg38
S'left'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g1306
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g1304
sS'block_loop.thisRepN'
p3001
I0
sg907
g1306
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g1300
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vy
sS'block_loop.thisTrialN'
p3004
I0
sg39
F0.78305709255073452
sg34
g753
(S'\x07\xdf\x07\x0c\x12;\x1e\x0bVX'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1033
sS'block_loop.thisIndex'
p3008
g889
sg38
S'left'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g1037
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1041
sS'block_loop.thisRepN'
p3014
I0
sg907
g1043
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g1037
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vy
sS'block_loop.thisTrialN'
p3017
I0
sg39
F0.73333660245407373
sg34
g753
(S'\x07\xdf\x07\x0c\x12;$\x08\x93P'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1108
sS'block_loop.thisIndex'
p3021
g889
sg38
S'right'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1116
sS'block_loop.thisRepN'
p3027
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vy
sS'block_loop.thisTrialN'
p3030
I0
sg39
F0.76664115991661674
sg34
g753
(S'\x07\xdf\x07\x0c\x12;*\x05\x18\xb0'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1401
sS'block_loop.thisIndex'
p3034
g889
sg38
S'right'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1043
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1408
sS'block_loop.thisRepN'
p3040
I0
sg907
g1043
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g1037
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vy
sS'block_loop.thisTrialN'
p3043
I0
sg39
F1.0331392007210525
sg34
g753
(S'\x07\xdf\x07\x0c\x12;0\x02\x17('
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g1787
sS'block_loop.thisIndex'
p3047
g889
sg38
S'right'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1223
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g1794
sS'block_loop.thisRepN'
p3053
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vy
sS'block_loop.thisTrialN'
p3056
I0
sg39
F1.2998664601800556
sg34
g753
(S'\x07\xdf\x07\x0c\x12;6\x03$\xb0'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g1352
sS'block_loop.thisIndex'
p3060
g889
sg38
S'right'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g1356
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g1360
sS'block_loop.thisRepN'
p3066
I0
sg907
g1356
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g1363
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vy
sS'block_loop.thisTrialN'
p3069
I0
sg39
F1.3336015153508924
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x00\x00\x089x'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1718
sS'block_loop.thisIndex'
p3073
g889
sg38
S'right'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1476
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1725
sS'block_loop.thisRepN'
p3079
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vy
sS'block_loop.thisTrialN'
p3082
I0
sg39
F0.96661590024450561
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x00\x06\r\xcb@'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g896
sS'block_loop.thisIndex'
p3086
g889
sg38
S'right'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g905
sS'block_loop.thisRepN'
p3092
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vy
sS'block_loop.thisTrialN'
p3095
I0
sg39
F0.8666711522055266
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x00\x0c\r\xa8\x18'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g950
sS'block_loop.thisIndex'
p3099
g889
sg38
S'left'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g958
sS'block_loop.thisRepN'
p3105
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vy
sS'block_loop.thisTrialN'
p3108
I0
sg39
F0.98327502132815425
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x00\x12\x0c\x11\xd8'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1236
sS'block_loop.thisIndex'
p3112
g889
sg38
S'left'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1243
sS'block_loop.thisRepN'
p3118
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vy
sS'block_loop.thisTrialN'
p3121
I0
sg39
F0.88329606154366047
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x00\x18\x0cg\xc8'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1802
sS'block_loop.thisIndex'
p3125
g889
sg38
S'right'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1300
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1809
sS'block_loop.thisRepN'
p3131
I0
sg907
g1306
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g1300
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vy
sS'block_loop.thisTrialN'
p3134
I0
sg39
F0.98295485647031455
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x00\x1e\x0b\x10\x08'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g984
sS'block_loop.thisIndex'
p3138
g889
sg38
S'left'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g992
sS'block_loop.thisRepN'
p3144
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vy
sS'block_loop.thisTrialN'
p3147
I0
sg39
F0.81642152055064798
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x00$\x0be\xf8'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g1369
sS'block_loop.thisIndex'
p3151
g889
sg38
S'left'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1379
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g1377
sS'block_loop.thisRepN'
p3157
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g1373
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vy
sS'block_loop.thisTrialN'
p3160
I0
sg39
F1.4665942328138044
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x00*\t\x1c\x08'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1951
sS'block_loop.thisIndex'
p3164
g889
sg38
S'left'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g1905
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1958
sS'block_loop.thisRepN'
p3170
I0
sg907
g1905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g1899
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vy
sS'block_loop.thisTrialN'
p3173
I0
sg39
F1.2832868813929963
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x001\x01\x8ep'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1457
sS'block_loop.thisIndex'
p3177
g889
sg38
S'right'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1379
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1464
sS'block_loop.thisRepN'
p3183
I0
sg907
g1379
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g1373
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vy
sS'block_loop.thisTrialN'
p3186
I0
sg39
F1.4333181851361587
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x007\x06h\xa0'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g1416
sS'block_loop.thisIndex'
p3190
g889
sg38
S'right'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g1061
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g1423
sS'block_loop.thisRepN'
p3196
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vy
sS'block_loop.thisTrialN'
p3199
I0
sg39
F0.88328921919674031
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x01\x01\ri\x98'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1386
sS'block_loop.thisIndex'
p3203
g889
sg38
S'left'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1393
sS'block_loop.thisRepN'
p3209
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vy
sS'block_loop.thisTrialN'
p3212
I0
sg39
F0.83331755792096374
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x01\x07\x0c\x11\xd8'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1759
sS'block_loop.thisIndex'
p3216
g889
sg38
S'right'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1766
sS'block_loop.thisRepN'
p3222
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vy
sS'block_loop.thisTrialN'
p3225
I0
sg39
F1.6329328469182656
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x01\r\n\x06h'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g916
sS'block_loop.thisIndex'
p3229
g889
sg38
S'right'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g924
sS'block_loop.thisRepN'
p3235
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vy
sS'block_loop.thisTrialN'
p3238
I0
sg39
F1.0332435465279559
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x01\x14\x05\x18\xb0'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1787
sS'block_loop.thisIndex'
p3242
g889
sg38
S'right'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1223
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1794
sS'block_loop.thisRepN'
p3248
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vy
sS'block_loop.thisTrialN'
p3251
I0
sg39
F1.1832705737979268
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x01\x1a\x06"P'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1296
sS'block_loop.thisIndex'
p3255
g889
sg38
S'left'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g1306
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1304
sS'block_loop.thisRepN'
p3261
I0
sg907
g1306
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g1300
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vy
sS'block_loop.thisTrialN'
p3264
I0
sg39
F0.9002211788938439
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x01 \tR\xb8'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g967
sS'block_loop.thisIndex'
p3268
g889
sg38
S'right'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g975
sS'block_loop.thisRepN'
p3274
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vy
sS'block_loop.thisTrialN'
p3277
I0
sg39
F0.95004002773566754
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x01&\x08t\x10'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g1787
sS'block_loop.thisIndex'
p3281
g889
sg38
S'right'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g1223
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g1794
sS'block_loop.thisRepN'
p3287
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vy
sS'block_loop.thisTrialN'
p3290
I0
sg39
F0.76655905174266081
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x01,\x08\x12h'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g1202
sS'block_loop.thisIndex'
p3294
g889
sg38
S'right'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g1210
sS'block_loop.thisRepN'
p3300
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vy
sS'block_loop.thisTrialN'
p3303
I0
sg39
F0.79991008014621912
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x012\x05\x10\xe0'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1556
sS'block_loop.thisIndex'
p3307
g889
sg38
S'left'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g1356
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1563
sS'block_loop.thisRepN'
p3313
I0
sg907
g1356
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g1363
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vy
sS'block_loop.thisTrialN'
p3316
I0
sg39
F0.93328368829679675
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x018\x02\x8cX'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g984
sS'block_loop.thisIndex'
p3320
g889
sg38
S'left'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g992
sS'block_loop.thisRepN'
p3326
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vy
sS'block_loop.thisTrialN'
p3329
I0
sg39
F0.79994315149451722
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x02\x02\x01\xec0'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g1142
sS'block_loop.thisIndex'
p3333
g889
sg38
S'right'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g1150
sS'block_loop.thisRepN'
p3339
I0
sg907
g1146
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vy
sS'block_loop.thisTrialN'
p3342
I0
sg39
F1.2166846088221064
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x02\x07\x0e\xa6\x00'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g1584
sS'block_loop.thisIndex'
p3346
g889
sg38
S'left'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g1591
sS'block_loop.thisRepN'
p3352
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vy
sS'block_loop.thisTrialN'
p3355
I0
sg39
F1.649820046251989
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x02\x0e\x03K\xc0'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g1759
sS'block_loop.thisIndex'
p3359
g889
sg38
S'right'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1255
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g1766
sS'block_loop.thisRepN'
p3365
I0
sg907
g1255
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g1262
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vy
sS'block_loop.thisTrialN'
p3368
I0
sg39
F1.7163396404575906
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x02\x14\r\xa0H'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1187
sS'block_loop.thisIndex'
p3372
g889
sg38
S'left'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1194
sS'block_loop.thisRepN'
p3378
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vy
sS'block_loop.thisTrialN'
p3381
I0
sg39
F1.6000077546596003
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x02\x1b\t\xe3@'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g1108
sS'block_loop.thisIndex'
p3385
g889
sg38
S'right'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g1116
sS'block_loop.thisRepN'
p3391
I0
sg907
g1112
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g1119
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vy
sS'block_loop.thisTrialN'
p3394
I0
sg39
F0.91660033390508033
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x02"\x04=\xf0'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g1703
sS'block_loop.thisIndex'
p3398
g889
sg38
S'right'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g1710
sS'block_loop.thisRepN'
p3404
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vy
sS'block_loop.thisTrialN'
p3407
I0
sg39
F1.9667698530720372
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x02(\x03\x9d\xc8'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g1541
sS'block_loop.thisIndex'
p3411
g889
sg38
S'left'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g1548
sS'block_loop.thisRepN'
p3417
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vy
sS'block_loop.thisTrialN'
p3420
I0
sg39
F1.1666105974290986
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x02/\x03r\xd0'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1895
sS'block_loop.thisIndex'
p3424
g889
sg38
S'right'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1905
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1903
sS'block_loop.thisRepN'
p3430
I0
sg907
g1905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g1899
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vy
sS'block_loop.thisTrialN'
p3433
I0
sg39
F1.2165734206719208
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x025\x06\x9fP'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g1202
sS'block_loop.thisIndex'
p3437
g889
sg38
S'right'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g1210
sS'block_loop.thisRepN'
p3443
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vy
sS'block_loop.thisTrialN'
p3446
I0
sg39
F0.6333257117184985
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x02;\nH\xd0'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g1416
sS'block_loop.thisIndex'
p3450
g889
sg38
S'right'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g1061
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g1423
sS'block_loop.thisRepN'
p3456
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vy
sS'block_loop.thisTrialN'
p3459
I0
sg39
F0.69992855448435876
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x03\x05\x05b\xe8'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g967
sS'block_loop.thisIndex'
p3463
g889
sg38
S'right'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g975
sS'block_loop.thisRepN'
p3469
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vy
sS'block_loop.thisTrialN'
p3472
I0
sg39
F0.76655563056920073
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x03\x0b\x010\xb0'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g1401
sS'block_loop.thisIndex'
p3476
g889
sg38
S'right'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1043
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g1408
sS'block_loop.thisRepN'
p3482
I0
sg907
g1043
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g1037
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vy
sS'block_loop.thisTrialN'
p3485
I0
sg39
F0.98347373450815212
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x03\x10\rqh'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1268
sS'block_loop.thisIndex'
p3489
g889
sg38
S'left'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1129
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1275
sS'block_loop.thisRepN'
p3495
I0
sg907
g1129
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g1136
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vy
sS'block_loop.thisTrialN'
p3498
I0
sg39
F0.98328899111947976
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x03\x16\r\xc7X'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g1895
sS'block_loop.thisIndex'
p3502
g889
sg38
S'right'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1905
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g1903
sS'block_loop.thisRepN'
p3508
I0
sg907
g1905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g1899
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vy
sS'block_loop.thisTrialN'
p3511
I0
sg39
F0.99995980120729655
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x03\x1c\x0e\x96`'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g2057
sS'block_loop.thisIndex'
p3515
g889
sg38
S'left'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1213
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g2064
sS'block_loop.thisRepN'
p3521
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vy
sS'block_loop.thisTrialN'
p3524
I0
sg39
F1.0999641346934368
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x03"\x0e\xe8h'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g916
sS'block_loop.thisIndex'
p3528
g889
sg38
S'right'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g924
sS'block_loop.thisRepN'
p3534
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g920
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vy
sS'block_loop.thisTrialN'
p3537
I0
sg39
F1.2166190363241185
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x03)\x01\xa5\xe0'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g1787
sS'block_loop.thisIndex'
p3541
g889
sg38
S'right'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g1223
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g1794
sS'block_loop.thisRepN'
p3547
I0
sg907
g1223
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g1230
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vy
sS'block_loop.thisTrialN'
p3550
I0
sg39
F0.85000119741016533
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x03/\x05\x8d\xe0'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1802
sS'block_loop.thisIndex'
p3554
g889
sg38
S'right'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g1306
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1809
sS'block_loop.thisRepN'
p3560
I0
sg907
g1306
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g1300
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vy
sS'block_loop.thisTrialN'
p3563
I0
sg39
F0.73308742695735418
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x035\x03\xbd\x08'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1718
sS'block_loop.thisIndex'
p3567
g889
sg38
S'right'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1476
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1725
sS'block_loop.thisRepN'
p3573
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vy
sS'block_loop.thisTrialN'
p3576
I0
sg39
F0.8833160183930886
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x03;\x00Bh'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1187
sS'block_loop.thisIndex'
p3580
g889
sg38
S'left'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1194
sS'block_loop.thisRepN'
p3586
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vy
sS'block_loop.thisTrialN'
p3589
I0
sg39
F1.0665697714212001
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x04\x04\x0e,\xe8'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g1718
sS'block_loop.thisIndex'
p3593
g889
sg38
S'right'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g1483
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1725
sS'block_loop.thisRepN'
p3599
I0
sg907
g1476
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g1483
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vy
sS'block_loop.thisTrialN'
p3602
I0
sg39
F0.79988014487753389
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x04\x0b\x00qH'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1703
sS'block_loop.thisIndex'
p3606
g889
sg38
S'right'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1710
sS'block_loop.thisRepN'
p3612
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vy
sS'block_loop.thisTrialN'
p3615
I0
sg39
F0.69995307289718767
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x04\x10\r+\x18'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F163.46277905374882
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vy
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vy
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'36-fig_rolls.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'left'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'36-fig_rolls.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'34-hula_hoops_bbq_beef_redo.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'34-hula_hoops_bbq_beef_redo.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vy
sS'block_loop.thisTrialN'
p3650
I0
sg39
F1.199840174162091
sg34
g753
(S'\x07\xdf\x07\x0c\x13\t\x17\x06h\xa0'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'26-walkers_smoky_bacon.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'right'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'44-crunch.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'44-crunch.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
S'26-walkers_smoky_bacon.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vy
sS'block_loop.thisTrialN'
p3667
I0
sg39
F0.99998289412906161
sg34
g753
(S'\x07\xdf\x07\x0c\x13\t\x1d\t\xd3\xa0'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'40-sardines.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'right'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'5-pineapple.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'5-pineapple.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3681
I1
sg3647
S'40-sardines.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vy
sS'block_loop.thisTrialN'
p3684
I0
sg39
F1.0831909744883887
sg34
g753
(S'\x07\xdf\x07\x0c\x13\t#\nd('
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'16-skips_prawn.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'right'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'42-mrkipling_lemon_slices.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3698
I1
sg3647
S'16-skips_prawn.png'
p3699
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vy
sS'block_loop.thisTrialN'
p3701
I0
sg39
F0.999738565296866
sg34
g753
(S'\x07\xdf\x07\x0c\x13\t)\x0c%`'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'41-peanuts_redo.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'right'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'45-chewy_nougat_redo.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'45-chewy_nougat_redo.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3715
I1
sg3647
S'41-peanuts_redo.png'
p3716
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vy
sS'block_loop.thisTrialN'
p3718
I0
sg39
F0.89994719988317229
sg34
g753
(S'\x07\xdf\x07\x0c\x13\t/\x0c\xb9\xd0'
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
S'7-olives.png'
p3722
sS'block_loop.thisIndex'
p3723
g3627
sg38
S'right'
p3724
sg59
g63
sS'trial_loop.thisN'
p3725
I5
sg33
S'22-daim.png'
p3726
sg64
g65
sS'trial_loop.thisIndex'
p3727
g60
(g99
S'\x05\x00\x00\x00'
tRp3728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3729
I0
sg3642
S'22-daim.png'
p3730
sS'block_loop.thisRepN'
p3731
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3732
I1
sg3647
S'7-olives.png'
p3733
sg55
g11
sS'block_loop.thisTrial'
p3734
Nsg70
Vy
sS'block_loop.thisTrialN'
p3735
I0
sg39
F1.0000153952823894
sg34
g753
(S'\x07\xdf\x07\x0c\x13\t5\x0b\xa0\x90'
tRp3736
sa(dp3737
S'trial_loop.thisTrialN'
p3738
I6
sg3633
S'45-chewy_nougat_redo.png'
p3739
sS'block_loop.thisIndex'
p3740
g3627
sg38
S'left'
p3741
sg59
g63
sS'trial_loop.thisN'
p3742
I6
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p3743
g60
(g99
S'\x06\x00\x00\x00'
tRp3744
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3745
I0
sg3642
S'41-peanuts_redo.png'
p3746
sS'block_loop.thisRepN'
p3747
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3748
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p3749
Nsg70
Vy
sS'block_loop.thisTrialN'
p3750
I0
sg39
F0.9998682848054159
sg34
g753
(S'\x07\xdf\x07\x0c\x13\t;\x0c1\x18'
tRp3751
sa(dp3752
S'trial_loop.thisTrialN'
p3753
I7
sg3633
S'25-kitkat.png'
p3754
sS'block_loop.thisIndex'
p3755
g3627
sg38
S'left'
p3756
sg59
g63
sS'trial_loop.thisN'
p3757
I7
sg33
S'31-hobnobs.png'
p3758
sg64
g65
sS'trial_loop.thisIndex'
p3759
g60
(g99
S'\x07\x00\x00\x00'
tRp3760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3761
I0
sg3642
S'31-hobnobs.png'
p3762
sS'block_loop.thisRepN'
p3763
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3764
I1
sg3647
S'25-kitkat.png'
p3765
sg55
g11
sS'block_loop.thisTrial'
p3766
Nsg70
Vy
sS'block_loop.thisTrialN'
p3767
I0
sg39
F2.7831446175805468
sg34
g753
(S'\x07\xdf\x07\x0c\x13\n\x05\x0c\x83 '
tRp3768
sa(dp3769
S'trial_loop.thisTrialN'
p3770
I8
sg3633
S'44-crunch.png'
p3771
sS'block_loop.thisIndex'
p3772
g3627
sg38
S'left'
p3773
sg59
g63
sS'trial_loop.thisN'
p3774
I8
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p3775
g60
(g99
S'\x08\x00\x00\x00'
tRp3776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3777
I0
sg3642
S'26-walkers_smoky_bacon.png'
p3778
sS'block_loop.thisRepN'
p3779
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3780
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p3781
Nsg70
Vy
sS'block_loop.thisTrialN'
p3782
I0
sg39
F0.71666835824726149
sg34
g753
(S'\x07\xdf\x07\x0c\x13\n\r\t\xb4`'
tRp3783
sa(dp3784
S'trial_loop.thisTrialN'
p3785
I9
sg3633
S'51-mars.png'
p3786
sS'block_loop.thisIndex'
p3787
g3627
sg38
S'left'
p3788
sg59
g63
sS'trial_loop.thisN'
p3789
I9
sg33
S'51-mars.png'
p3790
sg64
g65
sS'trial_loop.thisIndex'
p3791
g60
(g99
S'\t\x00\x00\x00'
tRp3792
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3793
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p3794
sS'block_loop.thisRepN'
p3795
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3796
I1
sg3647
S'27-hartleys_raspberries_jelly.png'
p3797
sg55
g11
sS'block_loop.thisTrial'
p3798
Nsg70
Vy
sS'block_loop.thisTrialN'
p3799
I0
sg39
F0.81663905019013328
sg34
g753
(S'\x07\xdf\x07\x0c\x13\n\x13\x05\xfb@'
tRp3800
sa(dp3801
S'trial_loop.thisTrialN'
p3802
I10
sg3633
S'13-mccoys_steak_crisps.png'
p3803
sS'block_loop.thisIndex'
p3804
g3627
sg38
S'right'
p3805
sg59
g63
sS'trial_loop.thisN'
p3806
I10
sg33
S'3-ellas_strawberries_apples.png'
p3807
sg64
g65
sS'trial_loop.thisIndex'
p3808
g60
(g99
S'\n\x00\x00\x00'
tRp3809
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3810
I0
sg3642
S'3-ellas_strawberries_apples.png'
p3811
sS'block_loop.thisRepN'
p3812
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3813
I1
sg3647
S'13-mccoys_steak_crisps.png'
p3814
sg55
g11
sS'block_loop.thisTrial'
p3815
Nsg70
Vy
sS'block_loop.thisTrialN'
p3816
I0
sg39
F0.96668460882210638
sg34
g753
(S'\x07\xdf\x07\x0c\x13\n\x19\x03\xb1P'
tRp3817
sa(dp3818
S'trial_loop.thisTrialN'
p3819
I11
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p3820
sS'block_loop.thisIndex'
p3821
g3627
sg38
S'right'
p3822
sg59
g63
sS'trial_loop.thisN'
p3823
I11
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3824
g60
(g99
S'\x0b\x00\x00\x00'
tRp3825
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3826
I0
sg3642
S'36-fig_rolls.png'
p3827
sS'block_loop.thisRepN'
p3828
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3829
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3830
Nsg70
Vy
sS'block_loop.thisTrialN'
p3831
I0
sg39
F0.84994218216161244
sg34
g753
(S'\x07\xdf\x07\x0c\x13\n\x1f\x03\xc8\xc0'
tRp3832
sa(dp3833
S'trial_loop.thisTrialN'
p3834
I12
sg3633
S'27-hartleys_raspberries_jelly.png'
p3835
sS'block_loop.thisIndex'
p3836
g3627
sg38
S'right'
p3837
sg59
g63
sS'trial_loop.thisN'
p3838
I12
sg33
g3797
sg64
g65
sS'trial_loop.thisIndex'
p3839
g60
(g99
S'\x0c\x00\x00\x00'
tRp3840
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3841
I0
sg3642
S'51-mars.png'
p3842
sS'block_loop.thisRepN'
p3843
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3844
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p3845
Nsg70
Vy
sS'block_loop.thisTrialN'
p3846
I0
sg39
F0.71658339909481583
sg34
g753
(S'\x07\xdf\x07\x0c\x13\n%\x01\xfb\xd0'
tRp3847
sa(dp3848
S'trial_loop.thisTrialN'
p3849
I13
sg3633
S'50-polo.png'
p3850
sS'block_loop.thisIndex'
p3851
g3627
sg38
S'right'
p3852
sg59
g63
sS'trial_loop.thisN'
p3853
I13
sg33
S'48-twix.png'
p3854
sg64
g65
sS'trial_loop.thisIndex'
p3855
g60
(g99
S'\r\x00\x00\x00'
tRp3856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3857
I0
sg3642
S'48-twix.png'
p3858
sS'block_loop.thisRepN'
p3859
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3860
I1
sg3647
S'50-polo.png'
p3861
sg55
g11
sS'block_loop.thisTrial'
p3862
Nsg70
Vy
sS'block_loop.thisTrialN'
p3863
I0
sg39
F0.98325706016476033
sg34
g753
(S'\x07\xdf\x07\x0c\x13\n*\rJX'
tRp3864
sa(dp3865
S'trial_loop.thisTrialN'
p3866
I14
sg3633
S'19-caramello_redo.png'
p3867
sS'block_loop.thisIndex'
p3868
g3627
sg38
S'left'
p3869
sg59
g63
sS'trial_loop.thisN'
p3870
I14
sg33
S'19-caramello_redo.png'
p3871
sg64
g65
sS'trial_loop.thisIndex'
p3872
g60
(g99
S'\x0e\x00\x00\x00'
tRp3873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3874
I0
sg3642
S'30-spaghetti_hoops.png'
p3875
sS'block_loop.thisRepN'
p3876
I1
sg3645
g3871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3877
I1
sg3647
S'30-spaghetti_hoops.png'
p3878
sg55
g11
sS'block_loop.thisTrial'
p3879
Nsg70
Vy
sS'block_loop.thisTrialN'
p3880
I0
sg39
F1.0333208080337499
sg34
g753
(S'\x07\xdf\x07\x0c\x13\n0\r\x9c`'
tRp3881
sa(dp3882
S'trial_loop.thisTrialN'
p3883
I15
sg3633
S'21-nakd_banana_crunch.png'
p3884
sS'block_loop.thisIndex'
p3885
g3627
sg38
S'right'
p3886
sg59
g63
sS'trial_loop.thisN'
p3887
I15
sg33
S'1-treacle_cookies.png'
p3888
sg64
g65
sS'trial_loop.thisIndex'
p3889
g60
(g99
S'\x0f\x00\x00\x00'
tRp3890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3891
I0
sg3642
S'1-treacle_cookies.png'
p3892
sS'block_loop.thisRepN'
p3893
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3894
I1
sg3647
S'21-nakd_banana_crunch.png'
p3895
sg55
g11
sS'block_loop.thisTrial'
p3896
Nsg70
Vy
sS'block_loop.thisTrialN'
p3897
I0
sg39
F1.0833001669525402
sg34
g753
(S'\x07\xdf\x07\x0c\x13\n6\x0e\xa9\xe8'
tRp3898
sa(dp3899
S'trial_loop.thisTrialN'
p3900
I16
sg3633
S'18-mms.png'
p3901
sS'block_loop.thisIndex'
p3902
g3627
sg38
S'right'
p3903
sg59
g63
sS'trial_loop.thisN'
p3904
I16
sg33
S'18-mms.png'
p3905
sg64
g65
sS'trial_loop.thisIndex'
p3906
g60
(g99
S'\x10\x00\x00\x00'
tRp3907
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3908
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p3909
sS'block_loop.thisRepN'
p3910
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3911
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p3912
sg55
g11
sS'block_loop.thisTrial'
p3913
Nsg70
Vy
sS'block_loop.thisTrialN'
p3914
I0
sg39
F1.0666031278669834
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0b\x01\x01(\xe0'
tRp3915
sa(dp3916
S'trial_loop.thisTrialN'
p3917
I17
sg3633
g3739
sS'block_loop.thisIndex'
p3918
g3627
sg38
S'left'
p3919
sg59
g63
sS'trial_loop.thisN'
p3920
I17
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p3921
g60
(g99
S'\x11\x00\x00\x00'
tRp3922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3923
I0
sg3642
g3746
sS'block_loop.thisRepN'
p3924
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3925
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p3926
Nsg70
Vy
sS'block_loop.thisTrialN'
p3927
I0
sg39
F0.63331003133862396
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0b\x07\x02\xab\x98'
tRp3928
sa(dp3929
S'trial_loop.thisTrialN'
p3930
I18
sg3633
S'8-liquorice_catherine_wheels.png'
p3931
sS'block_loop.thisIndex'
p3932
g3627
sg38
S'right'
p3933
sg59
g63
sS'trial_loop.thisN'
p3934
I18
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3935
sg64
g65
sS'trial_loop.thisIndex'
p3936
g60
(g99
S'\x12\x00\x00\x00'
tRp3937
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3938
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p3939
sS'block_loop.thisRepN'
p3940
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3941
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p3942
sg55
g11
sS'block_loop.thisTrial'
p3943
Nsg70
Vy
sS'block_loop.thisTrialN'
p3944
I0
sg39
F1.1667004032424302
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0b\x0c\x0c\xc9p'
tRp3945
sa(dp3946
S'trial_loop.thisTrialN'
p3947
I19
sg3633
S'5-pineapple.png'
p3948
sS'block_loop.thisIndex'
p3949
g3627
sg38
S'left'
p3950
sg59
g63
sS'trial_loop.thisN'
p3951
I19
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p3952
g60
(g99
S'\x13\x00\x00\x00'
tRp3953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3954
I0
sg3642
S'40-sardines.png'
p3955
sS'block_loop.thisRepN'
p3956
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3957
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p3958
Nsg70
Vy
sS'block_loop.thisTrialN'
p3959
I0
sg39
F0.78320961988720228
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0b\x13\x00\xb7\x98'
tRp3960
sa(dp3961
S'trial_loop.thisTrialN'
p3962
I20
sg3633
S'30-spaghetti_hoops.png'
p3963
sS'block_loop.thisIndex'
p3964
g3627
sg38
S'right'
p3965
sg59
g63
sS'trial_loop.thisN'
p3966
I20
sg33
g3871
sg64
g65
sS'trial_loop.thisIndex'
p3967
g60
(g99
S'\x14\x00\x00\x00'
tRp3968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3969
I0
sg3642
S'19-caramello_redo.png'
p3970
sS'block_loop.thisRepN'
p3971
I1
sg3645
g3871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3972
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p3973
Nsg70
Vy
sS'block_loop.thisTrialN'
p3974
I0
sg39
F0.88328066626127111
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0b\x18\r6\xd0'
tRp3975
sa(dp3976
S'trial_loop.thisTrialN'
p3977
I21
sg3633
S'6-sour_patch_kids.png'
p3978
sS'block_loop.thisIndex'
p3979
g3627
sg38
S'right'
p3980
sg59
g63
sS'trial_loop.thisN'
p3981
I21
sg33
S'38-maltesers.png'
p3982
sg64
g65
sS'trial_loop.thisIndex'
p3983
g60
(g99
S'\x15\x00\x00\x00'
tRp3984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3985
I0
sg3642
S'38-maltesers.png'
p3986
sS'block_loop.thisRepN'
p3987
I1
sg3645
g3982
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3988
I1
sg3647
S'6-sour_patch_kids.png'
p3989
sg55
g11
sS'block_loop.thisTrial'
p3990
Nsg70
Vy
sS'block_loop.thisTrialN'
p3991
I0
sg39
F0.86632846462453017
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0b\x1e\x0b\xdf\x10'
tRp3992
sa(dp3993
S'trial_loop.thisTrialN'
p3994
I22
sg3633
g3901
sS'block_loop.thisIndex'
p3995
g3627
sg38
S'left'
p3996
sg59
g63
sS'trial_loop.thisN'
p3997
I22
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p3998
g60
(g99
S'\x16\x00\x00\x00'
tRp3999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4000
I0
sg3642
g3909
sS'block_loop.thisRepN'
p4001
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4002
I1
sg3647
g3912
sg55
g11
sS'block_loop.thisTrial'
p4003
Nsg70
Vy
sS'block_loop.thisTrialN'
p4004
I0
sg39
F1.2999551256034465
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0b$\nL\xb8'
tRp4005
sa(dp4006
S'trial_loop.thisTrialN'
p4007
I23
sg3633
g3820
sS'block_loop.thisIndex'
p4008
g3627
sg38
S'right'
p4009
sg59
g63
sS'trial_loop.thisN'
p4010
I23
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4011
g60
(g99
S'\x17\x00\x00\x00'
tRp4012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4013
I0
sg3642
g3827
sS'block_loop.thisRepN'
p4014
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4015
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4016
Nsg70
Vy
sS'block_loop.thisTrialN'
p4017
I0
sg39
F0.84998608722526114
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0b+\x00#('
tRp4018
sa(dp4019
S'trial_loop.thisTrialN'
p4020
I24
sg3633
g3722
sS'block_loop.thisIndex'
p4021
g3627
sg38
S'right'
p4022
sg59
g63
sS'trial_loop.thisN'
p4023
I24
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4024
g60
(g99
S'\x18\x00\x00\x00'
tRp4025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4026
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4027
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4028
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4029
Nsg70
Vy
sS'block_loop.thisTrialN'
p4030
I0
sg39
F2.7332245590077946
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0b0\r\x94\x90'
tRp4031
sa(dp4032
S'trial_loop.thisTrialN'
p4033
I25
sg3633
S'35-raisins.png'
p4034
sS'block_loop.thisIndex'
p4035
g3627
sg38
S'right'
p4036
sg59
g63
sS'trial_loop.thisN'
p4037
I25
sg33
S'49-yorkie.png'
p4038
sg64
g65
sS'trial_loop.thisIndex'
p4039
g60
(g99
S'\x19\x00\x00\x00'
tRp4040
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4041
I0
sg3642
S'49-yorkie.png'
p4042
sS'block_loop.thisRepN'
p4043
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4044
I1
sg3647
S'35-raisins.png'
p4045
sg55
g11
sS'block_loop.thisTrial'
p4046
Nsg70
Vy
sS'block_loop.thisTrialN'
p4047
I0
sg39
F0.81689620842735167
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0b8\n\x0e8'
tRp4048
sa(dp4049
S'trial_loop.thisTrialN'
p4050
I26
sg3633
g3754
sS'block_loop.thisIndex'
p4051
g3627
sg38
S'right'
p4052
sg59
g63
sS'trial_loop.thisN'
p4053
I26
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4054
g60
(g99
S'\x1a\x00\x00\x00'
tRp4055
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4056
I0
sg3642
g3762
sS'block_loop.thisRepN'
p4057
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4058
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4059
Nsg70
Vy
sS'block_loop.thisTrialN'
p4060
I0
sg39
F3.6832782714409404
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0c\x02\x07\xc4H'
tRp4061
sa(dp4062
S'trial_loop.thisTrialN'
p4063
I27
sg3633
S'33-ambrosia_rice.png'
p4064
sS'block_loop.thisIndex'
p4065
g3627
sg38
S'right'
p4066
sg59
g63
sS'trial_loop.thisN'
p4067
I27
sg33
S'23-crunchie_redo.png'
p4068
sg64
g65
sS'trial_loop.thisIndex'
p4069
g60
(g99
S'\x1b\x00\x00\x00'
tRp4070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4071
I0
sg3642
S'23-crunchie_redo.png'
p4072
sS'block_loop.thisRepN'
p4073
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4074
I1
sg3647
S'33-ambrosia_rice.png'
p4075
sg55
g11
sS'block_loop.thisTrial'
p4076
Nsg70
Vy
sS'block_loop.thisTrialN'
p4077
I0
sg39
F0.96665068218499073
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0c\x0b\x03~\x88'
tRp4078
sa(dp4079
S'trial_loop.thisTrialN'
p4080
I28
sg3633
g3978
sS'block_loop.thisIndex'
p4081
g3627
sg38
S'right'
p4082
sg59
g63
sS'trial_loop.thisN'
p4083
I28
sg33
g3989
sg64
g65
sS'trial_loop.thisIndex'
p4084
g60
(g99
S'\x1c\x00\x00\x00'
tRp4085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4086
I0
sg3642
g3986
sS'block_loop.thisRepN'
p4087
I1
sg3645
g3982
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4088
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p4089
Nsg70
Vy
sS'block_loop.thisTrialN'
p4090
I0
sg39
F0.78305424157224479
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0c\x11\x03Wx'
tRp4091
sa(dp4092
S'trial_loop.thisTrialN'
p4093
I29
sg3633
S'48-twix.png'
p4094
sS'block_loop.thisIndex'
p4095
g3627
sg38
S'left'
p4096
sg59
g63
sS'trial_loop.thisN'
p4097
I29
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4098
g60
(g99
S'\x1d\x00\x00\x00'
tRp4099
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4100
I0
sg3642
S'50-polo.png'
p4101
sS'block_loop.thisRepN'
p4102
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4103
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4104
Nsg70
Vy
sS'block_loop.thisTrialN'
p4105
I0
sg39
F1.0166306112951133
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0c\x17\x00\x94p'
tRp4106
sa(dp4107
S'trial_loop.thisTrialN'
p4108
I30
sg3633
g3963
sS'block_loop.thisIndex'
p4109
g3627
sg38
S'right'
p4110
sg59
g63
sS'trial_loop.thisN'
p4111
I30
sg33
g3871
sg64
g65
sS'trial_loop.thisIndex'
p4112
g60
(g99
S'\x1e\x00\x00\x00'
tRp4113
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4114
I0
sg3642
g3970
sS'block_loop.thisRepN'
p4115
I1
sg3645
g3871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4116
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p4117
Nsg70
Vy
sS'block_loop.thisTrialN'
p4118
I0
sg39
F0.69983618279002258
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0c\x1d\x01cx'
tRp4119
sa(dp4120
S'trial_loop.thisTrialN'
p4121
I31
sg3633
g3803
sS'block_loop.thisIndex'
p4122
g3627
sg38
S'right'
p4123
sg59
g63
sS'trial_loop.thisN'
p4124
I31
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p4125
g60
(g99
S'\x1f\x00\x00\x00'
tRp4126
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4127
I0
sg3642
g3811
sS'block_loop.thisRepN'
p4128
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4129
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p4130
Nsg70
Vy
sS'block_loop.thisTrialN'
p4131
I0
sg39
F0.71663243592411163
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0c"\x0c\xb2\x00'
tRp4132
sa(dp4133
S'trial_loop.thisTrialN'
p4134
I32
sg3633
S'31-hobnobs.png'
p4135
sS'block_loop.thisIndex'
p4136
g3627
sg38
S'left'
p4137
sg59
g63
sS'trial_loop.thisN'
p4138
I32
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4139
g60
(g99
S' \x00\x00\x00'
tRp4140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4141
I0
sg3642
S'25-kitkat.png'
p4142
sS'block_loop.thisRepN'
p4143
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4144
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4145
Nsg70
Vy
sS'block_loop.thisTrialN'
p4146
I0
sg39
F2.016960469474725
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0c(\x08\xbeH'
tRp4147
sa(dp4148
S'trial_loop.thisTrialN'
p4149
I33
sg3633
S'4-corn.png'
p4150
sS'block_loop.thisIndex'
p4151
g3627
sg38
S'right'
p4152
sg59
g63
sS'trial_loop.thisN'
p4153
I33
sg33
S'10-bounty_redo.png'
p4154
sg64
g65
sS'trial_loop.thisIndex'
p4155
g60
(g99
S'!\x00\x00\x00'
tRp4156
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4157
I0
sg3642
S'10-bounty_redo.png'
p4158
sS'block_loop.thisRepN'
p4159
I1
sg3645
g4154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4160
I1
sg3647
S'4-corn.png'
p4161
sg55
g11
sS'block_loop.thisTrial'
p4162
Nsg70
Vy
sS'block_loop.thisTrialN'
p4163
I0
sg39
F0.83332611085279495
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0c/\t\x85\x80'
tRp4164
sa(dp4165
S'trial_loop.thisTrialN'
p4166
I34
sg3633
g3705
sS'block_loop.thisIndex'
p4167
g3627
sg38
S'right'
p4168
sg59
g63
sS'trial_loop.thisN'
p4169
I34
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p4170
g60
(g99
S'"\x00\x00\x00'
tRp4171
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4172
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4173
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4174
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4175
Nsg70
Vy
sS'block_loop.thisTrialN'
p4176
I0
sg39
F0.78326521396229509
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0c5\x07z\x10'
tRp4177
sa(dp4178
S'trial_loop.thisTrialN'
p4179
I35
sg3633
g3671
sS'block_loop.thisIndex'
p4180
g3627
sg38
S'right'
p4181
sg59
g63
sS'trial_loop.thisN'
p4182
I35
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4183
g60
(g99
S'#\x00\x00\x00'
tRp4184
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4185
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4186
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4187
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4188
Nsg70
Vy
sS'block_loop.thisTrialN'
p4189
I0
sg39
F0.76661179483926389
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0c;\x04\xb3 '
tRp4190
sa(dp4191
S'trial_loop.thisTrialN'
p4192
I36
sg3633
S'2-steamed_puddings.png'
p4193
sS'block_loop.thisIndex'
p4194
g3627
sg38
S'left'
p4195
sg59
g63
sS'trial_loop.thisN'
p4196
I36
sg33
S'2-steamed_puddings.png'
p4197
sg64
g65
sS'trial_loop.thisIndex'
p4198
g60
(g99
S'$\x00\x00\x00'
tRp4199
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4200
I0
sg3642
S'20-fruit_pastilles.png'
p4201
sS'block_loop.thisRepN'
p4202
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4203
I1
sg3647
S'20-fruit_pastilles.png'
p4204
sg55
g11
sS'block_loop.thisTrial'
p4205
Nsg70
Vy
sS'block_loop.thisTrialN'
p4206
I0
sg39
F1.8166324929406983
sg34
g753
(S'\x07\xdf\x07\x0c\x13\r\x05\x01\xb5\x80'
tRp4207
sa(dp4208
S'trial_loop.thisTrialN'
p4209
I37
sg3633
g3705
sS'block_loop.thisIndex'
p4210
g3627
sg38
S'right'
p4211
sg59
g63
sS'trial_loop.thisN'
p4212
I37
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4213
g60
(g99
S'%\x00\x00\x00'
tRp4214
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4215
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4216
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4217
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4218
Nsg70
Vy
sS'block_loop.thisTrialN'
p4219
I0
sg39
F1.3335208326680004
sg34
g753
(S'\x07\xdf\x07\x0c\x13\r\x0b\x0e\xa6\x00'
tRp4220
sa(dp4221
S'trial_loop.thisTrialN'
p4222
I38
sg3633
S'49-yorkie.png'
p4223
sS'block_loop.thisIndex'
p4224
g3627
sg38
S'left'
p4225
sg59
g63
sS'trial_loop.thisN'
p4226
I38
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p4227
g60
(g99
S'&\x00\x00\x00'
tRp4228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4229
I0
sg3642
S'35-raisins.png'
p4230
sS'block_loop.thisRepN'
p4231
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4232
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p4233
Nsg70
Vy
sS'block_loop.thisTrialN'
p4234
I0
sg39
F0.83325113012688234
sg34
g753
(S'\x07\xdf\x07\x0c\x13\r\x12\x04\xf5\x88'
tRp4235
sa(dp4236
S'trial_loop.thisTrialN'
p4237
I39
sg3633
g3931
sS'block_loop.thisIndex'
p4238
g3627
sg38
S'right'
p4239
sg59
g63
sS'trial_loop.thisN'
p4240
I39
sg33
g3935
sg64
g65
sS'trial_loop.thisIndex'
p4241
g60
(g99
S"'\x00\x00\x00"
tRp4242
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4243
I0
sg3642
g3939
sS'block_loop.thisRepN'
p4244
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4245
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p4246
Nsg70
Vy
sS'block_loop.thisTrialN'
p4247
I0
sg39
F1.5666361992116435
sg34
g753
(S'\x07\xdf\x07\x0c\x13\r\x18\x02\xe60'
tRp4248
sa(dp4249
S'trial_loop.thisTrialN'
p4250
I40
sg3633
g3634
sS'block_loop.thisIndex'
p4251
g3627
sg38
S'left'
p4252
sg59
g63
sS'trial_loop.thisN'
p4253
I40
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4254
g60
(g99
S'(\x00\x00\x00'
tRp4255
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4256
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4257
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4258
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4259
Nsg70
Vy
sS'block_loop.thisTrialN'
p4260
I0
sg39
F0.74996835414276575
sg34
g753
(S'\x07\xdf\x07\x0c\x13\r\x1e\x0c\n\x08'
tRp4261
sa(dp4262
S'trial_loop.thisTrialN'
p4263
I41
sg3633
g4064
sS'block_loop.thisIndex'
p4264
g3627
sg38
S'right'
p4265
sg59
g63
sS'trial_loop.thisN'
p4266
I41
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p4267
g60
(g99
S')\x00\x00\x00'
tRp4268
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4269
I0
sg3642
g4072
sS'block_loop.thisRepN'
p4270
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4271
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p4272
Nsg70
Vy
sS'block_loop.thisTrialN'
p4273
I0
sg39
F0.71654605128060211
sg34
g753
(S'\x07\xdf\x07\x0c\x13\r$\x08\xcd\xe8'
tRp4274
sa(dp4275
S'trial_loop.thisTrialN'
p4276
I42
sg3633
S'46-pistachios.png'
p4277
sS'block_loop.thisIndex'
p4278
g3627
sg38
S'left'
p4279
sg59
g63
sS'trial_loop.thisN'
p4280
I42
sg33
S'46-pistachios.png'
p4281
sg64
g65
sS'trial_loop.thisIndex'
p4282
g60
(g99
S'*\x00\x00\x00'
tRp4283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4284
I0
sg3642
S'29-beans.png'
p4285
sS'block_loop.thisRepN'
p4286
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4287
I1
sg3647
S'29-beans.png'
p4288
sg55
g11
sS'block_loop.thisTrial'
p4289
Nsg70
Vy
sS'block_loop.thisTrialN'
p4290
I0
sg39
F1.016657980686432
sg34
g753
(S'\x07\xdf\x07\x0c\x13\r*\x04\xda0'
tRp4291
sa(dp4292
S'trial_loop.thisTrialN'
p4293
I43
sg3633
g3771
sS'block_loop.thisIndex'
p4294
g3627
sg38
S'left'
p4295
sg59
g63
sS'trial_loop.thisN'
p4296
I43
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p4297
g60
(g99
S'+\x00\x00\x00'
tRp4298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4299
I0
sg3642
g3778
sS'block_loop.thisRepN'
p4300
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4301
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4302
Nsg70
Vy
sS'block_loop.thisTrialN'
p4303
I0
sg39
F1.24986685931799
sg34
g753
(S'\x07\xdf\x07\x0c\x13\r0\x05\xa5P'
tRp4304
sa(dp4305
S'trial_loop.thisTrialN'
p4306
I44
sg3633
S'22-daim.png'
p4307
sS'block_loop.thisIndex'
p4308
g3627
sg38
S'left'
p4309
sg59
g63
sS'trial_loop.thisN'
p4310
I44
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4311
g60
(g99
S',\x00\x00\x00'
tRp4312
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4313
I0
sg3642
S'7-olives.png'
p4314
sS'block_loop.thisRepN'
p4315
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4316
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4317
Nsg70
Vy
sS'block_loop.thisTrialN'
p4318
I0
sg39
F0.76665170853448217
sg34
g753
(S'\x07\xdf\x07\x0c\x13\r6\n\x06h'
tRp4319
sa(dp4320
S'trial_loop.thisTrialN'
p4321
I45
sg3633
g4064
sS'block_loop.thisIndex'
p4322
g3627
sg38
S'right'
p4323
sg59
g63
sS'trial_loop.thisN'
p4324
I45
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p4325
g60
(g99
S'-\x00\x00\x00'
tRp4326
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4327
I0
sg3642
g4072
sS'block_loop.thisRepN'
p4328
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4329
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p4330
Nsg70
Vy
sS'block_loop.thisTrialN'
p4331
I0
sg39
F0.63331658858805895
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0e\x00\x07\x04\xe0'
tRp4332
sa(dp4333
S'trial_loop.thisTrialN'
p4334
I46
sg3633
g3884
sS'block_loop.thisIndex'
p4335
g3627
sg38
S'right'
p4336
sg59
g63
sS'trial_loop.thisN'
p4337
I46
sg33
g3888
sg64
g65
sS'trial_loop.thisIndex'
p4338
g60
(g99
S'.\x00\x00\x00'
tRp4339
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4340
I0
sg3642
g3892
sS'block_loop.thisRepN'
p4341
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4342
I1
sg3647
g3895
sg55
g11
sS'block_loop.thisTrial'
p4343
Nsg70
Vy
sS'block_loop.thisTrialN'
p4344
I0
sg39
F0.88326013922051061
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0e\x06\x01\xe0x'
tRp4345
sa(dp4346
S'trial_loop.thisTrialN'
p4347
I47
sg3633
g4150
sS'block_loop.thisIndex'
p4348
g3627
sg38
S'right'
p4349
sg59
g63
sS'trial_loop.thisN'
p4350
I47
sg33
g4154
sg64
g65
sS'trial_loop.thisIndex'
p4351
g60
(g99
S'/\x00\x00\x00'
tRp4352
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4353
I0
sg3642
g4158
sS'block_loop.thisRepN'
p4354
I1
sg3645
g4154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4355
I1
sg3647
g4161
sg55
g11
sS'block_loop.thisTrial'
p4356
Nsg70
Vy
sS'block_loop.thisTrialN'
p4357
I0
sg39
F0.71650442699683481
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0e\x0c\x00\x8c\xa0'
tRp4358
sa(dp4359
S'trial_loop.thisTrialN'
p4360
I48
sg3633
g4223
sS'block_loop.thisIndex'
p4361
g3627
sg38
S'right'
p4362
sg59
g63
sS'trial_loop.thisN'
p4363
I48
sg33
g4045
sg64
g65
sS'trial_loop.thisIndex'
p4364
g60
(g99
S'0\x00\x00\x00'
tRp4365
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4366
I0
sg3642
g4230
sS'block_loop.thisRepN'
p4367
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4368
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p4369
Nsg70
Vy
sS'block_loop.thisTrialN'
p4370
I0
sg39
F0.50040369851558353
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0e\x11\x0c\x15\xc0'
tRp4371
sa(dp4372
S'trial_loop.thisTrialN'
p4373
I49
sg3633
g3901
sS'block_loop.thisIndex'
p4374
g3627
sg38
S'left'
p4375
sg59
g63
sS'trial_loop.thisN'
p4376
I49
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p4377
g60
(g99
S'1\x00\x00\x00'
tRp4378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4379
I0
sg3642
g3909
sS'block_loop.thisRepN'
p4380
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4381
I1
sg3647
g3912
sg55
g11
sS'block_loop.thisTrial'
p4382
Nsg70
Vy
sS'block_loop.thisTrialN'
p4383
I0
sg39
F0.81663049725830206
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0e\x17\x05\t\x10'
tRp4384
sa(dp4385
S'trial_loop.thisTrialN'
p4386
I50
sg3633
g3963
sS'block_loop.thisIndex'
p4387
g3627
sg38
S'right'
p4388
sg59
g63
sS'trial_loop.thisN'
p4389
I50
sg33
g3871
sg64
g65
sS'trial_loop.thisIndex'
p4390
g60
(g99
S'2\x00\x00\x00'
tRp4391
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4392
I0
sg3642
g3970
sS'block_loop.thisRepN'
p4393
I1
sg3645
g3871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4394
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p4395
Nsg70
Vy
sS'block_loop.thisTrialN'
p4396
I0
sg39
F0.79982654648483731
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0e\x1d\x02\xbf '
tRp4397
sa(dp4398
S'trial_loop.thisTrialN'
p4399
I51
sg3633
g4193
sS'block_loop.thisIndex'
p4400
g3627
sg38
S'left'
p4401
sg59
g63
sS'trial_loop.thisN'
p4402
I51
sg33
g4197
sg64
g65
sS'trial_loop.thisIndex'
p4403
g60
(g99
S'3\x00\x00\x00'
tRp4404
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4405
I0
sg3642
g4201
sS'block_loop.thisRepN'
p4406
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4407
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p4408
Nsg70
Vy
sS'block_loop.thisTrialN'
p4409
I0
sg39
F0.84990283866136451
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0e#\x01,\xc8'
tRp4410
sa(dp4411
S'trial_loop.thisTrialN'
p4412
I52
sg3633
g3722
sS'block_loop.thisIndex'
p4413
g3627
sg38
S'right'
p4414
sg59
g63
sS'trial_loop.thisN'
p4415
I52
sg33
g3733
sg64
g65
sS'trial_loop.thisIndex'
p4416
g60
(g99
S'4\x00\x00\x00'
tRp4417
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4418
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4419
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4420
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4421
Nsg70
Vy
sS'block_loop.thisTrialN'
p4422
I0
sg39
F1.7498859608713246
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0e(\x0e\x9e0'
tRp4423
sa(dp4424
S'trial_loop.thisTrialN'
p4425
I53
sg3633
S'43-mrporky_pork_crackles_redo.png'
p4426
sS'block_loop.thisIndex'
p4427
g3627
sg38
S'right'
p4428
sg59
g63
sS'trial_loop.thisN'
p4429
I53
sg33
g3912
sg64
g65
sS'trial_loop.thisIndex'
p4430
g60
(g99
S'5\x00\x00\x00'
tRp4431
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4432
I0
sg3642
S'18-mms.png'
p4433
sS'block_loop.thisRepN'
p4434
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4435
I1
sg3647
g3912
sg55
g11
sS'block_loop.thisTrial'
p4436
Nsg70
Vy
sS'block_loop.thisTrialN'
p4437
I0
sg39
F1.3002978131844429
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0e/\x0bZ@'
tRp4438
sa(dp4439
S'trial_loop.thisTrialN'
p4440
I54
sg3633
g3771
sS'block_loop.thisIndex'
p4441
g3627
sg38
S'left'
p4442
sg59
g63
sS'trial_loop.thisN'
p4443
I54
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4444
g60
(g99
S'6\x00\x00\x00'
tRp4445
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4446
I0
sg3642
g3778
sS'block_loop.thisRepN'
p4447
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4448
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4449
Nsg70
Vy
sS'block_loop.thisTrialN'
p4450
I0
sg39
F0.94998443365693674
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0e6\x010\xb0'
tRp4451
sa(dp4452
S'trial_loop.thisTrialN'
p4453
I55
sg3633
g3688
sS'block_loop.thisIndex'
p4454
g3627
sg38
S'right'
p4455
sg59
g63
sS'trial_loop.thisN'
p4456
I55
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p4457
g60
(g99
S'7\x00\x00\x00'
tRp4458
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4459
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4460
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4461
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4462
Nsg70
Vy
sS'block_loop.thisTrialN'
p4463
I0
sg39
F1.0332210237975232
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0f\x00\x00\xcf\x08'
tRp4464
sa(dp4465
S'trial_loop.thisTrialN'
p4466
I56
sg3633
g3786
sS'block_loop.thisIndex'
p4467
g3627
sg38
S'left'
p4468
sg59
g63
sS'trial_loop.thisN'
p4469
I56
sg33
g3797
sg64
g65
sS'trial_loop.thisIndex'
p4470
g60
(g99
S'8\x00\x00\x00'
tRp4471
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4472
I0
sg3642
g3794
sS'block_loop.thisRepN'
p4473
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4474
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p4475
Nsg70
Vy
sS'block_loop.thisTrialN'
p4476
I0
sg39
F0.99989308831936796
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0f\x06\x01\xd8\xa8'
tRp4477
sa(dp4478
S'trial_loop.thisTrialN'
p4479
I57
sg3633
S'23-crunchie_redo.png'
p4480
sS'block_loop.thisIndex'
p4481
g3627
sg38
S'left'
p4482
sg59
g63
sS'trial_loop.thisN'
p4483
I57
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p4484
g60
(g99
S'9\x00\x00\x00'
tRp4485
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4486
I0
sg3642
S'33-ambrosia_rice.png'
p4487
sS'block_loop.thisRepN'
p4488
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4489
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p4490
Nsg70
Vy
sS'block_loop.thisTrialN'
p4491
I0
sg39
F1.1332989125221502
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0f\x0c\x02i0'
tRp4492
sa(dp4493
S'trial_loop.thisTrialN'
p4494
I58
sg3633
g4277
sS'block_loop.thisIndex'
p4495
g3627
sg38
S'left'
p4496
sg59
g63
sS'trial_loop.thisN'
p4497
I58
sg33
g4281
sg64
g65
sS'trial_loop.thisIndex'
p4498
g60
(g99
S':\x00\x00\x00'
tRp4499
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4500
I0
sg3642
g4285
sS'block_loop.thisRepN'
p4501
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4502
I1
sg3647
g4288
sg55
g11
sS'block_loop.thisTrial'
p4503
Nsg70
Vy
sS'block_loop.thisTrialN'
p4504
I0
sg39
F0.75031018643130665
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0f\x12\x04\xe2\x00'
tRp4505
sa(dp4506
S'trial_loop.thisTrialN'
p4507
I59
sg3633
g3948
sS'block_loop.thisIndex'
p4508
g3627
sg38
S'left'
p4509
sg59
g63
sS'trial_loop.thisN'
p4510
I59
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4511
g60
(g99
S';\x00\x00\x00'
tRp4512
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4513
I0
sg3642
g3955
sS'block_loop.thisRepN'
p4514
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4515
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4516
Nsg70
Vy
sS'block_loop.thisTrialN'
p4517
I0
sg39
F0.76659611445938936
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0f\x18\x01\xa5\xe0'
tRp4518
sa(dp4519
S'trial_loop.thisTrialN'
p4520
I60
sg3633
g4307
sS'block_loop.thisIndex'
p4521
g3627
sg38
S'left'
p4522
sg59
g63
sS'trial_loop.thisN'
p4523
I60
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4524
g60
(g99
S'<\x00\x00\x00'
tRp4525
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4526
I0
sg3642
g4314
sS'block_loop.thisRepN'
p4527
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4528
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4529
Nsg70
Vy
sS'block_loop.thisTrialN'
p4530
I0
sg39
F1.0665184538120229
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0f\x1d\r\xe6\x98'
tRp4531
sa(dp4532
S'trial_loop.thisTrialN'
p4533
I61
sg3633
S'29-beans.png'
p4534
sS'block_loop.thisIndex'
p4535
g3627
sg38
S'right'
p4536
sg59
g63
sS'trial_loop.thisN'
p4537
I61
sg33
g4281
sg64
g65
sS'trial_loop.thisIndex'
p4538
g60
(g99
S'=\x00\x00\x00'
tRp4539
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4540
I0
sg3642
S'46-pistachios.png'
p4541
sS'block_loop.thisRepN'
p4542
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4543
I1
sg3647
g4288
sg55
g11
sS'block_loop.thisTrial'
p4544
Nsg70
Vy
sS'block_loop.thisTrialN'
p4545
I0
sg39
F0.99987227617384633
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0f$\x00*\xf8'
tRp4546
sa(dp4547
S'trial_loop.thisTrialN'
p4548
I62
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p4549
sS'block_loop.thisIndex'
p4550
g3627
sg38
S'left'
p4551
sg59
g63
sS'trial_loop.thisN'
p4552
I62
sg33
g3935
sg64
g65
sS'trial_loop.thisIndex'
p4553
g60
(g99
S'>\x00\x00\x00'
tRp4554
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4555
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p4556
sS'block_loop.thisRepN'
p4557
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4558
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p4559
Nsg70
Vy
sS'block_loop.thisTrialN'
p4560
I0
sg39
F1.4998335028722067
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0f*\x00\xbb\x80'
tRp4561
sa(dp4562
S'trial_loop.thisTrialN'
p4563
I63
sg3633
S'10-bounty_redo.png'
p4564
sS'block_loop.thisIndex'
p4565
g3627
sg38
S'left'
p4566
sg59
g63
sS'trial_loop.thisN'
p4567
I63
sg33
g4154
sg64
g65
sS'trial_loop.thisIndex'
p4568
g60
(g99
S'?\x00\x00\x00'
tRp4569
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4570
I0
sg3642
S'4-corn.png'
p4571
sS'block_loop.thisRepN'
p4572
I1
sg3645
g4154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4573
I1
sg3647
g4161
sg55
g11
sS'block_loop.thisTrial'
p4574
Nsg70
Vy
sS'block_loop.thisTrialN'
p4575
I0
sg39
F0.76658556584152393
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0f0\x08\xae\xa8'
tRp4576
sa(dp4577
S'trial_loop.thisTrialN'
p4578
I64
sg3633
g3820
sS'block_loop.thisIndex'
p4579
g3627
sg38
S'right'
p4580
sg59
g63
sS'trial_loop.thisN'
p4581
I64
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4582
g60
(g99
S'@\x00\x00\x00'
tRp4583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4584
I0
sg3642
g3827
sS'block_loop.thisRepN'
p4585
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4586
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4587
Nsg70
Vy
sS'block_loop.thisTrialN'
p4588
I0
sg39
F1.0998845924004854
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x0f6\x05\xad '
tRp4589
sa(dp4590
S'trial_loop.thisTrialN'
p4591
I65
sg3633
g4564
sS'block_loop.thisIndex'
p4592
g3627
sg38
S'left'
p4593
sg59
g63
sS'trial_loop.thisN'
p4594
I65
sg33
g4154
sg64
g65
sS'trial_loop.thisIndex'
p4595
g60
(g99
S'A\x00\x00\x00'
tRp4596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4597
I0
sg3642
g4571
sS'block_loop.thisRepN'
p4598
I1
sg3645
g4154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4599
I1
sg3647
g4161
sg55
g11
sS'block_loop.thisTrial'
p4600
Nsg70
Vy
sS'block_loop.thisTrialN'
p4601
I0
sg39
F0.69991287410448422
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x10\x00\x07\xac\xd8'
tRp4602
sa(dp4603
S'trial_loop.thisTrialN'
p4604
I66
sg3633
g3654
sS'block_loop.thisIndex'
p4605
g3627
sg38
S'right'
p4606
sg59
g63
sS'trial_loop.thisN'
p4607
I66
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4608
g60
(g99
S'B\x00\x00\x00'
tRp4609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4610
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4611
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4612
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4613
Nsg70
Vy
sS'block_loop.thisTrialN'
p4614
I0
sg39
F1.1330542985888314
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x10\x06\x03\xb58'
tRp4615
sa(dp4616
S'trial_loop.thisTrialN'
p4617
I67
sg3633
g3786
sS'block_loop.thisIndex'
p4618
g3627
sg38
S'left'
p4619
sg59
g63
sS'trial_loop.thisN'
p4620
I67
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p4621
g60
(g99
S'C\x00\x00\x00'
tRp4622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4623
I0
sg3642
g3794
sS'block_loop.thisRepN'
p4624
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4625
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p4626
Nsg70
Vy
sS'block_loop.thisTrialN'
p4627
I0
sg39
F0.66654445473250234
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x10\x0c\x06.\x08'
tRp4628
sa(dp4629
S'trial_loop.thisTrialN'
p4630
I68
sg3633
g4426
sS'block_loop.thisIndex'
p4631
g3627
sg38
S'right'
p4632
sg59
g63
sS'trial_loop.thisN'
p4633
I68
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p4634
g60
(g99
S'D\x00\x00\x00'
tRp4635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4636
I0
sg3642
g4433
sS'block_loop.thisRepN'
p4637
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4638
I1
sg3647
g3912
sg55
g11
sS'block_loop.thisTrial'
p4639
Nsg70
Vy
sS'block_loop.thisTrialN'
p4640
I0
sg39
F1.0999267868792231
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x10\x12\x01\x82\xb8'
tRp4641
sa(dp4642
S'trial_loop.thisTrialN'
p4643
I69
sg3633
g3978
sS'block_loop.thisIndex'
p4644
g3627
sg38
S'right'
p4645
sg59
g63
sS'trial_loop.thisN'
p4646
I69
sg33
g3982
sg64
g65
sS'trial_loop.thisIndex'
p4647
g60
(g99
S'E\x00\x00\x00'
tRp4648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4649
I0
sg3642
g3986
sS'block_loop.thisRepN'
p4650
I1
sg3645
g3982
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4651
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p4652
Nsg70
Vy
sS'block_loop.thisTrialN'
p4653
I0
sg39
F0.89967578675714321
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x10\x18\x03\xc0\xf0'
tRp4654
sa(dp4655
S'trial_loop.thisTrialN'
p4656
I70
sg3633
g4223
sS'block_loop.thisIndex'
p4657
g3627
sg38
S'left'
p4658
sg59
g63
sS'trial_loop.thisN'
p4659
I70
sg33
g4045
sg64
g65
sS'trial_loop.thisIndex'
p4660
g60
(g99
S'F\x00\x00\x00'
tRp4661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4662
I0
sg3642
g4230
sS'block_loop.thisRepN'
p4663
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4664
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p4665
Nsg70
Vy
sS'block_loop.thisTrialN'
p4666
I0
sg39
F0.86659702677206951
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x10\x1e\x02\xa7\xb0'
tRp4667
sa(dp4668
S'trial_loop.thisTrialN'
p4669
I71
sg3633
g4534
sS'block_loop.thisIndex'
p4670
g3627
sg38
S'right'
p4671
sg59
g63
sS'trial_loop.thisN'
p4672
I71
sg33
g4281
sg64
g65
sS'trial_loop.thisIndex'
p4673
g60
(g99
S'G\x00\x00\x00'
tRp4674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4675
I0
sg3642
g4541
sS'block_loop.thisRepN'
p4676
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4677
I1
sg3647
g4288
sg55
g11
sS'block_loop.thisTrial'
p4678
Nsg70
Vy
sS'block_loop.thisTrialN'
p4679
I0
sg39
F0.63338073559862096
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x10$\x01\x15X'
tRp4680
sa(dp4681
S'trial_loop.thisTrialN'
p4682
I72
sg3633
g4150
sS'block_loop.thisIndex'
p4683
g3627
sg38
S'right'
p4684
sg59
g63
sS'trial_loop.thisN'
p4685
I72
sg33
g4154
sg64
g65
sS'trial_loop.thisIndex'
p4686
g60
(g99
S'H\x00\x00\x00'
tRp4687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4688
I0
sg3642
g4158
sS'block_loop.thisRepN'
p4689
I1
sg3645
g4154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4690
I1
sg3647
g4161
sg55
g11
sS'block_loop.thisTrial'
p4691
Nsg70
Vy
sS'block_loop.thisTrialN'
p4692
I0
sg39
F0.6333097462375008
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x10)\x0b30'
tRp4693
sa(dp4694
S'trial_loop.thisTrialN'
p4695
I73
sg3633
S'20-fruit_pastilles.png'
p4696
sS'block_loop.thisIndex'
p4697
g3627
sg38
S'right'
p4698
sg59
g63
sS'trial_loop.thisN'
p4699
I73
sg33
g4197
sg64
g65
sS'trial_loop.thisIndex'
p4700
g60
(g99
S'I\x00\x00\x00'
tRp4701
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4702
I0
sg3642
S'2-steamed_puddings.png'
p4703
sS'block_loop.thisRepN'
p4704
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4705
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p4706
Nsg70
Vy
sS'block_loop.thisTrialN'
p4707
I0
sg39
F0.73326190682564629
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x10/\x06I`'
tRp4708
sa(dp4709
S'trial_loop.thisTrialN'
p4710
I74
sg3633
S'38-maltesers.png'
p4711
sS'block_loop.thisIndex'
p4712
g3627
sg38
S'left'
p4713
sg59
g63
sS'trial_loop.thisN'
p4714
I74
sg33
g3982
sg64
g65
sS'trial_loop.thisIndex'
p4715
g60
(g99
S'J\x00\x00\x00'
tRp4716
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4717
I0
sg3642
S'6-sour_patch_kids.png'
p4718
sS'block_loop.thisRepN'
p4719
I1
sg3645
g3982
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4720
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p4721
Nsg70
Vy
sS'block_loop.thisTrialN'
p4722
I0
sg39
F2.0832836312765721
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x105\x02\x90@'
tRp4723
sa(dp4724
S'trial_loop.thisTrialN'
p4725
I75
sg3633
g4064
sS'block_loop.thisIndex'
p4726
g3627
sg38
S'left'
p4727
sg59
g63
sS'trial_loop.thisN'
p4728
I75
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p4729
g60
(g99
S'K\x00\x00\x00'
tRp4730
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4731
I0
sg3642
g4072
sS'block_loop.thisRepN'
p4732
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4733
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p4734
Nsg70
Vy
sS'block_loop.thisTrialN'
p4735
I0
sg39
F0.74988653106629499
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x11\x00\x04M\x90'
tRp4736
sa(dp4737
S'trial_loop.thisTrialN'
p4738
I76
sg3633
g3754
sS'block_loop.thisIndex'
p4739
g3627
sg38
S'right'
p4740
sg59
g63
sS'trial_loop.thisN'
p4741
I76
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4742
g60
(g99
S'L\x00\x00\x00'
tRp4743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4744
I0
sg3642
g3762
sS'block_loop.thisRepN'
p4745
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4746
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4747
Nsg70
Vy
sS'block_loop.thisTrialN'
p4748
I0
sg39
F1.4332700036029564
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x11\x06\x01\x11p'
tRp4749
sa(dp4750
S'trial_loop.thisTrialN'
p4751
I77
sg3633
g3671
sS'block_loop.thisIndex'
p4752
g3627
sg38
S'right'
p4753
sg59
g63
sS'trial_loop.thisN'
p4754
I77
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4755
g60
(g99
S'M\x00\x00\x00'
tRp4756
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4757
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4758
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4759
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4760
Nsg70
Vy
sS'block_loop.thisTrialN'
p4761
I0
sg39
F0.86656538091119728
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x11\x0c\x08M\x00'
tRp4762
sa(dp4763
S'trial_loop.thisTrialN'
p4764
I78
sg3633
g4480
sS'block_loop.thisIndex'
p4765
g3627
sg38
S'left'
p4766
sg59
g63
sS'trial_loop.thisN'
p4767
I78
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p4768
g60
(g99
S'N\x00\x00\x00'
tRp4769
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4770
I0
sg3642
g4487
sS'block_loop.thisRepN'
p4771
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4772
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p4773
Nsg70
Vy
sS'block_loop.thisTrialN'
p4774
I0
sg39
F0.84976200033997884
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x11\x12\x06\xb6\xc0'
tRp4775
sa(dp4776
S'trial_loop.thisTrialN'
p4777
I79
sg3633
g4135
sS'block_loop.thisIndex'
p4778
g3627
sg38
S'left'
p4779
sg59
g63
sS'trial_loop.thisN'
p4780
I79
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4781
g60
(g99
S'O\x00\x00\x00'
tRp4782
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4783
I0
sg3642
g4142
sS'block_loop.thisRepN'
p4784
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4785
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4786
Nsg70
Vy
sS'block_loop.thisTrialN'
p4787
I0
sg39
F1.3668159818989807
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x11\x18\x04\xe9\xd0'
tRp4788
sa(dp4789
S'trial_loop.thisTrialN'
p4790
I80
sg3633
g3867
sS'block_loop.thisIndex'
p4791
g3627
sg38
S'left'
p4792
sg59
g63
sS'trial_loop.thisN'
p4793
I80
sg33
g3871
sg64
g65
sS'trial_loop.thisIndex'
p4794
g60
(g99
S'P\x00\x00\x00'
tRp4795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4796
I0
sg3642
g3875
sS'block_loop.thisRepN'
p4797
I1
sg3645
g3871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4798
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p4799
Nsg70
Vy
sS'block_loop.thisTrialN'
p4800
I0
sg39
F1.099916808456328
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x11\x1e\n\xf4\xb0'
tRp4801
sa(dp4802
S'trial_loop.thisTrialN'
p4803
I81
sg3633
g3978
sS'block_loop.thisIndex'
p4804
g3627
sg38
S'right'
p4805
sg59
g63
sS'trial_loop.thisN'
p4806
I81
sg33
g3989
sg64
g65
sS'trial_loop.thisIndex'
p4807
g60
(g99
S'Q\x00\x00\x00'
tRp4808
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4809
I0
sg3642
g3986
sS'block_loop.thisRepN'
p4810
I1
sg3645
g3982
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4811
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p4812
Nsg70
Vy
sS'block_loop.thisTrialN'
p4813
I0
sg39
F1.1495851256477181
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x11$\x0c\xf0\x80'
tRp4814
sa(dp4815
S'trial_loop.thisTrialN'
p4816
I82
sg3633
g3754
sS'block_loop.thisIndex'
p4817
g3627
sg38
S'right'
p4818
sg59
g63
sS'trial_loop.thisN'
p4819
I82
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4820
g60
(g99
S'R\x00\x00\x00'
tRp4821
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4822
I0
sg3642
g3762
sS'block_loop.thisRepN'
p4823
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4824
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4825
Nsg70
Vy
sS'block_loop.thisTrialN'
p4826
I0
sg39
F1.399857964264811
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x11+\x00\xa4\x10'
tRp4827
sa(dp4828
S'trial_loop.thisTrialN'
p4829
I83
sg3633
g3771
sS'block_loop.thisIndex'
p4830
g3627
sg38
S'left'
p4831
sg59
g63
sS'trial_loop.thisN'
p4832
I83
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p4833
g60
(g99
S'S\x00\x00\x00'
tRp4834
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4835
I0
sg3642
g3778
sS'block_loop.thisRepN'
p4836
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4837
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4838
Nsg70
Vy
sS'block_loop.thisTrialN'
p4839
I0
sg39
F1.1833116278830857
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x111\x07(\x08'
tRp4840
sa(dp4841
S'trial_loop.thisTrialN'
p4842
I84
sg3633
S'1-treacle_cookies.png'
p4843
sS'block_loop.thisIndex'
p4844
g3627
sg38
S'left'
p4845
sg59
g63
sS'trial_loop.thisN'
p4846
I84
sg33
g3888
sg64
g65
sS'trial_loop.thisIndex'
p4847
g60
(g99
S'T\x00\x00\x00'
tRp4848
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4849
I0
sg3642
S'21-nakd_banana_crunch.png'
p4850
sS'block_loop.thisRepN'
p4851
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4852
I1
sg3647
g3895
sg55
g11
sS'block_loop.thisTrial'
p4853
Nsg70
Vy
sS'block_loop.thisTrialN'
p4854
I0
sg39
F1.5002354908028792
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x117\n\x93\x08'
tRp4855
sa(dp4856
S'trial_loop.thisTrialN'
p4857
I85
sg3633
S'42-mrkipling_lemon_slices.png'
p4858
sS'block_loop.thisIndex'
p4859
g3627
sg38
S'left'
p4860
sg59
g63
sS'trial_loop.thisN'
p4861
I85
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4862
g60
(g99
S'U\x00\x00\x00'
tRp4863
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4864
I0
sg3642
S'16-skips_prawn.png'
p4865
sS'block_loop.thisRepN'
p4866
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4867
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4868
Nsg70
Vy
sS'block_loop.thisTrialN'
p4869
I0
sg39
F0.71648532544350019
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x12\x02\x03\x82p'
tRp4870
sa(dp4871
S'trial_loop.thisTrialN'
p4872
I86
sg3633
g4277
sS'block_loop.thisIndex'
p4873
g3627
sg38
S'left'
p4874
sg59
g63
sS'trial_loop.thisN'
p4875
I86
sg33
g4281
sg64
g65
sS'trial_loop.thisIndex'
p4876
g60
(g99
S'V\x00\x00\x00'
tRp4877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4878
I0
sg3642
g4285
sS'block_loop.thisRepN'
p4879
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4880
I1
sg3647
g4288
sg55
g11
sS'block_loop.thisTrial'
p4881
Nsg70
Vy
sS'block_loop.thisTrialN'
p4882
I0
sg39
F0.71666636256122729
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x12\x07\x0e\xcd\x10'
tRp4883
sa(dp4884
S'trial_loop.thisTrialN'
p4885
I87
sg3633
g3867
sS'block_loop.thisIndex'
p4886
g3627
sg38
S'left'
p4887
sg59
g63
sS'trial_loop.thisN'
p4888
I87
sg33
g3878
sg64
g65
sS'trial_loop.thisIndex'
p4889
g60
(g99
S'W\x00\x00\x00'
tRp4890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4891
I0
sg3642
g3875
sS'block_loop.thisRepN'
p4892
I1
sg3645
g3871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4893
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p4894
Nsg70
Vy
sS'block_loop.thisTrialN'
p4895
I0
sg39
F1.1999436646729009
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x12\r\x0b\x17\xd8'
tRp4896
sa(dp4897
S'trial_loop.thisTrialN'
p4898
I88
sg3633
g4711
sS'block_loop.thisIndex'
p4899
g3627
sg38
S'left'
p4900
sg59
g63
sS'trial_loop.thisN'
p4901
I88
sg33
g3982
sg64
g65
sS'trial_loop.thisIndex'
p4902
g60
(g99
S'X\x00\x00\x00'
tRp4903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4904
I0
sg3642
g4718
sS'block_loop.thisRepN'
p4905
I1
sg3645
g3982
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4906
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p4907
Nsg70
Vy
sS'block_loop.thisTrialN'
p4908
I0
sg39
F0.76637972520984476
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x12\x13\x0e\x82\xd8'
tRp4909
sa(dp4910
S'trial_loop.thisTrialN'
p4911
I89
sg3633
g3835
sS'block_loop.thisIndex'
p4912
g3627
sg38
S'right'
p4913
sg59
g63
sS'trial_loop.thisN'
p4914
I89
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p4915
g60
(g99
S'Y\x00\x00\x00'
tRp4916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4917
I0
sg3642
g3842
sS'block_loop.thisRepN'
p4918
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4919
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p4920
Nsg70
Vy
sS'block_loop.thisTrialN'
p4921
I0
sg39
F0.99995837571623269
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x12\x19\x0b\x858'
tRp4922
sa(dp4923
S'trial_loop.thisTrialN'
p4924
I90
sg3633
g4480
sS'block_loop.thisIndex'
p4925
g3627
sg38
S'left'
p4926
sg59
g63
sS'trial_loop.thisN'
p4927
I90
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p4928
g60
(g99
S'Z\x00\x00\x00'
tRp4929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4930
I0
sg3642
g4487
sS'block_loop.thisRepN'
p4931
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4932
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p4933
Nsg70
Vy
sS'block_loop.thisTrialN'
p4934
I0
sg39
F0.85033476186072221
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x12\x1f\x0c\x15\xc0'
tRp4935
sa(dp4936
S'trial_loop.thisTrialN'
p4937
I91
sg3633
g3948
sS'block_loop.thisIndex'
p4938
g3627
sg38
S'left'
p4939
sg59
g63
sS'trial_loop.thisN'
p4940
I91
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p4941
g60
(g99
S'[\x00\x00\x00'
tRp4942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4943
I0
sg3642
g3955
sS'block_loop.thisRepN'
p4944
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4945
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4946
Nsg70
Vy
sS'block_loop.thisTrialN'
p4947
I0
sg39
F0.84975458779445034
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x12%\nD\xe8'
tRp4948
sa(dp4949
S'trial_loop.thisTrialN'
p4950
I92
sg3633
g4549
sS'block_loop.thisIndex'
p4951
g3627
sg38
S'left'
p4952
sg59
g63
sS'trial_loop.thisN'
p4953
I92
sg33
g3935
sg64
g65
sS'trial_loop.thisIndex'
p4954
g60
(g99
S'\\\x00\x00\x00'
tRp4955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4956
I0
sg3642
g4556
sS'block_loop.thisRepN'
p4957
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4958
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p4959
Nsg70
Vy
sS'block_loop.thisTrialN'
p4960
I0
sg39
F1.36654856014502
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x12+\x08t\x10'
tRp4961
sa(dp4962
S'trial_loop.thisTrialN'
p4963
I93
sg3633
S'3-ellas_strawberries_apples.png'
p4964
sS'block_loop.thisIndex'
p4965
g3627
sg38
S'left'
p4966
sg59
g63
sS'trial_loop.thisN'
p4967
I93
sg33
g3814
sg64
g65
sS'trial_loop.thisIndex'
p4968
g60
(g99
S']\x00\x00\x00'
tRp4969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4970
I0
sg3642
S'13-mccoys_steak_crisps.png'
p4971
sS'block_loop.thisRepN'
p4972
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4973
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p4974
Nsg70
Vy
sS'block_loop.thisTrialN'
p4975
I0
sg39
F0.74985602559900144
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x121\x0e~\xf0'
tRp4976
sa(dp4977
S'trial_loop.thisTrialN'
p4978
I94
sg3633
g3722
sS'block_loop.thisIndex'
p4979
g3627
sg38
S'right'
p4980
sg59
g63
sS'trial_loop.thisN'
p4981
I94
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4982
g60
(g99
S'^\x00\x00\x00'
tRp4983
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4984
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4985
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4986
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4987
Nsg70
Vy
sS'block_loop.thisTrialN'
p4988
I0
sg39
F1.2500310756622639
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x127\x0bB\xd0'
tRp4989
sa(dp4990
S'trial_loop.thisTrialN'
p4991
I95
sg3633
g4534
sS'block_loop.thisIndex'
p4992
g3627
sg38
S'right'
p4993
sg59
g63
sS'trial_loop.thisN'
p4994
I95
sg33
g4281
sg64
g65
sS'trial_loop.thisIndex'
p4995
g60
(g99
S'_\x00\x00\x00'
tRp4996
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4997
I0
sg3642
g4541
sS'block_loop.thisRepN'
p4998
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4999
I1
sg3647
g4288
sg55
g11
sS'block_loop.thisTrial'
p5000
Nsg70
Vy
sS'block_loop.thisTrialN'
p5001
I0
sg39
F0.81696947856471525
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x13\x02\x00a\xa8'
tRp5002
sa(dp5003
S'trial_loop.thisTrialN'
p5004
I96
sg3633
g4193
sS'block_loop.thisIndex'
p5005
g3627
sg38
S'left'
p5006
sg59
g63
sS'trial_loop.thisN'
p5007
I96
sg33
g4197
sg64
g65
sS'trial_loop.thisIndex'
p5008
g60
(g99
S'`\x00\x00\x00'
tRp5009
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5010
I0
sg3642
g4201
sS'block_loop.thisRepN'
p5011
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5012
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p5013
Nsg70
Vy
sS'block_loop.thisTrialN'
p5014
I0
sg39
F0.89993037910971907
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x13\x07\rY\xf8'
tRp5015
sa(dp5016
S'trial_loop.thisTrialN'
p5017
I97
sg3633
g4564
sS'block_loop.thisIndex'
p5018
g3627
sg38
S'left'
p5019
sg59
g63
sS'trial_loop.thisN'
p5020
I97
sg33
g4154
sg64
g65
sS'trial_loop.thisIndex'
p5021
g60
(g99
S'a\x00\x00\x00'
tRp5022
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5023
I0
sg3642
g4571
sS'block_loop.thisRepN'
p5024
I1
sg3645
g4154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5025
I1
sg3647
g4161
sg55
g11
sS'block_loop.thisTrial'
p5026
Nsg70
Vy
sS'block_loop.thisTrialN'
p5027
I0
sg39
F0.71664526532549644
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x13\r\x0c@\xb8'
tRp5028
sa(dp5029
S'trial_loop.thisTrialN'
p5030
I98
sg3633
g3884
sS'block_loop.thisIndex'
p5031
g3627
sg38
S'right'
p5032
sg59
g63
sS'trial_loop.thisN'
p5033
I98
sg33
g3888
sg64
g65
sS'trial_loop.thisIndex'
p5034
g60
(g99
S'b\x00\x00\x00'
tRp5035
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5036
I0
sg3642
g3892
sS'block_loop.thisRepN'
p5037
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5038
I1
sg3647
g3895
sg55
g11
sS'block_loop.thisTrial'
p5039
Nsg70
Vy
sS'block_loop.thisTrialN'
p5040
I0
sg39
F0.9332326557887427
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x13\x13\x08\x87\x98'
tRp5041
sa(dp5042
S'trial_loop.thisTrialN'
p5043
I99
sg3633
g3771
sS'block_loop.thisIndex'
p5044
g3627
sg38
S'left'
p5045
sg59
g63
sS'trial_loop.thisN'
p5046
I99
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5047
g60
(g99
S'c\x00\x00\x00'
tRp5048
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5049
I0
sg3642
g3778
sS'block_loop.thisRepN'
p5050
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5051
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5052
Nsg70
Vy
sS'block_loop.thisTrialN'
p5053
I0
sg39
F0.94993710742346593
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x13\x19\x07\xe7p'
tRp5054
sa(dp5055
S'trial_loop.thisTrialN'
p5056
I100
sg3633
g3867
sS'block_loop.thisIndex'
p5057
g3627
sg38
S'left'
p5058
sg59
g63
sS'trial_loop.thisN'
p5059
I100
sg33
g3878
sg64
g65
sS'trial_loop.thisIndex'
p5060
g60
(g99
S'd\x00\x00\x00'
tRp5061
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5062
I0
sg3642
g3875
sS'block_loop.thisRepN'
p5063
I1
sg3645
g3871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5064
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p5065
Nsg70
Vy
sS'block_loop.thisTrialN'
p5066
I0
sg39
F0.64996002928455709
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x13\x1f\x07\xc4H'
tRp5067
sa(dp5068
S'trial_loop.thisTrialN'
p5069
I101
sg3633
g4964
sS'block_loop.thisIndex'
p5070
g3627
sg38
S'left'
p5071
sg59
g63
sS'trial_loop.thisN'
p5072
I101
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p5073
g60
(g99
S'e\x00\x00\x00'
tRp5074
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5075
I0
sg3642
g4971
sS'block_loop.thisRepN'
p5076
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5077
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p5078
Nsg70
Vy
sS'block_loop.thisTrialN'
p5079
I0
sg39
F0.70033282319855061
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x13%\x02\xdax'
tRp5080
sa(dp5081
S'trial_loop.thisTrialN'
p5082
I102
sg3633
g4094
sS'block_loop.thisIndex'
p5083
g3627
sg38
S'left'
p5084
sg59
g63
sS'trial_loop.thisN'
p5085
I102
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5086
g60
(g99
S'f\x00\x00\x00'
tRp5087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5088
I0
sg3642
g4101
sS'block_loop.thisRepN'
p5089
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5090
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5091
Nsg70
Vy
sS'block_loop.thisTrialN'
p5092
I0
sg39
F1.2999508491338929
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x13*\x0e)\x00'
tRp5093
sa(dp5094
S'trial_loop.thisTrialN'
p5095
I103
sg3633
g3786
sS'block_loop.thisIndex'
p5096
g3627
sg38
S'left'
p5097
sg59
g63
sS'trial_loop.thisN'
p5098
I103
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5099
g60
(g99
S'g\x00\x00\x00'
tRp5100
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5101
I0
sg3642
g3794
sS'block_loop.thisRepN'
p5102
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5103
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5104
Nsg70
Vy
sS'block_loop.thisTrialN'
p5105
I0
sg39
F0.74997690707459697
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x131\x03\xfb\x88'
tRp5106
sa(dp5107
S'trial_loop.thisTrialN'
p5108
I104
sg3633
g4193
sS'block_loop.thisIndex'
p5109
g3627
sg38
S'left'
p5110
sg59
g63
sS'trial_loop.thisN'
p5111
I104
sg33
g4197
sg64
g65
sS'trial_loop.thisIndex'
p5112
g60
(g99
S'h\x00\x00\x00'
tRp5113
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5114
I0
sg3642
g4201
sS'block_loop.thisRepN'
p5115
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5116
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p5117
Nsg70
Vy
sS'block_loop.thisTrialN'
p5118
I0
sg39
F0.76662405404567835
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x137\x00\x80\xe8'
tRp5119
sa(dp5120
S'trial_loop.thisTrialN'
p5121
I105
sg3633
g4858
sS'block_loop.thisIndex'
p5122
g3627
sg38
S'left'
p5123
sg59
g63
sS'trial_loop.thisN'
p5124
I105
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5125
g60
(g99
S'i\x00\x00\x00'
tRp5126
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5127
I0
sg3642
g4865
sS'block_loop.thisRepN'
p5128
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5129
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5130
Nsg70
Vy
sS'block_loop.thisTrialN'
p5131
I0
sg39
F0.68308782609528862
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x14\x00\x0c\xc5\x88'
tRp5132
sa(dp5133
S'trial_loop.thisTrialN'
p5134
I106
sg3633
g4696
sS'block_loop.thisIndex'
p5135
g3627
sg38
S'right'
p5136
sg59
g63
sS'trial_loop.thisN'
p5137
I106
sg33
g4197
sg64
g65
sS'trial_loop.thisIndex'
p5138
g60
(g99
S'j\x00\x00\x00'
tRp5139
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5140
I0
sg3642
g4703
sS'block_loop.thisRepN'
p5141
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5142
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p5143
Nsg70
Vy
sS'block_loop.thisTrialN'
p5144
I0
sg39
F1.2498871012612653
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x14\x06\x08T\xd0'
tRp5145
sa(dp5146
S'trial_loop.thisTrialN'
p5147
I107
sg3633
g3634
sS'block_loop.thisIndex'
p5148
g3627
sg38
S'left'
p5149
sg59
g63
sS'trial_loop.thisN'
p5150
I107
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5151
g60
(g99
S'k\x00\x00\x00'
tRp5152
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5153
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5154
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5155
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5156
Nsg70
Vy
sS'block_loop.thisTrialN'
p5157
I0
sg39
F0.83330444342209375
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x14\x0c\x0c\xb5\xe8'
tRp5158
sa(dp5159
S'trial_loop.thisTrialN'
p5160
I108
sg3633
g4858
sS'block_loop.thisIndex'
p5161
g3627
sg38
S'left'
p5162
sg59
g63
sS'trial_loop.thisN'
p5163
I108
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5164
g60
(g99
S'l\x00\x00\x00'
tRp5165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5166
I0
sg3642
g4865
sS'block_loop.thisRepN'
p5167
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5168
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5169
Nsg70
Vy
sS'block_loop.thisTrialN'
p5170
I0
sg39
F1.0165439415577566
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x14\x12\n\xaax'
tRp5171
sa(dp5172
S'trial_loop.thisTrialN'
p5173
I109
sg3633
g3739
sS'block_loop.thisIndex'
p5174
g3627
sg38
S'left'
p5175
sg59
g63
sS'trial_loop.thisN'
p5176
I109
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p5177
g60
(g99
S'm\x00\x00\x00'
tRp5178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5179
I0
sg3642
g3746
sS'block_loop.thisRepN'
p5180
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5181
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5182
Nsg70
Vy
sS'block_loop.thisTrialN'
p5183
I0
sg39
F1.4833482914655178
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x14\x18\x0by\x80'
tRp5184
sa(dp5185
S'trial_loop.thisTrialN'
p5186
I110
sg3633
g3963
sS'block_loop.thisIndex'
p5187
g3627
sg38
S'right'
p5188
sg59
g63
sS'trial_loop.thisN'
p5189
I110
sg33
g3878
sg64
g65
sS'trial_loop.thisIndex'
p5190
g60
(g99
S'n\x00\x00\x00'
tRp5191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5192
I0
sg3642
g3970
sS'block_loop.thisRepN'
p5193
I1
sg3645
g3871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5194
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p5195
Nsg70
Vy
sS'block_loop.thisTrialN'
p5196
I0
sg39
F1.1832172605063533
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x14\x1f\x04&\x80'
tRp5197
sa(dp5198
S'trial_loop.thisTrialN'
p5199
I111
sg3633
g4534
sS'block_loop.thisIndex'
p5200
g3627
sg38
S'right'
p5201
sg59
g63
sS'trial_loop.thisN'
p5202
I111
sg33
g4281
sg64
g65
sS'trial_loop.thisIndex'
p5203
g60
(g99
S'o\x00\x00\x00'
tRp5204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5205
I0
sg3642
g4541
sS'block_loop.thisRepN'
p5206
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5207
I1
sg3647
g4288
sg55
g11
sS'block_loop.thisTrial'
p5208
Nsg70
Vy
sS'block_loop.thisTrialN'
p5209
I0
sg39
F0.91701315555837937
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x14%\x07V\xe8'
tRp5210
sa(dp5211
S'trial_loop.thisTrialN'
p5212
I112
sg3633
g3722
sS'block_loop.thisIndex'
p5213
g3627
sg38
S'right'
p5214
sg59
g63
sS'trial_loop.thisN'
p5215
I112
sg33
g3733
sg64
g65
sS'trial_loop.thisIndex'
p5216
g60
(g99
S'p\x00\x00\x00'
tRp5217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5218
I0
sg3642
g3730
sS'block_loop.thisRepN'
p5219
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5220
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5221
Nsg70
Vy
sS'block_loop.thisTrialN'
p5222
I0
sg39
F1.3999702928122133
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x14+\x06\xb6\xc0'
tRp5223
sa(dp5224
S'trial_loop.thisTrialN'
p5225
I113
sg3633
g4696
sS'block_loop.thisIndex'
p5226
g3627
sg38
S'right'
p5227
sg59
g63
sS'trial_loop.thisN'
p5228
I113
sg33
g4204
sg64
g65
sS'trial_loop.thisIndex'
p5229
g60
(g99
S'q\x00\x00\x00'
tRp5230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5231
I0
sg3642
g4703
sS'block_loop.thisRepN'
p5232
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5233
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p5234
Nsg70
Vy
sS'block_loop.thisTrialN'
p5235
I0
sg39
F1.8497962120745797
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x141\r>\xa0'
tRp5236
sa(dp5237
S'trial_loop.thisTrialN'
p5238
I114
sg3633
g4843
sS'block_loop.thisIndex'
p5239
g3627
sg38
S'left'
p5240
sg59
g63
sS'trial_loop.thisN'
p5241
I114
sg33
g3888
sg64
g65
sS'trial_loop.thisIndex'
p5242
g60
(g99
S'r\x00\x00\x00'
tRp5243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5244
I0
sg3642
g4850
sS'block_loop.thisRepN'
p5245
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5246
I1
sg3647
g3895
sg55
g11
sS'block_loop.thisTrial'
p5247
Nsg70
Vy
sS'block_loop.thisTrialN'
p5248
I0
sg39
F0.81662023373064585
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x148\x0be\xf8'
tRp5249
sa(dp5250
S'trial_loop.thisTrialN'
p5251
I115
sg3633
g4549
sS'block_loop.thisIndex'
p5252
g3627
sg38
S'left'
p5253
sg59
g63
sS'trial_loop.thisN'
p5254
I115
sg33
g3935
sg64
g65
sS'trial_loop.thisIndex'
p5255
g60
(g99
S's\x00\x00\x00'
tRp5256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5257
I0
sg3642
g4556
sS'block_loop.thisRepN'
p5258
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5259
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p5260
Nsg70
Vy
sS'block_loop.thisTrialN'
p5261
I0
sg39
F1.3832729686255334
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x15\x02\t\x1c\x08'
tRp5262
sa(dp5263
S'trial_loop.thisTrialN'
p5264
I116
sg3633
g4858
sS'block_loop.thisIndex'
p5265
g3627
sg38
S'left'
p5266
sg59
g63
sS'trial_loop.thisN'
p5267
I116
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5268
g60
(g99
S't\x00\x00\x00'
tRp5269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5270
I0
sg3642
g4865
sS'block_loop.thisRepN'
p5271
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5272
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5273
Nsg70
Vy
sS'block_loop.thisTrialN'
p5274
I0
sg39
F0.78322273438971024
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x15\t\x00]\xc0'
tRp5275
sa(dp5276
S'trial_loop.thisTrialN'
p5277
I117
sg3633
g4426
sS'block_loop.thisIndex'
p5278
g3627
sg38
S'right'
p5279
sg59
g63
sS'trial_loop.thisN'
p5280
I117
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p5281
g60
(g99
S'u\x00\x00\x00'
tRp5282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5283
I0
sg3642
g4433
sS'block_loop.thisRepN'
p5284
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5285
I1
sg3647
g3912
sg55
g11
sS'block_loop.thisTrial'
p5286
Nsg70
Vy
sS'block_loop.thisTrialN'
p5287
I0
sg39
F1.1332952062512049
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x15\x0e\x0c\xdc\xf8'
tRp5288
sa(dp5289
S'trial_loop.thisTrialN'
p5290
I118
sg3633
g3835
sS'block_loop.thisIndex'
p5291
g3627
sg38
S'right'
p5292
sg59
g63
sS'trial_loop.thisN'
p5293
I118
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5294
g60
(g99
S'v\x00\x00\x00'
tRp5295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5296
I0
sg3642
g3842
sS'block_loop.thisRepN'
p5297
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5298
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5299
Nsg70
Vy
sS'block_loop.thisTrialN'
p5300
I0
sg39
F0.68331790003867354
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x15\x15\x00\x13\x88'
tRp5301
sa(dp5302
S'trial_loop.thisTrialN'
p5303
I119
sg3633
g3688
sS'block_loop.thisIndex'
p5304
g3627
sg38
S'right'
p5305
sg59
g63
sS'trial_loop.thisN'
p5306
I119
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p5307
g60
(g99
S'w\x00\x00\x00'
tRp5308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5309
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5310
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5311
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5312
Nsg70
Vy
sS'block_loop.thisTrialN'
p5313
I0
sg39
F0.78310812505515059
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x15\x1a\n\xe8\xf8'
tRp5314
sa(dp5315
S'trial_loop.thisTrialN'
p5316
I120
sg3633
g3835
sS'block_loop.thisIndex'
p5317
g3627
sg38
S'right'
p5318
sg59
g63
sS'trial_loop.thisN'
p5319
I120
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5320
g60
(g99
S'x\x00\x00\x00'
tRp5321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5322
I0
sg3642
g3842
sS'block_loop.thisRepN'
p5323
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5324
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5325
Nsg70
Vy
sS'block_loop.thisTrialN'
p5326
I0
sg39
F0.61651434840314323
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x15 \x08%\xf0'
tRp5327
sa(dp5328
S'trial_loop.thisTrialN'
p5329
I121
sg3633
g3634
sS'block_loop.thisIndex'
p5330
g3627
sg38
S'left'
p5331
sg59
g63
sS'trial_loop.thisN'
p5332
I121
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5333
g60
(g99
S'y\x00\x00\x00'
tRp5334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5335
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5336
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5337
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5338
Nsg70
Vy
sS'block_loop.thisTrialN'
p5339
I0
sg39
F0.833130533748772
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x15&\x02\xc3\x08'
tRp5340
sa(dp5341
S'trial_loop.thisTrialN'
p5342
I122
sg3633
g3901
sS'block_loop.thisIndex'
p5343
g3627
sg38
S'left'
p5344
sg59
g63
sS'trial_loop.thisN'
p5345
I122
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p5346
g60
(g99
S'z\x00\x00\x00'
tRp5347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5348
I0
sg3642
g3909
sS'block_loop.thisRepN'
p5349
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5350
I1
sg3647
g3912
sg55
g11
sS'block_loop.thisTrial'
p5351
Nsg70
Vy
sS'block_loop.thisTrialN'
p5352
I0
sg39
F0.90000621513172518
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x15,\x00\xb3\xb0'
tRp5353
sa(dp5354
S'trial_loop.thisTrialN'
p5355
I123
sg3633
g4549
sS'block_loop.thisIndex'
p5356
g3627
sg38
S'right'
p5357
sg59
g63
sS'trial_loop.thisN'
p5358
I123
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p5359
g60
(g99
S'{\x00\x00\x00'
tRp5360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5361
I0
sg3642
g4556
sS'block_loop.thisRepN'
p5362
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5363
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p5364
Nsg70
Vy
sS'block_loop.thisTrialN'
p5365
I0
sg39
F0.89990985206532059
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x151\x0f\x1b0'
tRp5366
sa(dp5367
S'trial_loop.thisTrialN'
p5368
I124
sg3633
g4426
sS'block_loop.thisIndex'
p5369
g3627
sg38
S'right'
p5370
sg59
g63
sS'trial_loop.thisN'
p5371
I124
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p5372
g60
(g99
S'|\x00\x00\x00'
tRp5373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5374
I0
sg3642
g4433
sS'block_loop.thisRepN'
p5375
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5376
I1
sg3647
g3912
sg55
g11
sS'block_loop.thisTrial'
p5377
Nsg70
Vy
sS'block_loop.thisTrialN'
p5378
I0
sg39
F1.0832069399693864
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x157\x0e\x01\xf0'
tRp5379
sa(dp5380
S'trial_loop.thisTrialN'
p5381
I125
sg3633
g3654
sS'block_loop.thisIndex'
p5382
g3627
sg38
S'right'
p5383
sg59
g63
sS'trial_loop.thisN'
p5384
I125
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5385
g60
(g99
S'}\x00\x00\x00'
tRp5386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5387
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5388
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5389
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5390
Nsg70
Vy
sS'block_loop.thisTrialN'
p5391
I0
sg39
F1.2336217002812191
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x16\x19\n\xe5\x10'
tRp5392
sa(dp5393
S'trial_loop.thisTrialN'
p5394
I126
sg3633
g3739
sS'block_loop.thisIndex'
p5395
g3627
sg38
S'left'
p5396
sg59
g63
sS'trial_loop.thisN'
p5397
I126
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5398
g60
(g99
S'~\x00\x00\x00'
tRp5399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5400
I0
sg3642
g3746
sS'block_loop.thisRepN'
p5401
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5402
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5403
Nsg70
Vy
sS'block_loop.thisTrialN'
p5404
I0
sg39
F0.98327160014741821
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x16\x1f\x0e\xcd\x10'
tRp5405
sa(dp5406
S'trial_loop.thisTrialN'
p5407
I127
sg3633
g3654
sS'block_loop.thisIndex'
p5408
g3627
sg38
S'right'
p5409
sg59
g63
sS'trial_loop.thisN'
p5410
I127
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5411
g60
(g99
S'\x7f\x00\x00\x00'
tRp5412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5413
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5414
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5415
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5416
Nsg70
Vy
sS'block_loop.thisTrialN'
p5417
I0
sg39
F0.84981388814776437
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x16%\x0f\x1f\x18'
tRp5418
sa(dp5419
S'trial_loop.thisTrialN'
p5420
I128
sg3633
g4034
sS'block_loop.thisIndex'
p5421
g3627
sg38
S'right'
p5422
sg59
g63
sS'trial_loop.thisN'
p5423
I128
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p5424
g60
(g99
S'\x80\x00\x00\x00'
tRp5425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5426
I0
sg3642
g4042
sS'block_loop.thisRepN'
p5427
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5428
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p5429
Nsg70
Vy
sS'block_loop.thisTrialN'
p5430
I0
sg39
F1.2331626927843899
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x16+\rR('
tRp5431
sa(dp5432
S'trial_loop.thisTrialN'
p5433
I129
sg3633
g4964
sS'block_loop.thisIndex'
p5434
g3627
sg38
S'left'
p5435
sg59
g63
sS'trial_loop.thisN'
p5436
I129
sg33
g3814
sg64
g65
sS'trial_loop.thisIndex'
p5437
g60
(g99
S'\x81\x00\x00\x00'
tRp5438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5439
I0
sg3642
g4971
sS'block_loop.thisRepN'
p5440
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5441
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vy
sS'block_loop.thisTrialN'
p5443
I0
sg39
F1.06656292907428
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x162\x022\x80'
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g4858
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'left'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g4865
sS'block_loop.thisRepN'
p5453
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5454
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vy
sS'block_loop.thisTrialN'
p5456
I0
sg39
F0.93329138593981043
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x168\x03\xb58'
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g4094
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'left'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g4101
sS'block_loop.thisRepN'
p5466
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5467
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vy
sS'block_loop.thisTrialN'
p5469
I0
sg39
F1.1665299147425685
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x17\x02\x03\x18\xf8'
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g3739
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'left'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g3746
sS'block_loop.thisRepN'
p5479
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5480
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vy
sS'block_loop.thisTrialN'
p5482
I0
sg39
F0.76651457648404175
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x17\x08\x06\n\xe0'
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g4534
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'right'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g4288
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g4541
sS'block_loop.thisRepN'
p5492
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5493
I1
sg3647
g4288
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vy
sS'block_loop.thisTrialN'
p5495
I0
sg39
F0.93329737299791304
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x17\x0e\x03\tX'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g4034
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'right'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g4042
sS'block_loop.thisRepN'
p5505
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5506
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vy
sS'block_loop.thisTrialN'
p5508
I0
sg39
F1.0332475378963863
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x17\x14\x02\xa7\xb0'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g3803
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'right'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g3811
sS'block_loop.thisRepN'
p5518
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5519
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vy
sS'block_loop.thisTrialN'
p5521
I0
sg39
F0.79987615350546548
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x17\x1a\x03\xb1P'
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g3671
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'right'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5531
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5532
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vy
sS'block_loop.thisTrialN'
p5534
I0
sg39
F1.2998673154797871
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x17 \x01,\xc8'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g3850
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'right'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g3858
sS'block_loop.thisRepN'
p5544
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5545
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vy
sS'block_loop.thisTrialN'
p5547
I0
sg39
F0.98326789387647295
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x17&\x06\x06\xf8'
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g4135
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'right'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g3765
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g4142
sS'block_loop.thisRepN'
p5557
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5558
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vy
sS'block_loop.thisTrialN'
p5560
I0
sg39
F0.71651554581330856
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x17,\x06Y\x00'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g3850
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'right'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g3858
sS'block_loop.thisRepN'
p5570
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5571
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vy
sS'block_loop.thisTrialN'
p5573
I0
sg39
F0.96662046181154437
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x172\x02\xa3\xc8'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g4964
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'left'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g3814
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g4971
sS'block_loop.thisRepN'
p5583
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vy
sS'block_loop.thisTrialN'
p5586
I0
sg39
F0.98326532800274435
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x178\x02|\xb8'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g3786
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'left'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g3794
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vy
sS'block_loop.thisTrialN'
p5599
I0
sg39
F0.94982306829479057
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x18\x02\x02\xd2\xa8'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g3671
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'right'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vy
sS'block_loop.thisTrialN'
p5612
I0
sg39
F1.2166689284495078
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x18\x08\x02\xab\x98'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g3820
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'right'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g3827
sS'block_loop.thisRepN'
p5622
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vy
sS'block_loop.thisTrialN'
p5625
I0
sg39
F1.0999535860755714
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x18\x0e\x06U\x18'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g3948
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'left'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g3955
sS'block_loop.thisRepN'
p5635
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vy
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.79998762675677426
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x18\x14\x08T\xd0'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g4150
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'right'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g4154
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g4158
sS'block_loop.thisRepN'
p5648
I1
sg3645
g4154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3647
g4161
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vy
sS'block_loop.thisTrialN'
p5651
I0
sg39
F0.74995466944528744
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x18\x1a\x05\xcc`'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g4843
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'left'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g3895
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g4850
sS'block_loop.thisRepN'
p5661
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3647
g3895
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vy
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.86700956332060741
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x18 \x02\x90@'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g3754
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'right'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g3762
sS'block_loop.thisRepN'
p5674
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vy
sS'block_loop.thisTrialN'
p5677
I0
sg39
F2.1498094976341235
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x18&\x00\xfd\xe8'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g3850
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'right'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g3858
sS'block_loop.thisRepN'
p5687
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vy
sS'block_loop.thisTrialN'
p5690
I0
sg39
F1.0166408748191316
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x18-\x03\xe8\x00'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g4564
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'left'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g4154
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g4571
sS'block_loop.thisRepN'
p5700
I1
sg3645
g4154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g4161
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vy
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.83327251246373635
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x183\x04\xb7\x08'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g4711
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'left'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g3982
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g4718
sS'block_loop.thisRepN'
p5713
I1
sg3645
g3982
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vy
sS'block_loop.thisTrialN'
p5716
I0
sg39
F0.91634032469301019
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x189\x02\xab\x98'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g3948
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'left'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g3955
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vy
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.90034291565825697
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x19\x03\x01\xcc\xf0'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g4135
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'left'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g4142
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vy
sS'block_loop.thisTrialN'
p5742
I0
sg39
F1.482940886678989
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x19\t\x00\xb3\xb0'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g3963
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'right'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g3878
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g3970
sS'block_loop.thisRepN'
p5752
I1
sg3645
g3871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vy
sS'block_loop.thisTrialN'
p5755
I0
sg39
F0.86662097499356605
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x19\x0f\x08\xa6\xd8'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g4277
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'left'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g4281
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g4285
sS'block_loop.thisRepN'
p5765
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g4288
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vy
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.79992604562721681
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x19\x15\x07\x14\x80'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g3901
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'left'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g3909
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g3912
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vy
sS'block_loop.thisTrialN'
p5781
I0
sg39
F1.3499915040883934
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x19\x1b\x04\x8c\x10'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g4150
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'right'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g4154
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g4158
sS'block_loop.thisRepN'
p5791
I1
sg3645
g4154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g4161
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vy
sS'block_loop.thisTrialN'
p5794
I0
sg39
F0.86651149742101552
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x19!\n\\X'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g4223
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'left'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g4045
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g4230
sS'block_loop.thisRepN'
p5804
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vy
sS'block_loop.thisTrialN'
p5807
I0
sg39
F1.049875298209372
sg34
g753
(S"\x07\xdf\x07\x0c\x13\x19'\t\x04\x98"
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g4564
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'left'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g4154
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g4571
sS'block_loop.thisRepN'
p5817
I1
sg3645
g4154
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g4161
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vy
sS'block_loop.thisTrialN'
p5820
I0
sg39
F0.93330278985376935
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x19-\nL\xb8'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g3634
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'left'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5830
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vy
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.74989536910288734
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x193\t\xb0x'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g3803
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'right'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3814
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g3811
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vy
sS'block_loop.thisTrialN'
p5846
I0
sg39
F0.983305811889295
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x199\x06pp'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g4307
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'left'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g4314
sS'block_loop.thisRepN'
p5856
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vy
sS'block_loop.thisTrialN'
p5859
I0
sg39
F0.79995398521714378
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1a\x03\x06\x87\xe0'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g3978
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'right'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3982
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g3986
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3982
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vy
sS'block_loop.thisTrialN'
p5872
I0
sg39
F0.83334777829441009
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1a\t\x04\x03X'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g3931
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'right'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3935
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g3939
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vy
sS'block_loop.thisTrialN'
p5885
I0
sg39
F1.3332083654604503
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1a\x0f\x01\xf4\x00'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g4307
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'left'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g4314
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vy
sS'block_loop.thisTrialN'
p5898
I0
sg39
F1.0166200626772479
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1a\x15\x07\xc4H'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g4094
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'left'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g4101
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vy
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.96635332515143091
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1a\x1b\x08T\xd0'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g4064
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'right'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g4072
sS'block_loop.thisRepN'
p5921
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vy
sS'block_loop.thisTrialN'
p5924
I0
sg39
F0.83331727282347856
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1a!\x08l@'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g4307
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'left'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g4314
sS'block_loop.thisRepN'
p5934
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vy
sS'block_loop.thisTrialN'
p5937
I0
sg39
F0.91657895156822633
sg34
g753
(S"\x07\xdf\x07\x0c\x13\x1a'\x06\\\xe8"
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g3867
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'left'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g3871
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g3875
sS'block_loop.thisRepN'
p5947
I1
sg3645
g3871
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vy
sS'block_loop.thisTrialN'
p5950
I0
sg39
F0.83333437869441696
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1a-\x05\x82('
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g3884
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'right'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3888
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g3892
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g3895
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vy
sS'block_loop.thisTrialN'
p5963
I0
sg39
F1.1666011892011738
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1a3\x03v\xb8'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g4193
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'left'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g4197
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g4201
sS'block_loop.thisRepN'
p5973
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vy
sS'block_loop.thisTrialN'
p5976
I0
sg39
F1.0831750090073911
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1a9\x06\xa38'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g4549
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'left'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3935
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g4556
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vy
sS'block_loop.thisTrialN'
p5989
I0
sg39
F1.4999133302626433
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1b\x03\x08hX'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g4426
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'right'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3905
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g4433
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3905
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g3912
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vy
sS'block_loop.thisTrialN'
p6002
I0
sg39
F1.2336533461420913
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1b\n\x01S\xd8'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g4711
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'left'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3982
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g4718
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3982
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vy
sS'block_loop.thisTrialN'
p6015
I0
sg39
F0.9663516145592439
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1b\x10\x05;\xd8'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4223
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'left'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4230
sS'block_loop.thisRepN'
p6025
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vy
sS'block_loop.thisTrialN'
p6028
I0
sg39
F1.0495927662705071
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1b\x16\x05SH'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g3688
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'right'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g3696
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vy
sS'block_loop.thisTrialN'
p6041
I0
sg39
F1.2663991118606646
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1b\x1c\x06\x9bh'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g4094
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'left'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g4101
sS'block_loop.thisRepN'
p6051
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vy
sS'block_loop.thisTrialN'
p6054
I0
sg39
F0.9499975481594447
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1b"\x0b7\x18'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g3705
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'right'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g3713
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vy
sS'block_loop.thisTrialN'
p6067
I0
sg39
F0.96686650123592699
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1b(\n\xd5p'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g4480
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'left'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g4487
sS'block_loop.thisRepN'
p6077
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vy
sS'block_loop.thisTrialN'
p6080
I0
sg39
F0.84984268301923294
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1b.\n\xec\xe0'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g3705
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'right'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g3713
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vy
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.98310823909559986
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1b4\t\x1c\x08'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g3931
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'right'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g3939
sS'block_loop.thisRepN'
p6103
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vy
sS'block_loop.thisTrialN'
p6106
I0
sg39
F0.93317535112146288
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1b:\tq\xf8'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g3688
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'right'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g3696
sS'block_loop.thisRepN'
p6116
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vy
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.78303029335074825
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1c\x04\x08\xd1\xd0'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g4696
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'right'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g4197
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g4703
sS'block_loop.thisRepN'
p6129
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vy
sS'block_loop.thisTrialN'
p6132
I0
sg39
F0.73313361281179823
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1c\n\x06\x0e\xc8'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g4843
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'left'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g3888
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g4850
sS'block_loop.thisRepN'
p6142
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g3895
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vy
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.91656697745929705
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1c\x10\x02\x94('
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g4034
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'right'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g4042
sS'block_loop.thisRepN'
p6155
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vy
sS'block_loop.thisTrialN'
p6158
I0
sg39
F1.1831833338583237
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1c\x16\x01\xb5\x80'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g4135
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'left'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3765
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g4142
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3758
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vy
sS'block_loop.thisTrialN'
p6171
I0
sg39
F1.2831873822578928
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1c\x1d\nXp'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g3850
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'right'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g3858
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vy
sS'block_loop.thisTrialN'
p6184
I0
sg39
F1.2498813993079239
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1c#\x0f2\xa0'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g3835
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'right'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g3797
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g3842
sS'block_loop.thisRepN'
p6194
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vy
sS'block_loop.thisTrialN'
p6197
I0
sg39
F1.0499534150148975
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1c*\x04Qx'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g4711
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'left'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g3982
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g4718
sS'block_loop.thisRepN'
p6207
I1
sg3645
g3982
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g3989
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vy
sS'block_loop.thisTrialN'
p6210
I0
sg39
F1.7829598741955124
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1c0\x05\x99\x98'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g3803
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'right'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g3811
sS'block_loop.thisRepN'
p6220
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vy
sS'block_loop.thisTrialN'
p6223
I0
sg39
F0.94986782864725683
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1c7\x02\xce\xc0'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g3820
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'right'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g3827
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vy
sS'block_loop.thisTrialN'
p6236
I0
sg39
F0.69986469257855788
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1d\x01\x02m\x18'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g4964
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'left'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g4971
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vy
sS'block_loop.thisTrialN'
p6249
I0
sg39
F1.4165989084212924
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1d\x06\r\xbb\xa0'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g4277
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'left'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g4281
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g4285
sS'block_loop.thisRepN'
p6259
I1
sg3645
g4281
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g4288
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vy
sS'block_loop.thisTrialN'
p6262
I0
sg39
F0.86658277187962085
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1d\r\x05;\xd8'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g4843
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'left'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g3888
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g4850
sS'block_loop.thisRepN'
p6272
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g3895
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vy
sS'block_loop.thisTrialN'
p6275
I0
sg39
F0.69998699954157928
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1d\x13\x03\xe4\x18'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g3654
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'right'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g3662
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vy
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.91661088253022172
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1d\x18\x0e\xf4 '
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g4480
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'left'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g4487
sS'block_loop.thisRepN'
p6298
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vy
sS'block_loop.thisTrialN'
p6301
I0
sg39
F1.2331877813921892
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1d\x1e\x0eW\xe0'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g3931
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'right'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g3935
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g3939
sS'block_loop.thisRepN'
p6311
I1
sg3645
g3935
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g3942
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vy
sS'block_loop.thisTrialN'
p6314
I0
sg39
F1.1498599599508452
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1d%\x02\xf9\xb8'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4696
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'right'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g4204
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4703
sS'block_loop.thisRepN'
p6324
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vy
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.95005143164598849
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1d+\x05\xef\x88'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g4034
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'right'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g4042
sS'block_loop.thisRepN'
p6337
I1
sg3645
g4038
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g4045
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vy
sS'block_loop.thisTrialN'
p6340
I0
sg39
F0.7331843602223671
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1d1\x05\x89\xf8'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g3884
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'right'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g3888
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g3892
sS'block_loop.thisRepN'
p6350
I1
sg3645
g3888
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g3895
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vy
sS'block_loop.thisTrialN'
p6353
I0
sg39
F0.79995797658193624
sg34
g753
(S'\x07\xdf\x07\x0c\x13\x1d7\x02\x0fX'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F476.52092076333065
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vy
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vy
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'10-bounty_redo.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'left'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'4-corn.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'4-corn.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
S'10-bounty_redo.png'
p6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6385
I2
sS'img_wrong'
p6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vy
sS'block_loop.thisTrialN'
p6388
I0
sg39
F1.2332111594150774
sg34
g753
(S'\x07\xdf\x07\x0c\x13+-\x00\xde\xa8'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'16-skips_prawn.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'right'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'42-mrkipling_lemon_slices.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6386
S'16-skips_prawn.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vy
sS'block_loop.thisTrialN'
p6405
I0
sg39
F0.93317820210359059
sg34
g753
(S'\x07\xdf\x07\x0c\x13+3\x04\xc2\xc0'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'20-fruit_pastilles.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'right'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'20-fruit_pastilles.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'2-steamed_puddings.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
S'2-steamed_puddings.png'
p6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6420
I2
sg6386
g6413
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vy
sS'block_loop.thisTrialN'
p6422
I0
sg39
F1.2332610515295528
sg34
g753
(S'\x07\xdf\x07\x0c\x13+9\x04&\x80'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'left'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6436
I2
sg6386
S'8-liquorice_catherine_wheels.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vy
sS'block_loop.thisTrialN'
p6439
I0
sg39
F1.0836143447595532
sg34
g753
(S'\x07\xdf\x07\x0c\x13,\x03\x08I\x18'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'41-peanuts_redo.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'right'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
S'45-chewy_nougat_redo.png'
p6447
sg64
g65
sS'trial_loop.thisIndex'
p6448
g60
(g99
S'\x04\x00\x00\x00'
tRp6449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6450
I0
sg6380
S'45-chewy_nougat_redo.png'
p6451
sS'block_loop.thisRepN'
p6452
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6453
I2
sg6386
S'41-peanuts_redo.png'
p6454
sg55
g11
sS'block_loop.thisTrial'
p6455
Nsg70
Vy
sS'block_loop.thisTrialN'
p6456
I0
sg39
F0.86655483229696983
sg34
g753
(S'\x07\xdf\x07\x0c\x13,\t\n\nP'
tRp6457
sa(dp6458
S'trial_loop.thisTrialN'
p6459
I5
sg6371
S'46-pistachios.png'
p6460
sS'block_loop.thisIndex'
p6461
g6365
sg38
S'left'
p6462
sg59
g63
sS'trial_loop.thisN'
p6463
I5
sg33
S'46-pistachios.png'
p6464
sg64
g65
sS'trial_loop.thisIndex'
p6465
g60
(g99
S'\x05\x00\x00\x00'
tRp6466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6467
I0
sg6380
S'29-beans.png'
p6468
sS'block_loop.thisRepN'
p6469
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6470
I2
sg6386
S'29-beans.png'
p6471
sg55
g11
sS'block_loop.thisTrial'
p6472
Nsg70
Vy
sS'block_loop.thisTrialN'
p6473
I0
sg39
F0.78310185291047674
sg34
g753
(S'\x07\xdf\x07\x0c\x13,\x0f\x08w\xf8'
tRp6474
sa(dp6475
S'trial_loop.thisTrialN'
p6476
I6
sg6371
S'44-crunch.png'
p6477
sS'block_loop.thisIndex'
p6478
g6365
sg38
S'left'
p6479
sg59
g63
sS'trial_loop.thisN'
p6480
I6
sg33
S'44-crunch.png'
p6481
sg64
g65
sS'trial_loop.thisIndex'
p6482
g60
(g99
S'\x06\x00\x00\x00'
tRp6483
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6484
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6485
sS'block_loop.thisRepN'
p6486
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6487
I2
sg6386
S'26-walkers_smoky_bacon.png'
p6488
sg55
g11
sS'block_loop.thisTrial'
p6489
Nsg70
Vy
sS'block_loop.thisTrialN'
p6490
I0
sg39
F1.0332920131550054
sg34
g753
(S'\x07\xdf\x07\x0c\x13,\x15\x05\xb4\xf0'
tRp6491
sa(dp6492
S'trial_loop.thisTrialN'
p6493
I7
sg6371
S'42-mrkipling_lemon_slices.png'
p6494
sS'block_loop.thisIndex'
p6495
g6365
sg38
S'left'
p6496
sg59
g63
sS'trial_loop.thisN'
p6497
I7
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6498
g60
(g99
S'\x07\x00\x00\x00'
tRp6499
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6500
I0
sg6380
S'16-skips_prawn.png'
p6501
sS'block_loop.thisRepN'
p6502
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6503
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p6504
Nsg70
Vy
sS'block_loop.thisTrialN'
p6505
I0
sg39
F0.96643315254186746
sg34
g753
(S'\x07\xdf\x07\x0c\x13,\x1b\x06\xbe\x90'
tRp6506
sa(dp6507
S'trial_loop.thisTrialN'
p6508
I8
sg6371
S'33-ambrosia_rice.png'
p6509
sS'block_loop.thisIndex'
p6510
g6365
sg38
S'right'
p6511
sg59
g63
sS'trial_loop.thisN'
p6512
I8
sg33
S'23-crunchie_redo.png'
p6513
sg64
g65
sS'trial_loop.thisIndex'
p6514
g60
(g99
S'\x08\x00\x00\x00'
tRp6515
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6516
I0
sg6380
S'23-crunchie_redo.png'
p6517
sS'block_loop.thisRepN'
p6518
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6519
I2
sg6386
S'33-ambrosia_rice.png'
p6520
sg55
g11
sS'block_loop.thisTrial'
p6521
Nsg70
Vy
sS'block_loop.thisTrialN'
p6522
I0
sg39
F1.3165329938055947
sg34
g753
(S'\x07\xdf\x07\x0c\x13,!\x06\xd6\x00'
tRp6523
sa(dp6524
S'trial_loop.thisTrialN'
p6525
I9
sg6371
S'27-hartleys_raspberries_jelly.png'
p6526
sS'block_loop.thisIndex'
p6527
g6365
sg38
S'right'
p6528
sg59
g63
sS'trial_loop.thisN'
p6529
I9
sg33
S'27-hartleys_raspberries_jelly.png'
p6530
sg64
g65
sS'trial_loop.thisIndex'
p6531
g60
(g99
S'\t\x00\x00\x00'
tRp6532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6533
I0
sg6380
S'51-mars.png'
p6534
sS'block_loop.thisRepN'
p6535
I2
sg6383
S'51-mars.png'
p6536
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6537
I2
sg6386
g6530
sg55
g11
sS'block_loop.thisTrial'
p6538
Nsg70
Vy
sS'block_loop.thisTrialN'
p6539
I0
sg39
F1.0831353804169339
sg34
g753
(S"\x07\xdf\x07\x0c\x13,'\x0c)H"
tRp6540
sa(dp6541
S'trial_loop.thisTrialN'
p6542
I10
sg6371
g6494
sS'block_loop.thisIndex'
p6543
g6365
sg38
S'left'
p6544
sg59
g63
sS'trial_loop.thisN'
p6545
I10
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6546
g60
(g99
S'\n\x00\x00\x00'
tRp6547
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6548
I0
sg6380
g6501
sS'block_loop.thisRepN'
p6549
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6550
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p6551
Nsg70
Vy
sS'block_loop.thisTrialN'
p6552
I0
sg39
F0.93303280221152818
sg34
g753
(S'\x07\xdf\x07\x0c\x13,-\r\xea\x80'
tRp6553
sa(dp6554
S'trial_loop.thisTrialN'
p6555
I11
sg6371
g6372
sS'block_loop.thisIndex'
p6556
g6365
sg38
S'left'
p6557
sg59
g63
sS'trial_loop.thisN'
p6558
I11
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p6559
g60
(g99
S'\x0b\x00\x00\x00'
tRp6560
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6561
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6562
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6563
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p6564
Nsg70
Vy
sS'block_loop.thisTrialN'
p6565
I0
sg39
F0.93310664255113807
sg34
g753
(S'\x07\xdf\x07\x0c\x13,3\rN@'
tRp6566
sa(dp6567
S'trial_loop.thisTrialN'
p6568
I12
sg6371
S'36-fig_rolls.png'
p6569
sS'block_loop.thisIndex'
p6570
g6365
sg38
S'left'
p6571
sg59
g63
sS'trial_loop.thisN'
p6572
I12
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p6573
sg64
g65
sS'trial_loop.thisIndex'
p6574
g60
(g99
S'\x0c\x00\x00\x00'
tRp6575
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6576
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p6577
sS'block_loop.thisRepN'
p6578
I2
sg6383
S'36-fig_rolls.png'
p6579
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6580
I2
sg6386
g6573
sg55
g11
sS'block_loop.thisTrial'
p6581
Nsg70
Vy
sS'block_loop.thisTrialN'
p6582
I0
sg39
F1.1666103123352514
sg34
g753
(S'\x07\xdf\x07\x0c\x13,9\x0c\xec\x98'
tRp6583
sa(dp6584
S'trial_loop.thisTrialN'
p6585
I13
sg6371
S'40-sardines.png'
p6586
sS'block_loop.thisIndex'
p6587
g6365
sg38
S'right'
p6588
sg59
g63
sS'trial_loop.thisN'
p6589
I13
sg33
S'5-pineapple.png'
p6590
sg64
g65
sS'trial_loop.thisIndex'
p6591
g60
(g99
S'\r\x00\x00\x00'
tRp6592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6593
I0
sg6380
S'5-pineapple.png'
p6594
sS'block_loop.thisRepN'
p6595
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6596
I2
sg6386
S'40-sardines.png'
p6597
sg55
g11
sS'block_loop.thisTrial'
p6598
Nsg70
Vy
sS'block_loop.thisTrialN'
p6599
I0
sg39
F0.98323539272678318
sg34
g753
(S'\x07\xdf\x07\x0c\x13-\x04\x00\x9c@'
tRp6600
sa(dp6601
S'trial_loop.thisTrialN'
p6602
I14
sg6371
S'1-treacle_cookies.png'
p6603
sS'block_loop.thisIndex'
p6604
g6365
sg38
S'left'
p6605
sg59
g63
sS'trial_loop.thisN'
p6606
I14
sg33
S'1-treacle_cookies.png'
p6607
sg64
g65
sS'trial_loop.thisIndex'
p6608
g60
(g99
S'\x0e\x00\x00\x00'
tRp6609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6610
I0
sg6380
S'21-nakd_banana_crunch.png'
p6611
sS'block_loop.thisRepN'
p6612
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6613
I2
sg6386
S'21-nakd_banana_crunch.png'
p6614
sg55
g11
sS'block_loop.thisTrial'
p6615
Nsg70
Vy
sS'block_loop.thisTrialN'
p6616
I0
sg39
F2.0499237648400594
sg34
g753
(S'\x07\xdf\x07\x0c\x13-\n\x00\xeeH'
tRp6617
sa(dp6618
S'trial_loop.thisTrialN'
p6619
I15
sg6371
S'23-crunchie_redo.png'
p6620
sS'block_loop.thisIndex'
p6621
g6365
sg38
S'left'
p6622
sg59
g63
sS'trial_loop.thisN'
p6623
I15
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p6624
g60
(g99
S'\x0f\x00\x00\x00'
tRp6625
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6626
I0
sg6380
S'33-ambrosia_rice.png'
p6627
sS'block_loop.thisRepN'
p6628
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6629
I2
sg6386
g6520
sg55
g11
sS'block_loop.thisTrial'
p6630
Nsg70
Vy
sS'block_loop.thisTrialN'
p6631
I0
sg39
F0.90033806899737101
sg34
g753
(S'\x07\xdf\x07\x0c\x13-\x11\x022\x80'
tRp6632
sa(dp6633
S'trial_loop.thisTrialN'
p6634
I16
sg6371
g6603
sS'block_loop.thisIndex'
p6635
g6365
sg38
S'left'
p6636
sg59
g63
sS'trial_loop.thisN'
p6637
I16
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p6638
g60
(g99
S'\x10\x00\x00\x00'
tRp6639
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6640
I0
sg6380
g6611
sS'block_loop.thisRepN'
p6641
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6642
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p6643
Nsg70
Vy
sS'block_loop.thisTrialN'
p6644
I0
sg39
F0.84999749113922007
sg34
g753
(S'\x07\xdf\x07\x0c\x13-\x17\x01\x19@'
tRp6645
sa(dp6646
S'trial_loop.thisTrialN'
p6647
I17
sg6371
S'7-olives.png'
p6648
sS'block_loop.thisIndex'
p6649
g6365
sg38
S'right'
p6650
sg59
g63
sS'trial_loop.thisN'
p6651
I17
sg33
S'22-daim.png'
p6652
sg64
g65
sS'trial_loop.thisIndex'
p6653
g60
(g99
S'\x11\x00\x00\x00'
tRp6654
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6655
I0
sg6380
S'22-daim.png'
p6656
sS'block_loop.thisRepN'
p6657
I2
sg6383
g6652
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6658
I2
sg6386
S'7-olives.png'
p6659
sg55
g11
sS'block_loop.thisTrial'
p6660
Nsg70
Vy
sS'block_loop.thisTrialN'
p6661
I0
sg39
F1.0998458190952078
sg34
g753
(S'\x07\xdf\x07\x0c\x13-\x1c\x0e\x8a\xa8'
tRp6662
sa(dp6663
S'trial_loop.thisTrialN'
p6664
I18
sg6371
S'2-steamed_puddings.png'
p6665
sS'block_loop.thisIndex'
p6666
g6365
sg38
S'left'
p6667
sg59
g63
sS'trial_loop.thisN'
p6668
I18
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p6669
g60
(g99
S'\x12\x00\x00\x00'
tRp6670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6671
I0
sg6380
S'20-fruit_pastilles.png'
p6672
sS'block_loop.thisRepN'
p6673
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6674
I2
sg6386
g6413
sg55
g11
sS'block_loop.thisTrial'
p6675
Nsg70
Vy
sS'block_loop.thisTrialN'
p6676
I0
sg39
F1.5332657841572654
sg34
g753
(S'\x07\xdf\x07\x0c\x13-#\x01H '
tRp6677
sa(dp6678
S'trial_loop.thisTrialN'
p6679
I19
sg6371
g6509
sS'block_loop.thisIndex'
p6680
g6365
sg38
S'right'
p6681
sg59
g63
sS'trial_loop.thisN'
p6682
I19
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p6683
g60
(g99
S'\x13\x00\x00\x00'
tRp6684
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6685
I0
sg6380
g6517
sS'block_loop.thisRepN'
p6686
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6687
I2
sg6386
g6520
sg55
g11
sS'block_loop.thisTrial'
p6688
Nsg70
Vy
sS'block_loop.thisTrialN'
p6689
I0
sg39
F0.9498575651232386
sg34
g753
(S'\x07\xdf\x07\x0c\x13-)\t\xee\xf8'
tRp6690
sa(dp6691
S'trial_loop.thisTrialN'
p6692
I20
sg6371
S'45-chewy_nougat_redo.png'
p6693
sS'block_loop.thisIndex'
p6694
g6365
sg38
S'left'
p6695
sg59
g63
sS'trial_loop.thisN'
p6696
I20
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6697
g60
(g99
S'\x14\x00\x00\x00'
tRp6698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6699
I0
sg6380
S'41-peanuts_redo.png'
p6700
sS'block_loop.thisRepN'
p6701
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6702
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p6703
Nsg70
Vy
sS'block_loop.thisTrialN'
p6704
I0
sg39
F0.93367940407188144
sg34
g753
(S'\x07\xdf\x07\x0c\x13-/\t\xcb\xd0'
tRp6705
sa(dp6706
S'trial_loop.thisTrialN'
p6707
I21
sg6371
S'43-mrporky_pork_crackles_redo.png'
p6708
sS'block_loop.thisIndex'
p6709
g6365
sg38
S'right'
p6710
sg59
g63
sS'trial_loop.thisN'
p6711
I21
sg33
S'18-mms.png'
p6712
sg64
g65
sS'trial_loop.thisIndex'
p6713
g60
(g99
S'\x15\x00\x00\x00'
tRp6714
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6715
I0
sg6380
S'18-mms.png'
p6716
sS'block_loop.thisRepN'
p6717
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6718
I2
sg6386
S'43-mrporky_pork_crackles_redo.png'
p6719
sg55
g11
sS'block_loop.thisTrial'
p6720
Nsg70
Vy
sS'block_loop.thisTrialN'
p6721
I0
sg39
F0.96667120922938921
sg34
g753
(S'\x07\xdf\x07\x0c\x13-5\t+\xa8'
tRp6722
sa(dp6723
S'trial_loop.thisTrialN'
p6724
I22
sg6371
S'30-spaghetti_hoops.png'
p6725
sS'block_loop.thisIndex'
p6726
g6365
sg38
S'right'
p6727
sg59
g63
sS'trial_loop.thisN'
p6728
I22
sg33
S'19-caramello_redo.png'
p6729
sg64
g65
sS'trial_loop.thisIndex'
p6730
g60
(g99
S'\x16\x00\x00\x00'
tRp6731
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6732
I0
sg6380
S'19-caramello_redo.png'
p6733
sS'block_loop.thisRepN'
p6734
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6735
I2
sg6386
S'30-spaghetti_hoops.png'
p6736
sg55
g11
sS'block_loop.thisTrial'
p6737
Nsg70
Vy
sS'block_loop.thisTrialN'
p6738
I0
sg39
F0.93319758875441039
sg34
g753
(S'\x07\xdf\x07\x0c\x13-;\tC\x18'
tRp6739
sa(dp6740
S'trial_loop.thisTrialN'
p6741
I23
sg6371
g6392
sS'block_loop.thisIndex'
p6742
g6365
sg38
S'right'
p6743
sg59
g63
sS'trial_loop.thisN'
p6744
I23
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p6745
g60
(g99
S'\x17\x00\x00\x00'
tRp6746
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6747
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6748
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6749
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p6750
Nsg70
Vy
sS'block_loop.thisTrialN'
p6751
I0
sg39
F0.96652837521105539
sg34
g753
(S'\x07\xdf\x07\x0c\x13.\x05\x08\xe1p'
tRp6752
sa(dp6753
S'trial_loop.thisTrialN'
p6754
I24
sg6371
S'49-yorkie.png'
p6755
sS'block_loop.thisIndex'
p6756
g6365
sg38
S'left'
p6757
sg59
g63
sS'trial_loop.thisN'
p6758
I24
sg33
S'49-yorkie.png'
p6759
sg64
g65
sS'trial_loop.thisIndex'
p6760
g60
(g99
S'\x18\x00\x00\x00'
tRp6761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6762
I0
sg6380
S'35-raisins.png'
p6763
sS'block_loop.thisRepN'
p6764
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6765
I2
sg6386
S'35-raisins.png'
p6766
sg55
g11
sS'block_loop.thisTrial'
p6767
Nsg70
Vy
sS'block_loop.thisTrialN'
p6768
I0
sg39
F1.0998851625918178
sg34
g753
(S'\x07\xdf\x07\x0c\x13.\x0b\x08\xba`'
tRp6769
sa(dp6770
S'trial_loop.thisTrialN'
p6771
I25
sg6371
g6725
sS'block_loop.thisIndex'
p6772
g6365
sg38
S'right'
p6773
sg59
g63
sS'trial_loop.thisN'
p6774
I25
sg33
g6736
sg64
g65
sS'trial_loop.thisIndex'
p6775
g60
(g99
S'\x19\x00\x00\x00'
tRp6776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6777
I0
sg6380
g6733
sS'block_loop.thisRepN'
p6778
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6779
I2
sg6386
g6736
sg55
g11
sS'block_loop.thisTrial'
p6780
Nsg70
Vy
sS'block_loop.thisTrialN'
p6781
I0
sg39
F0.88369320281344699
sg34
g753
(S'\x07\xdf\x07\x0c\x13.\x11\n\xba\x18'
tRp6782
sa(dp6783
S'trial_loop.thisTrialN'
p6784
I26
sg6371
S'13-mccoys_steak_crisps.png'
p6785
sS'block_loop.thisIndex'
p6786
g6365
sg38
S'right'
p6787
sg59
g63
sS'trial_loop.thisN'
p6788
I26
sg33
S'3-ellas_strawberries_apples.png'
p6789
sg64
g65
sS'trial_loop.thisIndex'
p6790
g60
(g99
S'\x1a\x00\x00\x00'
tRp6791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6792
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6793
sS'block_loop.thisRepN'
p6794
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6795
I2
sg6386
S'13-mccoys_steak_crisps.png'
p6796
sg55
g11
sS'block_loop.thisTrial'
p6797
Nsg70
Vy
sS'block_loop.thisTrialN'
p6798
I0
sg39
F0.91661487389501417
sg34
g753
(S'\x07\xdf\x07\x0c\x13.\x17\t\xa0\xd8'
tRp6799
sa(dp6800
S'trial_loop.thisTrialN'
p6801
I27
sg6371
S'31-hobnobs.png'
p6802
sS'block_loop.thisIndex'
p6803
g6365
sg38
S'left'
p6804
sg59
g63
sS'trial_loop.thisN'
p6805
I27
sg33
S'31-hobnobs.png'
p6806
sg64
g65
sS'trial_loop.thisIndex'
p6807
g60
(g99
S'\x1b\x00\x00\x00'
tRp6808
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6809
I0
sg6380
S'25-kitkat.png'
p6810
sS'block_loop.thisRepN'
p6811
I2
sg6383
g6806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6812
I2
sg6386
S'25-kitkat.png'
p6813
sg55
g11
sS'block_loop.thisTrial'
p6814
Nsg70
Vy
sS'block_loop.thisTrialN'
p6815
I0
sg39
F0.99984804285486462
sg34
g753
(S'\x07\xdf\x07\x0c\x13.\x1d\x08\xc6\x18'
tRp6816
sa(dp6817
S'trial_loop.thisTrialN'
p6818
I28
sg6371
S'5-pineapple.png'
p6819
sS'block_loop.thisIndex'
p6820
g6365
sg38
S'left'
p6821
sg59
g63
sS'trial_loop.thisN'
p6822
I28
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p6823
g60
(g99
S'\x1c\x00\x00\x00'
tRp6824
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6825
I0
sg6380
S'40-sardines.png'
p6826
sS'block_loop.thisRepN'
p6827
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6828
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p6829
Nsg70
Vy
sS'block_loop.thisTrialN'
p6830
I0
sg39
F0.96659366261883406
sg34
g753
(S'\x07\xdf\x07\x0c\x13.#\tV\xa0'
tRp6831
sa(dp6832
S'trial_loop.thisTrialN'
p6833
I29
sg6371
S'26-walkers_smoky_bacon.png'
p6834
sS'block_loop.thisIndex'
p6835
g6365
sg38
S'right'
p6836
sg59
g63
sS'trial_loop.thisN'
p6837
I29
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p6838
g60
(g99
S'\x1d\x00\x00\x00'
tRp6839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6840
I0
sg6380
S'44-crunch.png'
p6841
sS'block_loop.thisRepN'
p6842
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6843
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p6844
Nsg70
Vy
sS'block_loop.thisTrialN'
p6845
I0
sg39
F1.5998786053532967
sg34
g753
(S'\x07\xdf\x07\x0c\x13.)\t/\x90'
tRp6846
sa(dp6847
S'trial_loop.thisTrialN'
p6848
I30
sg6371
S'38-maltesers.png'
p6849
sS'block_loop.thisIndex'
p6850
g6365
sg38
S'left'
p6851
sg59
g63
sS'trial_loop.thisN'
p6852
I30
sg33
S'38-maltesers.png'
p6853
sg64
g65
sS'trial_loop.thisIndex'
p6854
g60
(g99
S'\x1e\x00\x00\x00'
tRp6855
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6856
I0
sg6380
S'6-sour_patch_kids.png'
p6857
sS'block_loop.thisRepN'
p6858
I2
sg6383
g6853
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6859
I2
sg6386
S'6-sour_patch_kids.png'
p6860
sg55
g11
sS'block_loop.thisTrial'
p6861
Nsg70
Vy
sS'block_loop.thisTrialN'
p6862
I0
sg39
F0.95007908613479231
sg34
g753
(S'\x07\xdf\x07\x0c\x13.0\x03\x8a@'
tRp6863
sa(dp6864
S'trial_loop.thisTrialN'
p6865
I31
sg6371
g6477
sS'block_loop.thisIndex'
p6866
g6365
sg38
S'left'
p6867
sg59
g63
sS'trial_loop.thisN'
p6868
I31
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p6869
g60
(g99
S'\x1f\x00\x00\x00'
tRp6870
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6871
I0
sg6380
g6485
sS'block_loop.thisRepN'
p6872
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6873
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p6874
Nsg70
Vy
sS'block_loop.thisTrialN'
p6875
I0
sg39
F0.90004384805070003
sg34
g753
(S'\x07\xdf\x07\x0c\x13.6\x03g\x18'
tRp6876
sa(dp6877
S'trial_loop.thisTrialN'
p6878
I32
sg6371
g6708
sS'block_loop.thisIndex'
p6879
g6365
sg38
S'right'
p6880
sg59
g63
sS'trial_loop.thisN'
p6881
I32
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p6882
g60
(g99
S' \x00\x00\x00'
tRp6883
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6884
I0
sg6380
g6716
sS'block_loop.thisRepN'
p6885
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6886
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p6887
Nsg70
Vy
sS'block_loop.thisTrialN'
p6888
I0
sg39
F0.98328927621332696
sg34
g753
(S'\x07\xdf\x07\x0c\x13/\x00\x02M\xd8'
tRp6889
sa(dp6890
S'trial_loop.thisTrialN'
p6891
I33
sg6371
g6392
sS'block_loop.thisIndex'
p6892
g6365
sg38
S'right'
p6893
sg59
g63
sS'trial_loop.thisN'
p6894
I33
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6895
g60
(g99
S'!\x00\x00\x00'
tRp6896
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6897
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6898
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6899
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p6900
Nsg70
Vy
sS'block_loop.thisTrialN'
p6901
I0
sg39
F1.0998617845762055
sg34
g753
(S'\x07\xdf\x07\x0c\x13/\x06\x02\x9f\xe0'
tRp6902
sa(dp6903
S'trial_loop.thisTrialN'
p6904
I34
sg6371
S'25-kitkat.png'
p6905
sS'block_loop.thisIndex'
p6906
g6365
sg38
S'right'
p6907
sg59
g63
sS'trial_loop.thisN'
p6908
I34
sg33
g6806
sg64
g65
sS'trial_loop.thisIndex'
p6909
g60
(g99
S'"\x00\x00\x00'
tRp6910
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6911
I0
sg6380
S'31-hobnobs.png'
p6912
sS'block_loop.thisRepN'
p6913
I2
sg6383
g6806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6914
I2
sg6386
g6813
sg55
g11
sS'block_loop.thisTrial'
p6915
Nsg70
Vy
sS'block_loop.thisTrialN'
p6916
I0
sg39
F1.1832680079169222
sg34
g753
(S'\x07\xdf\x07\x0c\x13/\x0c\x04\x9f\x98'
tRp6917
sa(dp6918
S'trial_loop.thisTrialN'
p6919
I35
sg6371
g6494
sS'block_loop.thisIndex'
p6920
g6365
sg38
S'left'
p6921
sg59
g63
sS'trial_loop.thisN'
p6922
I35
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6923
g60
(g99
S'#\x00\x00\x00'
tRp6924
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6925
I0
sg6380
g6501
sS'block_loop.thisRepN'
p6926
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6927
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p6928
Nsg70
Vy
sS'block_loop.thisTrialN'
p6929
I0
sg39
F0.89991612421727041
sg34
g753
(S'\x07\xdf\x07\x0c\x13/\x12\x08\x0e\x80'
tRp6930
sa(dp6931
S'trial_loop.thisTrialN'
p6932
I36
sg6371
S'8-liquorice_catherine_wheels.png'
p6933
sS'block_loop.thisIndex'
p6934
g6365
sg38
S'right'
p6935
sg59
g63
sS'trial_loop.thisN'
p6936
I36
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p6937
g60
(g99
S'$\x00\x00\x00'
tRp6938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6939
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p6940
sS'block_loop.thisRepN'
p6941
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6942
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p6943
Nsg70
Vy
sS'block_loop.thisTrialN'
p6944
I0
sg39
F1.0999675558705349
sg34
g753
(S'\x07\xdf\x07\x0c\x13/\x18\x06\xf5@'
tRp6945
sa(dp6946
S'trial_loop.thisTrialN'
p6947
I37
sg6371
S'18-mms.png'
p6948
sS'block_loop.thisIndex'
p6949
g6365
sg38
S'right'
p6950
sg59
g63
sS'trial_loop.thisN'
p6951
I37
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p6952
g60
(g99
S'%\x00\x00\x00'
tRp6953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6954
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p6955
sS'block_loop.thisRepN'
p6956
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6957
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p6958
Nsg70
Vy
sS'block_loop.thisTrialN'
p6959
I0
sg39
F0.84997952997946413
sg34
g753
(S'\x07\xdf\x07\x0c\x13/\x1e\x08\xf1\x10'
tRp6960
sa(dp6961
S'trial_loop.thisTrialN'
p6962
I38
sg6371
S'50-polo.png'
p6963
sS'block_loop.thisIndex'
p6964
g6365
sg38
S'right'
p6965
sg59
g63
sS'trial_loop.thisN'
p6966
I38
sg33
S'48-twix.png'
p6967
sg64
g65
sS'trial_loop.thisIndex'
p6968
g60
(g99
S'&\x00\x00\x00'
tRp6969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6970
I0
sg6380
S'48-twix.png'
p6971
sS'block_loop.thisRepN'
p6972
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6973
I2
sg6386
S'50-polo.png'
p6974
sg55
g11
sS'block_loop.thisTrial'
p6975
Nsg70
Vy
sS'block_loop.thisTrialN'
p6976
I0
sg39
F0.94980881339870393
sg34
g753
(S'\x07\xdf\x07\x0c\x13/$\x07$ '
tRp6977
sa(dp6978
S'trial_loop.thisTrialN'
p6979
I39
sg6371
g6648
sS'block_loop.thisIndex'
p6980
g6365
sg38
S'right'
p6981
sg59
g63
sS'trial_loop.thisN'
p6982
I39
sg33
g6652
sg64
g65
sS'trial_loop.thisIndex'
p6983
g60
(g99
S"'\x00\x00\x00"
tRp6984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6985
I0
sg6380
g6656
sS'block_loop.thisRepN'
p6986
I2
sg6383
g6652
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6987
I2
sg6386
g6659
sg55
g11
sS'block_loop.thisTrial'
p6988
Nsg70
Vy
sS'block_loop.thisTrialN'
p6989
I0
sg39
F1.2499920172631391
sg34
g753
(S'\x07\xdf\x07\x0c\x13/*\x06\xfd\x10'
tRp6990
sa(dp6991
S'trial_loop.thisTrialN'
p6992
I40
sg6371
S'6-sour_patch_kids.png'
p6993
sS'block_loop.thisIndex'
p6994
g6365
sg38
S'right'
p6995
sg59
g63
sS'trial_loop.thisN'
p6996
I40
sg33
g6853
sg64
g65
sS'trial_loop.thisIndex'
p6997
g60
(g99
S'(\x00\x00\x00'
tRp6998
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6999
I0
sg6380
S'38-maltesers.png'
p7000
sS'block_loop.thisRepN'
p7001
I2
sg6383
g6853
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7002
I2
sg6386
g6860
sg55
g11
sS'block_loop.thisTrial'
p7003
Nsg70
Vy
sS'block_loop.thisTrialN'
p7004
I0
sg39
F0.9333806215581717
sg34
g753
(S'\x07\xdf\x07\x0c\x13/0\x0b^('
tRp7005
sa(dp7006
S'trial_loop.thisTrialN'
p7007
I41
sg6371
g6620
sS'block_loop.thisIndex'
p7008
g6365
sg38
S'left'
p7009
sg59
g63
sS'trial_loop.thisN'
p7010
I41
sg33
g6520
sg64
g65
sS'trial_loop.thisIndex'
p7011
g60
(g99
S')\x00\x00\x00'
tRp7012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7013
I0
sg6380
g6627
sS'block_loop.thisRepN'
p7014
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7015
I2
sg6386
g6520
sg55
g11
sS'block_loop.thisTrial'
p7016
Nsg70
Vy
sS'block_loop.thisTrialN'
p7017
I0
sg39
F1.2332852848485345
sg34
g753
(S'\x07\xdf\x07\x0c\x13/6\n\xbe\x00'
tRp7018
sa(dp7019
S'trial_loop.thisTrialN'
p7020
I42
sg6371
g6693
sS'block_loop.thisIndex'
p7021
g6365
sg38
S'left'
p7022
sg59
g63
sS'trial_loop.thisN'
p7023
I42
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7024
g60
(g99
S'*\x00\x00\x00'
tRp7025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7026
I0
sg6380
g6700
sS'block_loop.thisRepN'
p7027
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7028
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p7029
Nsg70
Vy
sS'block_loop.thisTrialN'
p7030
I0
sg39
F0.69996105563768651
sg34
g753
(S'\x07\xdf\x07\x0c\x130\x00\x0e\xe0\x98'
tRp7031
sa(dp7032
S'trial_loop.thisTrialN'
p7033
I43
sg6371
g6426
sS'block_loop.thisIndex'
p7034
g6365
sg38
S'left'
p7035
sg59
g63
sS'trial_loop.thisN'
p7036
I43
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p7037
g60
(g99
S'+\x00\x00\x00'
tRp7038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7039
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7040
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7041
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7042
Nsg70
Vy
sS'block_loop.thisTrialN'
p7043
I0
sg39
F1.0499015272143879
sg34
g753
(S'\x07\xdf\x07\x0c\x130\x06\n\xae`'
tRp7044
sa(dp7045
S'trial_loop.thisTrialN'
p7046
I44
sg6371
S'29-beans.png'
p7047
sS'block_loop.thisIndex'
p7048
g6365
sg38
S'right'
p7049
sg59
g63
sS'trial_loop.thisN'
p7050
I44
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7051
g60
(g99
S',\x00\x00\x00'
tRp7052
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7053
I0
sg6380
S'46-pistachios.png'
p7054
sS'block_loop.thisRepN'
p7055
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7056
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p7057
Nsg70
Vy
sS'block_loop.thisTrialN'
p7058
I0
sg39
F0.8999323747921153
sg34
g753
(S'\x07\xdf\x07\x0c\x130\x0c\x0b\xf6\x80'
tRp7059
sa(dp7060
S'trial_loop.thisTrialN'
p7061
I45
sg6371
g6819
sS'block_loop.thisIndex'
p7062
g6365
sg38
S'left'
p7063
sg59
g63
sS'trial_loop.thisN'
p7064
I45
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p7065
g60
(g99
S'-\x00\x00\x00'
tRp7066
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7067
I0
sg6380
g6826
sS'block_loop.thisRepN'
p7068
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7069
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p7070
Nsg70
Vy
sS'block_loop.thisTrialN'
p7071
I0
sg39
F1.1167136317817494
sg34
g753
(S'\x07\xdf\x07\x0c\x130\x12\x0b\x1b\xc0'
tRp7072
sa(dp7073
S'trial_loop.thisTrialN'
p7074
I46
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p7075
sS'block_loop.thisIndex'
p7076
g6365
sg38
S'right'
p7077
sg59
g63
sS'trial_loop.thisN'
p7078
I46
sg33
g6579
sg64
g65
sS'trial_loop.thisIndex'
p7079
g60
(g99
S'.\x00\x00\x00'
tRp7080
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7081
I0
sg6380
S'36-fig_rolls.png'
p7082
sS'block_loop.thisRepN'
p7083
I2
sg6383
g6579
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7084
I2
sg6386
g6573
sg55
g11
sS'block_loop.thisTrial'
p7085
Nsg70
Vy
sS'block_loop.thisTrialN'
p7086
I0
sg39
F0.93327485026384238
sg34
g753
(S'\x07\xdf\x07\x0c\x130\x18\rV\x10'
tRp7087
sa(dp7088
S'trial_loop.thisTrialN'
p7089
I47
sg6371
g6509
sS'block_loop.thisIndex'
p7090
g6365
sg38
S'right'
p7091
sg59
g63
sS'trial_loop.thisN'
p7092
I47
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p7093
g60
(g99
S'/\x00\x00\x00'
tRp7094
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7095
I0
sg6380
g6517
sS'block_loop.thisRepN'
p7096
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7097
I2
sg6386
g6520
sg55
g11
sS'block_loop.thisTrial'
p7098
Nsg70
Vy
sS'block_loop.thisTrialN'
p7099
I0
sg39
F1.0666119658999378
sg34
g753
(S'\x07\xdf\x07\x0c\x130\x1e\x0c\xb9\xd0'
tRp7100
sa(dp7101
S'trial_loop.thisTrialN'
p7102
I48
sg6371
g6648
sS'block_loop.thisIndex'
p7103
g6365
sg38
S'right'
p7104
sg59
g63
sS'trial_loop.thisN'
p7105
I48
sg33
g6652
sg64
g65
sS'trial_loop.thisIndex'
p7106
g60
(g99
S'0\x00\x00\x00'
tRp7107
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7108
I0
sg6380
g6656
sS'block_loop.thisRepN'
p7109
I2
sg6383
g6652
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7110
I2
sg6386
g6659
sg55
g11
sS'block_loop.thisTrial'
p7111
Nsg70
Vy
sS'block_loop.thisTrialN'
p7112
I0
sg39
F0.98328813582338626
sg34
g753
(S'\x07\xdf\x07\x0c\x130$\x0e<\x88'
tRp7113
sa(dp7114
S'trial_loop.thisTrialN'
p7115
I49
sg6371
g6620
sS'block_loop.thisIndex'
p7116
g6365
sg38
S'right'
p7117
sg59
g63
sS'trial_loop.thisN'
p7118
I49
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p7119
g60
(g99
S'1\x00\x00\x00'
tRp7120
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7121
I0
sg6380
g6627
sS'block_loop.thisRepN'
p7122
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7123
I2
sg6386
g6520
sg55
g11
sS'block_loop.thisTrial'
p7124
Nsg70
Vy
sS'block_loop.thisTrialN'
p7125
I0
sg39
F1.0665338490944123
sg34
g753
(S'\x07\xdf\x07\x0c\x130*\x0e\x92x'
tRp7126
sa(dp7127
S'trial_loop.thisTrialN'
p7128
I50
sg6371
g6569
sS'block_loop.thisIndex'
p7129
g6365
sg38
S'left'
p7130
sg59
g63
sS'trial_loop.thisN'
p7131
I50
sg33
g6579
sg64
g65
sS'trial_loop.thisIndex'
p7132
g60
(g99
S'2\x00\x00\x00'
tRp7133
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7134
I0
sg6380
g6577
sS'block_loop.thisRepN'
p7135
I2
sg6383
g6579
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7136
I2
sg6386
g6573
sg55
g11
sS'block_loop.thisTrial'
p7137
Nsg70
Vy
sS'block_loop.thisTrialN'
p7138
I0
sg39
F0.80032290179951815
sg34
g753
(S'\x07\xdf\x07\x0c\x1301\x00\xd6\xd8'
tRp7139
sa(dp7140
S'trial_loop.thisTrialN'
p7141
I51
sg6371
g6693
sS'block_loop.thisIndex'
p7142
g6365
sg38
S'left'
p7143
sg59
g63
sS'trial_loop.thisN'
p7144
I51
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p7145
g60
(g99
S'3\x00\x00\x00'
tRp7146
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7147
I0
sg6380
g6700
sS'block_loop.thisRepN'
p7148
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7149
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p7150
Nsg70
Vy
sS'block_loop.thisTrialN'
p7151
I0
sg39
F0.78320220734167378
sg34
g753
(S'\x07\xdf\x07\x0c\x1306\r\x90\xa8'
tRp7152
sa(dp7153
S'trial_loop.thisTrialN'
p7154
I52
sg6371
S'22-daim.png'
p7155
sS'block_loop.thisIndex'
p7156
g6365
sg38
S'left'
p7157
sg59
g63
sS'trial_loop.thisN'
p7158
I52
sg33
g6652
sg64
g65
sS'trial_loop.thisIndex'
p7159
g60
(g99
S'4\x00\x00\x00'
tRp7160
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7161
I0
sg6380
S'7-olives.png'
p7162
sS'block_loop.thisRepN'
p7163
I2
sg6383
g6652
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7164
I2
sg6386
g6659
sg55
g11
sS'block_loop.thisTrial'
p7165
Nsg70
Vy
sS'block_loop.thisTrialN'
p7166
I0
sg39
F0.73323624802287668
sg34
g753
(S'\x07\xdf\x07\x0c\x131\x00\n\xcd\xa0'
tRp7167
sa(dp7168
S'trial_loop.thisTrialN'
p7169
I53
sg6371
g6693
sS'block_loop.thisIndex'
p7170
g6365
sg38
S'left'
p7171
sg59
g63
sS'trial_loop.thisN'
p7172
I53
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7173
g60
(g99
S'5\x00\x00\x00'
tRp7174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7175
I0
sg6380
g6700
sS'block_loop.thisRepN'
p7176
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7177
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p7178
Nsg70
Vy
sS'block_loop.thisTrialN'
p7179
I0
sg39
F0.74992416398163186
sg34
g753
(S'\x07\xdf\x07\x0c\x131\x06\x07S\x00'
tRp7180
sa(dp7181
S'trial_loop.thisTrialN'
p7182
I54
sg6371
g6509
sS'block_loop.thisIndex'
p7183
g6365
sg38
S'right'
p7184
sg59
g63
sS'trial_loop.thisN'
p7185
I54
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p7186
g60
(g99
S'6\x00\x00\x00'
tRp7187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7188
I0
sg6380
g6517
sS'block_loop.thisRepN'
p7189
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7190
I2
sg6386
g6520
sg55
g11
sS'block_loop.thisTrial'
p7191
Nsg70
Vy
sS'block_loop.thisTrialN'
p7192
I0
sg39
F0.96659765399090247
sg34
g753
(S'\x07\xdf\x07\x0c\x131\x0c\x03\xd8`'
tRp7193
sa(dp7194
S'trial_loop.thisTrialN'
p7195
I55
sg6371
g6834
sS'block_loop.thisIndex'
p7196
g6365
sg38
S'right'
p7197
sg59
g63
sS'trial_loop.thisN'
p7198
I55
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p7199
g60
(g99
S'7\x00\x00\x00'
tRp7200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7201
I0
sg6380
g6841
sS'block_loop.thisRepN'
p7202
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7203
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p7204
Nsg70
Vy
sS'block_loop.thisTrialN'
p7205
I0
sg39
F1.3499669856755645
sg34
g753
(S'\x07\xdf\x07\x0c\x131\x12\x03\xef\xd0'
tRp7206
sa(dp7207
S'trial_loop.thisTrialN'
p7208
I56
sg6371
g6802
sS'block_loop.thisIndex'
p7209
g6365
sg38
S'left'
p7210
sg59
g63
sS'trial_loop.thisN'
p7211
I56
sg33
g6806
sg64
g65
sS'trial_loop.thisIndex'
p7212
g60
(g99
S'8\x00\x00\x00'
tRp7213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7214
I0
sg6380
g6810
sS'block_loop.thisRepN'
p7215
I2
sg6383
g6806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7216
I2
sg6386
g6813
sg55
g11
sS'block_loop.thisTrial'
p7217
Nsg70
Vy
sS'block_loop.thisTrialN'
p7218
I0
sg39
F1.0503707982352353
sg34
g753
(S'\x07\xdf\x07\x0c\x131\x18\t\xbc0'
tRp7219
sa(dp7220
S'trial_loop.thisTrialN'
p7221
I57
sg6371
g7155
sS'block_loop.thisIndex'
p7222
g6365
sg38
S'left'
p7223
sg59
g63
sS'trial_loop.thisN'
p7224
I57
sg33
g6659
sg64
g65
sS'trial_loop.thisIndex'
p7225
g60
(g99
S'9\x00\x00\x00'
tRp7226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7227
I0
sg6380
g7162
sS'block_loop.thisRepN'
p7228
I2
sg6383
g6652
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7229
I2
sg6386
g6659
sg55
g11
sS'block_loop.thisTrial'
p7230
Nsg70
Vy
sS'block_loop.thisTrialN'
p7231
I0
sg39
F0.96655688499595271
sg34
g753
(S'\x07\xdf\x07\x0c\x131\x1e\x0b\x04P'
tRp7232
sa(dp7233
S'trial_loop.thisTrialN'
p7234
I58
sg6371
S'4-corn.png'
p7235
sS'block_loop.thisIndex'
p7236
g6365
sg38
S'right'
p7237
sg59
g63
sS'trial_loop.thisN'
p7238
I58
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p7239
g60
(g99
S':\x00\x00\x00'
tRp7240
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7241
I0
sg6380
S'10-bounty_redo.png'
p7242
sS'block_loop.thisRepN'
p7243
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7244
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7245
Nsg70
Vy
sS'block_loop.thisTrialN'
p7246
I0
sg39
F0.91664880054304376
sg34
g753
(S'\x07\xdf\x07\x0c\x131$\x0b\x1b\xc0'
tRp7247
sa(dp7248
S'trial_loop.thisTrialN'
p7249
I59
sg6371
g6993
sS'block_loop.thisIndex'
p7250
g6365
sg38
S'right'
p7251
sg59
g63
sS'trial_loop.thisN'
p7252
I59
sg33
g6853
sg64
g65
sS'trial_loop.thisIndex'
p7253
g60
(g99
S';\x00\x00\x00'
tRp7254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7255
I0
sg6380
g7000
sS'block_loop.thisRepN'
p7256
I2
sg6383
g6853
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7257
I2
sg6386
g6860
sg55
g11
sS'block_loop.thisTrial'
p7258
Nsg70
Vy
sS'block_loop.thisTrialN'
p7259
I0
sg39
F1.0330493949077209
sg34
g753
(S'\x07\xdf\x07\x0c\x131*\nA\x00'
tRp7260
sa(dp7261
S'trial_loop.thisTrialN'
p7262
I60
sg6371
g6372
sS'block_loop.thisIndex'
p7263
g6365
sg38
S'left'
p7264
sg59
g63
sS'trial_loop.thisN'
p7265
I60
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p7266
g60
(g99
S'<\x00\x00\x00'
tRp7267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7268
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7269
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7270
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7271
Nsg70
Vy
sS'block_loop.thisTrialN'
p7272
I0
sg39
F1.2331795135542052
sg34
g753
(S'\x07\xdf\x07\x0c\x1310\x0bJ\xa0'
tRp7273
sa(dp7274
S'trial_loop.thisTrialN'
p7275
I61
sg6371
S'48-twix.png'
p7276
sS'block_loop.thisIndex'
p7277
g6365
sg38
S'left'
p7278
sg59
g63
sS'trial_loop.thisN'
p7279
I61
sg33
g6967
sg64
g65
sS'trial_loop.thisIndex'
p7280
g60
(g99
S'=\x00\x00\x00'
tRp7281
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7282
I0
sg6380
S'50-polo.png'
p7283
sS'block_loop.thisRepN'
p7284
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7285
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p7286
Nsg70
Vy
sS'block_loop.thisTrialN'
p7287
I0
sg39
F1.7170176030776929
sg34
g753
(S'\x07\xdf\x07\x0c\x1317\x00*\xf8'
tRp7288
sa(dp7289
S'trial_loop.thisTrialN'
p7290
I62
sg6371
g6494
sS'block_loop.thisIndex'
p7291
g6365
sg38
S'left'
p7292
sg59
g63
sS'trial_loop.thisN'
p7293
I62
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7294
g60
(g99
S'>\x00\x00\x00'
tRp7295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7296
I0
sg6380
g6501
sS'block_loop.thisRepN'
p7297
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7298
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p7299
Nsg70
Vy
sS'block_loop.thisTrialN'
p7300
I0
sg39
F0.83308035653317347
sg34
g753
(S'\x07\xdf\x07\x0c\x132\x01\x0bu\x98'
tRp7301
sa(dp7302
S'trial_loop.thisTrialN'
p7303
I63
sg6371
g6372
sS'block_loop.thisIndex'
p7304
g6365
sg38
S'left'
p7305
sg59
g63
sS'trial_loop.thisN'
p7306
I63
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p7307
g60
(g99
S'?\x00\x00\x00'
tRp7308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7309
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7310
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7311
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7312
Nsg70
Vy
sS'block_loop.thisTrialN'
p7313
I0
sg39
F0.84990911081695231
sg34
g753
(S'\x07\xdf\x07\x0c\x132\x07\tf@'
tRp7314
sa(dp7315
S'trial_loop.thisTrialN'
p7316
I64
sg6371
S'19-caramello_redo.png'
p7317
sS'block_loop.thisIndex'
p7318
g6365
sg38
S'left'
p7319
sg59
g63
sS'trial_loop.thisN'
p7320
I64
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p7321
g60
(g99
S'@\x00\x00\x00'
tRp7322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7323
I0
sg6380
S'30-spaghetti_hoops.png'
p7324
sS'block_loop.thisRepN'
p7325
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7326
I2
sg6386
g6736
sg55
g11
sS'block_loop.thisTrial'
p7327
Nsg70
Vy
sS'block_loop.thisTrialN'
p7328
I0
sg39
F1.1499437787133502
sg34
g753
(S'\x07\xdf\x07\x0c\x132\r\x07\x95h'
tRp7329
sa(dp7330
S'trial_loop.thisTrialN'
p7331
I65
sg6371
S'21-nakd_banana_crunch.png'
p7332
sS'block_loop.thisIndex'
p7333
g6365
sg38
S'right'
p7334
sg59
g63
sS'trial_loop.thisN'
p7335
I65
sg33
g6614
sg64
g65
sS'trial_loop.thisIndex'
p7336
g60
(g99
S'A\x00\x00\x00'
tRp7337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7338
I0
sg6380
S'1-treacle_cookies.png'
p7339
sS'block_loop.thisRepN'
p7340
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7341
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p7342
Nsg70
Vy
sS'block_loop.thisTrialN'
p7343
I0
sg39
F1.1165750742366072
sg34
g753
(S'\x07\xdf\x07\x0c\x132\x13\n\x8b8'
tRp7344
sa(dp7345
S'trial_loop.thisTrialN'
p7346
I66
sg6371
g7075
sS'block_loop.thisIndex'
p7347
g6365
sg38
S'right'
p7348
sg59
g63
sS'trial_loop.thisN'
p7349
I66
sg33
g6573
sg64
g65
sS'trial_loop.thisIndex'
p7350
g60
(g99
S'B\x00\x00\x00'
tRp7351
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7352
I0
sg6380
g7082
sS'block_loop.thisRepN'
p7353
I2
sg6383
g6579
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7354
I2
sg6386
g6573
sg55
g11
sS'block_loop.thisTrial'
p7355
Nsg70
Vy
sS'block_loop.thisTrialN'
p7356
I0
sg39
F1.2003579118099879
sg34
g753
(S'\x07\xdf\x07\x0c\x132\x19\x0c\xc5\x88'
tRp7357
sa(dp7358
S'trial_loop.thisTrialN'
p7359
I67
sg6371
S'3-ellas_strawberries_apples.png'
p7360
sS'block_loop.thisIndex'
p7361
g6365
sg38
S'left'
p7362
sg59
g63
sS'trial_loop.thisN'
p7363
I67
sg33
g6789
sg64
g65
sS'trial_loop.thisIndex'
p7364
g60
(g99
S'C\x00\x00\x00'
tRp7365
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7366
I0
sg6380
S'13-mccoys_steak_crisps.png'
p7367
sS'block_loop.thisRepN'
p7368
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7369
I2
sg6386
g6796
sg55
g11
sS'block_loop.thisTrial'
p7370
Nsg70
Vy
sS'block_loop.thisTrialN'
p7371
I0
sg39
F1.1499389320451883
sg34
g753
(S'\x07\xdf\x07\x0c\x132 \x01,\xc8'
tRp7372
sa(dp7373
S'trial_loop.thisTrialN'
p7374
I68
sg6371
S'35-raisins.png'
p7375
sS'block_loop.thisIndex'
p7376
g6365
sg38
S'right'
p7377
sg59
g63
sS'trial_loop.thisN'
p7378
I68
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p7379
g60
(g99
S'D\x00\x00\x00'
tRp7380
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7381
I0
sg6380
S'49-yorkie.png'
p7382
sS'block_loop.thisRepN'
p7383
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7384
I2
sg6386
g6766
sg55
g11
sS'block_loop.thisTrial'
p7385
Nsg70
Vy
sS'block_loop.thisTrialN'
p7386
I0
sg39
F0.94995079211366829
sg34
g753
(S'\x07\xdf\x07\x0c\x132&\x03\xe4\x18'
tRp7387
sa(dp7388
S'trial_loop.thisTrialN'
p7389
I69
sg6371
g7075
sS'block_loop.thisIndex'
p7390
g6365
sg38
S'right'
p7391
sg59
g63
sS'trial_loop.thisN'
p7392
I69
sg33
g6579
sg64
g65
sS'trial_loop.thisIndex'
p7393
g60
(g99
S'E\x00\x00\x00'
tRp7394
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7395
I0
sg6380
g7082
sS'block_loop.thisRepN'
p7396
I2
sg6383
g6579
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7397
I2
sg6386
g6573
sg55
g11
sS'block_loop.thisTrial'
p7398
Nsg70
Vy
sS'block_loop.thisTrialN'
p7399
I0
sg39
F0.88323619100265205
sg34
g753
(S'\x07\xdf\x07\x0c\x132,\x03\xbd\x08'
tRp7400
sa(dp7401
S'trial_loop.thisTrialN'
p7402
I70
sg6371
g6460
sS'block_loop.thisIndex'
p7403
g6365
sg38
S'left'
p7404
sg59
g63
sS'trial_loop.thisN'
p7405
I70
sg33
g6471
sg64
g65
sS'trial_loop.thisIndex'
p7406
g60
(g99
S'F\x00\x00\x00'
tRp7407
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7408
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7409
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7410
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p7411
Nsg70
Vy
sS'block_loop.thisTrialN'
p7412
I0
sg39
F0.83330586890951963
sg34
g753
(S'\x07\xdf\x07\x0c\x1322\x02i0'
tRp7413
sa(dp7414
S'trial_loop.thisTrialN'
p7415
I71
sg6371
g6948
sS'block_loop.thisIndex'
p7416
g6365
sg38
S'left'
p7417
sg59
g63
sS'trial_loop.thisN'
p7418
I71
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7419
g60
(g99
S'G\x00\x00\x00'
tRp7420
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7421
I0
sg6380
g6955
sS'block_loop.thisRepN'
p7422
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7423
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p7424
Nsg70
Vy
sS'block_loop.thisTrialN'
p7425
I0
sg39
F1.0333421903706039
sg34
g753
(S'\x07\xdf\x07\x0c\x1328\x00Y\xd8'
tRp7426
sa(dp7427
S'trial_loop.thisTrialN'
p7428
I72
sg6371
g7360
sS'block_loop.thisIndex'
p7429
g6365
sg38
S'left'
p7430
sg59
g63
sS'trial_loop.thisN'
p7431
I72
sg33
g6789
sg64
g65
sS'trial_loop.thisIndex'
p7432
g60
(g99
S'H\x00\x00\x00'
tRp7433
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7434
I0
sg6380
g7367
sS'block_loop.thisRepN'
p7435
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7436
I2
sg6386
g6796
sg55
g11
sS'block_loop.thisTrial'
p7437
Nsg70
Vy
sS'block_loop.thisTrialN'
p7438
I0
sg39
F0.7498811142068007
sg34
g753
(S'\x07\xdf\x07\x0c\x133\x02\x01g`'
tRp7439
sa(dp7440
S'trial_loop.thisTrialN'
p7441
I73
sg6371
g7332
sS'block_loop.thisIndex'
p7442
g6365
sg38
S'right'
p7443
sg59
g63
sS'trial_loop.thisN'
p7444
I73
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p7445
g60
(g99
S'I\x00\x00\x00'
tRp7446
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7447
I0
sg6380
g7339
sS'block_loop.thisRepN'
p7448
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7449
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p7450
Nsg70
Vy
sS'block_loop.thisTrialN'
p7451
I0
sg39
F1.0165661791834282
sg34
g753
(S'\x07\xdf\x07\x0c\x133\x07\r/\x00'
tRp7452
sa(dp7453
S'trial_loop.thisTrialN'
p7454
I74
sg6371
g6665
sS'block_loop.thisIndex'
p7455
g6365
sg38
S'left'
p7456
sg59
g63
sS'trial_loop.thisN'
p7457
I74
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p7458
g60
(g99
S'J\x00\x00\x00'
tRp7459
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7460
I0
sg6380
g6672
sS'block_loop.thisRepN'
p7461
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7462
I2
sg6386
g6413
sg55
g11
sS'block_loop.thisTrial'
p7463
Nsg70
Vy
sS'block_loop.thisTrialN'
p7464
I0
sg39
F0.79998021421488374
sg34
g753
(S'\x07\xdf\x07\x0c\x133\r\r\xfa '
tRp7465
sa(dp7466
S'trial_loop.thisTrialN'
p7467
I75
sg6371
g6725
sS'block_loop.thisIndex'
p7468
g6365
sg38
S'right'
p7469
sg59
g63
sS'trial_loop.thisN'
p7470
I75
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p7471
g60
(g99
S'K\x00\x00\x00'
tRp7472
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7473
I0
sg6380
g6733
sS'block_loop.thisRepN'
p7474
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7475
I2
sg6386
g6736
sg55
g11
sS'block_loop.thisTrial'
p7476
Nsg70
Vy
sS'block_loop.thisTrialN'
p7477
I0
sg39
F0.93327599066105904
sg34
g753
(S'\x07\xdf\x07\x0c\x133\x13\x0bu\x98'
tRp7478
sa(dp7479
S'trial_loop.thisTrialN'
p7480
I76
sg6371
g6933
sS'block_loop.thisIndex'
p7481
g6365
sg38
S'right'
p7482
sg59
g63
sS'trial_loop.thisN'
p7483
I76
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p7484
g60
(g99
S'L\x00\x00\x00'
tRp7485
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7486
I0
sg6380
g6940
sS'block_loop.thisRepN'
p7487
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7488
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7489
Nsg70
Vy
sS'block_loop.thisTrialN'
p7490
I0
sg39
F0.89993722146027721
sg34
g753
(S'\x07\xdf\x07\x0c\x133\x19\x0b\x13\xf0'
tRp7491
sa(dp7492
S'trial_loop.thisTrialN'
p7493
I77
sg6371
g7047
sS'block_loop.thisIndex'
p7494
g6365
sg38
S'right'
p7495
sg59
g63
sS'trial_loop.thisN'
p7496
I77
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7497
g60
(g99
S'M\x00\x00\x00'
tRp7498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7499
I0
sg6380
g7054
sS'block_loop.thisRepN'
p7500
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7501
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p7502
Nsg70
Vy
sS'block_loop.thisTrialN'
p7503
I0
sg39
F0.81685686492710374
sg34
g753
(S'\x07\xdf\x07\x0c\x133\x1f\t\xfa\xb0'
tRp7504
sa(dp7505
S'trial_loop.thisTrialN'
p7506
I78
sg6371
g6708
sS'block_loop.thisIndex'
p7507
g6365
sg38
S'right'
p7508
sg59
g63
sS'trial_loop.thisN'
p7509
I78
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7510
g60
(g99
S'N\x00\x00\x00'
tRp7511
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7512
I0
sg6380
g6716
sS'block_loop.thisRepN'
p7513
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7514
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p7515
Nsg70
Vy
sS'block_loop.thisTrialN'
p7516
I0
sg39
F0.96664212924952153
sg34
g753
(S'\x07\xdf\x07\x0c\x133%\x07\xb0\xc0'
tRp7517
sa(dp7518
S'trial_loop.thisTrialN'
p7519
I79
sg6371
g6849
sS'block_loop.thisIndex'
p7520
g6365
sg38
S'left'
p7521
sg59
g63
sS'trial_loop.thisN'
p7522
I79
sg33
g6853
sg64
g65
sS'trial_loop.thisIndex'
p7523
g60
(g99
S'O\x00\x00\x00'
tRp7524
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7525
I0
sg6380
g6857
sS'block_loop.thisRepN'
p7526
I2
sg6383
g6853
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7527
I2
sg6386
g6860
sg55
g11
sS'block_loop.thisTrial'
p7528
Nsg70
Vy
sS'block_loop.thisTrialN'
p7529
I0
sg39
F0.99975282019295264
sg34
g753
(S'\x07\xdf\x07\x0c\x133+\x07\xc80'
tRp7530
sa(dp7531
S'trial_loop.thisTrialN'
p7532
I80
sg6371
g6409
sS'block_loop.thisIndex'
p7533
g6365
sg38
S'right'
p7534
sg59
g63
sS'trial_loop.thisN'
p7535
I80
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7536
g60
(g99
S'P\x00\x00\x00'
tRp7537
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7538
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7539
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7540
I2
sg6386
g6413
sg55
g11
sS'block_loop.thisTrial'
p7541
Nsg70
Vy
sS'block_loop.thisTrialN'
p7542
I0
sg39
F1.1665746751023107
sg34
g753
(S'\x07\xdf\x07\x0c\x1331\x08\x1a8'
tRp7543
sa(dp7544
S'trial_loop.thisTrialN'
p7545
I81
sg6371
g7276
sS'block_loop.thisIndex'
p7546
g6365
sg38
S'left'
p7547
sg59
g63
sS'trial_loop.thisN'
p7548
I81
sg33
g6974
sg64
g65
sS'trial_loop.thisIndex'
p7549
g60
(g99
S'Q\x00\x00\x00'
tRp7550
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7551
I0
sg6380
g7283
sS'block_loop.thisRepN'
p7552
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7553
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p7554
Nsg70
Vy
sS'block_loop.thisTrialN'
p7555
I0
sg39
F0.94995022191869793
sg34
g753
(S'\x07\xdf\x07\x0c\x1337\x0bJ\xa0'
tRp7556
sa(dp7557
S'trial_loop.thisTrialN'
p7558
I82
sg6371
g6620
sS'block_loop.thisIndex'
p7559
g6365
sg38
S'left'
p7560
sg59
g63
sS'trial_loop.thisN'
p7561
I82
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p7562
g60
(g99
S'R\x00\x00\x00'
tRp7563
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7564
I0
sg6380
g6627
sS'block_loop.thisRepN'
p7565
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7566
I2
sg6386
g6520
sg55
g11
sS'block_loop.thisTrial'
p7567
Nsg70
Vy
sS'block_loop.thisTrialN'
p7568
I0
sg39
F1.2001646154822083
sg34
g753
(S'\x07\xdf\x07\x0c\x134\x01\n\xe8\xf8'
tRp7569
sa(dp7570
S'trial_loop.thisTrialN'
p7571
I83
sg6371
g6526
sS'block_loop.thisIndex'
p7572
g6365
sg38
S'right'
p7573
sg59
g63
sS'trial_loop.thisN'
p7574
I83
sg33
g6536
sg64
g65
sS'trial_loop.thisIndex'
p7575
g60
(g99
S'S\x00\x00\x00'
tRp7576
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7577
I0
sg6380
g6534
sS'block_loop.thisRepN'
p7578
I2
sg6383
g6536
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7579
I2
sg6386
g6530
sg55
g11
sS'block_loop.thisTrial'
p7580
Nsg70
Vy
sS'block_loop.thisTrialN'
p7581
I0
sg39
F1.0165040278589004
sg34
g753
(S'\x07\xdf\x07\x0c\x134\x07\x0e\x92x'
tRp7582
sa(dp7583
S'trial_loop.thisTrialN'
p7584
I84
sg6371
g6785
sS'block_loop.thisIndex'
p7585
g6365
sg38
S'right'
p7586
sg59
g63
sS'trial_loop.thisN'
p7587
I84
sg33
g6796
sg64
g65
sS'trial_loop.thisIndex'
p7588
g60
(g99
S'T\x00\x00\x00'
tRp7589
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7590
I0
sg6380
g6793
sS'block_loop.thisRepN'
p7591
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7592
I2
sg6386
g6796
sg55
g11
sS'block_loop.thisTrial'
p7593
Nsg70
Vy
sS'block_loop.thisTrialN'
p7594
I0
sg39
F2.3665924652013928
sg34
g753
(S'\x07\xdf\x07\x0c\x134\x0e\x00\x1f@'
tRp7595
sa(dp7596
S'trial_loop.thisTrialN'
p7597
I85
sg6371
g6849
sS'block_loop.thisIndex'
p7598
g6365
sg38
S'left'
p7599
sg59
g63
sS'trial_loop.thisN'
p7600
I85
sg33
g6853
sg64
g65
sS'trial_loop.thisIndex'
p7601
g60
(g99
S'U\x00\x00\x00'
tRp7602
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7603
I0
sg6380
g6857
sS'block_loop.thisRepN'
p7604
I2
sg6383
g6853
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7605
I2
sg6386
g6860
sg55
g11
sS'block_loop.thisTrial'
p7606
Nsg70
Vy
sS'block_loop.thisTrialN'
p7607
I0
sg39
F1.3663122140496853
sg34
g753
(S'\x07\xdf\x07\x0c\x134\x15\x06"P'
tRp7608
sa(dp7609
S'trial_loop.thisTrialN'
p7610
I86
sg6371
g7375
sS'block_loop.thisIndex'
p7611
g6365
sg38
S'right'
p7612
sg59
g63
sS'trial_loop.thisN'
p7613
I86
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p7614
g60
(g99
S'V\x00\x00\x00'
tRp7615
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7616
I0
sg6380
g7382
sS'block_loop.thisRepN'
p7617
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7618
I2
sg6386
g6766
sg55
g11
sS'block_loop.thisTrial'
p7619
Nsg70
Vy
sS'block_loop.thisTrialN'
p7620
I0
sg39
F0.94992199723492377
sg34
g753
(S'\x07\xdf\x07\x0c\x134\x1b\x0c-0'
tRp7621
sa(dp7622
S'trial_loop.thisTrialN'
p7623
I87
sg6371
g7360
sS'block_loop.thisIndex'
p7624
g6365
sg38
S'left'
p7625
sg59
g63
sS'trial_loop.thisN'
p7626
I87
sg33
g6789
sg64
g65
sS'trial_loop.thisIndex'
p7627
g60
(g99
S'W\x00\x00\x00'
tRp7628
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7629
I0
sg6380
g7367
sS'block_loop.thisRepN'
p7630
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7631
I2
sg6386
g6796
sg55
g11
sS'block_loop.thisTrial'
p7632
Nsg70
Vy
sS'block_loop.thisTrialN'
p7633
I0
sg39
F0.98374571782915154
sg34
g753
(S'\x07\xdf\x07\x0c\x134!\x0c\n\x08'
tRp7634
sa(dp7635
S'trial_loop.thisTrialN'
p7636
I88
sg6371
g6948
sS'block_loop.thisIndex'
p7637
g6365
sg38
S'left'
p7638
sg59
g63
sS'trial_loop.thisN'
p7639
I88
sg33
g6719
sg64
g65
sS'trial_loop.thisIndex'
p7640
g60
(g99
S'X\x00\x00\x00'
tRp7641
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7642
I0
sg6380
g6955
sS'block_loop.thisRepN'
p7643
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7644
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p7645
Nsg70
Vy
sS'block_loop.thisTrialN'
p7646
I0
sg39
F1.0500195577042177
sg34
g753
(S"\x07\xdf\x07\x0c\x134'\x0c\\\x10"
tRp7647
sa(dp7648
S'trial_loop.thisTrialN'
p7649
I89
sg6371
g7235
sS'block_loop.thisIndex'
p7650
g6365
sg38
S'right'
p7651
sg59
g63
sS'trial_loop.thisN'
p7652
I89
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p7653
g60
(g99
S'Y\x00\x00\x00'
tRp7654
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7655
I0
sg6380
g7242
sS'block_loop.thisRepN'
p7656
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7657
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7658
Nsg70
Vy
sS'block_loop.thisTrialN'
p7659
I0
sg39
F1.0165373843046837
sg34
g753
(S'\x07\xdf\x07\x0c\x134-\r\xa40'
tRp7660
sa(dp7661
S'trial_loop.thisTrialN'
p7662
I90
sg6371
g7047
sS'block_loop.thisIndex'
p7663
g6365
sg38
S'right'
p7664
sg59
g63
sS'trial_loop.thisN'
p7665
I90
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7666
g60
(g99
S'Z\x00\x00\x00'
tRp7667
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7668
I0
sg6380
g7054
sS'block_loop.thisRepN'
p7669
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7670
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p7671
Nsg70
Vy
sS'block_loop.thisTrialN'
p7672
I0
sg39
F0.73374543272802839
sg34
g753
(S'\x07\xdf\x07\x0c\x1343\x0e4\xb8'
tRp7673
sa(dp7674
S'trial_loop.thisTrialN'
p7675
I91
sg6371
g6443
sS'block_loop.thisIndex'
p7676
g6365
sg38
S'right'
p7677
sg59
g63
sS'trial_loop.thisN'
p7678
I91
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7679
g60
(g99
S'[\x00\x00\x00'
tRp7680
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7681
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7682
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7683
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p7684
Nsg70
Vy
sS'block_loop.thisTrialN'
p7685
I0
sg39
F0.69995905995165231
sg34
g753
(S'\x07\xdf\x07\x0c\x1349\n\xba\x18'
tRp7686
sa(dp7687
S'trial_loop.thisTrialN'
p7688
I92
sg6371
g6993
sS'block_loop.thisIndex'
p7689
g6365
sg38
S'right'
p7690
sg59
g63
sS'trial_loop.thisN'
p7691
I92
sg33
g6853
sg64
g65
sS'trial_loop.thisIndex'
p7692
g60
(g99
S'\\\x00\x00\x00'
tRp7693
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7694
I0
sg6380
g7000
sS'block_loop.thisRepN'
p7695
I2
sg6383
g6853
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7696
I2
sg6386
g6860
sg55
g11
sS'block_loop.thisTrial'
p7697
Nsg70
Vy
sS'block_loop.thisTrialN'
p7698
I0
sg39
F2.0333821040694602
sg34
g753
(S'\x07\xdf\x07\x0c\x135\x03\x06\xc6`'
tRp7699
sa(dp7700
S'trial_loop.thisTrialN'
p7701
I93
sg6371
S'51-mars.png'
p7702
sS'block_loop.thisIndex'
p7703
g6365
sg38
S'left'
p7704
sg59
g63
sS'trial_loop.thisN'
p7705
I93
sg33
g6536
sg64
g65
sS'trial_loop.thisIndex'
p7706
g60
(g99
S']\x00\x00\x00'
tRp7707
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7708
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p7709
sS'block_loop.thisRepN'
p7710
I2
sg6383
g6536
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7711
I2
sg6386
g6530
sg55
g11
sS'block_loop.thisTrial'
p7712
Nsg70
Vy
sS'block_loop.thisTrialN'
p7713
I0
sg39
F1.0332609374963795
sg34
g753
(S'\x07\xdf\x07\x0c\x135\n\x07\x8d\x98'
tRp7714
sa(dp7715
S'trial_loop.thisTrialN'
p7716
I94
sg6371
g6755
sS'block_loop.thisIndex'
p7717
g6365
sg38
S'left'
p7718
sg59
g63
sS'trial_loop.thisN'
p7719
I94
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p7720
g60
(g99
S'^\x00\x00\x00'
tRp7721
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7722
I0
sg6380
g6763
sS'block_loop.thisRepN'
p7723
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7724
I2
sg6386
g6766
sg55
g11
sS'block_loop.thisTrial'
p7725
Nsg70
Vy
sS'block_loop.thisTrialN'
p7726
I0
sg39
F1.2499264447687892
sg34
g753
(S'\x07\xdf\x07\x0c\x135\x10\x08\x9b '
tRp7727
sa(dp7728
S'trial_loop.thisTrialN'
p7729
I95
sg6371
g6725
sS'block_loop.thisIndex'
p7730
g6365
sg38
S'right'
p7731
sg59
g63
sS'trial_loop.thisN'
p7732
I95
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p7733
g60
(g99
S'_\x00\x00\x00'
tRp7734
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7735
I0
sg6380
g6733
sS'block_loop.thisRepN'
p7736
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7737
I2
sg6386
g6736
sg55
g11
sS'block_loop.thisTrial'
p7738
Nsg70
Vy
sS'block_loop.thisTrialN'
p7739
I0
sg39
F1.0999504499995965
sg34
g753
(S'\x07\xdf\x07\x0c\x135\x16\x0c\xfc8'
tRp7740
sa(dp7741
S'trial_loop.thisTrialN'
p7742
I96
sg6371
g6460
sS'block_loop.thisIndex'
p7743
g6365
sg38
S'left'
p7744
sg59
g63
sS'trial_loop.thisN'
p7745
I96
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7746
g60
(g99
S'`\x00\x00\x00'
tRp7747
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7748
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7749
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7750
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p7751
Nsg70
Vy
sS'block_loop.thisTrialN'
p7752
I0
sg39
F0.96662815945455804
sg34
g753
(S'\x07\xdf\x07\x0c\x135\x1c\x0e\xf8\x08'
tRp7753
sa(dp7754
S'trial_loop.thisTrialN'
p7755
I97
sg6371
g6834
sS'block_loop.thisIndex'
p7756
g6365
sg38
S'right'
p7757
sg59
g63
sS'trial_loop.thisN'
p7758
I97
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p7759
g60
(g99
S'a\x00\x00\x00'
tRp7760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7761
I0
sg6380
g6841
sS'block_loop.thisRepN'
p7762
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7763
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p7764
Nsg70
Vy
sS'block_loop.thisTrialN'
p7765
I0
sg39
F1.3333104304692824
sg34
g753
(S'\x07\xdf\x07\x0c\x135"\x0f\x0fx'
tRp7766
sa(dp7767
S'trial_loop.thisTrialN'
p7768
I98
sg6371
g6665
sS'block_loop.thisIndex'
p7769
g6365
sg38
S'left'
p7770
sg59
g63
sS'trial_loop.thisN'
p7771
I98
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p7772
g60
(g99
S'b\x00\x00\x00'
tRp7773
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7774
I0
sg6380
g6672
sS'block_loop.thisRepN'
p7775
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7776
I2
sg6386
g6413
sg55
g11
sS'block_loop.thisTrial'
p7777
Nsg70
Vy
sS'block_loop.thisTrialN'
p7778
I0
sg39
F1.0832300328911515
sg34
g753
(S'\x07\xdf\x07\x0c\x135)\x05_\x00'
tRp7779
sa(dp7780
S'trial_loop.thisTrialN'
p7781
I99
sg6371
g6905
sS'block_loop.thisIndex'
p7782
g6365
sg38
S'right'
p7783
sg59
g63
sS'trial_loop.thisN'
p7784
I99
sg33
g6806
sg64
g65
sS'trial_loop.thisIndex'
p7785
g60
(g99
S'c\x00\x00\x00'
tRp7786
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7787
I0
sg6380
g6912
sS'block_loop.thisRepN'
p7788
I2
sg6383
g6806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7789
I2
sg6386
g6813
sg55
g11
sS'block_loop.thisTrial'
p7790
Nsg70
Vy
sS'block_loop.thisTrialN'
p7791
I0
sg39
F0.99997462629835354
sg34
g753
(S'\x07\xdf\x07\x0c\x135/\x07 8'
tRp7792
sa(dp7793
S'trial_loop.thisTrialN'
p7794
I100
sg6371
g6509
sS'block_loop.thisIndex'
p7795
g6365
sg38
S'right'
p7796
sg59
g63
sS'trial_loop.thisN'
p7797
I100
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p7798
g60
(g99
S'd\x00\x00\x00'
tRp7799
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7800
I0
sg6380
g6517
sS'block_loop.thisRepN'
p7801
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7802
I2
sg6386
g6520
sg55
g11
sS'block_loop.thisTrial'
p7803
Nsg70
Vy
sS'block_loop.thisTrialN'
p7804
I0
sg39
F0.78332394411700079
sg34
g753
(S'\x07\xdf\x07\x0c\x1355\x07\xb4\xa8'
tRp7805
sa(dp7806
S'trial_loop.thisTrialN'
p7807
I101
sg6371
g7360
sS'block_loop.thisIndex'
p7808
g6365
sg38
S'left'
p7809
sg59
g63
sS'trial_loop.thisN'
p7810
I101
sg33
g6789
sg64
g65
sS'trial_loop.thisIndex'
p7811
g60
(g99
S'e\x00\x00\x00'
tRp7812
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7813
I0
sg6380
g7367
sS'block_loop.thisRepN'
p7814
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7815
I2
sg6386
g6796
sg55
g11
sS'block_loop.thisTrial'
p7816
Nsg70
Vy
sS'block_loop.thisTrialN'
p7817
I0
sg39
F0.8498868731840048
sg34
g753
(S'\x07\xdf\x07\x0c\x135;\x04\xed\xb8'
tRp7818
sa(dp7819
S'trial_loop.thisTrialN'
p7820
I102
sg6371
g6494
sS'block_loop.thisIndex'
p7821
g6365
sg38
S'left'
p7822
sg59
g63
sS'trial_loop.thisN'
p7823
I102
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7824
g60
(g99
S'f\x00\x00\x00'
tRp7825
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7826
I0
sg6380
g6501
sS'block_loop.thisRepN'
p7827
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7828
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p7829
Nsg70
Vy
sS'block_loop.thisTrialN'
p7830
I0
sg39
F0.78310299330041744
sg34
g753
(S'\x07\xdf\x07\x0c\x136\x05\x03 \xc8'
tRp7831
sa(dp7832
S'trial_loop.thisTrialN'
p7833
I103
sg6371
g7047
sS'block_loop.thisIndex'
p7834
g6365
sg38
S'right'
p7835
sg59
g63
sS'trial_loop.thisN'
p7836
I103
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7837
g60
(g99
S'g\x00\x00\x00'
tRp7838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7839
I0
sg6380
g7054
sS'block_loop.thisRepN'
p7840
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7841
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p7842
Nsg70
Vy
sS'block_loop.thisTrialN'
p7843
I0
sg39
F0.91696868029248435
sg34
g753
(S'\x07\xdf\x07\x0c\x136\x0b\x00Y\xd8'
tRp7844
sa(dp7845
S'trial_loop.thisTrialN'
p7846
I104
sg6371
g6477
sS'block_loop.thisIndex'
p7847
g6365
sg38
S'left'
p7848
sg59
g63
sS'trial_loop.thisN'
p7849
I104
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p7850
g60
(g99
S'h\x00\x00\x00'
tRp7851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7852
I0
sg6380
g6485
sS'block_loop.thisRepN'
p7853
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7854
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p7855
Nsg70
Vy
sS'block_loop.thisTrialN'
p7856
I0
sg39
F1.5499505640400457
sg34
g753
(S'\x07\xdf\x07\x0c\x136\x10\x0e\xc1X'
tRp7857
sa(dp7858
S'trial_loop.thisTrialN'
p7859
I105
sg6371
g6460
sS'block_loop.thisIndex'
p7860
g6365
sg38
S'left'
p7861
sg59
g63
sS'trial_loop.thisN'
p7862
I105
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7863
g60
(g99
S'i\x00\x00\x00'
tRp7864
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7865
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7866
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7867
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p7868
Nsg70
Vy
sS'block_loop.thisTrialN'
p7869
I0
sg39
F0.66664965583186131
sg34
g753
(S'\x07\xdf\x07\x0c\x136\x17\x08dp'
tRp7870
sa(dp7871
S'trial_loop.thisTrialN'
p7872
I106
sg6371
g6948
sS'block_loop.thisIndex'
p7873
g6365
sg38
S'left'
p7874
sg59
g63
sS'trial_loop.thisN'
p7875
I106
sg33
g6719
sg64
g65
sS'trial_loop.thisIndex'
p7876
g60
(g99
S'j\x00\x00\x00'
tRp7877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7878
I0
sg6380
g6955
sS'block_loop.thisRepN'
p7879
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7880
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p7881
Nsg70
Vy
sS'block_loop.thisTrialN'
p7882
I0
sg39
F1.1833375717906165
sg34
g753
(S'\x07\xdf\x07\x0c\x136\x1d\x03\xf7\xa0'
tRp7883
sa(dp7884
S'trial_loop.thisTrialN'
p7885
I107
sg6371
g6802
sS'block_loop.thisIndex'
p7886
g6365
sg38
S'left'
p7887
sg59
g63
sS'trial_loop.thisN'
p7888
I107
sg33
g6806
sg64
g65
sS'trial_loop.thisIndex'
p7889
g60
(g99
S'k\x00\x00\x00'
tRp7890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7891
I0
sg6380
g6810
sS'block_loop.thisRepN'
p7892
I2
sg6383
g6806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7893
I2
sg6386
g6813
sg55
g11
sS'block_loop.thisTrial'
p7894
Nsg70
Vy
sS'block_loop.thisTrialN'
p7895
I0
sg39
F0.73330951816751622
sg34
g753
(S'\x07\xdf\x07\x0c\x136#\x07(\x08'
tRp7896
sa(dp7897
S'trial_loop.thisTrialN'
p7898
I108
sg6371
g6586
sS'block_loop.thisIndex'
p7899
g6365
sg38
S'right'
p7900
sg59
g63
sS'trial_loop.thisN'
p7901
I108
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p7902
g60
(g99
S'l\x00\x00\x00'
tRp7903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7904
I0
sg6380
g6594
sS'block_loop.thisRepN'
p7905
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7906
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p7907
Nsg70
Vy
sS'block_loop.thisTrialN'
p7908
I0
sg39
F0.88367609694250859
sg34
g753
(S'\x07\xdf\x07\x0c\x136)\x03\xadh'
tRp7909
sa(dp7910
S'trial_loop.thisTrialN'
p7911
I109
sg6371
g6526
sS'block_loop.thisIndex'
p7912
g6365
sg38
S'right'
p7913
sg59
g63
sS'trial_loop.thisN'
p7914
I109
sg33
g6536
sg64
g65
sS'trial_loop.thisIndex'
p7915
g60
(g99
S'm\x00\x00\x00'
tRp7916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7917
I0
sg6380
g6534
sS'block_loop.thisRepN'
p7918
I2
sg6383
g6536
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7919
I2
sg6386
g6530
sg55
g11
sS'block_loop.thisTrial'
p7920
Nsg70
Vy
sS'block_loop.thisTrialN'
p7921
I0
sg39
F0.73321258490614127
sg34
g753
(S'\x07\xdf\x07\x0c\x136/\x02U\xa8'
tRp7922
sa(dp7923
S'trial_loop.thisTrialN'
p7924
I110
sg6371
g6933
sS'block_loop.thisIndex'
p7925
g6365
sg38
S'right'
p7926
sg59
g63
sS'trial_loop.thisN'
p7927
I110
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7928
g60
(g99
S'n\x00\x00\x00'
tRp7929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7930
I0
sg6380
g6940
sS'block_loop.thisRepN'
p7931
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7932
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7933
Nsg70
Vy
sS'block_loop.thisTrialN'
p7934
I0
sg39
F1.0166371685481863
sg34
g753
(S'\x07\xdf\x07\x0c\x1364\x0e\x1dH'
tRp7935
sa(dp7936
S'trial_loop.thisTrialN'
p7937
I111
sg6371
g7317
sS'block_loop.thisIndex'
p7938
g6365
sg38
S'left'
p7939
sg59
g63
sS'trial_loop.thisN'
p7940
I111
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p7941
g60
(g99
S'o\x00\x00\x00'
tRp7942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7943
I0
sg6380
g7324
sS'block_loop.thisRepN'
p7944
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7945
I2
sg6386
g6736
sg55
g11
sS'block_loop.thisTrial'
p7946
Nsg70
Vy
sS'block_loop.thisTrialN'
p7947
I0
sg39
F1.0831402270778199
sg34
g753
(S'\x07\xdf\x07\x0c\x136:\x0e\xad\xd0'
tRp7948
sa(dp7949
S'trial_loop.thisTrialN'
p7950
I112
sg6371
g6933
sS'block_loop.thisIndex'
p7951
g6365
sg38
S'right'
p7952
sg59
g63
sS'trial_loop.thisN'
p7953
I112
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7954
g60
(g99
S'p\x00\x00\x00'
tRp7955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7956
I0
sg6380
g6940
sS'block_loop.thisRepN'
p7957
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7958
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7959
Nsg70
Vy
sS'block_loop.thisTrialN'
p7960
I0
sg39
F1.2332299758636509
sg34
g753
(S'\x07\xdf\x07\x0c\x137\x05\x01kH'
tRp7961
sa(dp7962
S'trial_loop.thisTrialN'
p7963
I113
sg6371
g6785
sS'block_loop.thisIndex'
p7964
g6365
sg38
S'right'
p7965
sg59
g63
sS'trial_loop.thisN'
p7966
I113
sg33
g6789
sg64
g65
sS'trial_loop.thisIndex'
p7967
g60
(g99
S'q\x00\x00\x00'
tRp7968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7969
I0
sg6380
g6793
sS'block_loop.thisRepN'
p7970
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7971
I2
sg6386
g6796
sg55
g11
sS'block_loop.thisTrial'
p7972
Nsg70
Vy
sS'block_loop.thisTrialN'
p7973
I0
sg39
F0.66660404017602559
sg34
g753
(S'\x07\xdf\x07\x0c\x137\x0b\x05SH'
tRp7974
sa(dp7975
S'trial_loop.thisTrialN'
p7976
I114
sg6371
g6819
sS'block_loop.thisIndex'
p7977
g6365
sg38
S'left'
p7978
sg59
g63
sS'trial_loop.thisN'
p7979
I114
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p7980
g60
(g99
S'r\x00\x00\x00'
tRp7981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7982
I0
sg6380
g6826
sS'block_loop.thisRepN'
p7983
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7984
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p7985
Nsg70
Vy
sS'block_loop.thisTrialN'
p7986
I0
sg39
F0.76656874506443273
sg34
g753
(S'\x07\xdf\x07\x0c\x137\x11\x00\xe2\x90'
tRp7987
sa(dp7988
S'trial_loop.thisTrialN'
p7989
I115
sg6371
g6755
sS'block_loop.thisIndex'
p7990
g6365
sg38
S'left'
p7991
sg59
g63
sS'trial_loop.thisN'
p7992
I115
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p7993
g60
(g99
S's\x00\x00\x00'
tRp7994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7995
I0
sg6380
g6763
sS'block_loop.thisRepN'
p7996
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7997
I2
sg6386
g6766
sg55
g11
sS'block_loop.thisTrial'
p7998
Nsg70
Vy
sS'block_loop.thisTrialN'
p7999
I0
sg39
F0.99985260442917934
sg34
g753
(S'\x07\xdf\x07\x0c\x137\x16\x0c\xe8\xb0'
tRp8000
sa(dp8001
S'trial_loop.thisTrialN'
p8002
I116
sg6371
g7702
sS'block_loop.thisIndex'
p8003
g6365
sg38
S'left'
p8004
sg59
g63
sS'trial_loop.thisN'
p8005
I116
sg33
g6536
sg64
g65
sS'trial_loop.thisIndex'
p8006
g60
(g99
S't\x00\x00\x00'
tRp8007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8008
I0
sg6380
g7709
sS'block_loop.thisRepN'
p8009
I2
sg6383
g6536
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8010
I2
sg6386
g6530
sg55
g11
sS'block_loop.thisTrial'
p8011
Nsg70
Vy
sS'block_loop.thisTrialN'
p8012
I0
sg39
F0.89995204654405825
sg34
g753
(S'\x07\xdf\x07\x0c\x137\x1c\ry8'
tRp8013
sa(dp8014
S'trial_loop.thisTrialN'
p8015
I117
sg6371
g6569
sS'block_loop.thisIndex'
p8016
g6365
sg38
S'left'
p8017
sg59
g63
sS'trial_loop.thisN'
p8018
I117
sg33
g6579
sg64
g65
sS'trial_loop.thisIndex'
p8019
g60
(g99
S'u\x00\x00\x00'
tRp8020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8021
I0
sg6380
g6577
sS'block_loop.thisRepN'
p8022
I2
sg6383
g6579
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8023
I2
sg6386
g6573
sg55
g11
sS'block_loop.thisTrial'
p8024
Nsg70
Vy
sS'block_loop.thisTrialN'
p8025
I0
sg39
F0.94994708584272303
sg34
g753
(S'\x07\xdf\x07\x0c\x137"\x0c_\xf8'
tRp8026
sa(dp8027
S'trial_loop.thisTrialN'
p8028
I118
sg6371
g6426
sS'block_loop.thisIndex'
p8029
g6365
sg38
S'left'
p8030
sg59
g63
sS'trial_loop.thisN'
p8031
I118
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8032
g60
(g99
S'v\x00\x00\x00'
tRp8033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8034
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8035
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8036
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p8037
Nsg70
Vy
sS'block_loop.thisTrialN'
p8038
I0
sg39
F1.2833316417527385
sg34
g753
(S'\x07\xdf\x07\x0c\x137(\x0c<\xd0'
tRp8039
sa(dp8040
S'trial_loop.thisTrialN'
p8041
I119
sg6371
g6708
sS'block_loop.thisIndex'
p8042
g6365
sg38
S'right'
p8043
sg59
g63
sS'trial_loop.thisN'
p8044
I119
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p8045
g60
(g99
S'w\x00\x00\x00'
tRp8046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8047
I0
sg6380
g6716
sS'block_loop.thisRepN'
p8048
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8049
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p8050
Nsg70
Vy
sS'block_loop.thisTrialN'
p8051
I0
sg39
F0.98319975550111849
sg34
g753
(S'\x07\xdf\x07\x0c\x137/\x01\xd4\xc0'
tRp8052
sa(dp8053
S'trial_loop.thisTrialN'
p8054
I120
sg6371
g6849
sS'block_loop.thisIndex'
p8055
g6365
sg38
S'left'
p8056
sg59
g63
sS'trial_loop.thisN'
p8057
I120
sg33
g6853
sg64
g65
sS'trial_loop.thisIndex'
p8058
g60
(g99
S'x\x00\x00\x00'
tRp8059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8060
I0
sg6380
g6857
sS'block_loop.thisRepN'
p8061
I2
sg6383
g6853
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8062
I2
sg6386
g6860
sg55
g11
sS'block_loop.thisTrial'
p8063
Nsg70
Vy
sS'block_loop.thisTrialN'
p8064
I0
sg39
F1.1663066831461038
sg34
g753
(S'\x07\xdf\x07\x0c\x1375\x02&\xc8'
tRp8065
sa(dp8066
S'trial_loop.thisTrialN'
p8067
I121
sg6371
g6586
sS'block_loop.thisIndex'
p8068
g6365
sg38
S'right'
p8069
sg59
g63
sS'trial_loop.thisN'
p8070
I121
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p8071
g60
(g99
S'y\x00\x00\x00'
tRp8072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8073
I0
sg6380
g6594
sS'block_loop.thisRepN'
p8074
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8075
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p8076
Nsg70
Vy
sS'block_loop.thisTrialN'
p8077
I0
sg39
F1.1499682971189031
sg34
g753
(S'\x07\xdf\x07\x0c\x137;\x05\x18\xb0'
tRp8078
sa(dp8079
S'trial_loop.thisTrialN'
p8080
I122
sg6371
g7332
sS'block_loop.thisIndex'
p8081
g6365
sg38
S'right'
p8082
sg59
g63
sS'trial_loop.thisN'
p8083
I122
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p8084
g60
(g99
S'z\x00\x00\x00'
tRp8085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8086
I0
sg6380
g7339
sS'block_loop.thisRepN'
p8087
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8088
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p8089
Nsg70
Vy
sS'block_loop.thisTrialN'
p8090
I0
sg39
F0.91651081319287186
sg34
g753
(S'\x07\xdf\x07\x0c\x138\x05\x07\xd0\x00'
tRp8091
sa(dp8092
S'trial_loop.thisTrialN'
p8093
I123
sg6371
g6905
sS'block_loop.thisIndex'
p8094
g6365
sg38
S'right'
p8095
sg59
g63
sS'trial_loop.thisN'
p8096
I123
sg33
g6806
sg64
g65
sS'trial_loop.thisIndex'
p8097
g60
(g99
S'{\x00\x00\x00'
tRp8098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8099
I0
sg6380
g6912
sS'block_loop.thisRepN'
p8100
I2
sg6383
g6806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8101
I2
sg6386
g6813
sg55
g11
sS'block_loop.thisTrial'
p8102
Nsg70
Vy
sS'block_loop.thisTrialN'
p8103
I0
sg39
F1.1999758807287435
sg34
g753
(S'\x07\xdf\x07\x0c\x138\x0b\x07/\xd8'
tRp8104
sa(dp8105
S'trial_loop.thisTrialN'
p8106
I124
sg6371
g6392
sS'block_loop.thisIndex'
p8107
g6365
sg38
S'right'
p8108
sg59
g63
sS'trial_loop.thisN'
p8109
I124
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p8110
g60
(g99
S'|\x00\x00\x00'
tRp8111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8112
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8113
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8114
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vy
sS'block_loop.thisTrialN'
p8116
I0
sg39
F1.166474890866084
sg34
g753
(S'\x07\xdf\x07\x0c\x138\x11\n\x9e\xc0'
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g6785
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'right'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g6789
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g6793
sS'block_loop.thisRepN'
p8126
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8127
I2
sg6386
g6796
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vy
sS'block_loop.thisTrialN'
p8129
I0
sg39
F0.86692403398046736
sg34
g753
(S'\x07\xdf\x07\x0c\x138\x17\r\xcf('
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g6409
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'right'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8139
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8140
I2
sg6386
g6413
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vy
sS'block_loop.thisTrialN'
p8142
I0
sg39
F0.88320654082781402
sg34
g753
(S'\x07\xdf\x07\x0c\x138\x1d\x0c8\xe8'
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g6443
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'right'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8152
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8153
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vy
sS'block_loop.thisTrialN'
p8155
I0
sg39
F0.94981166438083164
sg34
g753
(S'\x07\xdf\x07\x0c\x138#\n\xe5\x10'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g6963
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'right'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g6967
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g6971
sS'block_loop.thisRepN'
p8165
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8166
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vy
sS'block_loop.thisTrialN'
p8168
I0
sg39
F1.0003121821209788
sg34
g753
(S'\x07\xdf\x07\x0c\x138)\n\xbe\x00'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g6725
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'right'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g6736
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g6733
sS'block_loop.thisRepN'
p8178
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8179
I2
sg6386
g6736
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vy
sS'block_loop.thisTrialN'
p8181
I0
sg39
F0.84999150408839341
sg34
g753
(S'\x07\xdf\x07\x0c\x138/\x0bN\x88'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g7276
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'left'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g6967
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g7283
sS'block_loop.thisRepN'
p8191
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8192
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vy
sS'block_loop.thisTrialN'
p8194
I0
sg39
F1.0333005660868366
sg34
g753
(S'\x07\xdf\x07\x0c\x1385\t\x81\x98'
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g7235
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'right'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g7242
sS'block_loop.thisRepN'
p8204
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8205
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vy
sS'block_loop.thisTrialN'
p8207
I0
sg39
F1.2498588765811292
sg34
g753
(S'\x07\xdf\x07\x0c\x138;\n\x8b8'
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g6477
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'left'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g6485
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8218
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vy
sS'block_loop.thisTrialN'
p8220
I0
sg39
F1.3165806051329128
sg34
g753
(S'\x07\xdf\x07\x0c\x139\x05\x0e\xad\xd0'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g7155
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'left'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6652
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g7162
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6652
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8231
I2
sg6386
g6659
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vy
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.95031514713627985
sg34
g753
(S'\x07\xdf\x07\x0c\x139\x0c\x04\xbe\xd8'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g6948
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'left'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g6955
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8244
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vy
sS'block_loop.thisTrialN'
p8246
I0
sg39
F1.3832609945166041
sg34
g753
(S'\x07\xdf\x07\x0c\x139\x12\x04\x9b\xb0'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g6834
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'right'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g6841
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vy
sS'block_loop.thisTrialN'
p8259
I0
sg39
F0.91655158218054567
sg34
g753
(S'\x07\xdf\x07\x0c\x139\x18\n\xe1('
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g6849
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'left'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6853
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g6857
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6853
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6386
g6860
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vy
sS'block_loop.thisTrialN'
p8272
I0
sg39
F2.7996338203520281
sg34
g753
(S'\x07\xdf\x07\x0c\x139\x1e\nD\xe8'
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g6569
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'left'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6579
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g6577
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6579
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6386
g6573
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vy
sS'block_loop.thisTrialN'
p8285
I0
sg39
F0.96653892383619677
sg34
g753
(S'\x07\xdf\x07\x0c\x139&\x07\xb0\xc0'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g6785
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'right'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6789
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g6793
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6386
g6796
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vy
sS'block_loop.thisTrialN'
p8298
I0
sg39
F1.1670134406522266
sg34
g753
(S'\x07\xdf\x07\x0c\x139,\x07\x89\xb0'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g7276
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'left'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6967
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g7283
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vy
sS'block_loop.thisTrialN'
p8311
I0
sg39
F1.0666410458798055
sg34
g753
(S'\x07\xdf\x07\x0c\x1392\n\xba\x18'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g6693
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'left'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g6700
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vy
sS'block_loop.thisTrialN'
p8324
I0
sg39
F1.0164760882762494
sg34
g753
(S'\x07\xdf\x07\x0c\x1398\x0c@\xb8'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6620
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'left'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6627
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6513
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6386
g6520
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vy
sS'block_loop.thisTrialN'
p8337
I0
sg39
F0.84987204809294781
sg34
g753
(S'\x07\xdf\x07\x0c\x13:\x02\r\x0b\xd8'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g7702
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'left'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6536
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g7709
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6536
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6386
g6530
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vy
sS'block_loop.thisTrialN'
p8350
I0
sg39
F0.80001756202545948
sg34
g753
(S'\x07\xdf\x07\x0c\x13:\x08\x0b>\xe8'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g7375
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'right'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6766
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g7382
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6386
g6766
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vy
sS'block_loop.thisTrialN'
p8363
I0
sg39
F1.1334654096572194
sg34
g753
(S'\x07\xdf\x07\x0c\x13:\x0e\x08\xb6x'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g7276
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'left'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6967
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g7283
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vy
sS'block_loop.thisTrialN'
p8376
I0
sg39
F1.2999713761746534
sg34
g753
(S'\x07\xdf\x07\x0c\x13:\x14\x0b/H'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g7235
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'right'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g7242
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vy
sS'block_loop.thisTrialN'
p8389
I0
sg39
F1.3167870159595623
sg34
g753
(S'\x07\xdf\x07\x0c\x13:\x1b\x01\x05\xb8'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g6819
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'left'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g6826
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vy
sS'block_loop.thisTrialN'
p8402
I0
sg39
F1.083286767352547
sg34
g753
(S'\x07\xdf\x07\x0c\x13:!\x06Y\x00'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g6526
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'right'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6536
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g6534
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6536
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6386
g6530
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vy
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.88328807880316162
sg34
g753
(S"\x07\xdf\x07\x0c\x13:'\x08\x1a8"
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g6648
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'right'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6659
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g6656
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6652
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6386
g6659
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vy
sS'block_loop.thisTrialN'
p8428
I0
sg39
F0.93329081574484007
sg34
g753
(S'\x07\xdf\x07\x0c\x13:-\x06\xc6`'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g6905
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'right'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6806
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g6912
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6386
g6813
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vy
sS'block_loop.thisTrialN'
p8441
I0
sg39
F1.0166023866113392
sg34
g753
(S'\x07\xdf\x07\x0c\x13:3\x06`\xd0'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6834
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'right'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6488
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6841
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vy
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.79994571737915976
sg34
g753
(S'\x07\xdf\x07\x0c\x13:9\x07/\xd8'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g7702
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'left'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6536
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g7709
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6536
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6386
g6530
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vy
sS'block_loop.thisTrialN'
p8467
I0
sg39
F0.94994052858965006
sg34
g753
(S'\x07\xdf\x07\x0c\x13;\x03\x04\xabP'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g6586
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'right'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g6594
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vy
sS'block_loop.thisTrialN'
p8480
I0
sg39
F1.1665162300487282
sg34
g753
(S'\x07\xdf\x07\x0c\x13;\t\x04E\xc0'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g7317
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'left'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6736
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g7324
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6386
g6736
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vy
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.91687830428418238
sg34
g753
(S'\x07\xdf\x07\x0c\x13;\x0f\x07v('
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g7375
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'right'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g7382
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6386
g6766
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vy
sS'block_loop.thisTrialN'
p8506
I0
sg39
F1.2999237648400594
sg34
g753
(S'\x07\xdf\x07\x0c\x13;\x15\x06\x9bh'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g6460
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'left'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g6468
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vy
sS'block_loop.thisTrialN'
p8519
I0
sg39
F1.0499819247925188
sg34
g753
(S'\x07\xdf\x07\x0c\x13;\x1b\x0b\xb00'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g6409
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'right'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6386
g6413
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vy
sS'block_loop.thisTrialN'
p8532
I0
sg39
F1.116604439317598
sg34
g753
(S'\x07\xdf\x07\x0c\x13;!\x0c\xf8P'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g6526
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'right'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6536
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g6534
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6536
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6386
g6530
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vy
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.84987090771028306
sg34
g753
(S"\x07\xdf\x07\x0c\x13;'\x0f6\x88"
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g7155
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'left'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6659
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g7162
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6652
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6386
g6659
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vy
sS'block_loop.thisTrialN'
p8558
I0
sg39
F1.3499555817616056
sg34
g753
(S'\x07\xdf\x07\x0c\x13;-\re\xb0'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g6993
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'right'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6853
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g7000
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6853
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6386
g6860
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vy
sS'block_loop.thisTrialN'
p8571
I0
sg39
F0.96634534241457004
sg34
g753
(S'\x07\xdf\x07\x0c\x13;4\x04.P'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g6755
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'left'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6766
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g6763
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6386
g6766
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vy
sS'block_loop.thisTrialN'
p8584
I0
sg39
F1.6832950922107557
sg34
g753
(S'\x07\xdf\x07\x0c\x13;:\x04\x07@'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g6802
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'left'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6806
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g6810
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6386
g6813
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vy
sS'block_loop.thisTrialN'
p8597
I0
sg39
F1.7665906975962571
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x00\x04\x0f\x13`'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g7317
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'left'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g7324
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6386
g6736
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vy
sS'block_loop.thisTrialN'
p8610
I0
sg39
F1.6499543273312156
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x00\x0b\x0c\r\xf0'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g6409
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'right'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6386
g6413
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vy
sS'block_loop.thisTrialN'
p8623
I0
sg39
F1.0002799660651363
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x00\x12\x07 8'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g6963
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'right'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6967
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g6971
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vy
sS'block_loop.thisTrialN'
p8636
I0
sg39
F1.1999613407315337
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x00\x18\x07\xb0\xc0'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g6477
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'left'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6481
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g6485
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6386
g6488
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vy
sS'block_loop.thisTrialN'
p8649
I0
sg39
F1.4498943427461199
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x00\x1e\x0b\x1b\xc0'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g7235
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'right'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g7242
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vy
sS'block_loop.thisTrialN'
p8662
I0
sg39
F1.0999829511492862
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x00%\x03S\x90'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g7360
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'left'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6789
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g7367
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6386
g6796
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vy
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.88328123645624146
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x00+\x05SH'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g6586
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'right'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6597
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g6594
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vy
sS'block_loop.thisTrialN'
p8688
I0
sg39
F1.3669767770697945
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x001\x03\xfb\x88'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g6665
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'left'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g6672
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6386
g6413
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vy
sS'block_loop.thisTrialN'
p8701
I0
sg39
F1.0166437257939833
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x007\nD\xe8'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g7075
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'right'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6573
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g7082
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6579
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6386
g6573
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vy
sS'block_loop.thisTrialN'
p8714
I0
sg39
F1.1498548281888361
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x01\x01\n\xd5p'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g7155
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'left'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6652
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g7162
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6652
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6386
g6659
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vy
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.9166476601458271
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x01\x07\r\xc7X'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g6933
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'right'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g6940
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vy
sS'block_loop.thisTrialN'
p8740
I0
sg39
F1.3165255812564283
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x01\r\x0c\xec\x98'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g7317
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'left'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6729
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g7324
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6729
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6386
g6736
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vy
sS'block_loop.thisTrialN'
p8753
I0
sg39
F1.1503121250934782
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x01\x14\x02\xfd\xa0'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g6648
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'right'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6652
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g6656
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6652
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6386
g6659
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vy
sS'block_loop.thisTrialN'
p8766
I0
sg39
F1.1166218302823836
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x01\x1a\x05\xef\x88'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g6755
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'left'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6766
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g6763
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6386
g6766
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vy
sS'block_loop.thisTrialN'
p8779
I0
sg39
F0.8833388262137305
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x01 \x08)\xd8'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6392
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'right'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vy
sS'block_loop.thisTrialN'
p8792
I0
sg39
F1.1164510566813988
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x01&\x06\xd6\x00'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g6443
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'right'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vy
sS'block_loop.thisTrialN'
p8805
I0
sg39
F1.1832189710985404
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x01,\t\x10P'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g7702
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'left'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6536
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g7709
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6536
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6386
g6530
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vy
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.90035745564819081
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x012\x0c\x7f8'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g7332
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'right'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g7339
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vy
sS'block_loop.thisTrialN'
p8831
I0
sg39
F1.0999689813543228
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x018\x0be\xf8'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6802
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'left'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6806
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g6810
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6386
g6813
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vy
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.91670667539438
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x02\x02\re\xb0'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6603
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'left'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6614
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6611
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vy
sS'block_loop.thisTrialN'
p8857
I0
sg39
F1.0999575774476398
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x02\x08\x0c\xc5\x88'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g6665
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'left'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g6672
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6386
g6413
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vy
sS'block_loop.thisTrialN'
p8870
I0
sg39
F1.0332096198835643
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x02\x0e\x0e\xc5@'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g6819
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'left'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g6826
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vy
sS'block_loop.thisTrialN'
p8883
I0
sg39
F1.1333402517120703
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x02\x15\x00\x8c\xa0'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g6372
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'left'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vy
sS'block_loop.thisTrialN'
p8896
I0
sg39
F1.0499901926377788
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x02\x1b\x03\x05p'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6603
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'left'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6611
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vy
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.96652552424347959
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x02!\x04M\x90'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g7375
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'right'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g7382
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6386
g6766
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vy
sS'block_loop.thisTrialN'
p8922
I0
sg39
F1.1666285585888545
sg34
g753
(S"\x07\xdf\x07\x0c\x14\x02'\x04e\x00"
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g6603
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'left'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g6611
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vy
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.98320944883016637
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x02-\x07V\xe8'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g6963
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'right'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6967
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g6971
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vy
sS'block_loop.thisTrialN'
p8948
I0
sg39
F4.5667642081316444
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x023\x07\xac\xd8'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g7332
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'right'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6614
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g7339
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vy
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.88332086506125052
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x03\x01\x01z\xe8'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g6426
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'left'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vy
sS'block_loop.thisTrialN'
p8974
I0
sg39
F1.0665902984692366
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x03\x07\x00#('
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g6993
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'right'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6853
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g7000
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6853
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6386
g6860
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vy
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.93292874150938587
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x03\r\x01\xa9\xc8'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6426
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'left'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vy
sS'block_loop.thisTrialN'
p9000
I0
sg39
F1.5498390907887369
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x03\x13\x01H '
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g6443
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'right'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g6451
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vy
sS'block_loop.thisTrialN'
p9013
I0
sg39
F1.0836263188612065
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x03\x19\n-x'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g7075
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'right'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6579
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g7082
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6579
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6386
g6573
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vy
sS'block_loop.thisTrialN'
p9026
I0
sg39
F1.083273652853677
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x03\x1f\x0b\xee\xb0'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g6708
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'right'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6719
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g6716
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6386
g6719
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vy
sS'block_loop.thisTrialN'
p9039
I0
sg39
F1.1499078563865623
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x03%\r\xaf\xe8'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g7047
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'right'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g7054
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6464
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6386
g6471
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vy
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.89996744182280963
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x03,\x01$\xf8'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g6569
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'left'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6579
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g6577
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6579
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6386
g6573
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vy
sS'block_loop.thisTrialN'
p9065
I0
sg39
F1.016625194439257
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x032\x00J8'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g6905
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'right'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6806
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g6912
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6386
g6813
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vy
sS'block_loop.thisTrialN'
p9078
I0
sg39
F1.0336318497647881
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x038\x01\x15X'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6963
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'right'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6967
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6971
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6386
g6974
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vy
sS'block_loop.thisTrialN'
p9091
I0
sg39
F0.96649729955970543
sg34
g753
(S'\x07\xdf\x07\x0c\x14\x04\x02\x01\xe4`'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vy
sa(dp9099
g64
g65
sg43
I30
sg56
g57
sg58
Vn
sg42
I570
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp9100
g64
g65
sg43
I30
sg55
g11
sg56
g57
sg45
F0.53000000000000003
sg42
I570
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I01
sg48
I25
sg47
g381
sg51
F30.169999999999998
sg46
F0.85999999999999943
sg66
g67
sg68
g69
sg50
I0
sg70
Vy
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I76808528
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\xaeG\xa1?\xf6(\xdc?\xf6(\x9c?\xf6(\xdc?\xd7\xa3\x10@333?\x00\x00\xc0?=\n\x97?333?\x00\x00\x00@{\x14\xae?\\\x8f\xc2?\xb8\x1e\xc5?\xaeG\xa1?\xcd\xcc\x8c?\xcd\xccL?\xaeGa?\x85\xebQ?\x9a\x99\x99?\xe1z\x94?\x8f\xc2\xf5>\xaeG\x01@\xf6(\xdc?\xd7\xa3p?=\nW?\xaeG\x01@\xe1z\x14@\x85\xeb\x91?\x9a\x99\x99?\xcd\xcc\x0c@\xf6(\x9c?\x85\xeb\xd1?\xa4p\xfd?\xe1z\x94?\x9a\x99\x99?\x00\x00@@\\\x8fB?\xa4p\xbd?\xf6(\\?\xaeGa?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'!\xb0\x8a@o\x12\xa7A\x10X\x95@w\xbe\xdb@\x08\xac\x1eA\xd1"\x92A\x19\x04\x0cAw\xbe\xb3@\xaa\xf1\xfe@\xdd$RA\xee|\x8f@o\x125AD\x8b\x98@\xdb\xf9^@B`\x85@1\x08\xa0@\xdd$\xba@\xee|\xdf@\xa8\xc6k@w\xbeCA!\xb0\xca@D\x8b\x10A\xee|\x8f@\xfc\xa9i@\xfe\xd4\x84@\xaa\xf1\xee@ff\x1aAw\xbe\xa3@!\xb0\x82@\x10X\xfd@\xdb\xf9>@1\x08\xd0@\xdd$\xb2@B`e@T\xe3\x85@\xcb\xa1\xa9@\xdd$\xf2@\xee|G@d;\x93@D\x8b\x88@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xe8A\x00\x00\x00@\x00\x00\xc8A\x00\x00@A\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x80?\x00\x00\xc0A\x00\x00@@\x00\x00\xe0@\x00\x00\xd8A\x00\x00\xa0@\x00\x00\x00B\x00\x00\x08B\x00\x00\xf0A\x00\x00PA\x00\x00 A\x00\x00\xc0@\x00\x00\x0cB\x00\x00\x80@\x00\x00\x90A\x00\x00\xe0A\x00\x00\x98A\x00\x00\x80A\x00\x00\xa0A\x00\x000A\x00\x00\x10A\x00\x00pA\x00\x00\x14B\x00\x00\x10B\x00\x00`A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\x1cB\x00\x00\xf8A\x00\x00\x04B\x00\x00\x88A\x00\x00\xd0A\x00\x00\x18B\x00\x00\xb8A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'ff\xe6?\x00\x00\x80?\x9a\x99\x99?33\xf3?\xcd\xcc\x8c?\x9a\x99\xd9?\x00\x00\xc0?ff\xa6?\x00\x00\x80?\x9a\x99\xd9?\x00\x00\x80?ff\xe6?33\xf3?\xcd\xcc\xcc?\xcd\xcc\x8c?\xcd\xcc\xcc?\xcd\xcc\xcc?\xcd\xcc\x8c?\x9a\x99\x99?33\xf3?ff\xa6?\xcd\xcc\x8c?\x00\x00\x00@\x9a\x99\x99?ff\xa6?\xcd\xcc\x8c?33\xf3?\xcd\xcc\xcc?ff\xe6?\x9a\x99\x99?\xcd\xcc\x8c?33\xf3?ff\xe6?\x9a\x99\xd9?\x00\x00\x80?\x9a\x99\xd9?\xcd\xcc\xcc?\x9a\x99\xd9?\xcd\xcc\xcc?\x00\x00\xc0?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'\x05\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00\x13\x00\x00\x00\x0b\x00\x00\x00\x11\x00\x00\x00\t\x00\x00\x00\x04\x00\x00\x00\x1a\x00\x00\x00\x10\x00\x00\x00\x19\x00\x00\x00\x03\x00\x00\x00\x0f\x00\x00\x00\x1e\x00\x00\x00\x1b\x00\x00\x00\x17\x00\x00\x00$\x00\x00\x00\x14\x00\x00\x00\x16\x00\x00\x00\x18\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00\'\x00\x00\x00\x07\x00\x00\x00\x02\x00\x00\x00%\x00\x00\x00\n\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00"\x00\x00\x00\x0c\x00\x00\x00#\x00\x00\x00\r\x00\x00\x00\x12\x00\x00\x00\x1d\x00\x00\x00\x1c\x00\x00\x00&\x00\x00\x00!\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g306
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g117
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g278
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g187
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g159
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g103
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g110
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g271
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g124
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g152
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g292
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g138
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g327
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g341
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g313
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g194
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g173
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g145
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g348
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g131
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g229
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g299
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g236
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g215
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g243
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g180
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g166
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g208
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g362
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g355
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g201
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g250
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g257
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g376
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g320
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g334
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g222
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g285
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g369
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g264
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I76808528
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'ff\xb6@\xcd\xcc\x8c@\x00\x00\x90@\xcd\xcc\xbc@33\xb3@\xcd\xcc\xac@ff\xb6@\x00\x00\xc0@\x00\x00\xc0@\xcd\xcc\xbc@\xcd\xcc\x8c@\xcd\xcc\xac@33\xa3@\x9a\x99\xa9@33\xb3@ff\x96@\x9a\x99\xb9@\xcd\xcc\x8c@\x9a\x99\x99@ff\xa6@\x00\x00\xc0@ff\x86@ff\x96@\x9a\x99\x89@ff\xa6@ff\xa6@\x9a\x99\xa9@\x00\x00\xa0@\x00\x00\xb0@33\xb3@ff\xa6@ff\x96@\x9a\x99\xa9@\x00\x00\x90@\x9a\x99\x99@ff\xb6@\x00\x00\xc0@\x00\x00\x90@\xcd\xcc\x8c@33\xa3@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'z\x103B\xd8\xee\xb6@\xda?D@sDd@%\xbb+@\x8f\xcb<@\x154S@\x04G\xc4?l\x08\x10@\x91}\xd7?\x0eT\x15@\x8dDT@Jg\x86@\xdd\xa8:@#D\xac@[\x18\xf1?B\xcd\x0c@\x8a\xef\xee?\xe4\xdd\x1d@Lf\xa6@\x1e\xef\x1e@KU\xa5@8\xab\xaa@*U\xa5@\xa7:\xb3?\x97\x8a\x08@\xff\xf3\x8e?l\x9a\x99@n\xde\xfd?W\xd6\x9d?\x91\x88(@\x97\xbd\xbb?\x00\xbc\x1b@\xb6\x88\xc8?X\x11\x01@b<\xb3?\xcf\xbd\xbb?\xc0\x0f!@\xe4g\xc6?Qxg@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'\xcd\xccl@333@\x9a\x99Y@\x9a\x99\x89@333@ff\x86@\xcd\xccL@33s@fff@\x00\x00\x80@33s@ff\x86@\x9a\x99y@ff\x86@\x00\x00`@\x9a\x999@fff@\xcd\xccL@\x00\x00\x80@33S@33s@333@\x00\x00`@\xcd\xccl@33s@33S@33s@\x00\x00@@33s@fff@\x9a\x99y@\x00\x00@@\x9a\x99y@\x9a\x99Y@\x9a\x999@\x9a\x99y@\x9a\x99\x89@33s@\x9a\x999@\x9a\x99Y@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S"\x80\xb7\x7f\r\x80\xa1$\x05\xa0\xd5\x19\x05`\xdd\x19\x05\x80\xf0\x17\x05\xa0\xfa\x17\x05\xc0\xa0$\x05\x00\xa1$\x05 \xa3$\x05 \xa0$\x05\x80\x85&\x05\x00\xf8\x17\x05`\x85&\x05`\xa0$\x05\xa0\xf9\x17\x05\x00\xfb\x17\x05`\xfb\x17\x05`5'\x05`\xd6\x19\x05\x80\xd6\x19\x05@\xd4\x19\x05\x00\xdb\x19\x05\xe0\xd7\x19\x05@\xdc\x19\x05\xe0\xdb\x19\x05\xe0\xf9\x17\x05\xe0\xf5\x17\x05`\xfa\x17\x05 \xb9\x7f\r\xa0\xb6\x7f\r \xba\x7f\r\xe0\xb7\x7f\r`\xba\x7f\r \xb5\x7f\r\xc0\xb9\x7f\r\x80\xb5\x7f\r\x80\xba\x7f\r@\xb8\x7f\r \xb0\x7f\r@\xb0\x7f\r"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'\xcd\xcc\x82A\xdd$\x16A\x98n\xae@\x87\x16a@\xaa\xf1\xb6@T\xe3M@\x96CS@\x87\x16Q@\xdb\xf9N@\xee|G@u\x93h@\x96C#@\x96C#@\xdb\xf9.@!\xb0\x1a@\xa2E\x1cA\xa8\xc6+@!\xb0\n@\x87\x16\x01@b\x10p@\x0e-"@u\x93\x18@\x0e-R@u\x93\xc8?u\x93\x18@\xc9vF@\xa8\xc6K@/\xdd|@\xa8\xc6\x0b@u\x93\xe8?\xb6\xf3\xbd?\xdb\xf9\xee?\xdb\xf9.@\xdb\xf9~@\xb6\xf3\xfd?b\x10\x00@B`\xd5?B`\xb5?b\x10\x00@\x0e-R@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I76808528
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'p\x85\xb9\r\x98\x85\xb9\r\x80\xf6\x98\r\xc0\x85\xb9\r\xb0\xf6\x98\rp\x85\xb9\r\x10\xf7\x98\r\x98\x85\xb9\r\xe0\xf6\x98\r\x10\x86\xb9\r\xe8\x85\xb9\r\x10\x86\xb9\r\xc0\x85\xb9\r\xb0\xf6\x98\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'(\r\xdb\x04\x98\x06\xdb\x04\x00\x05\xdb\x04\xa8\x08\xdb\x04(\x01\xdb\x04\x10\n\xdb\x04\xb8\x07\xdb\x048l\xf3\x04\x88j\xf3\x04hl\xf3\x04\xb0c\xf3\x04\x00b\xf3\x04\x80`\xf3\x048i\xf3\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g778
sg83
g779
sg84
g783
sg85
g784
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g789
sg83
g790
sg84
g794
sg85
g795
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g744
sg83
g800
sg84
g749
sg85
g804
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g809
sg83
g810
sg84
g814
sg85
g815
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g756
sg83
g820
sg84
g761
sg85
g824
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g767
sg83
g829
sg84
g772
sg85
g833
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g838
sg83
g839
sg84
g843
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g809
sg83
g849
sg84
g814
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g838
sg83
g858
sg84
g843
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g778
sg83
g867
sg84
g783
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g789
sg83
g876
sg84
g794
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I76808528
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I76808528
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'P\x86\xbb\r\x90\xb0\xbb\r\xa8\xa4\xbb\r\x80\x86\xbb\r\xd0\xa4\xbb\r \x90~\r \xb0\xbb\r\x80\x86\xbb\r\x00\xb1\xbb\r\xb0\x86\xbb\r \x90~\r\x80\x86\xbb\rP\x86\xbb\r\xe0\x86\xbb\r P\x1a\x05 \xa5\xbb\rP\x86\xbb\r\xe0\x86\xbb\rp\x87\xbb\rH\xa5\xbb\r\x10\x87\xbb\r\xe0\x86\xbb\rp\xa5\xbb\r P\x1a\x05P\x86\xbb\r\xb0\xa6\xbb\r\xf8\xa4\xbb\rX\xb0\xbb\r\x10\x87\xbb\r\x98\xa5\xbb\r\xd8\xa6\xbb\r \xa5\xbb\r\xf8\xa4\xbb\r\xb0\x86\xbb\r@\x87\xbb\r\xe0\x86\xbb\r\xd8\xa6\xbb\r\xc0\xa5\xbb\r \xa5\xbb\r\xb0\x86\xbb\r \xb0\xbb\r \x90~\r\xd0\xa4\xbb\r\x98\xa5\xbb\r\xa8\xa4\xbb\r\xa8\x1f\xbb\rP\x86\xbb\r\xd0\xa4\xbb\rP\x86\xbb\rX\xb0\xbb\r@\x87\xbb\r \xb0\xbb\r\x98\xa5\xbb\r\x90\xb0\xbb\r\xa8\xa4\xbb\r\xc0\xa5\xbb\r@P\x1a\x05\x80\x86\xbb\rp\xa5\xbb\r`\x88\xbb\r\x10\x87\xbb\rX\xb0\xbb\r P\x1a\x05p\xa5\xbb\r\xa8\x1f\xbb\rp\xa5\xbb\r \x90~\r\xa8\xa4\xbb\r\xa0\x85&\x05\xc0\xa5\xbb\r\xb0\x86\xbb\r\xd0\xa4\xbb\r Q\x1a\x05\xc0\xa5\xbb\r\xc8\xb0\xbb\r P\x1a\x05`\x88\xbb\r\xe0\x86\xbb\r\x10\xa6\xbb\r P\x1a\x05H\xa5\xbb\r\xf8\xa4\xbb\r8\xa6\xbb\r \xa5\xbb\r\xa8\xa4\xbb\r\xf8\xa4\xbb\r\xc0\xa5\xbb\r\xd0\xa4\xbb\rp\xa5\xbb\r \xb0\xbb\r\xa8\x1f\xbb\rH\xa5\xbb\r \x90~\r\xb0\x86\xbb\r`\x88\xbb\rp\xa5\xbb\r\xb0\x86\xbb\r\x10\x87\xbb\rH\xa5\xbb\r\xa0\x87\xbb\r@P\x1a\x05\xe0\x86\xbb\r\x10\x87\xbb\r\xa0P\x1a\x05\xc0\xa5\xbb\r\xf8\xa4\xbb\r8\xb1\xbb\r \x90~\r@P\x1a\x05 \xb0\xbb\r \x90~\r@P\x1a\x05X\xb0\xbb\r\x00\x88\xbb\r\xa8\x1f\xbb\r\x10\xa6\xbb\rH\xa5\xbb\r \xa5\xbb\r\x98\xa5\xbb\r\xa8\x1f\xbb\r\x80\x86\xbb\rp\xa5\xbb\rX\xb0\xbb\r\x98\xa5\xbb\r8\xb1\xbb\rP\x86\xbb\r \xb0\xbb\r Q\x1a\x058\xa6\xbb\r Q\x1a\x05p\x87\xbb\r\xa0\x85&\x05\xa8\xa4\xbb\r\xa0P\x1a\x05H\xa5\xbb\r \xa5\xbb\r\x80\x86\xbb\r\xd0\xa4\xbb\r P\x1a\x05\x00\xb1\xbb\rH\xa5\xbb\r Q\x1a\x05\xb0\x86\xbb\r P\x1a\x05\x00\xa7\xbb\r\xd8\xa6\xbb\r\x80\x86\xbb\r`\xa6\xbb\r@P\x1a\x05\xe0\x86\xbb\rp\xa5\xbb\r Q\x1a\x05X\xb0\xbb\r\x00\xb1\xbb\r\xe0\x86\xbb\r\xf8\xa4\xbb\r\x10\x87\xbb\r\x98\xa5\xbb\r\xc0\xa5\xbb\rP\x86\xbb\r\x80\x86\xbb\r\xe0\x86\xbb\r\xb0\xa6\xbb\r \x90~\r@P\x1a\x05 Q\x1a\x05@P\x1a\x05\xa0\x87\xbb\r \xa5\xbb\rp\xa5\xbb\r\xa8\x1f\xbb\r\x10\x87\xbb\rX\xb0\xbb\r`\xa6\xbb\r\x10\x87\xbb\rH\xa5\xbb\r\x98\xa5\xbb\r \x90~\r \xa5\xbb\r\xa8\x1f\xbb\rp\xa5\xbb\rp\x87\xbb\r\xe0\x86\xbb\r\x10\xa6\xbb\r\xd0\xa4\xbb\r Q\x1a\x05H\xa5\xbb\r\xa0\x87\xbb\r\xd0\xa4\xbb\r\xf8\xa4\xbb\r P\x1a\x05 Q\x1a\x05\x88\xa6\xbb\r\xa8\x1f\xbb\r\x10\x87\xbb\rX\xb0\xbb\r\xc0\xa5\xbb\r \xb0\xbb\r\x00\xa7\xbb\r\x10\xa6\xbb\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'`\xd8\x98\r\x00\xda\x98\r`\xda\x98\r\xc0\xda\x98\r\xc0\xdc\x98\r \xdb\x98\r\x80\xdb\x98\r\xe0\xda\x98\r\x00\xde\x98\r\x00\xdd\x98\r\xc0\xdb\x98\r\xe0\xdd\x98\r\x00\xd8\x98\r\xa0\xd9\x98\r`\xdb\x98\r\x80\xda\x98\r`\xd9\x98\r@\xdd\x98\r@\xde\x98\r\xa0\xdc\x98\r\xe0\xd1\x98\r\x80\xde\x98\r\x80\xdc\x98\r\x80\xdd\x98\r\xa0\xdd\x98\r\xa0\xa1\x80\r\x80q}\r\xc0K\x80\r\x80K\x80\r\x80J\x80\r\xc0J\x80\r@K\x80\r@M\x80\r\x00J\x80\r@J\x80\r\xc0L\x80\r\x00M\x80\r G\x80\r`G\x80\r\x00F\x80\r\xe0F\x80\r`E\x80\r@F\x80\r\x80I\x80\r\xc0E\x80\r\x80N\x80\r\xc0N\x80\r@N\x80\r@O\x80\r\x00H\x80\r\xc0G\x80\r\x80F\x80\r\x00L\x80\r\x00I\x80\r@I\x80\r\x80H\x80\r\xc0H\x80\r\xc0M\x80\r\xa0@\x80\r\xe0@\x80\r\x80M\x80\r@@\x80\r\x00N\x80\r@L\x80\r\x00O\x80\r\xc0@\x80\r\xc0I\x80\r\x00A\x80\r\x80L\x80\r`@\x80\r\x00K\x80\r @\x80\r\x80@\x80\r\x80\xa4$\x05`p}\r A\x80\r\xc0\xbe\x7f\r \xb3\x7f\r\xe0\xb1\x7f\r`\xbe\x7f\r@\xbf\x7f\r \xbf\x7f\r\xa0\xbe\x7f\r\x80\xbf\x7f\r`\xbf\x7f\r@\xbe\x7f\r\xa0\xbf\x7f\r\x80\xd7\x19\x05@\xb1\x7f\r\xc0\xbf\x7f\r@\xb2\x7f\r`\xb2\x7f\r\xa0\xb2\x7f\r\xa0\xb1\x7f\r\x00\xb1\x7f\r\xe0\xbe\x7f\r\xa0F\x80\r`\xb1\x7f\r\xc0\xb1\x7f\r`\xbb\x7f\r\x00\xb2\x7f\r\xe0\xb2\x7f\r\xc0\xb2\x7f\r\xe0\xb3\x7f\r\x80\xb2\x7f\r`\xb0\x7f\r`\xb3\x7f\r\xe0\xbf\x7f\r\x80\xb3\x7f\r \xb4\x7f\r\x00\xb3\x7f\r \xb2\x7f\r\x80\xbc\x7f\r\x80\xbe\x7f\r \xbe\x7f\r\x80\xb1\x7f\r\xa0\xb3\x7f\r\xc0\xb3\x7f\r\x00\xb4\x7f\r@H\x80\r\xc0\xef~\r\xa0\xef~\r\x80\xee~\r\x00\xef~\r\x80\xe5~\r@{}\r\xe0\xee~\r`\xdd\x98\r\xa0\xda\x98\r\xe0\xdc\x98\r\x80\xdf\x98\r\x00\xd9\x98\r \xdd\x98\r\xe0\xdf\x98\r@\xd1\x98\r`\xdf\x98\r\xc0\xdd\x98\r \xdf\x98\r\xa0\xdf\x98\r\xc0\xdf\x98\r\x00\xdb\x98\r \xdc\x98\r\xc0\xd7\x98\r\x00\xdc\x98\r@\xb3\x7f\r\xe0-$\x05\xa0\xdb\x98\r`\xde\x98\r\xe0\xd9\x98\r\xc0\xd9\x98\r\x00\xdf\x98\r\xe0\xdb\x98\r \xde\x98\r\x80\xd0\x98\r@\xdc\x98\r\xc0\xde\x98\r@\xdf\x98\r`\xdc\x98\r\xa0\xde\x98\r`\xed~\r\xc0\xa0%\x05\x00\xac%\x05 \xab%\x05 \x96~\r@\xdb\x98\r\x00\xa4\x17\x05\xe0\xa1\x17\x05\x80\xa0\x17\x05 \xb1\x7f\r\x00\xbf\x7f\r@\xf2\xbb\x1f \xf2\xbb\x1f\xc0\xf0\xbb\x1f@\xf1\xbb\x1f\x00\xf2\xbb\x1f\xe0\xf0\xbb\x1f@\xf0\xbb\x1f\xc0\xf2\xbb\x1f\x80\xf0\xbb\x1f\xc0\xf1\xbb\x1f`\xf2\xbb\x1f\xe0\xf2\xbb\x1f`\xf1\xbb\x1f \xf1\xbb\x1f@\xf3\xbb\x1f \xf3\xbb\x1f\x80\xf1\xbb\x1f`\xf3\xbb\x1f\xc0\xf3\xbb\x1f\xa0\xf3\xbb\x1f\x80\xf2\xbb\x1f@\xd8\x98\r\xa0\xd6\x98\r\xc0\xd1\x98\r \xd6\x98\r \xd9\x98\r\xe0\xd5\x98\r@\xd0\x98\r`\xd1\x98\r\xa0\xd7\x98\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\x03\x1f\x12@\xba\xca\xec?\xceP\xd5?\x0e\xca\xec?\xd6\xd6\xcc?\x083\xd3?i\x87x@P\x0f1@\xea%\x12@n\x93\x99?\xa2\xe9\xee?\xba\xed\x1e@\x81\xa9*@\xe2\x85\xc8?(S\x15@\x1a\x95\xf9?\xad\xa7\x8a?\xe2\x0c\xb1?~\xb1\xdb?\xe6\xfd\xbf?\xd9\xfbO@\xa7_\xe6?\xf25\xc4?\xed\x9a9@\x0e\xed\xce?R\xfa\xdf?\x0e@\xa4?\xed\xfc\xff??\xf4]?ZCD@P\xba\x0b@S\t\xa0?\x94\x95\xb9?r\xaf\xaa?\xa1nw?r\x0c\x91?:\xd8\xdd?\x88\xca\xcc? I3?FS\x95?\x92\xca\xcc?4\xcb\xac?\x84\xa6\xca?\x90k\x06@\xfd\xc9\xac?\xbf\xda\r@2^f?5\xa6\xaa?\xeb\xa0H?l\xfb\xbf?y\xf6??\x14u\x07@+t\'@\xe1\xd9\xac?\xdc\xc9,@\xec\xec\xae?\x8dS\xf5?\xb5\x99\xb9?\xc0\x18\xc2?\xfb\xa9\x8a?*\r\xd1?\x12\x0b\x91?\xd9\xee\x8e?\x1d\x8a\xa8?A2\xf3?\x00\x04\x91?\xe7\x83\x88?\n\xdc\x9d?`\xa9\xca??\x87\xa8?\x88\nQ?<QU?\x1b\xa8:@\xd55\xb3?.\x83\xa8?a\xed\x8e?\xe3\x97\xb9?\x0f\xdb]?\x0c\xac\xea?\xfb\x91Y?\x8f\xb7{?|\x1e\xe2?\x1c\xb8\xbb?\xf9\x87\x88?\x13\xcb\xcc?\xb1ww?{d\x86?\xe4\xaa{?\xf26\x93?\x98\xf0n?\xc5\x83\xa8?\x90\xf8\x7f?y\xf6\x7f?\x15\xab\x8a?\x9e<D?\x94\x95j?\x03Vf?\xd5\xaa\xaa?\xb7+3?,+Q?\xd61\xb3?\x14\x19b?kAD?-\xea\xce?G\t\x80?\xa5%s?v\x12\x91?\x19\xf4??\xf0\xfa\x9f?\xa4\xb4\xea?p \x82?\tC4@\\\xf8\x9f?Ff\x86?N\xe8\xfd?\x97\xfd?@/\x80H?\x82\xba;?\xc6\xeb\x8e?\xaa\xfa\xee?\xeb/\x93?\x05\x91j?\x85\x0c\x91?Jt\xb7?0\xda\x8c?\xdf\xa6\xca?\xac\x97\x99?\xa8\xb8+@a\xb8{?u#\xc2?\x9d\xb8\x9b?\xf6\xe8\xee?_\x98)@%ef?7VD?[\xcb\x0c@\xca\xb8\x1b@7\x8fY?\xabB\x84?\xf6wf?\xb2\x858@\xb27#@\xe3\xff??\xca\x0eQ?\x96\xe9n?t\xda\xfd?0r\x86?a\xb4{?\x8a\xee.?c\x9a\xf9?`\x1cs?\xaf\xf5\xae?nvH?\xf3\xbb;?\x98BD?\xe8=\x84?\x06b\xa6?t\xb3\xaa?$tw?)\xde]?\xe9\xb7{?\xb1\x1fb?\xee\xa2{?\x00\x01Q?\\\xb9\xbb?\xbfB\xa4?\xf8v\xb7?>\x1fb?MTU?\xf2\x03\xd1?SA\x84?iu\x97?\xe5tf?\xd35s?7=D?\xe8\xc6L?\xae\xebn?\x13\xc9L?R\xbc\x9b?N-\xd3?\x04\xb1\xdb?\x0e\xcd\xcc?R\xa6j?\x1d\xbf\xfb?\x7fS\x95?\xae\xb8\x9b?\xa2!"?\x85.3?\xfd<D?\xef\xc4{?\xd4\xb8{?^\xfd\x7f?\xa0\xcb\x8c?,\xba\x9b?\xae\x99Y?\x9e\xab;?\x00!b?\\\x85\x88?\xf2\xc4L? 03?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'\xb0l\xf3\x04\xa8h\xf3\x04\x18.\xaf\x04\xf8,\xaf\x04\xf0"\xaf\x04\xa8(\xaf\x04@*\xaf\x04\xe0#\xaf\x04 )\xaf\x04\xa0-\xaf\x04\x88*\xaf\x04X*\xaf\x04x"\xaf\x04\xb0)\xaf\x04\xc8&\xaf\x04\x98/\xaf\x04\xd8(\xaf\x04  \xaf\x04\xd0!\xaf\x04\xa8.\xaf\x04\x10!\xaf\x04H%\xaf\x04\x10*\xaf\x04\x08#\xaf\x04\xa8+\xaf\x04\xb0\xbc\xb0\x04\xa8\xb2\xb0\x04H\xb2\xb0\x04(\xba\xb0\x04\xf8\xbc\xb0\x04\x88\xbd\xb0\x04\x00\xb5\xb0\x04\xa8\xbe\xb0\x04 \xb3\xb0\x04\xb0\xbf\xb0\x04H\xbb\xb0\x04\x08\xbf\xb0\x04\xb8\xbd\xb0\x04\xf0\xb2\xb0\x04\xd0\xbd\xb0\x04\x10\xb1\xb0\x04P\xb6\xb0\x04\xd8\xb8\xb0\x04\x98\xb0\xb0\x04`\xb5\xb0\x04@\xbd\xb0\x04`\xbb\xb0\x04\xd8\xb2\xb0\x04\x10\xbd\xb0\x04x\xbb\xb0\x048\xb6\xb0\x04H\xbe\xb0\x04\xb8\xb4\xb0\x04\xf0\xb8\xb0\x04\xd8\xbe\xb0\x04\x98\xbf\xb0\x04`\xb8\xb0\x04\xc0\xb2\xb0\x04\x80\xbf\xb0\x04\xa0\xb1\xb0\x040\xb5\xb0\x04p\xb1\xb0\x04\xe8\xba\xb0\x04\x08\xbc\xb0\x04\xb8\xba\xb0\x04\x10\xb4\xb0\x04\x18\xbb\xb0\x04 \xb0\xb0\x04\xf8\xb3\xb0\x04P\xb0\xb0\x04\x08\xb6\xb0\x04\xd8\xbb\xb0\x04x\xbe\xb0\x04p\xb4\xb0\x04\x98\xb6\xb0\x04(\xb7\xb0\x04\xf8\xb6\xb0\x04P\xb3\xb0\x04\xe0\xb0\xb0\x04\x18\xb2\xb0\x04\x88\xba\xb0\x04@\xb4\xb0\x04\xd0\xb4\xb0\x04\xc0\xb5\xb0\x04\x80\xb0\xb0\x04\xe0\xb6\xb0\x04\x90\xb8\xb0\x04\xd0\xb7\xb0\x04\xa8\xb5\xb0\x04@\xba\xb0\x04\x98\xb9\xb0\x04\xb0\xb6\xb0\x040\xbb\xb0\x04\xa0\xba\xb0\x04\x88\xb1\xb0\x04\x80\xb9\xb0\x04(\xb4\xb0\x04\xb8\xb1\xb0\x04\xa0\xbd\xb0\x04P\xbc\xb0\x04\x18\xb5\xb0\x048\xb0\xb0\x04h\xb0\xb0\x04x\xb2\xb0\x04\xb0\xb3\xb0\x04\x98\xbc\xb0\x04\xe0\xbc\xb0\x04\x88\xb7\xb0\x04x\xb5\xb0\x04H\xb8\xb0\x04\xe8\xb1\xb0\x04\xb0\xb0\xb0\x04\x90\xb2\xb0\x04\x18\xb8\xb0\x04\xa0\xb7\xb0\x04\xf8\xb0\xb0\x04\xa0\xb4\xb0\x04\xc8\xb3\xb0\x04X\xb4\xb0\x048\xb9\xb0\x04\xf0\xbb\xb0\x04\xe8\xb4\xb0\x04\x10\xb7\xb0\x04`\xb2\xb0\x04@\xb7\xb0\x048\xbc\xb0\x04(\xbd\xb0\x04\xe8\xbd\xb0\x04@\xb1\xb0\x04\x90\xbb\xb0\x04X\xbd\xb0\x04`\xbe\xb0\x040\xbe\xb0\x04 \xb9\xb0\x04\xf8\xb9\xb0\x04\xc8\xbf\xb0\x04P\xbf\xb0\x04\x08\xb9\xb0\x04\xe0\xb3\xb0\x04P\xb9\xb0\x04\xd8\xb5\xb0\x04\xe8\xb7\xb0\x04p\xba\xb0\x04\xa8\xb8\xb0\x04\x08\xb3\xb0\x048\xb3\xb0\x04\x00\xbe\xb0\x04\xc0\xb8\xb0\x04\x00\xbb\xb0\x04\x80\xbc\xb0\x04\xa8\xbb\xb0\x04\x18\xbe\xb0\x04\x80\xb6\xb0\x04\xc0\xbb\xb0\x04\xe0\xb9\xb0\x04\xc8\xb0\xb0\x04\x88\xb4\xb0\x04\xd0\xb1\xb0\x04X\xb7\xb0\x04h\xb9\xb0\x04x\xb8\xb0\x04\xc8\xb6\xb0\x04\xe0\xbf\xb0\x04h\xbc\xb0\x04\xc8\xb9\xb0\x04\x00\xb8\xb0\x04\xf0\xbe\xb0\x040\xb8\xb0\x04 \xb6\xb0\x04h\xbf\xb0\x04\x90\xb5\xb0\x04\x10\xba\xb0\x04\xb0\xb9\xb0\x04\xd0\xba\xb0\x04X\xba\xb0\x04p\xbd\xb0\x04 \xbc\xb0\x04(\xb1\xb0\x04\xc0\xbe\xb0\x040\xb2\xb0\x048\xbf\xb0\x04\x00\xb2\xb0\x04\xd0jX\x02\x80\xb3\xb0\x04\xb0f\xb0\x04\x88\n\xdb\x04\xc8\xbc\xb0\x04X\xb1\xb0\x04h\xb3\xb0\x04 \xbf\xb0\x04\xe8a\xb0\x04\xf8c\xb0\x04\x08o\xb0\x04\xc8c\xb0\x04\xc0k\xb0\x04\x08f\xb0\x04\x90e\xb0\x04`n\xb0\x04\xb8m\xb0\x04\x18n\xb0\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g926
sg895
g916
sg909
g920
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g954
sg895
g1018
sg909
g961
sg904
g1025
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1043
sg895
g1033
sg909
g1037
sg904
g1041
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1054
sg895
g1050
sg909
g1061
sg904
g1058
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g988
sg895
g1067
sg909
g995
sg904
g1074
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g954
sg895
g1018
sg909
g961
sg904
g1025
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1112
sg895
g1108
sg909
g1119
sg904
g1116
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g1129
sg895
g1125
sg909
g1136
sg904
g1133
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1146
sg895
g1142
sg909
g1153
sg904
g1150
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g900
sg895
g1159
sg909
g910
sg904
g1166
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1112
sg895
g1108
sg909
g1119
sg904
g1116
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1005
sg895
g1187
sg909
g1012
sg904
g1194
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1206
sg895
g1202
sg909
g1213
sg904
g1210
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1223
sg895
g1219
sg909
g1230
sg904
g1227
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1112
sg895
g1236
sg909
g1119
sg904
g1243
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g1255
sg895
g1251
sg909
g1262
sg904
g1259
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1129
sg895
g1268
sg909
g1136
sg904
g1275
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g900
sg895
g1159
sg909
g910
sg904
g1166
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1306
sg895
g1296
sg909
g1300
sg904
g1304
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1043
sg895
g1033
sg909
g1037
sg904
g1041
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1306
sg895
g1296
sg909
g1300
sg904
g1304
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1223
sg895
g1219
sg909
g1230
sg904
g1227
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g1356
sg895
g1352
sg909
g1363
sg904
g1360
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1379
sg895
g1369
sg909
g1373
sg904
g1377
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1146
sg895
g1386
sg909
g1153
sg904
g1393
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1043
sg895
g1401
sg909
g1037
sg904
g1408
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1054
sg895
g1416
sg909
g1061
sg904
g1423
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1112
sg895
g1236
sg909
g1119
sg904
g1243
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1379
sg895
g1457
sg909
g1373
sg904
g1464
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1476
sg895
g1472
sg909
g1483
sg904
g1480
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g1146
sg895
g1386
sg909
g1153
sg904
g1393
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1054
sg895
g1416
sg909
g1061
sg904
g1423
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g971
sg895
g1541
sg909
g978
sg904
g1548
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g1356
sg895
g1556
sg909
g1363
sg904
g1563
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g926
sg895
g1584
sg909
g920
sg904
g1591
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g900
sg895
g1159
sg909
g910
sg904
g1166
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g971
sg895
g1541
sg909
g978
sg904
g1548
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g900
sg895
g1159
sg909
g910
sg904
g1166
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1306
sg895
g1296
sg909
g1300
sg904
g1304
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g900
sg895
g1159
sg909
g910
sg904
g1166
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1005
sg895
g1187
sg909
g1012
sg904
g1194
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g1356
sg895
g1352
sg909
g1363
sg904
g1360
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g926
sg895
g1584
sg909
g920
sg904
g1591
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g937
sg895
g1703
sg909
g944
sg904
g1710
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1476
sg895
g1718
sg909
g1483
sg904
g1725
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g1379
sg895
g1369
sg909
g1373
sg904
g1377
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1255
sg895
g1759
sg909
g1262
sg904
g1766
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g1356
sg895
g1556
sg909
g1363
sg904
g1563
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1223
sg895
g1787
sg909
g1230
sg904
g1794
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1306
sg895
g1802
sg909
g1300
sg904
g1809
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g1129
sg895
g1125
sg909
g1136
sg904
g1133
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g1255
sg895
g1759
sg909
g1262
sg904
g1766
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g926
sg895
g1584
sg909
g920
sg904
g1591
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g1255
sg895
g1759
sg909
g1262
sg904
g1766
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g988
sg895
g1067
sg909
g995
sg904
g1074
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g1905
sg895
g1895
sg909
g1899
sg904
g1903
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1476
sg895
g1472
sg909
g1483
sg904
g1480
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1054
sg895
g1050
sg909
g1061
sg904
g1058
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g971
sg895
g1541
sg909
g978
sg904
g1548
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1905
sg895
g1951
sg909
g1899
sg904
g1958
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1476
sg895
g1472
sg909
g1483
sg904
g1480
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g988
sg895
g1067
sg909
g995
sg904
g1074
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1129
sg895
g1268
sg909
g1136
sg904
g1275
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g1356
sg895
g1352
sg909
g1363
sg904
g1360
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1112
sg895
g1108
sg909
g1119
sg904
g1116
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g937
sg895
g1703
sg909
g944
sg904
g1710
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1129
sg895
g1125
sg909
g1136
sg904
g1133
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g1206
sg895
g2057
sg909
g1213
sg904
g2064
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g1043
sg895
g1401
sg909
g1037
sg904
g1408
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g954
sg895
g1018
sg909
g961
sg904
g1025
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1146
sg895
g1142
sg909
g1153
sg904
g1150
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g937
sg895
g1703
sg909
g944
sg904
g1710
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1043
sg895
g1401
sg909
g1037
sg904
g1408
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1476
sg895
g1472
sg909
g1483
sg904
g1480
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1255
sg895
g1251
sg909
g1262
sg904
g1259
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g1005
sg895
g1187
sg909
g1012
sg904
g1194
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g926
sg895
g916
sg909
g920
sg904
g924
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1206
sg895
g1202
sg909
g1213
sg904
g1210
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g988
sg895
g1067
sg909
g995
sg904
g1074
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g1054
sg895
g1416
sg909
g1061
sg904
g1423
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g1356
sg895
g1352
sg909
g1363
sg904
g1360
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1255
sg895
g1251
sg909
g1262
sg904
g1259
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1054
sg895
g1050
sg909
g1061
sg904
g1058
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1223
sg895
g1219
sg909
g1230
sg904
g1227
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g1206
sg895
g2057
sg909
g1213
sg904
g2064
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1054
sg895
g1050
sg909
g1061
sg904
g1058
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g1379
sg895
g1369
sg909
g1373
sg904
g1377
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g1112
sg895
g1236
sg909
g1119
sg904
g1243
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1223
sg895
g1219
sg909
g1230
sg904
g1227
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1146
sg895
g1142
sg909
g1153
sg904
g1150
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g1476
sg895
g1472
sg909
g1483
sg904
g1480
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g1043
sg895
g1033
sg909
g1037
sg904
g1041
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1129
sg895
g1125
sg909
g1136
sg904
g1133
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1379
sg895
g1369
sg909
g1373
sg904
g1377
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g988
sg895
g1067
sg909
g995
sg904
g1074
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g1379
sg895
g1457
sg909
g1373
sg904
g1464
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1306
sg895
g1802
sg909
g1300
sg904
g1809
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1223
sg895
g1219
sg909
g1230
sg904
g1227
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g926
sg895
g1584
sg909
g920
sg904
g1591
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1206
sg895
g2057
sg909
g1213
sg904
g2064
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g1146
sg895
g1386
sg909
g1153
sg904
g1393
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1356
sg895
g1556
sg909
g1363
sg904
g1563
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g926
sg895
g916
sg909
g920
sg904
g924
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1255
sg895
g1251
sg909
g1262
sg904
g1259
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1306
sg895
g1802
sg909
g1300
sg904
g1809
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1356
sg895
g1556
sg909
g1363
sg904
g1563
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1129
sg895
g1268
sg909
g1136
sg904
g1275
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1905
sg895
g1895
sg909
g1899
sg904
g1903
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g954
sg895
g1018
sg909
g961
sg904
g1025
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1905
sg895
g1951
sg909
g1899
sg904
g1958
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1905
sg895
g1951
sg909
g1899
sg904
g1958
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1146
sg895
g1142
sg909
g1153
sg904
g1150
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1206
sg895
g2057
sg909
g1213
sg904
g2064
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1146
sg895
g1386
sg909
g1153
sg904
g1393
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g971
sg895
g1541
sg909
g978
sg904
g1548
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1129
sg895
g1268
sg909
g1136
sg904
g1275
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1043
sg895
g1033
sg909
g1037
sg904
g1041
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g1206
sg895
g1202
sg909
g1213
sg904
g1210
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1905
sg895
g1895
sg909
g1899
sg904
g1903
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1054
sg895
g1050
sg909
g1061
sg904
g1058
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1129
sg895
g1125
sg909
g1136
sg904
g1133
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g1476
sg895
g1718
sg909
g1483
sg904
g1725
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1379
sg895
g1457
sg909
g1373
sg904
g1464
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g954
sg895
g1018
sg909
g961
sg904
g1025
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1379
sg895
g1457
sg909
g1373
sg904
g1464
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g1112
sg895
g1236
sg909
g1119
sg904
g1243
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g1255
sg895
g1251
sg909
g1262
sg904
g1259
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1905
sg895
g1951
sg909
g1899
sg904
g1958
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g1306
sg895
g1296
sg909
g1300
sg904
g1304
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g1043
sg895
g1033
sg909
g1037
sg904
g1041
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1112
sg895
g1108
sg909
g1119
sg904
g1116
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1043
sg895
g1401
sg909
g1037
sg904
g1408
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1223
sg895
g1787
sg909
g1230
sg904
g1794
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g1356
sg895
g1352
sg909
g1363
sg904
g1360
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1476
sg895
g1718
sg909
g1483
sg904
g1725
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1112
sg895
g1236
sg909
g1119
sg904
g1243
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1306
sg895
g1802
sg909
g1300
sg904
g1809
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1379
sg895
g1369
sg909
g1373
sg904
g1377
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g1905
sg895
g1951
sg909
g1899
sg904
g1958
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1379
sg895
g1457
sg909
g1373
sg904
g1464
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g1054
sg895
g1416
sg909
g1061
sg904
g1423
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1146
sg895
g1386
sg909
g1153
sg904
g1393
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1255
sg895
g1759
sg909
g1262
sg904
g1766
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g926
sg895
g916
sg909
g920
sg904
g924
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1223
sg895
g1787
sg909
g1230
sg904
g1794
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g1306
sg895
g1296
sg909
g1300
sg904
g1304
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g1223
sg895
g1787
sg909
g1230
sg904
g1794
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1206
sg895
g1202
sg909
g1213
sg904
g1210
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g1356
sg895
g1556
sg909
g1363
sg904
g1563
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1146
sg895
g1142
sg909
g1153
sg904
g1150
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g926
sg895
g1584
sg909
g920
sg904
g1591
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1255
sg895
g1759
sg909
g1262
sg904
g1766
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1005
sg895
g1187
sg909
g1012
sg904
g1194
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g1112
sg895
g1108
sg909
g1119
sg904
g1116
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g937
sg895
g1703
sg909
g944
sg904
g1710
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g971
sg895
g1541
sg909
g978
sg904
g1548
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1905
sg895
g1895
sg909
g1899
sg904
g1903
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g1206
sg895
g1202
sg909
g1213
sg904
g1210
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g1054
sg895
g1416
sg909
g1061
sg904
g1423
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1043
sg895
g1401
sg909
g1037
sg904
g1408
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1129
sg895
g1268
sg909
g1136
sg904
g1275
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1905
sg895
g1895
sg909
g1899
sg904
g1903
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1206
sg895
g2057
sg909
g1213
sg904
g2064
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g926
sg895
g916
sg909
g920
sg904
g924
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g1223
sg895
g1787
sg909
g1230
sg904
g1794
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g1306
sg895
g1802
sg909
g1300
sg904
g1809
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1476
sg895
g1718
sg909
g1483
sg904
g1725
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1005
sg895
g1187
sg909
g1012
sg904
g1194
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g1476
sg895
g1718
sg909
g1483
sg904
g1725
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g937
sg895
g1703
sg909
g944
sg904
g1710
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I76808528
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'H\xf0\x18\x05\xa0\xfc\x18\x05\x90\xfd\x18\x05\xd0\x1c\x19\x05@T\xc3\x1f \x08\xbf\x04@T\xc3\x1f8!%\x05\xa0\xfc\x18\x05`\r\xbf\x04\x08\x1d\x19\x05H\xf0\x18\x05\xb0\x1d\x19\x05\xe0\x08\xbf\x04pT\xc3\x1f\xa0T\xc3\x1f\x80\x08\xbf\x04@T\xc3\x1f@\x1d\x19\x05\x90\xfd\x18\x05pT\xc3\x1fp*%\x05\x80\x08\xbf\x04H\xf0\x18\x05 \x08\xbf\x04\xc0*%\x058!%\x05\xd0T\xc3\x1f\xf0U\xc3\x1f\xe0\x08\xbf\x04pT\xc3\x1f\x08\x1d\x19\x058!%\x05x,%\x05\x08.%\x05\x90\xfd\x18\x05\x00U\xc3\x1f@T\xc3\x1f\xc0*%\x05@\x1d\x19\x05H\xf0\x18\x05 V\xc3\x1f\x18-%\x050U\xc3\x1f \x08\xbf\x04\xd0T\xc3\x1f\xa0T\xc3\x1fx,%\x05 \x15&\x05\x80\x08\xbf\x04pT\xc3\x1f\x00U\xc3\x1f\xc8,%\x05\xe8\x1d\x19\x05\xa0\xfc\x18\x05h-%\x05\xb0\x1d\x19\x05 V\xc3\x1f\x18-%\x05\x90\xfd\x18\x05 \x08\xbf\x04\x18-%\x05@\x1d\x19\x05x,%\x05H\xf0\x18\x05x,%\x05\xa0\xfc\x18\x05`\r\xbf\x04\x80\x08\xbf\x04p*%\x05 \x15&\x05\x18-%\x05x,%\x05\x00U\xc3\x1fp*%\x05\xd0T\xc3\x1f8!%\x05\x90\xfd\x18\x05\xd0T\xc3\x1f8!%\x05pT\xc3\x1f\xf0U\xc3\x1f8!%\x050U\xc3\x1f\xa0T\xc3\x1f\xd0\x1c\x19\x05\x18-%\x05\x90U\xc3\x1fp*%\x05`\r\xbf\x04\xd0T\xc3\x1f\xa8.%\x05@\x1d\x19\x05`U\xc3\x1f \x08\xbf\x04\x18-%\x05\x00U\xc3\x1fx,%\x05\xa0T\xc3\x1f\xa0\xfc\x18\x05\x90U\xc3\x1f\x08\x1d\x19\x05\xe0\x08\xbf\x04`\r\xbf\x04\x00U\xc3\x1f\xd0\x1c\x19\x05\x00U\xc3\x1fH\xf0\x18\x05\xd0\x1c\x19\x05\x08.%\x05\x90U\xc3\x1f\x18-%\x05\xc8,%\x05PV\xc3\x1f\xa0T\xc3\x1f@\x1d\x19\x05\xd0\x1c\x19\x05\x80\x08\xbf\x04`\r\xbf\x04h-%\x05`\r\xbf\x04H\xf0\x18\x05\x80\x08\xbf\x04 \x1e\x19\x05\x80\x08\xbf\x04\xa0\xfc\x18\x05@T\xc3\x1f\xa0\xfc\x18\x05\xc0*%\x05`U\xc3\x1f\xd0\x1c\x19\x05\xe0\x08\xbf\x04@T\xc3\x1f\xa8\x14&\x05\xc0*%\x05\x08\x1d\x19\x05\xa8.%\x05\xe0\x08\xbf\x040\x8e\x98\r\xe0\x08\xbf\x04`U\xc3\x1f`\r\xbf\x04\x90\xfd\x18\x05x\x1d\x19\x05\x90\xfd\x18\x05x,%\x05\xc0U\xc3\x1f8!%\x05\xe0\x08\xbf\x04x,%\x05p*%\x05\x90\xfd\x18\x058!%\x05\x90U\xc3\x1f\x18-%\x05\x80\x08\xbf\x04x,%\x05 \x15&\x05x,%\x05x\x1d\x19\x05`U\xc3\x1f \x08\xbf\x04p*%\x05@\x1d\x19\x05 \x08\xbf\x04\xe0\x08\xbf\x04\xd0T\xc3\x1f \x08\xbf\x04pT\xc3\x1f\xa0T\xc3\x1f\x00U\xc3\x1f@\x1d\x19\x05\x80\x08\xbf\x04p*%\x05\xc0*%\x05\xd0\x1c\x19\x05\xe0\x08\xbf\x04\x08.%\x05\xd0T\xc3\x1f@T\xc3\x1f \x1e\x19\x05\xd0\x1c\x19\x05\x00U\xc3\x1f\xa0T\xc3\x1f\xc0*%\x050\x8e\x98\r\xe0\x08\xbf\x04\xb0\x1d\x19\x05p*%\x05\x08\x1d\x19\x05H\xf0\x18\x05\x08\x1d\x19\x05\x18-%\x05\xa0T\xc3\x1f\xa0\xfc\x18\x05 V\xc3\x1f@\x1d\x19\x05PV\xc3\x1f\xc0*%\x05\xa0T\xc3\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S'\xe0\xf5\xbb\x1f`\xf7\xbb\x1f\xc0\xf6\xbb\x1f`\xf5\xbb\x1f \xf7\xbb\x1f\x80\xf7\xbb\x1f@\xf6\xbb\x1f\x00\xf6\xbb\x1f\xc0\xf8\xbb\x1f\x80\xf5\xbb\x1f\xa0\xf5\xbb\x1f\x00\xf8\xbb\x1f`\xf6\xbb\x1f\xa0\xf8\xbb\x1f\x00\xf7\xbb\x1f \xf6\xbb\x1f`\xf9\xbb\x1f\x80\xf8\xbb\x1f\xe0\xf7\xbb\x1f\xa0\xf9\xbb\x1f\xc0\xf9\xbb\x1f\x80\xf9\xbb\x1f@\xf8\xbb\x1f\xc0\xf7\xbb\x1f\x00\xf9\xbb\x1f\xa0\xf7\xbb\x1f\x80\xf6\xbb\x1f\xe0\xf6\xbb\x1f@\xfa\xbb\x1f\xa0\xf6\xbb\x1f`\xf8\xbb\x1f\xa0\xfa\xbb\x1f\x00\xfa\xbb\x1f`\xfa\xbb\x1f\x00\xfb\xbb\x1f\xe0\xfa\xbb\x1f\xc0\xfa\xbb\x1f \xf8\xbb\x1f \xf9\xbb\x1f\xe0\xf8\xbb\x1f@\xf9\xbb\x1f@\xf7\xbb\x1f\xc0\xfb\xbb\x1f\x80\xfb\xbb\x1f@\xfc\xbb\x1f\xc0\xf5\xbb\x1f\x80\xfa\xbb\x1f\xe0\xfb\xbb\x1f \xfa\xbb\x1f\x80\xfc\xbb\x1f\x00\xfc\xbb\x1f`\xfd\xbb\x1f \xfd\xbb\x1f\xa0\xfd\xbb\x1f@\xfd\xbb\x1f\xe0\xfd\xbb\x1f`\xfb\xbb\x1f\xe0\xfc\xbb\x1f\x00\xfe\xbb\x1f\xa0\xfc\xbb\x1f\x80\xfd\xbb\x1f\xc0\xfc\xbb\x1f\xe0\xf9\xbb\x1f \xfb\xbb\x1f@\xff\xbb\x1f@\xfb\xbb\x1f@\xd5\x98\r \xfe\xbb\x1f`\xfc\xbb\x1f`\xff\xbb\x1f\x80\xfe\xbb\x1f\x00\xff\xbb\x1f\xc0\xfd\xbb\x1f\xe0\xff\xbb\x1f \xfc\xbb\x1f@\xfe\xbb\x1f\xa0\xff\xbb\x1f\xe0\xfe\xbb\x1f\xc0\xfe\xbb\x1f \xff\xbb\x1f\x80\xff\xbb\x1f\xa0\xfb\xbb\x1f`\xfe\xbb\x1f`\xd7\x98\r \x00\xe4\x1f@\x02\xe4\x1f\x80\x00\xe4\x1f\x80\x01\xe4\x1f \x01\xe4\x1f@\x00\xe4\x1f\xe0\x01\xe4\x1f\x00\xd5\x98\r\xc0\x01\xe4\x1f@\x01\xe4\x1f\x80\x02\xe4\x1f`\x03\xe4\x1f`\x01\xe4\x1f@\x03\xe4\x1f\xe0\x00\xe4\x1f\x00\x02\xe4\x1f`\x00\xe4\x1f\xa0\x00\xe4\x1f\x80\x03\xe4\x1f`\x04\xe4\x1f`\x02\xe4\x1f\xa0\x01\xe4\x1f\xc0\x00\xe4\x1f\xa0\x03\xe4\x1f\xa0\x04\xe4\x1f \x02\xe4\x1f\xc0\x04\xe4\x1f\xe0\x04\xe4\x1f\xa0\x02\xe4\x1f\xe0\x02\xe4\x1f \x05\xe4\x1f\x00\x05\xe4\x1f@\x04\xe4\x1f@\x05\xe4\x1f \x03\xe4\x1f\xa0\x05\xe4\x1f\x80\x06\xe4\x1f \x06\xe4\x1f\xc0\x03\xe4\x1f`\x05\xe4\x1f\xe0\x06\xe4\x1f\x00\x01\xe4\x1f`\x06\xe4\x1f\xc0\x02\xe4\x1f\xc0\x06\xe4\x1f\x80\x07\xe4\x1f\x00\x04\xe4\x1f\x80\x05\xe4\x1f\x00\x08\xe4\x1f\xa0\x07\xe4\x1f\x00\x06\xe4\x1f@\x07\xe4\x1f\x00\x03\xe4\x1f\xc0\x07\xe4\x1f\xa0\x08\xe4\x1f`\x08\xe4\x1f@\x06\xe4\x1f`\x07\xe4\x1f\xc0\x08\xe4\x1f`\t\xe4\x1f\xe0\x05\xe4\x1f \x04\xe4\x1f\x00\x07\xe4\x1f\x80\x08\xe4\x1f\xe0\t\xe4\x1f\x80\t\xe4\x1f\xc0\t\xe4\x1f \t\xe4\x1f\xa0\xd0\x98\r@\t\xe4\x1f\xa0\n\xe4\x1f\x80\x04\xe4\x1f\xe0\x08\xe4\x1f\xe0\x07\xe4\x1f\xa0\t\xe4\x1f`\n\xe4\x1f\x00\x0b\xe4\x1f\xc0\x0b\xe4\x1f@\x0b\xe4\x1f\xe0\n\xe4\x1f \x0c\xe4\x1f\x00\n\xe4\x1f\x80\x0b\xe4\x1f@\x0c\xe4\x1f \x08\xe4\x1f\x00\x0c\xe4\x1f\x00\t\xe4\x1f\xc0\x05\xe4\x1f@\n\xe4\x1f\xa0\x06\xe4\x1f\xe0\x03\xe4\x1f \x0b\xe4\x1f\xc0\x0c\xe4\x1f\xa0\r\xe4\x1f`\x0c\xe4\x1f`\x0b\xe4\x1f\xe0\r\xe4\x1f \r\xe4\x1f`\x0e\xe4\x1f\xe0\x0b\xe4\x1f\x00\x0e\xe4\x1f\xc0\n\xe4\x1f\xe0\x0c\xe4\x1f\xa0\x0e\xe4\x1f\x80\n\xe4\x1f\x00\r\xe4\x1f \x07\xe4\x1f\x80\r\xe4\x1f\x00\x0f\xe4\x1f\xa0\x0b\xe4\x1f@\r\xe4\x1f\x80\x0f\xe4\x1f\xe0\x0e\xe4\x1f\x80\x0c\xe4\x1f\xc0\x0e\xe4\x1f\x80\x0e\xe4\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S']\x94\x99?\xe1\xfe\x7f?\x00\xa6\x8a?\xde\xee\x7f?\xf1bf?\x81\x00\x80?^\xf7\x7f?\x0b\x1f2@\x94w7?B\x0fQ?\xa4xw?\xd0\x95Y?\x02r7?\xbc\xb6{?\xdbC\x84?\x94\xa9\x8a?t\x86\x88?\x9b "?pV\x95?m\x80H?\xaf\x1eb?\xb4\xc7]?\xeed\xa6?\xb0\x98Y?\'\xed.@\x1c Q?\xd5\xbak@kvw?>vH?\xf4 \x82?w(3?9u7?\xe1\x15\x01@\xdcTU?\x12\x84H?\xac@D?j\x87\xe8?\xd0\xb0\xaa?\xf2OU?\x89\x87\xc8?\xed\xfd??\x90o7?\xd9!\x82?\xa3\xfb\x9f?ICD?\t!"?V\x1db?\xd6l7?u\x1a\x00?\xb2\x0eQ?o\xc1L?<\x93Y?C\xfc\xdf?)p\xa6?.2s?\x96@\x84?\xfe\xf8\x7f?\xf0\x0f\x91?T\x14@?\xa5?D?\xad\x83\x88?\xa1\xf7\x7f?\x8b\xfa\xbf?\xf4>D?\x05\xc9\x8c?}-3?\xec\x07\x91?\xa8\xa2*?g\xca\x8c?\'Qf?N\xd9]?=%"?\x96 "?\r\xb7;?\x85T\x05@\x90\xf8??du\xb7?;\xd7]?\x01\x8aY?\xd3\xf3\xae?\x13\xca\x8c?\x9b%\x93?\x8c.\xb3?\xc1v\x97?\xb7\x07\xc0?\x95k7?rw7?\xc1\x97\x99?v1D?F\xfd\x7f?\x8a\xafY?\x84\x89Y?\x10\xeb\xae?\x91\xf6??\x05\x01\xa0?\xe9$Q?\xd6af?\x10v7?V\xe8n?\x14/s?\xc8c&?\x03I3?\xcad\xa6?}\xfe??yAD?\xd8\xde.?M\xfc\x9f?qSU?\x1d\x1e\x82?[\xde\xbd?\xaas\x97?`\xc1j?:2\xb3?\x1f\xc6\xec?\x06\x0eQ?\x17\x0f\xb1?I\x81H?\xd1\x0f\x91?\xec\xed.?\xc6yH?\xe2\xd3\x1d?\x0bHU?\xcfff?~`f?\x86\xa6\x8a?Q\xe7\x9d?\xb0\xb7{?g\x8dY?F\xd8\x9d?"\x85\x88?/\xecn?\xdaP\x95?M:D?\x94\xecn?uA\x84?\xaf\xc4L?\rb\xa6?r\xb7{?\x90m7?ptw?G\xb7{?\x9b\'s?\xcf\xbb\x9b?G\xcb\x8c?\xfd\xcbL?\x07\xfd??W\xf4]?{\x96\t@J!\x82?YQU?H\x95j?\xe0|f?\x02\xd1\xbd?\xdf\xda]?\xf4\xc7L?\x86\xcc\xac?\xb3\xd3]?Pb\x86?\xee\xecn?%\xf9??\xee\xb9{?\xc9\xc9L?HVU?\x92\xa6\xaa?\x9b \x82?\xeebw?HTU?\xeb\xa4j?gUU?0S\x95?{\xa5\x8a?)\xfd\xbf?Z\xe8\x9d?\xd2bw?\x0eY\x86?^\x19\xa2?\n3s?\x90\x84w?J\x8fY?\xfb\xac{?\x94\xe4n?\xactH?\xa5\xae;?"\xa4j?\x8dr\x97?|?\xa4?\x1d\xfc\x9f?\xe0d\x86?\x078\xe4?\x8a*s?U*3?\x1dS\xb5?^\xd8]?Y23?\x03\xa7j?\x19\xd9\x9d?\x9c.\x93?\x926s?\xf8\xb1;?\x0c\xcaL?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'ho\xb0\x04\xf0h\xb0\x04\x08o\xf3\x04\xc8l\xf3\x04`b\xf3\x04\xf8i\xf3\x04pa\xf3\x04\x00k\xf3\x04\xe8g\xf3\x04\xa0g\xf3\x04\x18k\xf3\x04\x10j\xf3\x04\x90h\xf3\x04\xa8n\xf3\x04\x98o\xf3\x04Xa\xf3\x04\xd0m\xf3\x04\xd0j\xf3\x04\xb8g\xf3\x04\xb0f\xf3\x04\x80l\xf3\x04pd\xf3\x04\x98f\xf3\x04`h\xf3\x04\xa8b\xf3\x04\xf0n\xf3\x04pj\xf3\x048f\xf3\x04\xe0o\xf3\x04\x10d\xf3\x04\xe8a\xf3\x04Pc\xf3\x04\x80c\xf3\x04\xc8`\xf3\x04Xj\xf3\x04`k\xf3\x04 l\xf3\x04\xe0f\xf3\x04\xf8l\xf3\x04\xb0i\xf3\x040h\xf3\x04\xf8f\xf3\x04\xc8c\xf3\x04He\xf3\x04\xa0d\xf3\x04\xf0k\xf3\x04\xf8`\xf3\x04\xd0g\xf3\x04hf\xf3\x04xh\xf3\x040n\xf3\x04\xd8h\xf3\x04\x88d\xf3\x04Hb\xf3\x04\x18e\xf3\x04hi\xf3\x04Pi\xf3\x04\xb0o\xf3\x04\x90k\xf3\x04\xf0h\xf3\x04Pl\xf3\x04\xd8b\xf3\x04\x90b\xf3\x04\xf8c\xf3\x04Xg\xf3\x04\x98c\xf3\x04\x10g\xf3\x04 f\xf3\x04\xd8e\xf3\x04@a\xf3\x04\x08c\xf3\x04\xe8m\xf3\x04\x00n\xf3\x04\xd8k\xf3\x04\x88m\xf3\x040k\xf3\x04(j\xf3\x04\xb8a\xf3\x04\x90e\xf3\x04\xa0\x04\xdb\x04@\n\xdb\x04\xe0\t\xdb\x04`\x0b\xdb\x04\xc8\x06\xdb\x04h\t\xdb\x04\xf0\x08\xdb\x04\xb8\r\xdb\x04\x00\x02\xdb\x04\xd8\x08\xdb\x04x\x05\xdb\x04\xf0\x02\xdb\x04\xe0\xc0:\x02H\xce:\x028 \xaf\x04p\'\xaf\x04\xf0(\xaf\x04X\'\xaf\x04\xf0%\xaf\x04H+\xaf\x04x%\xaf\x04\x80#\xaf\x04\xf8#\xaf\x04h#\xaf\x04\x98&\xaf\x04\x00+\xaf\x04\xb0#\xaf\x04\xa0*\xaf\x04\x80&\xaf\x04\xd8+\xaf\x04\xa8"\xaf\x040+\xaf\x04\xf8&\xaf\x04\xe8*\xaf\x04H.\xaf\x04\xe0)\xaf\x04h)\xaf\x04\x00"\xaf\x04P \xaf\x04\x00%\xaf\x04\x88-\xaf\x048&\xaf\x04\xd8.\xaf\x04X$\xaf\x04\x88\'\xaf\x04\x00.\xaf\x04h/\xaf\x04p$\xaf\x04\xe0&\xaf\x04\xa0!\xaf\x04@-\xaf\x04\x90(\xaf\x04h \xaf\x04\x90.\xaf\x04\x88!\xaf\x04\xc0(\xaf\x04\xe0 \xaf\x04(\'\xaf\x04\xb8-\xaf\x04x+\xaf\x04\xc0.\xaf\x04x.\xaf\x04X-\xaf\x048)\xaf\x04\x18+\xaf\x04\xe0/\xaf\x04\xd0-\xaf\x04\xd0\'\xaf\x04 /\xaf\x04\xd8"\xaf\x04\xa8%\xaf\x04`+\xaf\x04\x80/\xaf\x04\x80)\xaf\x04\xb0/\xaf\x04\xe8\'\xaf\x04\xc0+\xaf\x04\xc8,\xaf\x04\xd0*\xaf\x04h`\xf3\x040e\xf3\x04Xd\xf3\x04\x88g\xf3\x04\xf0e\xf3\x04@m\xf3\x04\xc0e\xf3\x048`\xf3\x04\xe0l\xf3\x04\xd8n\xf3\x04\x08l\xf3\x04 i\xf3\x04@j\xf3\x04\xc0n\xf3\x04Po\xf3\x04\xc8i\xf3\x04\xa0j\xf3\x04\xe0i\xf3\x04\x80o\xf3\x04\xc8o\xf3\x04\x88a\xf3\x04Pf\xf3\x04\xe0c\xf3\x04\x00e\xf3\x04 c\xf3\x04\x10a\xf3\x04 o\xf3\x04@d\xf3\x04\x98`\xf3\x04\xc0b\xf3\x04`e\xf3\x04Hk\xf3\x04\x18h\xf3\x04\xc0k\xf3\x04\xd0a\xf3\x04(m\xf3\x04pm\xf3\x04xk\xf3\x04\x08f\xf3\x04Xm\xf3\x04xb\xf3\x04\xe8j\xf3\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3709
sg3633
g3739
sg3647
g3716
sg3642
g3746
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3658
sg3633
g3771
sg3647
g3665
sg3642
g3778
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3807
sg3633
g3803
sg3647
g3814
sg3642
g3811
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3638
sg3633
g3820
sg3647
g3648
sg3642
g3827
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3790
sg3633
g3835
sg3647
g3797
sg3642
g3842
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3871
sg3633
g3867
sg3647
g3878
sg3642
g3875
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3888
sg3633
g3884
sg3647
g3895
sg3642
g3892
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3905
sg3633
g3901
sg3647
g3912
sg3642
g3909
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3709
sg3633
g3739
sg3647
g3716
sg3642
g3746
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3935
sg3633
g3931
sg3647
g3942
sg3642
g3939
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3675
sg3633
g3948
sg3647
g3682
sg3642
g3955
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3871
sg3633
g3963
sg3647
g3878
sg3642
g3970
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3982
sg3633
g3978
sg3647
g3989
sg3642
g3986
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3905
sg3633
g3901
sg3647
g3912
sg3642
g3909
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g3638
sg3633
g3820
sg3647
g3648
sg3642
g3827
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g4038
sg3633
g4034
sg3647
g4045
sg3642
g4042
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g4068
sg3633
g4064
sg3647
g4075
sg3642
g4072
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g3982
sg3633
g3978
sg3647
g3989
sg3642
g3986
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3854
sg3633
g4094
sg3647
g3861
sg3642
g4101
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g3871
sg3633
g3963
sg3647
g3878
sg3642
g3970
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g3807
sg3633
g3803
sg3647
g3814
sg3642
g3811
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g3758
sg3633
g4135
sg3647
g3765
sg3642
g4142
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g4154
sg3633
g4150
sg3647
g4161
sg3642
g4158
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g4197
sg3633
g4193
sg3647
g4204
sg3642
g4201
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g4038
sg3633
g4223
sg3647
g4045
sg3642
g4230
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g3935
sg3633
g3931
sg3647
g3942
sg3642
g3939
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g4068
sg3633
g4064
sg3647
g4075
sg3642
g4072
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g4281
sg3633
g4277
sg3647
g4288
sg3642
g4285
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3658
sg3633
g3771
sg3647
g3665
sg3642
g3778
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3726
sg3633
g4307
sg3647
g3733
sg3642
g4314
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g4068
sg3633
g4064
sg3647
g4075
sg3642
g4072
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g3888
sg3633
g3884
sg3647
g3895
sg3642
g3892
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g4154
sg3633
g4150
sg3647
g4161
sg3642
g4158
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g4038
sg3633
g4223
sg3647
g4045
sg3642
g4230
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g3905
sg3633
g3901
sg3647
g3912
sg3642
g3909
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3871
sg3633
g3963
sg3647
g3878
sg3642
g3970
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g4197
sg3633
g4193
sg3647
g4204
sg3642
g4201
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3905
sg3633
g4426
sg3647
g3912
sg3642
g4433
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g3658
sg3633
g3771
sg3647
g3665
sg3642
g3778
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g4068
sg3633
g4480
sg3647
g4075
sg3642
g4487
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g4281
sg3633
g4277
sg3647
g4288
sg3642
g4285
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g3675
sg3633
g3948
sg3647
g3682
sg3642
g3955
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3726
sg3633
g4307
sg3647
g3733
sg3642
g4314
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g4281
sg3633
g4534
sg3647
g4288
sg3642
g4541
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g3935
sg3633
g4549
sg3647
g3942
sg3642
g4556
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g4154
sg3633
g4564
sg3647
g4161
sg3642
g4571
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3638
sg3633
g3820
sg3647
g3648
sg3642
g3827
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g4154
sg3633
g4564
sg3647
g4161
sg3642
g4571
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3905
sg3633
g4426
sg3647
g3912
sg3642
g4433
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3982
sg3633
g3978
sg3647
g3989
sg3642
g3986
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g4038
sg3633
g4223
sg3647
g4045
sg3642
g4230
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g4281
sg3633
g4534
sg3647
g4288
sg3642
g4541
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g4154
sg3633
g4150
sg3647
g4161
sg3642
g4158
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g4197
sg3633
g4696
sg3647
g4204
sg3642
g4703
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g3982
sg3633
g4711
sg3647
g3989
sg3642
g4718
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g4068
sg3633
g4064
sg3647
g4075
sg3642
g4072
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g4068
sg3633
g4480
sg3647
g4075
sg3642
g4487
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g3758
sg3633
g4135
sg3647
g3765
sg3642
g4142
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g3871
sg3633
g3867
sg3647
g3878
sg3642
g3875
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g3982
sg3633
g3978
sg3647
g3989
sg3642
g3986
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3658
sg3633
g3771
sg3647
g3665
sg3642
g3778
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3888
sg3633
g4843
sg3647
g3895
sg3642
g4850
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g3692
sg3633
g4858
sg3647
g3699
sg3642
g4865
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g4281
sg3633
g4277
sg3647
g4288
sg3642
g4285
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g3871
sg3633
g3867
sg3647
g3878
sg3642
g3875
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g3982
sg3633
g4711
sg3647
g3989
sg3642
g4718
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g3790
sg3633
g3835
sg3647
g3797
sg3642
g3842
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g4068
sg3633
g4480
sg3647
g4075
sg3642
g4487
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3675
sg3633
g3948
sg3647
g3682
sg3642
g3955
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g3935
sg3633
g4549
sg3647
g3942
sg3642
g4556
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3807
sg3633
g4964
sg3647
g3814
sg3642
g4971
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g4281
sg3633
g4534
sg3647
g4288
sg3642
g4541
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g4197
sg3633
g4193
sg3647
g4204
sg3642
g4201
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g4154
sg3633
g4564
sg3647
g4161
sg3642
g4571
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g3888
sg3633
g3884
sg3647
g3895
sg3642
g3892
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g3658
sg3633
g3771
sg3647
g3665
sg3642
g3778
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g3871
sg3633
g3867
sg3647
g3878
sg3642
g3875
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g3807
sg3633
g4964
sg3647
g3814
sg3642
g4971
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3854
sg3633
g4094
sg3647
g3861
sg3642
g4101
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g4197
sg3633
g4193
sg3647
g4204
sg3642
g4201
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g3692
sg3633
g4858
sg3647
g3699
sg3642
g4865
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g4197
sg3633
g4696
sg3647
g4204
sg3642
g4703
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g3692
sg3633
g4858
sg3647
g3699
sg3642
g4865
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g3709
sg3633
g3739
sg3647
g3716
sg3642
g3746
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g3871
sg3633
g3963
sg3647
g3878
sg3642
g3970
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g4281
sg3633
g4534
sg3647
g4288
sg3642
g4541
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g4197
sg3633
g4696
sg3647
g4204
sg3642
g4703
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3888
sg3633
g4843
sg3647
g3895
sg3642
g4850
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3935
sg3633
g4549
sg3647
g3942
sg3642
g4556
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3692
sg3633
g4858
sg3647
g3699
sg3642
g4865
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g3905
sg3633
g4426
sg3647
g3912
sg3642
g4433
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3790
sg3633
g3835
sg3647
g3797
sg3642
g3842
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g3790
sg3633
g3835
sg3647
g3797
sg3642
g3842
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g3905
sg3633
g3901
sg3647
g3912
sg3642
g3909
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3935
sg3633
g4549
sg3647
g3942
sg3642
g4556
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3905
sg3633
g4426
sg3647
g3912
sg3642
g4433
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g3709
sg3633
g3739
sg3647
g3716
sg3642
g3746
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g4038
sg3633
g4034
sg3647
g4045
sg3642
g4042
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g3807
sg3633
g4964
sg3647
g3814
sg3642
g4971
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3692
sg3633
g4858
sg3647
g3699
sg3642
g4865
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g3854
sg3633
g4094
sg3647
g3861
sg3642
g4101
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3709
sg3633
g3739
sg3647
g3716
sg3642
g3746
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g4281
sg3633
g4534
sg3647
g4288
sg3642
g4541
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g4038
sg3633
g4034
sg3647
g4045
sg3642
g4042
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3807
sg3633
g3803
sg3647
g3814
sg3642
g3811
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3758
sg3633
g4135
sg3647
g3765
sg3642
g4142
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3807
sg3633
g4964
sg3647
g3814
sg3642
g4971
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g3638
sg3633
g3820
sg3647
g3648
sg3642
g3827
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3675
sg3633
g3948
sg3647
g3682
sg3642
g3955
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g4154
sg3633
g4150
sg3647
g4161
sg3642
g4158
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3888
sg3633
g4843
sg3647
g3895
sg3642
g4850
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g4154
sg3633
g4564
sg3647
g4161
sg3642
g4571
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g3982
sg3633
g4711
sg3647
g3989
sg3642
g4718
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3675
sg3633
g3948
sg3647
g3682
sg3642
g3955
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3758
sg3633
g4135
sg3647
g3765
sg3642
g4142
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g3871
sg3633
g3963
sg3647
g3878
sg3642
g3970
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g4281
sg3633
g4277
sg3647
g4288
sg3642
g4285
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3905
sg3633
g3901
sg3647
g3912
sg3642
g3909
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g4154
sg3633
g4150
sg3647
g4161
sg3642
g4158
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g4038
sg3633
g4223
sg3647
g4045
sg3642
g4230
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g4154
sg3633
g4564
sg3647
g4161
sg3642
g4571
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3807
sg3633
g3803
sg3647
g3814
sg3642
g3811
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g3726
sg3633
g4307
sg3647
g3733
sg3642
g4314
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3982
sg3633
g3978
sg3647
g3989
sg3642
g3986
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3935
sg3633
g3931
sg3647
g3942
sg3642
g3939
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3726
sg3633
g4307
sg3647
g3733
sg3642
g4314
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3854
sg3633
g4094
sg3647
g3861
sg3642
g4101
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g4068
sg3633
g4064
sg3647
g4075
sg3642
g4072
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g3726
sg3633
g4307
sg3647
g3733
sg3642
g4314
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g3871
sg3633
g3867
sg3647
g3878
sg3642
g3875
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3888
sg3633
g3884
sg3647
g3895
sg3642
g3892
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g4197
sg3633
g4193
sg3647
g4204
sg3642
g4201
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3935
sg3633
g4549
sg3647
g3942
sg3642
g4556
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3905
sg3633
g4426
sg3647
g3912
sg3642
g4433
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3982
sg3633
g4711
sg3647
g3989
sg3642
g4718
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g4038
sg3633
g4223
sg3647
g4045
sg3642
g4230
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g3854
sg3633
g4094
sg3647
g3861
sg3642
g4101
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g4068
sg3633
g4480
sg3647
g4075
sg3642
g4487
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g3935
sg3633
g3931
sg3647
g3942
sg3642
g3939
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g4197
sg3633
g4696
sg3647
g4204
sg3642
g4703
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g3888
sg3633
g4843
sg3647
g3895
sg3642
g4850
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g4038
sg3633
g4034
sg3647
g4045
sg3642
g4042
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3758
sg3633
g4135
sg3647
g3765
sg3642
g4142
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g3790
sg3633
g3835
sg3647
g3797
sg3642
g3842
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g3982
sg3633
g4711
sg3647
g3989
sg3642
g4718
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g3807
sg3633
g3803
sg3647
g3814
sg3642
g3811
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3638
sg3633
g3820
sg3647
g3648
sg3642
g3827
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3807
sg3633
g4964
sg3647
g3814
sg3642
g4971
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g4281
sg3633
g4277
sg3647
g4288
sg3642
g4285
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g3888
sg3633
g4843
sg3647
g3895
sg3642
g4850
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g4068
sg3633
g4480
sg3647
g4075
sg3642
g4487
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g3935
sg3633
g3931
sg3647
g3942
sg3642
g3939
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g4197
sg3633
g4696
sg3647
g4204
sg3642
g4703
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g4038
sg3633
g4034
sg3647
g4045
sg3642
g4042
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g3888
sg3633
g3884
sg3647
g3895
sg3642
g3892
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I76808528
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'\xa0\xf1\x05 \x10\xe4\x05 \x80\xec\x04 H\xe4\x05 \xc0\xeb\x04 \xb0\xd6\x05 \xd8\xd6\x05 \x10\xe4\x05 \xf0\xeb\x04 \xf0\xe4\x05 \x10\xe4\x05 \x88\xd6\x05 (\xe5\x05 (\xd7\x05  \xec\x04 \xf0\xeb\x04  \xec\x04 @\xf1\x05 \x90\xeb\x04 \xf0\xeb\x04 \xc0\xeb\x04 `\xf1\x05 P\xec\x04 \xf0\xd7\x05 P\xd7\x05 @\xed\x04 \x80\xe4\x05 x\xd7\x05 (\xd7\x05 \xd8\xd6\x05 \xa0\xd7\x05 \xd8\xd6\x05 `\xf1\x05 \x10\xe4\x05 x\xd7\x05 \x10\xe4\x05 \xb8\xe4\x05 `\xf1\x05 \x80\xf1\x05 @\xf1\x05 \xa0\xd7\x05 \xe0\xec\x04 \xc0\xeb\x04 \xb8\xe4\x05 \xb0\xd6\x05 (\xd7\x05 \x00\xd7\x05 \xf0\xeb\x04 @\xf1\x05 \xf0\xeb\x04 \x00\xd7\x05 \x18\xd8\x05 @\xf1\x05 \xc0\xeb\x04 \xf0\xeb\x04 \xd8\xd6\x05 x\xd7\x05 \x90\xd8\x05 \x88\xd6\x05 \xa0\xd7\x05 \x88\xd6\x05 \x80\xf1\x05 \x10\xe4\x05 \x88\xd6\x05 P\xec\x04 \x10\xed\x04 (\xe5\x05 \x80\xe4\x05 P\xd7\x05 \x00\xd7\x05 @\xd8\x05 `\xf1\x05 \x80\xe4\x05  \xec\x04 \x90\xeb\x04 P\xec\x04 \xb8\xe4\x05 \xb0\xd6\x05 `\xf1\x05 \xa0\xd7\x05 \x80\xec\x04 \xc0\xf1\x05 \xf0\xeb\x04  \xf1\x05 p\xed\x04 \xa0\xd7\x05 P\xd7\x05 \x80\xe4\x05 `\xe5\x05 \x88\xd6\x05 \xb0\xd6\x05 \xc0\xeb\x04 \xa0\xd7\x05  \xf1\x05 P\xd7\x05 P\xec\x04 \xb0\xd6\x05 \xd8\xd6\x05 \x90\xeb\x04 x\xd7\x05 \xf0\xeb\x04 \x80\xe4\x05 \x10\xe4\x05 \xb0\xd6\x05 \xd8\xd6\x05 \xb0\xd6\x05 `\xe5\x05 x\xd7\x05 (\xd7\x05  \xf1\x05 H\xe4\x05 P\xec\x04 H\xe4\x05 \x80\xe4\x05 (\xd7\x05 P\xd7\x05  \xf1\x05 \x00\xd7\x05 H\xe4\x05 `\xf1\x05 \xa0\xd7\x05 (\xd7\x05  \xec\x04 x\xd7\x05 \xf0\xd7\x05 \x80\xe4\x05 \x90\xeb\x04 \xc0\xeb\x04 \x80\xf1\x05 @\xed\x04 \x80\xf1\x05 \xa0\xf1\x05 \xd8\xd6\x05 @\xf1\x05 `\xf1\x05 \xd8\xd6\x05 \xa0\xd7\x05 \x00\xd7\x05 \x80\xe4\x05 \x80\xf1\x05 \xc0\xeb\x04 \xf0\xeb\x04  \xf1\x05 \xb8\xd8\x05 \x80\xf1\x05 \xa0\xf1\x05 (\xd7\x05  \xf1\x05 \x90\xd8\x05 x\xd7\x05 \xb0\xec\x04  \xf1\x05 (\xd7\x05 @\xed\x04 P\xd7\x05 \xb0\xd6\x05 \x90\xeb\x04  \xf1\x05 \x90\xd8\x05 \xa0\xd7\x05 \xb8\xd8\x05 x\xd7\x05 P\xec\x04 \x80\xec\x04 \x80\xf1\x05 \xd8\xd6\x05 \xa0\xf1\x05 \x80\xe4\x05 h\xd8\x05 \x80\xec\x04 (\xe5\x05 @\xf1\x05 H\xe4\x05 P\xec\x04 @\xf1\x05 \xb8\xd8\x05 \xf0\xd7\x05 \xc0\xeb\x04  \xf1\x05  \xec\x04 x\xd7\x05 \x10\xed\x04 \x90\xeb\x04 (\xd7\x05 \x88\xd6\x05  \xec\x04 P\xd7\x05  \xec\x04 \x80\xf1\x05 \x10\xed\x04 \xb8\xe4\x05 \xa0\xd7\x05 H\xe4\x05 \xc0\xeb\x04 \x00\xd7\x05 `\xe5\x05 \xb0\xd6\x05 \x00\xd7\x05 x\xd7\x05 \x80\xf1\x05 '
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'@\xf4\x05 \x80\xf3\x05 @\xf2\x05 \xe0\xf1\x05  \xf3\x05 \xa0\xfe\xbb\x1f\x00\xf5\x05 \xe0\xf4\x05 \x00\xf4\x05 \xc0\xf2\x05 \x00\xf3\x05  \xf5\x05 \xa0\xf3\x05 `\xf2\x05 \x80\xf4\x05  \xf4\x05 \x80\xf2\x05 `\xf4\x05 \xa0\xf5\x05 @\xf5\x05 \xc0\xf4\x05 \x80\xf5\x05 \xa0\xf4\x05 \x00\xf6\x05 \x80\xf6\x05  \xf2\x05 `\xf5\x05 \xe0\xf6\x05 \xe0\xf2\x05 \xa0\xf6\x05 @\xf3\x05 `\xf6\x05 \xe0\xf3\x05 @\xf7\x05  \xf8\x05 \xa0\xf7\x05 \x00\xf7\x05 `\xf7\x05 \xc0\xf3\x05 `\xf8\x05 \xe0\xf8\x05 \x80\xf7\x05 @\xf8\x05  \xf6\x05 @\xf9\x05 `\xf3\x05 @\xf6\x05  \xf9\x05 \xc0\xf8\x05 \x00\xf8\x05 \xa0\xf9\x05 \xe0\xf5\x05 \x00\xfa\x05 \x80\xf9\x05 \x80\xf8\x05 \xc0\xf9\x05 \xc0\xfa\x05 \xe0\xfa\x05 \x00\xf9\x05 `\xf9\x05 `\xfa\x05 \x00\xfb\x05 @\xfa\x05 \xa0\xfa\x05 \x80\xfa\x05 `\xfb\x05  \xfc\x05 \x80\xfb\x05 \xc0\xf7\x05 @\xfb\x05  \xf7\x05 \xe0\xf9\x05 \xa0\xf8\x05 \xe0\xfb\x05  \xfd\x05 \xc0\xfc\x05 \xe0\xf7\x05 \xa0\xfc\x05 @\xfc\x05 \xc0\xf6\x05 \xc0\xfd\x05 \xa0\xfb\x05  \xfe\x05 \xc0\xf5\x05 \xe0\xfd\x05 \xe0\xfc\x05 @\xfe\x05 \x00\xfd\x05 \x80\xfe\x05 \xc0\xfb\x05 `\xfd\x05  \xff\x05 \x80\xfd\x05 \xc0\xfe\x05 `\xfe\x05 \xa0\xff\x05 \xe0\xff\x05 @\xfd\x05  \xfa\x05 \x00\xff\x05 `\xfc\x05 \x00\xfc\x05 \x00\xfe\x05 \x80\xff\x05 \xe0\xfe\x05 \xc0\xff\x05  \xfb\x05 \xa0\xf2\x05 \x80\xfc\x05 @\xff\x05 `\x0f\xe4\x1f\xc0\x0f\xe4\x1f b, \xa0`, `a, \x00a, @`, \xc0a, @b, \xa0b, \xc0`, \x80b, `b, \xe0b, \xc0b, \xe0a, \x00c,  c, @c, `c, \x80`, \x00d, \x80a, @a, \xa0a, \xc0d, \xe0`, @d, \xa0d, ``, \x00b, \xe0d,  `,  e, \xa0c,  d, \x00e, @e, \xc0c, `e,  a, \x00f, `f, `d, @f, \xe0f, \xc0f, \xa0e, \x00g,  g, @g, `g, \x80g, \xa0g, \xc0g, \xe0g, @h,  h, \x80d, `h, \x80h, \xa0h, \x00i, \xe0h, \x80f,  i, @i, `i, \xc0i, \xa0i, \xe0c,  j, @j, `j, \xc0h, \xa0j, \x80j, \xc0e, \xc0j, \xe0j, \x00k,  k, @k, `k, \x80k, \xe0k, \xc0k, \x00j, \x00l, `l, '
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'\xdd\xd9\x9d?\xc4\xe4n?\x80\xdb\x9d?\xe0\xb3\x8a?\x8a\xd6]?]yH?\xeaB\x84?*hw?\'\x84\xa8?.\xa4\x8a?=\xdbn?\x14\xe0n?}S\x95?Q\xb5{?\xf31\x03@\x8e|f?p\x99Y?\xbf\xc7\x8c?\x0eB\xc4?\xde)s?\x9d\x05o?\xc4ww?\n\xe6n?gnw?\t\xc9\x8c?\xb89b?F\xa7j?\x0b\xf6\x7f?\xafrw?\xd2\xc8\xcc?b8s?Fif?\xd9\xb8{?E\xc8\x8c?Su\x97?\xe7`f?\xbd\xcb\x8c?B\x98Y?\xac&s?\xbd\xff\x9f?\x08\xf2n?K\xdc\x9d?\xa603?,c\x86?\xf8af?y\xf0\x8e?\x1a\xebn?\xbe\x86\x88?\xc5\xb8{?.\x84\x88?\xf6\xe1L?\xf1\x7fH?_\xb5;?\x08\xfb??\xf2rw?\xb8\xcb\xac?\x8dr\x86?Fpw?\x7f\xa9j?\xf6:\x84?\xd4\xd8\x9d?<\xc7\xdb?\xc1DU?\xa5\x93Y?\\1\x93?\xef\xeb\x8e?T\xa5\x99?31\x93?\xfa/s?\xc4\x1bb?\x89SU?\x8fD\x84?5\xf8??\xd7\x1e\x82?\x81\xcbL?-\xebn?Ibf?\x88\x1dQ?\xdcuw?\xcd\xef\x7f?RR\x95?\xf0/s?\xfe\x9e\x99?\xce\x1c\x82?@v\x17@R\xe3\xae?\x17.s?\xc2\xd6{?\ng\x86?\xe6\x1d\x82?\xbe\xd6;?\x8403?\xef"\x02@\xe5A\x84?\x97\xfd\x9f?-\xcb\x8c?\xf1tw?\xeb\xa9\xaa?H\xa7\x8a?V\xfe\x7f?\xeb\x87H?0\x92Y?pyH?v\xbej?\xc8d\xc6?\x8d\xa9*?\x9bw\x97?,\xba;?\x998b?\xd2\xb3;?+!\x82?W\xa4\x8a?{\xda\x9d?\x90\xa6*?\xd9=D?W\xf6\x7f?Bcf?\xbb/s?6D\xa4?\xfb\xb2{?\x8aI\x95?)2\x93?t\xa0j?\xcf\x98\x99?\rO\x95?\xbc\xee]?\xd3\x19b?\xdb&s?;\n\x80?\x0b\x99Y?1C\x84?`\xfb\x9f?\xb7\x85\xa8?\xdaGs?\xb2\x0e\xb1? \xa3j?3-3@\x18ow?\xb2`\x95?\xb2\x87\x88?\xe3\x1b\x82?7\x91Y?\xf3\xcdL?e\x15\x91?ve\xa6?z\x8c\xa8?$\xa9\x8a?+\x1fb?&\xecn?\x07 \x82?>\xc9L?M/s?gP\x95?\x89\xb8j?\xe7c\xa6?\xcfe\x86?\xe5\xec\x8e?$\x91Y?X\xcb\xac?ibw?7v\xd7?\xa5\x1f\xe2?\xb41\xd3?-\t\x80?U\x98\x99?#\x96\xb9?>\xcc\x8c?\xb8\x1eb?\x18\xf9\xae?b!\x82?q.\x93?l\xa9j?\xe9\x83\xa8?m=\x93?w\xed\x8e?~"b?\xde\xe7\x8e?\xb8s\x97?\xd4}f?\xc9\xcb\x8c?J\xadj?i\xcb\x8c?6@\x84?K\x11\x91?\x14f\x86?7nw?\x16T\x95?\x9d\xb3{?\xef"\x92@Q!b?\x08\x86\x88?k\xd4n?!a\xc6?D\xb4\x8a?\xb6\xa8\x8a?.0\x93?Ddf?\xc6 \x82?\x0cN\x84?^lw?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'0.\xaf\x04\xc8)\xaf\x04\x80\xb3#\r\xa0\xba#\rh\xb6#\r\xf8\xbc#\r`\xb2#\r8\xb6#\r\x90\xb5#\r \xbf#\r\xf0\xb2#\r@\xbd#\r\xe8\xb4#\rP\xbc#\r\x18\xbe#\rX\xb1#\r\xd8\xbe#\r\x10\xba#\r\xc0\xb8#\r`\xb8#\rX\xbd#\r\xd8\xb5#\r\x08\xbf#\r\xb0\xb9#\r\xd8\xb2#\r\x08\xb3#\r(\xbd#\r\xe8\xb7#\rH\xb8#\r\xb0\xbc#\r\x98\xb6#\r0\xb8#\r@\xb7#\r\x18\xb2#\rh\xb0#\r\xc8\xb3#\r\xb8\xba#\r\xf8\xb6#\r\xa8\xb2#\r\x88\xb4#\r \xb9#\r8\xbc\xac\x04\x08\xbf\xac\x04\x00\xbb\xac\x04`\xb2\xac\x04(\xb7\xac\x04p\xb4\xac\x04\x98\xb0\xac\x04\x18\xb2\xac\x04\x88\xb1\xac\x04\x18\xb5\xac\x04P\xb3\xac\x04X\xb4\xac\x04\x10\xb7\xac\x04\xf8\xb3\xac\x04\xa0\xbd\xac\x04 \xbc\xac\x04\xc8\xb3\xac\x04h\xb0\xac\x04\xd8\xbb\xac\x04\xd8\xb5\xac\x04\x90\xb2\xac\x04`\xb8\xac\x04\xa8\xb8\xac\x04p\xbd\xac\x04\xb8\xb1\xac\x04\xd8\xb8\xac\x04\x90\xbb\xac\x048\xb9\xac\x04X\xba\xac\x04H\xb2\xac\x04\xc0\xbb\xac\x04\xd0\xba\xac\x04\xb0\xb0\xac\x04\xc8\xbf#\r\xf0\xbb#\r\x90\xbe#\r\x88\xb1#\r\x00\xbe#\r\xc0\xbe#\r\x98\xbf#\r\xb0\xbf#\r\x08\xb9#\r8\xb3#\r\xb8\xbd#\r\xe8\xbd#\r\xd0\xb4#\r\xe0\xb6#\r\xd8\xbb#\r@\xba#\r\x98\xb9#\r\x00\xb8#\r\xb0\xb6#\rh\xb3#\rp\xb7#\r\x88\xbd#\r\xf0\xb8#\r0\xb5#\r\x88\xba#\rp\xbd#\r`\xbb#\rh\xbf#\r\x90\xb2#\r\xf8\xb9#\r \xb0#\r\xa8\xbb#\r8\xbc#\r0\xbb#\r\x00\xb5#\r\xe8\xba#\r\x80\xbc#\r\xd8\xb8#\rx\xbb#\rX\xb4#\r\xf0\xbe#\r\x80\xbf#\r\xe0\xbc#\r\x10\xbd#\r\xb8\xb4#\r\xe0\xb3#\r@\xb1#\r\xe0\xb0#\r\x98\xb0#\r\xb0\xb3#\r@\xb4#\rH\xbb#\r\x10\xb4#\r\x90\xbb#\r\x80\xb9#\r\x10\xb7#\r \xb3#\r\x80\xb0#\r\x80\xb6#\rx\xb2#\r\x00\xbb#\r\x88\xb7#\r0\xb2#\r\xf8\xb0#\r\xc0\xb5#\r\xc0\xb2#\rP\xb6#\r8\xb9#\rX\xba#\r\xa8\xb5#\r\xc8\xb0#\rp\xba#\r\x00\xb2#\r \xb6#\r\xb8\xb7#\rh\xb9#\r0\xbe#\r\xa8\xb8#\r\xf8\xb3#\r \xbc#\rp\xb4#\r\xb8\xb1#\r\x18\xb8#\rp\xb1#\rH\xb5#\r\xd0\xb1#\rH\xb2#\rP\xb0#\r\x10\xb1#\r`\xb5#\r(\xb1#\r\xf0\xb5#\r\x18\xb5#\r\xc0\xbb#\rX\xb7#\rx\xbe#\r\xe8\xb1#\r(\xb7#\r\x08\xb6#\r(\xba#\rP\xb3#\r(\xb4#\r\xc8\xb9#\rx\xb8#\r\x98\xb3#\r\xa0\xb7#\r\xc8\xb6#\r\xa0\xbd#\rx\xb5#\r\x90\xb8#\r\xd0\xbd#\r\x98\xbc#\r\xe0\xbf#\rH\xbe#\r\xc8\xbc#\r\xe0\xb9#\r`\xbe#\r8\xb0#\rh\xbc#\rP\xb9#\r\xd0\xb7#\rP\xbf#\r\xb0\xb0#\r\xa0\xb4#\r\xd0\xba#\r\x08\xbc#\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6419
sg6371
g6409
sg6386
g6413
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6464
sg6371
g6460
sg6386
g6471
sg6380
g6468
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6481
sg6371
g6477
sg6386
g6488
sg6380
g6485
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6396
sg6371
g6494
sg6386
g6403
sg6380
g6501
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6513
sg6371
g6509
sg6386
g6520
sg6380
g6517
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6536
sg6371
g6526
sg6386
g6530
sg6380
g6534
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6396
sg6371
g6494
sg6386
g6403
sg6380
g6501
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6579
sg6371
g6569
sg6386
g6573
sg6380
g6577
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6590
sg6371
g6586
sg6386
g6597
sg6380
g6594
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6607
sg6371
g6603
sg6386
g6614
sg6380
g6611
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6513
sg6371
g6620
sg6386
g6520
sg6380
g6627
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6607
sg6371
g6603
sg6386
g6614
sg6380
g6611
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6652
sg6371
g6648
sg6386
g6659
sg6380
g6656
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6419
sg6371
g6665
sg6386
g6413
sg6380
g6672
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6513
sg6371
g6509
sg6386
g6520
sg6380
g6517
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6447
sg6371
g6693
sg6386
g6454
sg6380
g6700
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6712
sg6371
g6708
sg6386
g6719
sg6380
g6716
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6729
sg6371
g6725
sg6386
g6736
sg6380
g6733
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6759
sg6371
g6755
sg6386
g6766
sg6380
g6763
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6729
sg6371
g6725
sg6386
g6736
sg6380
g6733
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6789
sg6371
g6785
sg6386
g6796
sg6380
g6793
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6806
sg6371
g6802
sg6386
g6813
sg6380
g6810
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6590
sg6371
g6819
sg6386
g6597
sg6380
g6826
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6481
sg6371
g6834
sg6386
g6488
sg6380
g6841
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6853
sg6371
g6849
sg6386
g6860
sg6380
g6857
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6481
sg6371
g6477
sg6386
g6488
sg6380
g6485
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6712
sg6371
g6708
sg6386
g6719
sg6380
g6716
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6806
sg6371
g6905
sg6386
g6813
sg6380
g6912
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6396
sg6371
g6494
sg6386
g6403
sg6380
g6501
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6430
sg6371
g6933
sg6386
g6437
sg6380
g6940
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6712
sg6371
g6948
sg6386
g6719
sg6380
g6955
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6967
sg6371
g6963
sg6386
g6974
sg6380
g6971
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6652
sg6371
g6648
sg6386
g6659
sg6380
g6656
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6853
sg6371
g6993
sg6386
g6860
sg6380
g7000
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6513
sg6371
g6620
sg6386
g6520
sg6380
g6627
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6447
sg6371
g6693
sg6386
g6454
sg6380
g6700
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6464
sg6371
g7047
sg6386
g6471
sg6380
g7054
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6590
sg6371
g6819
sg6386
g6597
sg6380
g6826
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6579
sg6371
g7075
sg6386
g6573
sg6380
g7082
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6513
sg6371
g6509
sg6386
g6520
sg6380
g6517
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6652
sg6371
g6648
sg6386
g6659
sg6380
g6656
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6513
sg6371
g6620
sg6386
g6520
sg6380
g6627
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6579
sg6371
g6569
sg6386
g6573
sg6380
g6577
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6447
sg6371
g6693
sg6386
g6454
sg6380
g6700
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6652
sg6371
g7155
sg6386
g6659
sg6380
g7162
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6447
sg6371
g6693
sg6386
g6454
sg6380
g6700
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6513
sg6371
g6509
sg6386
g6520
sg6380
g6517
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6481
sg6371
g6834
sg6386
g6488
sg6380
g6841
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6806
sg6371
g6802
sg6386
g6813
sg6380
g6810
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6652
sg6371
g7155
sg6386
g6659
sg6380
g7162
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6384
sg6371
g7235
sg6386
g6376
sg6380
g7242
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6853
sg6371
g6993
sg6386
g6860
sg6380
g7000
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6967
sg6371
g7276
sg6386
g6974
sg6380
g7283
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6396
sg6371
g6494
sg6386
g6403
sg6380
g6501
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6729
sg6371
g7317
sg6386
g6736
sg6380
g7324
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6607
sg6371
g7332
sg6386
g6614
sg6380
g7339
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6579
sg6371
g7075
sg6386
g6573
sg6380
g7082
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6789
sg6371
g7360
sg6386
g6796
sg6380
g7367
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6759
sg6371
g7375
sg6386
g6766
sg6380
g7382
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6579
sg6371
g7075
sg6386
g6573
sg6380
g7082
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6464
sg6371
g6460
sg6386
g6471
sg6380
g6468
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6712
sg6371
g6948
sg6386
g6719
sg6380
g6955
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6789
sg6371
g7360
sg6386
g6796
sg6380
g7367
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6607
sg6371
g7332
sg6386
g6614
sg6380
g7339
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6419
sg6371
g6665
sg6386
g6413
sg6380
g6672
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6729
sg6371
g6725
sg6386
g6736
sg6380
g6733
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6430
sg6371
g6933
sg6386
g6437
sg6380
g6940
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6464
sg6371
g7047
sg6386
g6471
sg6380
g7054
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6712
sg6371
g6708
sg6386
g6719
sg6380
g6716
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6853
sg6371
g6849
sg6386
g6860
sg6380
g6857
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6419
sg6371
g6409
sg6386
g6413
sg6380
g6417
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6967
sg6371
g7276
sg6386
g6974
sg6380
g7283
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6513
sg6371
g6620
sg6386
g6520
sg6380
g6627
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6536
sg6371
g6526
sg6386
g6530
sg6380
g6534
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6789
sg6371
g6785
sg6386
g6796
sg6380
g6793
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6853
sg6371
g6849
sg6386
g6860
sg6380
g6857
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6759
sg6371
g7375
sg6386
g6766
sg6380
g7382
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6789
sg6371
g7360
sg6386
g6796
sg6380
g7367
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6712
sg6371
g6948
sg6386
g6719
sg6380
g6955
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6384
sg6371
g7235
sg6386
g6376
sg6380
g7242
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6464
sg6371
g7047
sg6386
g6471
sg6380
g7054
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6853
sg6371
g6993
sg6386
g6860
sg6380
g7000
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6536
sg6371
g7702
sg6386
g6530
sg6380
g7709
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6759
sg6371
g6755
sg6386
g6766
sg6380
g6763
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6729
sg6371
g6725
sg6386
g6736
sg6380
g6733
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6464
sg6371
g6460
sg6386
g6471
sg6380
g6468
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6481
sg6371
g6834
sg6386
g6488
sg6380
g6841
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6419
sg6371
g6665
sg6386
g6413
sg6380
g6672
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6806
sg6371
g6905
sg6386
g6813
sg6380
g6912
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6513
sg6371
g6509
sg6386
g6520
sg6380
g6517
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6789
sg6371
g7360
sg6386
g6796
sg6380
g7367
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6396
sg6371
g6494
sg6386
g6403
sg6380
g6501
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6464
sg6371
g7047
sg6386
g6471
sg6380
g7054
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6481
sg6371
g6477
sg6386
g6488
sg6380
g6485
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6464
sg6371
g6460
sg6386
g6471
sg6380
g6468
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6712
sg6371
g6948
sg6386
g6719
sg6380
g6955
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6806
sg6371
g6802
sg6386
g6813
sg6380
g6810
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6590
sg6371
g6586
sg6386
g6597
sg6380
g6594
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6536
sg6371
g6526
sg6386
g6530
sg6380
g6534
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6430
sg6371
g6933
sg6386
g6437
sg6380
g6940
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6729
sg6371
g7317
sg6386
g6736
sg6380
g7324
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6430
sg6371
g6933
sg6386
g6437
sg6380
g6940
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6789
sg6371
g6785
sg6386
g6796
sg6380
g6793
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6590
sg6371
g6819
sg6386
g6597
sg6380
g6826
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6759
sg6371
g6755
sg6386
g6766
sg6380
g6763
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6536
sg6371
g7702
sg6386
g6530
sg6380
g7709
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6579
sg6371
g6569
sg6386
g6573
sg6380
g6577
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6712
sg6371
g6708
sg6386
g6719
sg6380
g6716
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6853
sg6371
g6849
sg6386
g6860
sg6380
g6857
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6590
sg6371
g6586
sg6386
g6597
sg6380
g6594
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6607
sg6371
g7332
sg6386
g6614
sg6380
g7339
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6806
sg6371
g6905
sg6386
g6813
sg6380
g6912
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6789
sg6371
g6785
sg6386
g6796
sg6380
g6793
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6419
sg6371
g6409
sg6386
g6413
sg6380
g6417
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6967
sg6371
g6963
sg6386
g6974
sg6380
g6971
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6729
sg6371
g6725
sg6386
g6736
sg6380
g6733
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6967
sg6371
g7276
sg6386
g6974
sg6380
g7283
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6384
sg6371
g7235
sg6386
g6376
sg6380
g7242
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6481
sg6371
g6477
sg6386
g6488
sg6380
g6485
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6652
sg6371
g7155
sg6386
g6659
sg6380
g7162
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6712
sg6371
g6948
sg6386
g6719
sg6380
g6955
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6481
sg6371
g6834
sg6386
g6488
sg6380
g6841
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6853
sg6371
g6849
sg6386
g6860
sg6380
g6857
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6579
sg6371
g6569
sg6386
g6573
sg6380
g6577
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6789
sg6371
g6785
sg6386
g6796
sg6380
g6793
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6967
sg6371
g7276
sg6386
g6974
sg6380
g7283
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6447
sg6371
g6693
sg6386
g6454
sg6380
g6700
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6513
sg6371
g6620
sg6386
g6520
sg6380
g6627
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6536
sg6371
g7702
sg6386
g6530
sg6380
g7709
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6759
sg6371
g7375
sg6386
g6766
sg6380
g7382
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6967
sg6371
g7276
sg6386
g6974
sg6380
g7283
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6384
sg6371
g7235
sg6386
g6376
sg6380
g7242
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6590
sg6371
g6819
sg6386
g6597
sg6380
g6826
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6536
sg6371
g6526
sg6386
g6530
sg6380
g6534
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6652
sg6371
g6648
sg6386
g6659
sg6380
g6656
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6806
sg6371
g6905
sg6386
g6813
sg6380
g6912
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6481
sg6371
g6834
sg6386
g6488
sg6380
g6841
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6536
sg6371
g7702
sg6386
g6530
sg6380
g7709
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6590
sg6371
g6586
sg6386
g6597
sg6380
g6594
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6729
sg6371
g7317
sg6386
g6736
sg6380
g7324
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6759
sg6371
g7375
sg6386
g6766
sg6380
g7382
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6464
sg6371
g6460
sg6386
g6471
sg6380
g6468
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6419
sg6371
g6409
sg6386
g6413
sg6380
g6417
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6536
sg6371
g6526
sg6386
g6530
sg6380
g6534
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6652
sg6371
g7155
sg6386
g6659
sg6380
g7162
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6853
sg6371
g6993
sg6386
g6860
sg6380
g7000
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6759
sg6371
g6755
sg6386
g6766
sg6380
g6763
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6806
sg6371
g6802
sg6386
g6813
sg6380
g6810
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6729
sg6371
g7317
sg6386
g6736
sg6380
g7324
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6419
sg6371
g6409
sg6386
g6413
sg6380
g6417
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6967
sg6371
g6963
sg6386
g6974
sg6380
g6971
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6481
sg6371
g6477
sg6386
g6488
sg6380
g6485
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6384
sg6371
g7235
sg6386
g6376
sg6380
g7242
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6789
sg6371
g7360
sg6386
g6796
sg6380
g7367
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6590
sg6371
g6586
sg6386
g6597
sg6380
g6594
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6419
sg6371
g6665
sg6386
g6413
sg6380
g6672
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6579
sg6371
g7075
sg6386
g6573
sg6380
g7082
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6652
sg6371
g7155
sg6386
g6659
sg6380
g7162
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6430
sg6371
g6933
sg6386
g6437
sg6380
g6940
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6729
sg6371
g7317
sg6386
g6736
sg6380
g7324
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6652
sg6371
g6648
sg6386
g6659
sg6380
g6656
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6759
sg6371
g6755
sg6386
g6766
sg6380
g6763
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6536
sg6371
g7702
sg6386
g6530
sg6380
g7709
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6607
sg6371
g7332
sg6386
g6614
sg6380
g7339
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6806
sg6371
g6802
sg6386
g6813
sg6380
g6810
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6607
sg6371
g6603
sg6386
g6614
sg6380
g6611
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6419
sg6371
g6665
sg6386
g6413
sg6380
g6672
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6590
sg6371
g6819
sg6386
g6597
sg6380
g6826
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6607
sg6371
g6603
sg6386
g6614
sg6380
g6611
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6759
sg6371
g7375
sg6386
g6766
sg6380
g7382
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6607
sg6371
g6603
sg6386
g6614
sg6380
g6611
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6967
sg6371
g6963
sg6386
g6974
sg6380
g6971
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6607
sg6371
g7332
sg6386
g6614
sg6380
g7339
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6853
sg6371
g6993
sg6386
g6860
sg6380
g7000
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6579
sg6371
g7075
sg6386
g6573
sg6380
g7082
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6712
sg6371
g6708
sg6386
g6719
sg6380
g6716
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6464
sg6371
g7047
sg6386
g6471
sg6380
g7054
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6579
sg6371
g6569
sg6386
g6573
sg6380
g6577
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6806
sg6371
g6905
sg6386
g6813
sg6380
g6912
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6967
sg6371
g6963
sg6386
g6974
sg6380
g6971
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.