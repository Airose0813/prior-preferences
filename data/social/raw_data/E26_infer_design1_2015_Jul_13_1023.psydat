ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E26_infer_design1_2015_Jul_13_1023
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS's\x9b\xbe\x1ev\xffM@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_13_1023
p67
sVparticipant
p68
VE26
p69
sVglasses
p70
Vn
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F0.31680673562618722
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F18.383102431948373
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P9\x00'
tbsg70
Vn
sa(dp96
g64
g65
sg20
F15.234
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F0.27999999999999936
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x17\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p103
sg21
F1.1000000000000001
sg70
Vn
sa(dp104
g64
g65
sg20
F3.8170000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'"\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p110
sg21
F1.3
sg70
Vn
sa(dp111
g64
g65
sg20
F4.9340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F0.23999999999999913
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x0e\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p117
sg21
F1.3
sg70
Vn
sa(dp118
g64
g65
sg20
F6.5510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0.45999999999999952
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'$\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V48-twix.png
p124
sg21
F1.1000000000000001
sg70
Vn
sa(dp125
g64
g65
sg20
F5.0510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0.49999999999999933
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\x1c\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p131
sg21
F1.2
sg70
Vn
sa(dp132
g64
g65
sg20
F2.3010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x01\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p138
sg21
F1.2
sg70
Vn
sa(dp139
g64
g65
sg20
F3.2839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x04\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p145
sg21
F1.6000000000000001
sg70
Vn
sa(dp146
g64
g65
sg20
F2.7839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\x10\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V22-daim.png
p152
sg21
F1.8999999999999999
sg70
Vn
sa(dp153
g64
g65
sg20
F2.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S' \x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p159
sg21
F1.6000000000000001
sg70
Vn
sa(dp160
g64
g65
sg20
F2.1669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x03\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V4-corn.png
p166
sg21
F1.5
sg70
Vn
sa(dp167
g64
g65
sg20
F6.617
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0.51999999999999891
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x12\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p173
sg21
F1.8
sg70
Vn
sa(dp174
g64
g65
sg20
F1.917
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x0b\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p180
sg21
F1.1000000000000001
sg70
Vn
sa(dp181
g64
g65
sg20
F2.3010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x1d\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V40-sardines.png
p187
sg21
F1.5
sg70
Vn
sa(dp188
g64
g65
sg20
F2.0009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\x02\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p194
sg21
F1
sg70
Vn
sa(dp195
g64
g65
sg20
F3.2010000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F0.37999999999999901
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x11\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p201
sg21
F1.3999999999999999
sg70
Vn
sa(dp202
g64
g65
sg20
F2.9340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F0.29999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\n\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p208
sg21
F1.1000000000000001
sg70
Vn
sa(dp209
g64
g65
sg20
F2.2170000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x16\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p215
sg21
F1.3999999999999999
sg70
Vn
sa(dp216
g64
g65
sg20
F2.617
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x06\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V7-olives.png
p222
sg21
F1.7
sg70
Vn
sa(dp223
g64
g65
sg20
F3.5510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0.25999999999999868
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\x0f\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p229
sg21
F1.8
sg70
Vn
sa(dp230
g64
g65
sg20
F5.6509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F0.41999999999999904
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x05\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p236
sg21
F1.3999999999999999
sg70
Vn
sa(dp237
g64
g65
sg20
F2.0169999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'%\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p243
sg21
F1.3
sg70
Vn
sa(dp244
g64
g65
sg20
F2.0670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'&\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V50-polo.png
p250
sg21
F1.2
sg70
Vn
sa(dp251
g64
g65
sg20
F2.6339999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'\x1b\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p257
sg21
F1.8999999999999999
sg70
Vn
sa(dp258
g64
g65
sg20
F9.5009999999999994
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F0.69999999999999929
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\x00\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p264
sg21
F1.6000000000000001
sg70
Vn
sa(dp265
g64
g65
sg20
F5.5170000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F0.55999999999999894
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x1f\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p271
sg21
F1.7
sg70
Vn
sa(dp272
g64
g65
sg20
F2.2509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x07\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p278
sg21
F1.6000000000000001
sg70
Vn
sa(dp279
g64
g65
sg20
F2.1840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\x19\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p285
sg21
F1.3
sg70
Vn
sa(dp286
g64
g65
sg20
F2.7669999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0.29999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'!\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V44-crunch.png
p292
sg21
F1.5
sg70
Vn
sa(dp293
g64
g65
sg20
F4.601
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x14\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p299
sg21
F1.7
sg70
Vn
sa(dp300
g64
g65
sg20
F1.8009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S"'\x00\x00\x00"
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V51-mars.png
p306
sg21
F1.1000000000000001
sg70
Vn
sa(dp307
g64
g65
sg20
F2.8340000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F0.37999999999999878
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\r\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p313
sg21
F1.7
sg70
Vn
sa(dp314
g64
g65
sg20
F2.2679999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'\x18\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p320
sg21
F1.7
sg70
Vn
sa(dp321
g64
g65
sg20
F6.2679999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'\x13\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p327
sg21
F1.7
sg70
Vn
sa(dp328
g64
g65
sg20
F2.5510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'#\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p334
sg21
F1.8999999999999999
sg70
Vn
sa(dp335
g64
g65
sg20
F1.8169999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x1e\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p341
sg21
F1.2
sg70
Vn
sa(dp342
g64
g65
sg20
F3.0179999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x08\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p348
sg21
F2
sg70
Vn
sa(dp349
g64
g65
sg20
F2.117
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\t\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p355
sg21
F1.2
sg70
Vn
sa(dp356
g64
g65
sg20
F2.4169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x1a\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V35-raisins.png
p362
sg21
F1.1000000000000001
sg70
Vn
sa(dp363
g64
g65
sg20
F1.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'\x0c\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V18-mms.png
p369
sg21
F1.2
sg70
Vn
sa(dp370
g64
g65
sg20
F2.3340000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x15\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V29-beans.png
p376
sg21
F1.7
sg70
Vn
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F5.6505896695080082
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vn
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'7-olives.png'
p381
sg26
F5.0000000000000018
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'right'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F1.8667286471102216
sg27
F12.484
sg70
Vn
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'31-hobnobs.png'
p390
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'right'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F1.3335172219531159
sg27
F3.3010000000000002
sg70
Vn
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'44-crunch.png'
p399
sg26
F5.9999999999999982
sg28
F3
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'left'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F1.2501806099855912
sg27
F2.0510000000000002
sg70
Vn
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'49-yorkie.png'
p408
sg26
F4.7000000000000011
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'right'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F1.3500694785375345
sg27
F4.101
sg70
Vn
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p417
sg26
F4.5000000000000018
sg28
F3
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'left'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F1.3667055541204718
sg27
F2.0169999999999999
sg70
Vn
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p426
sg26
F3.6000000000000005
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'right'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F2.2333583649933644
sg27
F1.2669999999999999
sg70
Vn
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p435
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'left'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F2.2000103775903881
sg27
F2.3340000000000001
sg70
Vn
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'5-pineapple.png'
p444
sg26
F1.2999999999999996
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'left'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F8.0833619857462509
sg27
F1.867
sg70
Vn
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'4-corn.png'
p453
sg26
F2.3999999999999986
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'right'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F7.7499690667980303
sg27
F2.7839999999999998
sg70
Vn
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p462
sg26
F5.1000000000000005
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'left'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F1.3167899148068045
sg27
F1.7669999999999999
sg70
Vn
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'48-twix.png'
p471
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'left'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F0.93342519211387298
sg27
F1.3009999999999999
sg70
Vn
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'38-maltesers.png'
p480
sg26
F5.5999999999999988
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'left'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F1.6164910173972658
sg27
F1.9510000000000001
sg70
Vn
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'18-mms.png'
p489
sg26
F3.1000000000000001
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'left'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F3.4834543006845706
sg27
F2.9670000000000001
sg70
Vn
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'50-polo.png'
p498
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'right'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F0.80010622775148477
sg27
F1.0669999999999999
sg70
Vn
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'51-mars.png'
p507
sg26
F5.2000000000000002
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'right'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F1.0667113701326798
sg27
F1.0840000000000001
sg70
Vn
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p516
sg26
F5.2000000000000011
sg28
F3
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'left'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F1.3500529428165464
sg27
F1.6839999999999999
sg70
Vn
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p525
sg26
F3.3000000000000003
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'right'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F2.0500373764311917
sg27
F3.6509999999999998
sg70
Vn
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p534
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'right'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F0.916731811704949
sg27
F1.1339999999999999
sg70
Vn
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p543
sg26
F5.0000000000000018
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'right'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F1.8501889348658551
sg27
F1.417
sg70
Vn
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'22-daim.png'
p552
sg26
F5.3000000000000007
sg28
F3
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F1.7168337629768757
sg27
F4.234
sg70
Vn
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p561
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'left'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F1.0833722492970992
sg27
F1.401
sg70
Vn
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p570
sg26
F3.9000000000000008
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'left'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F1.0500202705129595
sg27
F9.6839999999999993
sg70
Vn
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p579
sg26
F5.3000000000000007
sg28
F3
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'right'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F0.84977326105490647
sg27
F1.401
sg70
Vn
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p588
sg26
F4.7000000000000011
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'left'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F1.5167047843542605
sg27
F1.351
sg70
Vn
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'40-sardines.png'
p597
sg26
F3.6999999999999997
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'right'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F3.133536494621012
sg27
F2.6669999999999998
sg70
Vn
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'25-kitkat.png'
p606
sg26
F5.2999999999999998
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'left'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F1.0334121345961194
sg27
F0.98399999999999999
sg70
Vn
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'46-pistachios.png'
p615
sg26
F2.7999999999999994
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'left'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F2.8333307674456591
sg27
F3.0670000000000002
sg70
Vn
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p624
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'right'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F1.0166768446881633
sg27
F1.0669999999999999
sg70
Vn
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p633
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'right'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F0.95009291364522142
sg27
F1.018
sg70
Vn
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p642
sg26
F5.0999999999999996
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'left'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F1.0833759555791858
sg27
F0.88400000000000001
sg70
Vn
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'35-raisins.png'
p651
sg26
F5.3999999999999995
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'left'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F1.2835197593310568
sg27
F3.8839999999999999
sg70
Vn
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p660
sg26
F5.3000000000000007
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'right'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F1.1166617914800554
sg27
F1.784
sg70
Vn
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p669
sg26
F4.0000000000000009
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'left'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F1.8500426792656981
sg27
F1.3009999999999999
sg70
Vn
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p678
sg26
F4.7000000000000011
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'right'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F1.5667050979625401
sg27
F0.80100000000000005
sg70
Vn
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p687
sg26
F4.5000000000000009
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'left'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F2.0665443023322041
sg27
F1.4670000000000001
sg70
Vn
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p696
sg26
F2.7999999999999998
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'right'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F1.383377267033211
sg27
F2.1339999999999999
sg70
Vn
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'29-beans.png'
p705
sg26
F2.8999999999999999
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'right'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F1.1000627787195754
sg27
F0.91700000000000004
sg70
Vn
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p714
sg26
F3.8000000000000007
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'right'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F1.7833649507720111
sg27
F1.0009999999999999
sg70
Vn
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p723
sg26
F4.3000000000000007
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'right'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F1.316537317415623
sg27
F2.2509999999999999
sg70
Vn
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p732
sg26
F2.5999999999999988
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'left'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F2.1666609646938468
sg27
F3.5840000000000001
sg70
Vn
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F127.38052941676233
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F5.1334215998708714
sg66
g67
sg68
g69
sg70
Vn
sa(dp743
g64
g65
sg82
S'15-walnut_whip.png'
p744
sg83
S'28-maple_pecan.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'28-maple_pecan.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\r\n!5\x03\x18\xf8'
tRp754
sa(dp755
g64
g65
sg82
S'12-topic.png'
p756
sg83
S'12-topic.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'39-mackerel.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\r\n"\x01\x08\xd9\xa0'
tRp765
sa(dp766
g64
g65
sg82
g744
sg83
S'15-walnut_whip.png'
p767
sg56
g57
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p770
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p771
sS'practice_loop.thisIndex'
p772
g60
(g99
S'\x02\x00\x00\x00'
tRp773
sg34
g753
(S'\x07\xdf\x07\r\n"\x08\x07?x'
tRp774
sa(dp775
g64
g65
sg82
S'53-cheestrings.png'
p776
sg83
S'53-cheestrings.png'
p777
sg56
g57
sS'practice_loop.thisN'
p778
I3
sS'practice_loop.thisTrialN'
p779
I3
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p780
I0
sg84
S'47-picnic.png'
p781
sg33
g781
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p782
sS'practice_loop.thisIndex'
p783
g60
(g99
S'\x03\x00\x00\x00'
tRp784
sg34
g753
(S'\x07\xdf\x07\r\n"\x0f\x04:\x08'
tRp785
sa(dp786
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p787
sg83
S'37-nakd_cashew_cookie.png'
p788
sg56
g57
sS'practice_loop.thisN'
p789
I4
sS'practice_loop.thisTrialN'
p790
I4
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p791
I0
sg84
S'9-yu_mango_pieces.png'
p792
sg33
g787
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p793
sS'practice_loop.thisIndex'
p794
g60
(g99
S'\x04\x00\x00\x00'
tRp795
sg34
g753
(S'\x07\xdf\x07\r\n"\x16\x00}\x00'
tRp796
sa(dp797
g64
g65
sg82
g776
sg83
S'47-picnic.png'
p798
sg56
g57
sS'practice_loop.thisN'
p799
I5
sS'practice_loop.thisTrialN'
p800
I5
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p801
I0
sg84
g781
sg33
g776
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p802
sS'practice_loop.thisIndex'
p803
g60
(g99
S'\x05\x00\x00\x00'
tRp804
sg34
g753
(S'\x07\xdf\x07\r\n"\x1e\x01\xb5\x80'
tRp805
sa(dp806
g64
g65
sg82
S'32-hovis_crackers.png'
p807
sg83
S'32-hovis_crackers.png'
p808
sg56
g57
sS'practice_loop.thisN'
p809
I6
sS'practice_loop.thisTrialN'
p810
I6
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p811
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p812
sg33
g807
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p813
sS'practice_loop.thisIndex'
p814
g60
(g99
S'\x06\x00\x00\x00'
tRp815
sg34
g753
(S'\x07\xdf\x07\r\n"$\x0e0\xd0'
tRp816
sa(dp817
g64
g65
sg82
S'52-aero_mousse.png'
p818
sg83
S'52-aero_mousse.png'
p819
sg56
g57
sS'practice_loop.thisN'
p820
I7
sS'practice_loop.thisTrialN'
p821
I7
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p822
I0
sg84
S'14-discos_salt_vinegar.png'
p823
sg33
g818
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p824
sS'practice_loop.thisIndex'
p825
g60
(g99
S'\x07\x00\x00\x00'
tRp826
sg34
g753
(S'\x07\xdf\x07\r\n"-\x0b\x1b\xc0'
tRp827
sa(dp828
g64
g65
sg82
S'11-snickers.png'
p829
sg83
S'54-frubes_yogurt.png'
p830
sg56
g57
sS'practice_loop.thisN'
p831
I8
sS'practice_loop.thisTrialN'
p832
I8
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p833
I0
sg84
S'54-frubes_yogurt.png'
p834
sg33
g834
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p835
sS'practice_loop.thisIndex'
p836
g60
(g99
S'\x08\x00\x00\x00'
tRp837
sg34
g753
(S'\x07\xdf\x07\r\n"3\n\xf8\x98'
tRp838
sa(dp839
g64
g65
sg82
g787
sg83
S'9-yu_mango_pieces.png'
p840
sg56
g57
sS'practice_loop.thisN'
p841
I9
sS'practice_loop.thisTrialN'
p842
I9
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p843
I0
sg84
g792
sg33
g787
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\r\n";\x06\xba\xa8'
tRp847
sa(dp848
g64
g65
sg82
g807
sg83
S'24-food_doctor_apple_walnut_bar.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g812
sg33
g807
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\r\n#\x08\x026h'
tRp856
sa(dp857
g64
g65
sg82
g829
sg83
S'11-snickers.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g834
sg33
g834
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\r\n#\x0f\x05\xdc\x00'
tRp865
sa(dp866
g64
g65
sg82
g818
sg83
S'14-discos_salt_vinegar.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g823
sg33
g823
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\r\n#\x15\x0c_\xf8'
tRp874
sa(dp875
g64
g65
sg82
g756
sg83
S'39-mackerel.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\r\n#\x1d\x01\xb5\x80'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F20.049688985898456
sg66
g67
sg68
g69
sg70
Vn
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vn
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'36-fig_rolls.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'right'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'34-hula_hoops_bbq_beef_redo.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
S'36-fig_rolls.png'
p908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p909
I0
sS'img_wrong'
p910
g900
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vn
sS'block_loop.thisTrialN'
p912
I0
sg39
F2.5664659002077315
sg34
g753
(S'\x07\xdf\x07\r\n(\x1b\x00\xa0('
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'48-twix.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'left'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'50-polo.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'50-polo.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
S'48-twix.png'
p926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p927
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vn
sS'block_loop.thisTrialN'
p929
I0
sg39
F1.4499748828102383
sg34
g753
(S'\x07\xdf\x07\r\n("\t\xbc0'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'51-mars.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'left'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'51-mars.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p943
I0
sg910
S'27-hartleys_raspberries_jelly.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vn
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.6998835086974395
sg34
g753
(S'\x07\xdf\x07\r\n()\x01\xf4\x00'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'44-crunch.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'left'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'26-walkers_smoky_bacon.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'26-walkers_smoky_bacon.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
S'44-crunch.png'
p960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p961
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vn
sS'block_loop.thisTrialN'
p963
I0
sg39
F2.5665919138045865
sg34
g753
(S'\x07\xdf\x07\r\n(/\r\x00 '
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'29-beans.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'right'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'46-pistachios.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'46-pistachios.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p977
I0
sg910
S'29-beans.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vn
sS'block_loop.thisTrialN'
p980
I0
sg39
F2.0833206464440082
sg34
g753
(S'\x07\xdf\x07\r\n(7\x06\xd9\xe8'
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
g950
sS'block_loop.thisIndex'
p984
g889
sg38
S'right'
p985
sg59
g63
sS'trial_loop.thisN'
p986
I5
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p987
g60
(g99
S'\x05\x00\x00\x00'
tRp988
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p989
I0
sg904
g958
sS'block_loop.thisRepN'
p990
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p991
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p992
Nsg70
Vn
sS'block_loop.thisTrialN'
p993
I0
sg39
F1.5499792163095663
sg34
g753
(S'\x07\xdf\x07\r\n)\x02\x08\xd1\xd0'
tRp994
sa(dp995
S'trial_loop.thisTrialN'
p996
I6
sg895
S'7-olives.png'
p997
sS'block_loop.thisIndex'
p998
g889
sg38
S'right'
p999
sg59
g63
sS'trial_loop.thisN'
p1000
I6
sg33
S'7-olives.png'
p1001
sg64
g65
sS'trial_loop.thisIndex'
p1002
g60
(g99
S'\x06\x00\x00\x00'
tRp1003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1004
I0
sg904
S'22-daim.png'
p1005
sS'block_loop.thisRepN'
p1006
I0
sg907
S'22-daim.png'
p1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1008
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p1009
Nsg70
Vn
sS'block_loop.thisTrialN'
p1010
I0
sg39
F2.3832076333451369
sg34
g753
(S'\x07\xdf\x07\r\n)\t\x02t\xe8'
tRp1011
sa(dp1012
S'trial_loop.thisTrialN'
p1013
I7
sg895
S'3-ellas_strawberries_apples.png'
p1014
sS'block_loop.thisIndex'
p1015
g889
sg38
S'right'
p1016
sg59
g63
sS'trial_loop.thisN'
p1017
I7
sg33
S'3-ellas_strawberries_apples.png'
p1018
sg64
g65
sS'trial_loop.thisIndex'
p1019
g60
(g99
S'\x07\x00\x00\x00'
tRp1020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1021
I0
sg904
S'13-mccoys_steak_crisps.png'
p1022
sS'block_loop.thisRepN'
p1023
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1024
I0
sg910
S'13-mccoys_steak_crisps.png'
p1025
sg55
g11
sS'block_loop.thisTrial'
p1026
Nsg70
Vn
sS'block_loop.thisTrialN'
p1027
I0
sg39
F2.1333029988386443
sg34
g753
(S'\x07\xdf\x07\r\n)\x10\x08\xb6x'
tRp1028
sa(dp1029
S'trial_loop.thisTrialN'
p1030
I8
sg895
S'2-steamed_puddings.png'
p1031
sS'block_loop.thisIndex'
p1032
g889
sg38
S'right'
p1033
sg59
g63
sS'trial_loop.thisN'
p1034
I8
sg33
S'2-steamed_puddings.png'
p1035
sg64
g65
sS'trial_loop.thisIndex'
p1036
g60
(g99
S'\x08\x00\x00\x00'
tRp1037
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1038
I0
sg904
S'20-fruit_pastilles.png'
p1039
sS'block_loop.thisRepN'
p1040
I0
sg907
g1035
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1041
I0
sg910
S'20-fruit_pastilles.png'
p1042
sg55
g11
sS'block_loop.thisTrial'
p1043
Nsg70
Vn
sS'block_loop.thisTrialN'
p1044
I0
sg39
F1.1999054612924738
sg34
g753
(S'\x07\xdf\x07\r\n)\x17\x0b+`'
tRp1045
sa(dp1046
S'trial_loop.thisTrialN'
p1047
I9
sg895
S'25-kitkat.png'
p1048
sS'block_loop.thisIndex'
p1049
g889
sg38
S'left'
p1050
sg59
g63
sS'trial_loop.thisN'
p1051
I9
sg33
S'25-kitkat.png'
p1052
sg64
g65
sS'trial_loop.thisIndex'
p1053
g60
(g99
S'\t\x00\x00\x00'
tRp1054
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1055
I0
sg904
S'31-hobnobs.png'
p1056
sS'block_loop.thisRepN'
p1057
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1058
I0
sg910
S'31-hobnobs.png'
p1059
sg55
g11
sS'block_loop.thisTrial'
p1060
Nsg70
Vn
sS'block_loop.thisTrialN'
p1061
I0
sg39
F2.1666264677592153
sg34
g753
(S'\x07\xdf\x07\r\n)\x1d\x0e\xd4\xe0'
tRp1062
sa(dp1063
S'trial_loop.thisTrialN'
p1064
I10
sg895
S'38-maltesers.png'
p1065
sS'block_loop.thisIndex'
p1066
g889
sg38
S'left'
p1067
sg59
g63
sS'trial_loop.thisN'
p1068
I10
sg33
S'6-sour_patch_kids.png'
p1069
sg64
g65
sS'trial_loop.thisIndex'
p1070
g60
(g99
S'\n\x00\x00\x00'
tRp1071
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1072
I0
sg904
S'6-sour_patch_kids.png'
p1073
sS'block_loop.thisRepN'
p1074
I0
sg907
S'38-maltesers.png'
p1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1076
I0
sg910
g1069
sg55
g11
sS'block_loop.thisTrial'
p1077
Nsg70
Vn
sS'block_loop.thisTrialN'
p1078
I0
sg39
F1.1828066706239042
sg34
g753
(S'\x07\xdf\x07\r\n)%\x02\xbb8'
tRp1079
sa(dp1080
S'trial_loop.thisTrialN'
p1081
I11
sg895
S'22-daim.png'
p1082
sS'block_loop.thisIndex'
p1083
g889
sg38
S'right'
p1084
sg59
g63
sS'trial_loop.thisN'
p1085
I11
sg33
g1007
sg64
g65
sS'trial_loop.thisIndex'
p1086
g60
(g99
S'\x0b\x00\x00\x00'
tRp1087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1088
I0
sg904
S'7-olives.png'
p1089
sS'block_loop.thisRepN'
p1090
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1091
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p1092
Nsg70
Vn
sS'block_loop.thisTrialN'
p1093
I0
sg39
F1.533331451682443
sg34
g753
(S'\x07\xdf\x07\r\n)+\x05\xeb\xa0'
tRp1094
sa(dp1095
S'trial_loop.thisTrialN'
p1096
I12
sg895
S'23-crunchie_redo.png'
p1097
sS'block_loop.thisIndex'
p1098
g889
sg38
S'left'
p1099
sg59
g63
sS'trial_loop.thisN'
p1100
I12
sg33
S'23-crunchie_redo.png'
p1101
sg64
g65
sS'trial_loop.thisIndex'
p1102
g60
(g99
S'\x0c\x00\x00\x00'
tRp1103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1104
I0
sg904
S'33-ambrosia_rice.png'
p1105
sS'block_loop.thisRepN'
p1106
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1107
I0
sg910
S'33-ambrosia_rice.png'
p1108
sg55
g11
sS'block_loop.thisTrial'
p1109
Nsg70
Vn
sS'block_loop.thisTrialN'
p1110
I0
sg39
F1.0665956200864457
sg34
g753
(S'\x07\xdf\x07\r\n)1\x0e\x92x'
tRp1111
sa(dp1112
S'trial_loop.thisTrialN'
p1113
I13
sg895
S'17-jacobs_mini_cheddars_redo.png'
p1114
sS'block_loop.thisIndex'
p1115
g889
sg38
S'left'
p1116
sg59
g63
sS'trial_loop.thisN'
p1117
I13
sg33
S'17-jacobs_mini_cheddars_redo.png'
p1118
sg64
g65
sS'trial_loop.thisIndex'
p1119
g60
(g99
S'\r\x00\x00\x00'
tRp1120
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1121
I0
sg904
S'8-liquorice_catherine_wheels.png'
p1122
sS'block_loop.thisRepN'
p1123
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1124
I0
sg910
S'8-liquorice_catherine_wheels.png'
p1125
sg55
g11
sS'block_loop.thisTrial'
p1126
Nsg70
Vn
sS'block_loop.thisTrialN'
p1127
I0
sg39
F2.8332326935151286
sg34
g753
(S'\x07\xdf\x07\r\n)8\x00\xd6\xd8'
tRp1128
sa(dp1129
S'trial_loop.thisTrialN'
p1130
I14
sg895
S'33-ambrosia_rice.png'
p1131
sS'block_loop.thisIndex'
p1132
g889
sg38
S'right'
p1133
sg59
g63
sS'trial_loop.thisN'
p1134
I14
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p1135
g60
(g99
S'\x0e\x00\x00\x00'
tRp1136
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1137
I0
sg904
S'23-crunchie_redo.png'
p1138
sS'block_loop.thisRepN'
p1139
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1140
I0
sg910
g1108
sg55
g11
sS'block_loop.thisTrial'
p1141
Nsg70
Vn
sS'block_loop.thisTrialN'
p1142
I0
sg39
F1.5502340944899515
sg34
g753
(S'\x07\xdf\x07\r\n*\x03\r\xfe\x08'
tRp1143
sa(dp1144
S'trial_loop.thisTrialN'
p1145
I15
sg895
g1014
sS'block_loop.thisIndex'
p1146
g889
sg38
S'left'
p1147
sg59
g63
sS'trial_loop.thisN'
p1148
I15
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p1149
g60
(g99
S'\x0f\x00\x00\x00'
tRp1150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1151
I0
sg904
g1022
sS'block_loop.thisRepN'
p1152
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1153
I0
sg910
g1025
sg55
g11
sS'block_loop.thisTrial'
p1154
Nsg70
Vn
sS'block_loop.thisTrialN'
p1155
I0
sg39
F4.7165991267997924
sg34
g753
(S'\x07\xdf\x07\r\n*\n\x07\xa1 '
tRp1156
sa(dp1157
S'trial_loop.thisTrialN'
p1158
I16
sg895
S'6-sour_patch_kids.png'
p1159
sS'block_loop.thisIndex'
p1160
g889
sg38
S'left'
p1161
sg59
g63
sS'trial_loop.thisN'
p1162
I16
sg33
g1075
sg64
g65
sS'trial_loop.thisIndex'
p1163
g60
(g99
S'\x10\x00\x00\x00'
tRp1164
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1165
I0
sg904
S'38-maltesers.png'
p1166
sS'block_loop.thisRepN'
p1167
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1168
I0
sg910
g1069
sg55
g11
sS'block_loop.thisTrial'
p1169
Nsg70
Vn
sS'block_loop.thisTrialN'
p1170
I0
sg39
F2.1994729666621424
sg34
g753
(S'\x07\xdf\x07\r\n*\x14\x03\xd0\x90'
tRp1171
sa(dp1172
S'trial_loop.thisTrialN'
p1173
I17
sg895
g1114
sS'block_loop.thisIndex'
p1174
g889
sg38
S'left'
p1175
sg59
g63
sS'trial_loop.thisN'
p1176
I17
sg33
g1118
sg64
g65
sS'trial_loop.thisIndex'
p1177
g60
(g99
S'\x11\x00\x00\x00'
tRp1178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1179
I0
sg904
g1122
sS'block_loop.thisRepN'
p1180
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1181
I0
sg910
g1125
sg55
g11
sS'block_loop.thisTrial'
p1182
Nsg70
Vn
sS'block_loop.thisTrialN'
p1183
I0
sg39
F2.2664959496037227
sg34
g753
(S'\x07\xdf\x07\r\n*\x1b\x07v('
tRp1184
sa(dp1185
S'trial_loop.thisTrialN'
p1186
I18
sg895
S'45-chewy_nougat_redo.png'
p1187
sS'block_loop.thisIndex'
p1188
g889
sg38
S'left'
p1189
sg59
g63
sS'trial_loop.thisN'
p1190
I18
sg33
S'41-peanuts_redo.png'
p1191
sg64
g65
sS'trial_loop.thisIndex'
p1192
g60
(g99
S'\x12\x00\x00\x00'
tRp1193
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1194
I0
sg904
S'41-peanuts_redo.png'
p1195
sS'block_loop.thisRepN'
p1196
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1197
I0
sg910
S'45-chewy_nougat_redo.png'
p1198
sg55
g11
sS'block_loop.thisTrial'
p1199
Nsg70
Vn
sS'block_loop.thisTrialN'
p1200
I0
sg39
F1.2836543258868005
sg34
g753
(S'\x07\xdf\x07\r\n*"\x0c\r\xf0'
tRp1201
sa(dp1202
S'trial_loop.thisTrialN'
p1203
I19
sg895
g1114
sS'block_loop.thisIndex'
p1204
g889
sg38
S'left'
p1205
sg59
g63
sS'trial_loop.thisN'
p1206
I19
sg33
g1118
sg64
g65
sS'trial_loop.thisIndex'
p1207
g60
(g99
S'\x13\x00\x00\x00'
tRp1208
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1209
I0
sg904
g1122
sS'block_loop.thisRepN'
p1210
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1211
I0
sg910
g1125
sg55
g11
sS'block_loop.thisTrial'
p1212
Nsg70
Vn
sS'block_loop.thisTrialN'
p1213
I0
sg39
F1.1833315372118705
sg34
g753
(S'\x07\xdf\x07\r\n*)\x01\xa5\xe0'
tRp1214
sa(dp1215
S'trial_loop.thisTrialN'
p1216
I20
sg895
S'43-mrporky_pork_crackles_redo.png'
p1217
sS'block_loop.thisIndex'
p1218
g889
sg38
S'right'
p1219
sg59
g63
sS'trial_loop.thisN'
p1220
I20
sg33
S'18-mms.png'
p1221
sg64
g65
sS'trial_loop.thisIndex'
p1222
g60
(g99
S'\x14\x00\x00\x00'
tRp1223
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1224
I0
sg904
S'18-mms.png'
p1225
sS'block_loop.thisRepN'
p1226
I0
sg907
g1221
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1227
I0
sg910
S'43-mrporky_pork_crackles_redo.png'
p1228
sg55
g11
sS'block_loop.thisTrial'
p1229
Nsg70
Vn
sS'block_loop.thisTrialN'
p1230
I0
sg39
F1.4831674914571522
sg34
g753
(S'\x07\xdf\x07\r\n*/\x04\xd6H'
tRp1231
sa(dp1232
S'trial_loop.thisTrialN'
p1233
I21
sg895
S'50-polo.png'
p1234
sS'block_loop.thisIndex'
p1235
g889
sg38
S'left'
p1236
sg59
g63
sS'trial_loop.thisN'
p1237
I21
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p1238
g60
(g99
S'\x15\x00\x00\x00'
tRp1239
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1240
I0
sg904
S'48-twix.png'
p1241
sS'block_loop.thisRepN'
p1242
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1243
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p1244
Nsg70
Vn
sS'block_loop.thisTrialN'
p1245
I0
sg39
F1.0833078170053341
sg34
g753
(S'\x07\xdf\x07\r\n*5\x0c\xc5\x88'
tRp1246
sa(dp1247
S'trial_loop.thisTrialN'
p1248
I22
sg895
S'49-yorkie.png'
p1249
sS'block_loop.thisIndex'
p1250
g889
sg38
S'right'
p1251
sg59
g63
sS'trial_loop.thisN'
p1252
I22
sg33
S'49-yorkie.png'
p1253
sg64
g65
sS'trial_loop.thisIndex'
p1254
g60
(g99
S'\x16\x00\x00\x00'
tRp1255
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1256
I0
sg904
S'35-raisins.png'
p1257
sS'block_loop.thisRepN'
p1258
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1259
I0
sg910
S'35-raisins.png'
p1260
sg55
g11
sS'block_loop.thisTrial'
p1261
Nsg70
Vn
sS'block_loop.thisTrialN'
p1262
I0
sg39
F1.5499116479327313
sg34
g753
(S'\x07\xdf\x07\r\n*;\x0e\x8a\xa8'
tRp1263
sa(dp1264
S'trial_loop.thisTrialN'
p1265
I23
sg895
g1082
sS'block_loop.thisIndex'
p1266
g889
sg38
S'right'
p1267
sg59
g63
sS'trial_loop.thisN'
p1268
I23
sg33
g1007
sg64
g65
sS'trial_loop.thisIndex'
p1269
g60
(g99
S'\x17\x00\x00\x00'
tRp1270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1271
I0
sg904
g1089
sS'block_loop.thisRepN'
p1272
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1273
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p1274
Nsg70
Vn
sS'block_loop.thisTrialN'
p1275
I0
sg39
F1.4333154291389292
sg34
g753
(S'\x07\xdf\x07\r\n+\x06\x08-\xc0'
tRp1276
sa(dp1277
S'trial_loop.thisTrialN'
p1278
I24
sg895
g1187
sS'block_loop.thisIndex'
p1279
g889
sg38
S'right'
p1280
sg59
g63
sS'trial_loop.thisN'
p1281
I24
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p1282
g60
(g99
S'\x18\x00\x00\x00'
tRp1283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1284
I0
sg904
g1195
sS'block_loop.thisRepN'
p1285
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1286
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p1287
Nsg70
Vn
sS'block_loop.thisTrialN'
p1288
I0
sg39
F3.5832676180975795
sg34
g753
(S"\x07\xdf\x07\r\n+\r\x00'\x10"
tRp1289
sa(dp1290
S'trial_loop.thisTrialN'
p1291
I25
sg895
g896
sS'block_loop.thisIndex'
p1292
g889
sg38
S'right'
p1293
sg59
g63
sS'trial_loop.thisN'
p1294
I25
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1295
g60
(g99
S'\x19\x00\x00\x00'
tRp1296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1297
I0
sg904
g905
sS'block_loop.thisRepN'
p1298
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1299
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1300
Nsg70
Vn
sS'block_loop.thisTrialN'
p1301
I0
sg39
F1.2999970349742398
sg34
g753
(S'\x07\xdf\x07\r\n+\x15\ty\xc8'
tRp1302
sa(dp1303
S'trial_loop.thisTrialN'
p1304
I26
sg895
S'42-mrkipling_lemon_slices.png'
p1305
sS'block_loop.thisIndex'
p1306
g889
sg38
S'right'
p1307
sg59
g63
sS'trial_loop.thisN'
p1308
I26
sg33
S'42-mrkipling_lemon_slices.png'
p1309
sg64
g65
sS'trial_loop.thisIndex'
p1310
g60
(g99
S'\x1a\x00\x00\x00'
tRp1311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1312
I0
sg904
S'16-skips_prawn.png'
p1313
sS'block_loop.thisRepN'
p1314
I0
sg907
g1309
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1315
I0
sg910
S'16-skips_prawn.png'
p1316
sg55
g11
sS'block_loop.thisTrial'
p1317
Nsg70
Vn
sS'block_loop.thisTrialN'
p1318
I0
sg39
F1.8164663278557782
sg34
g753
(S'\x07\xdf\x07\r\n+\x1b\x0e\x92x'
tRp1319
sa(dp1320
S'trial_loop.thisTrialN'
p1321
I27
sg895
S'4-corn.png'
p1322
sS'block_loop.thisIndex'
p1323
g889
sg38
S'right'
p1324
sg59
g63
sS'trial_loop.thisN'
p1325
I27
sg33
S'10-bounty_redo.png'
p1326
sg64
g65
sS'trial_loop.thisIndex'
p1327
g60
(g99
S'\x1b\x00\x00\x00'
tRp1328
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1329
I0
sg904
S'10-bounty_redo.png'
p1330
sS'block_loop.thisRepN'
p1331
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1332
I0
sg910
S'4-corn.png'
p1333
sg55
g11
sS'block_loop.thisTrial'
p1334
Nsg70
Vn
sS'block_loop.thisTrialN'
p1335
I0
sg39
F1.3332438123616157
sg34
g753
(S'\x07\xdf\x07\r\n+"\x0c@\xb8'
tRp1336
sa(dp1337
S'trial_loop.thisTrialN'
p1338
I28
sg895
g896
sS'block_loop.thisIndex'
p1339
g889
sg38
S'right'
p1340
sg59
g63
sS'trial_loop.thisN'
p1341
I28
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p1342
g60
(g99
S'\x1c\x00\x00\x00'
tRp1343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1344
I0
sg904
g905
sS'block_loop.thisRepN'
p1345
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1346
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1347
Nsg70
Vn
sS'block_loop.thisTrialN'
p1348
I0
sg39
F1.0167777696051417
sg34
g753
(S'\x07\xdf\x07\r\n+)\x02\x90@'
tRp1349
sa(dp1350
S'trial_loop.thisTrialN'
p1351
I29
sg895
S'35-raisins.png'
p1352
sS'block_loop.thisIndex'
p1353
g889
sg38
S'left'
p1354
sg59
g63
sS'trial_loop.thisN'
p1355
I29
sg33
g1253
sg64
g65
sS'trial_loop.thisIndex'
p1356
g60
(g99
S'\x1d\x00\x00\x00'
tRp1357
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1358
I0
sg904
S'49-yorkie.png'
p1359
sS'block_loop.thisRepN'
p1360
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1361
I0
sg910
g1260
sg55
g11
sS'block_loop.thisTrial'
p1362
Nsg70
Vn
sS'block_loop.thisTrialN'
p1363
I0
sg39
F2.2832492007260043
sg34
g753
(S'\x07\xdf\x07\r\n+/\x03_H'
tRp1364
sa(dp1365
S'trial_loop.thisTrialN'
p1366
I30
sg895
g916
sS'block_loop.thisIndex'
p1367
g889
sg38
S'right'
p1368
sg59
g63
sS'trial_loop.thisN'
p1369
I30
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p1370
g60
(g99
S'\x1e\x00\x00\x00'
tRp1371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1372
I0
sg904
g924
sS'block_loop.thisRepN'
p1373
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1374
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p1375
Nsg70
Vn
sS'block_loop.thisTrialN'
p1376
I0
sg39
F1.0499541276294622
sg34
g753
(S'\x07\xdf\x07\r\n+6\x081\xa8'
tRp1377
sa(dp1378
S'trial_loop.thisTrialN'
p1379
I31
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1380
sS'block_loop.thisIndex'
p1381
g889
sg38
S'left'
p1382
sg59
g63
sS'trial_loop.thisN'
p1383
I31
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1384
g60
(g99
S'\x1f\x00\x00\x00'
tRp1385
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1386
I0
sg904
S'36-fig_rolls.png'
p1387
sS'block_loop.thisRepN'
p1388
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1389
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1390
Nsg70
Vn
sS'block_loop.thisTrialN'
p1391
I0
sg39
F0.88330428178278453
sg34
g753
(S'\x07\xdf\x07\r\n,\x00\ty\xc8'
tRp1392
sa(dp1393
S'trial_loop.thisTrialN'
p1394
I32
sg895
S'30-spaghetti_hoops.png'
p1395
sS'block_loop.thisIndex'
p1396
g889
sg38
S'right'
p1397
sg59
g63
sS'trial_loop.thisN'
p1398
I32
sg33
S'19-caramello_redo.png'
p1399
sg64
g65
sS'trial_loop.thisIndex'
p1400
g60
(g99
S' \x00\x00\x00'
tRp1401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1402
I0
sg904
S'19-caramello_redo.png'
p1403
sS'block_loop.thisRepN'
p1404
I0
sg907
g1399
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1405
I0
sg910
S'30-spaghetti_hoops.png'
p1406
sg55
g11
sS'block_loop.thisTrial'
p1407
Nsg70
Vn
sS'block_loop.thisTrialN'
p1408
I0
sg39
F1.316553853136611
sg34
g753
(S'\x07\xdf\x07\r\n,\x06\x08"\x08'
tRp1409
sa(dp1410
S'trial_loop.thisTrialN'
p1411
I33
sg895
S'18-mms.png'
p1412
sS'block_loop.thisIndex'
p1413
g889
sg38
S'left'
p1414
sg59
g63
sS'trial_loop.thisN'
p1415
I33
sg33
g1221
sg64
g65
sS'trial_loop.thisIndex'
p1416
g60
(g99
S'!\x00\x00\x00'
tRp1417
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1418
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1419
sS'block_loop.thisRepN'
p1420
I0
sg907
g1221
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1421
I0
sg910
g1228
sg55
g11
sS'block_loop.thisTrial'
p1422
Nsg70
Vn
sS'block_loop.thisTrialN'
p1423
I0
sg39
F1.1003088188417678
sg34
g753
(S'\x07\xdf\x07\r\n,\x0c\ry8'
tRp1424
sa(dp1425
S'trial_loop.thisTrialN'
p1426
I34
sg895
S'31-hobnobs.png'
p1427
sS'block_loop.thisIndex'
p1428
g889
sg38
S'right'
p1429
sg59
g63
sS'trial_loop.thisN'
p1430
I34
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p1431
g60
(g99
S'"\x00\x00\x00'
tRp1432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1433
I0
sg904
S'25-kitkat.png'
p1434
sS'block_loop.thisRepN'
p1435
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1436
I0
sg910
g1059
sg55
g11
sS'block_loop.thisTrial'
p1437
Nsg70
Vn
sS'block_loop.thisTrialN'
p1438
I0
sg39
F1.2165375454947025
sg34
g753
(S'\x07\xdf\x07\r\n,\x13\x006\xb0'
tRp1439
sa(dp1440
S'trial_loop.thisTrialN'
p1441
I35
sg895
g1082
sS'block_loop.thisIndex'
p1442
g889
sg38
S'left'
p1443
sg59
g63
sS'trial_loop.thisN'
p1444
I35
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p1445
g60
(g99
S'#\x00\x00\x00'
tRp1446
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1447
I0
sg904
g1089
sS'block_loop.thisRepN'
p1448
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1449
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p1450
Nsg70
Vn
sS'block_loop.thisTrialN'
p1451
I0
sg39
F1.2333193064805528
sg34
g753
(S'\x07\xdf\x07\r\n,\x19\x04\x1a\xc8'
tRp1452
sa(dp1453
S'trial_loop.thisTrialN'
p1454
I36
sg895
g1114
sS'block_loop.thisIndex'
p1455
g889
sg38
S'left'
p1456
sg59
g63
sS'trial_loop.thisN'
p1457
I36
sg33
g1118
sg64
g65
sS'trial_loop.thisIndex'
p1458
g60
(g99
S'$\x00\x00\x00'
tRp1459
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1460
I0
sg904
g1122
sS'block_loop.thisRepN'
p1461
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1462
I0
sg910
g1125
sg55
g11
sS'block_loop.thisTrial'
p1463
Nsg70
Vn
sS'block_loop.thisTrialN'
p1464
I0
sg39
F1.3663802565774859
sg34
g753
(S'\x07\xdf\x07\r\n,\x1f\x08=`'
tRp1465
sa(dp1466
S'trial_loop.thisTrialN'
p1467
I37
sg895
g1249
sS'block_loop.thisIndex'
p1468
g889
sg38
S'left'
p1469
sg59
g63
sS'trial_loop.thisN'
p1470
I37
sg33
g1260
sg64
g65
sS'trial_loop.thisIndex'
p1471
g60
(g99
S'%\x00\x00\x00'
tRp1472
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1473
I0
sg904
g1257
sS'block_loop.thisRepN'
p1474
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1475
I0
sg910
g1260
sg55
g11
sS'block_loop.thisTrial'
p1476
Nsg70
Vn
sS'block_loop.thisTrialN'
p1477
I0
sg39
F1.466563346921248
sg34
g753
(S'\x07\xdf\x07\r\n,%\x0eH@'
tRp1478
sa(dp1479
S'trial_loop.thisTrialN'
p1480
I38
sg895
S'27-hartleys_raspberries_jelly.png'
p1481
sS'block_loop.thisIndex'
p1482
g889
sg38
S'right'
p1483
sg59
g63
sS'trial_loop.thisN'
p1484
I38
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p1485
g60
(g99
S'&\x00\x00\x00'
tRp1486
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1487
I0
sg904
S'51-mars.png'
p1488
sS'block_loop.thisRepN'
p1489
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1490
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p1491
Nsg70
Vn
sS'block_loop.thisTrialN'
p1492
I0
sg39
F2.1501172610687718
sg34
g753
(S'\x07\xdf\x07\r\n,,\x06\xbe\x90'
tRp1493
sa(dp1494
S'trial_loop.thisTrialN'
p1495
I39
sg895
g1380
sS'block_loop.thisIndex'
p1496
g889
sg38
S'left'
p1497
sg59
g63
sS'trial_loop.thisN'
p1498
I39
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p1499
g60
(g99
S"'\x00\x00\x00"
tRp1500
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1501
I0
sg904
g1387
sS'block_loop.thisRepN'
p1502
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1503
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1504
Nsg70
Vn
sS'block_loop.thisTrialN'
p1505
I0
sg39
F1.0998991321025642
sg34
g753
(S'\x07\xdf\x07\r\n,3\tn\x10'
tRp1506
sa(dp1507
S'trial_loop.thisTrialN'
p1508
I40
sg895
g1097
sS'block_loop.thisIndex'
p1509
g889
sg38
S'left'
p1510
sg59
g63
sS'trial_loop.thisN'
p1511
I40
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p1512
g60
(g99
S'(\x00\x00\x00'
tRp1513
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1514
I0
sg904
g1105
sS'block_loop.thisRepN'
p1515
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1516
I0
sg910
g1108
sg55
g11
sS'block_loop.thisTrial'
p1517
Nsg70
Vn
sS'block_loop.thisTrialN'
p1518
I0
sg39
F0.86664368771653244
sg34
g753
(S'\x07\xdf\x07\r\n,9\x0bi\xe0'
tRp1519
sa(dp1520
S'trial_loop.thisTrialN'
p1521
I41
sg895
g1048
sS'block_loop.thisIndex'
p1522
g889
sg38
S'left'
p1523
sg59
g63
sS'trial_loop.thisN'
p1524
I41
sg33
g1059
sg64
g65
sS'trial_loop.thisIndex'
p1525
g60
(g99
S')\x00\x00\x00'
tRp1526
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1527
I0
sg904
g1056
sS'block_loop.thisRepN'
p1528
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1529
I0
sg910
g1059
sg55
g11
sS'block_loop.thisTrial'
p1530
Nsg70
Vn
sS'block_loop.thisTrialN'
p1531
I0
sg39
F1.0164584591329913
sg34
g753
(S'\x07\xdf\x07\r\n-\x03\n\x16\x08'
tRp1532
sa(dp1533
S'trial_loop.thisTrialN'
p1534
I42
sg895
S'20-fruit_pastilles.png'
p1535
sS'block_loop.thisIndex'
p1536
g889
sg38
S'left'
p1537
sg59
g63
sS'trial_loop.thisN'
p1538
I42
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p1539
g60
(g99
S'*\x00\x00\x00'
tRp1540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1541
I0
sg904
S'2-steamed_puddings.png'
p1542
sS'block_loop.thisRepN'
p1543
I0
sg907
g1035
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1544
I0
sg910
g1042
sg55
g11
sS'block_loop.thisTrial'
p1545
Nsg70
Vn
sS'block_loop.thisTrialN'
p1546
I0
sg39
F1.0832185811323143
sg34
g753
(S'\x07\xdf\x07\r\n-\t\n\xa6\x90'
tRp1547
sa(dp1548
S'trial_loop.thisTrialN'
p1549
I43
sg895
g1427
sS'block_loop.thisIndex'
p1550
g889
sg38
S'right'
p1551
sg59
g63
sS'trial_loop.thisN'
p1552
I43
sg33
g1059
sg64
g65
sS'trial_loop.thisIndex'
p1553
g60
(g99
S'+\x00\x00\x00'
tRp1554
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1555
I0
sg904
g1434
sS'block_loop.thisRepN'
p1556
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1557
I0
sg910
g1059
sg55
g11
sS'block_loop.thisTrial'
p1558
Nsg70
Vn
sS'block_loop.thisTrialN'
p1559
I0
sg39
F0.88329230763929445
sg34
g753
(S'\x07\xdf\x07\r\n-\x0f\x0cg\xc8'
tRp1560
sa(dp1561
S'trial_loop.thisTrialN'
p1562
I44
sg895
g1065
sS'block_loop.thisIndex'
p1563
g889
sg38
S'right'
p1564
sg59
g63
sS'trial_loop.thisN'
p1565
I44
sg33
g1075
sg64
g65
sS'trial_loop.thisIndex'
p1566
g60
(g99
S',\x00\x00\x00'
tRp1567
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1568
I0
sg904
g1073
sS'block_loop.thisRepN'
p1569
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1570
I0
sg910
g1069
sg55
g11
sS'block_loop.thisTrial'
p1571
Nsg70
Vn
sS'block_loop.thisTrialN'
p1572
I0
sg39
F1.6663111486682283
sg34
g753
(S'\x07\xdf\x07\r\n-\x15\x0bN\x88'
tRp1573
sa(dp1574
S'trial_loop.thisTrialN'
p1575
I45
sg895
S'19-caramello_redo.png'
p1576
sS'block_loop.thisIndex'
p1577
g889
sg38
S'left'
p1578
sg59
g63
sS'trial_loop.thisN'
p1579
I45
sg33
g1399
sg64
g65
sS'trial_loop.thisIndex'
p1580
g60
(g99
S'-\x00\x00\x00'
tRp1581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1582
I0
sg904
S'30-spaghetti_hoops.png'
p1583
sS'block_loop.thisRepN'
p1584
I0
sg907
g1399
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1585
I0
sg910
g1406
sg55
g11
sS'block_loop.thisTrial'
p1586
Nsg70
Vn
sS'block_loop.thisTrialN'
p1587
I0
sg39
F1.1998969083333577
sg34
g753
(S'\x07\xdf\x07\r\n-\x1c\x06\x9fP'
tRp1588
sa(dp1589
S'trial_loop.thisTrialN'
p1590
I46
sg895
S'5-pineapple.png'
p1591
sS'block_loop.thisIndex'
p1592
g889
sg38
S'left'
p1593
sg59
g63
sS'trial_loop.thisN'
p1594
I46
sg33
S'40-sardines.png'
p1595
sg64
g65
sS'trial_loop.thisIndex'
p1596
g60
(g99
S'.\x00\x00\x00'
tRp1597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1598
I0
sg904
S'40-sardines.png'
p1599
sS'block_loop.thisRepN'
p1600
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1601
I0
sg910
S'5-pineapple.png'
p1602
sg55
g11
sS'block_loop.thisTrial'
p1603
Nsg70
Vn
sS'block_loop.thisTrialN'
p1604
I0
sg39
F1.3831953741032521
sg34
g753
(S'\x07\xdf\x07\r\n-"\nH\xd0'
tRp1605
sa(dp1606
S'trial_loop.thisTrialN'
p1607
I47
sg895
g1234
sS'block_loop.thisIndex'
p1608
g889
sg38
S'left'
p1609
sg59
g63
sS'trial_loop.thisN'
p1610
I47
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p1611
g60
(g99
S'/\x00\x00\x00'
tRp1612
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1613
I0
sg904
g1241
sS'block_loop.thisRepN'
p1614
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1615
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p1616
Nsg70
Vn
sS'block_loop.thisTrialN'
p1617
I0
sg39
F2.7665809089971845
sg34
g753
(S'\x07\xdf\x07\r\n-)\x01L\x08'
tRp1618
sa(dp1619
S'trial_loop.thisTrialN'
p1620
I48
sg895
S'16-skips_prawn.png'
p1621
sS'block_loop.thisIndex'
p1622
g889
sg38
S'left'
p1623
sg59
g63
sS'trial_loop.thisN'
p1624
I48
sg33
g1309
sg64
g65
sS'trial_loop.thisIndex'
p1625
g60
(g99
S'0\x00\x00\x00'
tRp1626
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1627
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1628
sS'block_loop.thisRepN'
p1629
I0
sg907
g1309
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1630
I0
sg910
g1316
sg55
g11
sS'block_loop.thisTrial'
p1631
Nsg70
Vn
sS'block_loop.thisTrialN'
p1632
I0
sg39
F1.6167430445912032
sg34
g753
(S'\x07\xdf\x07\r\n-0\r\x81\x08'
tRp1633
sa(dp1634
S'trial_loop.thisTrialN'
p1635
I49
sg895
g997
sS'block_loop.thisIndex'
p1636
g889
sg38
S'left'
p1637
sg59
g63
sS'trial_loop.thisN'
p1638
I49
sg33
g1007
sg64
g65
sS'trial_loop.thisIndex'
p1639
g60
(g99
S'1\x00\x00\x00'
tRp1640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1641
I0
sg904
g1005
sS'block_loop.thisRepN'
p1642
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1643
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p1644
Nsg70
Vn
sS'block_loop.thisTrialN'
p1645
I0
sg39
F1.3665002831030506
sg34
g753
(S'\x07\xdf\x07\r\n-7\x08\x1a8'
tRp1646
sa(dp1647
S'trial_loop.thisTrialN'
p1648
I50
sg895
g1395
sS'block_loop.thisIndex'
p1649
g889
sg38
S'right'
p1650
sg59
g63
sS'trial_loop.thisN'
p1651
I50
sg33
g1399
sg64
g65
sS'trial_loop.thisIndex'
p1652
g60
(g99
S'2\x00\x00\x00'
tRp1653
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1654
I0
sg904
g1403
sS'block_loop.thisRepN'
p1655
I0
sg907
g1399
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1656
I0
sg910
g1406
sg55
g11
sS'block_loop.thisTrial'
p1657
Nsg70
Vn
sS'block_loop.thisTrialN'
p1658
I0
sg39
F0.96652599899971392
sg34
g753
(S'\x07\xdf\x07\r\n.\x01\x0e_\xb0'
tRp1659
sa(dp1660
S'trial_loop.thisTrialN'
p1661
I51
sg895
g1427
sS'block_loop.thisIndex'
p1662
g889
sg38
S'left'
p1663
sg59
g63
sS'trial_loop.thisN'
p1664
I51
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p1665
g60
(g99
S'3\x00\x00\x00'
tRp1666
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1667
I0
sg904
g1434
sS'block_loop.thisRepN'
p1668
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1669
I0
sg910
g1059
sg55
g11
sS'block_loop.thisTrial'
p1670
Nsg70
Vn
sS'block_loop.thisTrialN'
p1671
I0
sg39
F1.8498838793257164
sg34
g753
(S'\x07\xdf\x07\r\n.\x07\x0e<\x88'
tRp1672
sa(dp1673
S'trial_loop.thisTrialN'
p1674
I52
sg895
g1187
sS'block_loop.thisIndex'
p1675
g889
sg38
S'right'
p1676
sg59
g63
sS'trial_loop.thisN'
p1677
I52
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p1678
g60
(g99
S'4\x00\x00\x00'
tRp1679
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1680
I0
sg904
g1195
sS'block_loop.thisRepN'
p1681
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1682
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p1683
Nsg70
Vn
sS'block_loop.thisTrialN'
p1684
I0
sg39
F1.0832881451992762
sg34
g753
(S'\x07\xdf\x07\r\n.\x0e\x0cg\xc8'
tRp1685
sa(dp1686
S'trial_loop.thisTrialN'
p1687
I53
sg895
g1097
sS'block_loop.thisIndex'
p1688
g889
sg38
S'left'
p1689
sg59
g63
sS'trial_loop.thisN'
p1690
I53
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p1691
g60
(g99
S'5\x00\x00\x00'
tRp1692
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1693
I0
sg904
g1105
sS'block_loop.thisRepN'
p1694
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1695
I0
sg910
g1108
sg55
g11
sS'block_loop.thisTrial'
p1696
Nsg70
Vn
sS'block_loop.thisTrialN'
p1697
I0
sg39
F0.68366111123441442
sg34
g753
(S'\x07\xdf\x07\r\n.\x14\x0ec\x98'
tRp1698
sa(dp1699
S'trial_loop.thisTrialN'
p1700
I54
sg895
S'46-pistachios.png'
p1701
sS'block_loop.thisIndex'
p1702
g889
sg38
S'left'
p1703
sg59
g63
sS'trial_loop.thisN'
p1704
I54
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1705
g60
(g99
S'6\x00\x00\x00'
tRp1706
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1707
I0
sg904
S'29-beans.png'
p1708
sS'block_loop.thisRepN'
p1709
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1710
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p1711
Nsg70
Vn
sS'block_loop.thisTrialN'
p1712
I0
sg39
F1.0333414301344419
sg34
g753
(S'\x07\xdf\x07\r\n.\x1a\t\xf6\xc8'
tRp1713
sa(dp1714
S'trial_loop.thisTrialN'
p1715
I55
sg895
g1412
sS'block_loop.thisIndex'
p1716
g889
sg38
S'left'
p1717
sg59
g63
sS'trial_loop.thisN'
p1718
I55
sg33
g1221
sg64
g65
sS'trial_loop.thisIndex'
p1719
g60
(g99
S'7\x00\x00\x00'
tRp1720
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1721
I0
sg904
g1419
sS'block_loop.thisRepN'
p1722
I0
sg907
g1221
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1723
I0
sg910
g1228
sg55
g11
sS'block_loop.thisTrial'
p1724
Nsg70
Vn
sS'block_loop.thisTrialN'
p1725
I0
sg39
F1.5498851337597443
sg34
g753
(S'\x07\xdf\x07\r\n. \x0b\x00h'
tRp1726
sa(dp1727
S'trial_loop.thisTrialN'
p1728
I56
sg895
g1097
sS'block_loop.thisIndex'
p1729
g889
sg38
S'left'
p1730
sg59
g63
sS'trial_loop.thisN'
p1731
I56
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p1732
g60
(g99
S'8\x00\x00\x00'
tRp1733
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1734
I0
sg904
g1105
sS'block_loop.thisRepN'
p1735
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1736
I0
sg910
g1108
sg55
g11
sS'block_loop.thisTrial'
p1737
Nsg70
Vn
sS'block_loop.thisTrialN'
p1738
I0
sg39
F0.74997077738998996
sg34
g753
(S"\x07\xdf\x07\r\n.'\x04\xa7h"
tRp1739
sa(dp1740
S'trial_loop.thisTrialN'
p1741
I57
sg895
g967
sS'block_loop.thisIndex'
p1742
g889
sg38
S'right'
p1743
sg59
g63
sS'trial_loop.thisN'
p1744
I57
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1745
g60
(g99
S'9\x00\x00\x00'
tRp1746
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1747
I0
sg904
g975
sS'block_loop.thisRepN'
p1748
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1749
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p1750
Nsg70
Vn
sS'block_loop.thisTrialN'
p1751
I0
sg39
F1.0166269524270319
sg34
g753
(S'\x07\xdf\x07\r\n.-\x01g`'
tRp1752
sa(dp1753
S'trial_loop.thisTrialN'
p1754
I58
sg895
g1065
sS'block_loop.thisIndex'
p1755
g889
sg38
S'left'
p1756
sg59
g63
sS'trial_loop.thisN'
p1757
I58
sg33
g1075
sg64
g65
sS'trial_loop.thisIndex'
p1758
g60
(g99
S':\x00\x00\x00'
tRp1759
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1760
I0
sg904
g1073
sS'block_loop.thisRepN'
p1761
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1762
I0
sg910
g1069
sg55
g11
sS'block_loop.thisTrial'
p1763
Nsg70
Vn
sS'block_loop.thisTrialN'
p1764
I0
sg39
F1.2497432686786851
sg34
g753
(S'\x07\xdf\x07\r\n.3\x01\xf7\xe8'
tRp1765
sa(dp1766
S'trial_loop.thisTrialN'
p1767
I59
sg895
S'26-walkers_smoky_bacon.png'
p1768
sS'block_loop.thisIndex'
p1769
g889
sg38
S'left'
p1770
sg59
g63
sS'trial_loop.thisN'
p1771
I59
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p1772
g60
(g99
S';\x00\x00\x00'
tRp1773
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1774
I0
sg904
S'44-crunch.png'
p1775
sS'block_loop.thisRepN'
p1776
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1777
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p1778
Nsg70
Vn
sS'block_loop.thisTrialN'
p1779
I0
sg39
F1.5333260348083968
sg34
g753
(S'\x07\xdf\x07\r\n.9\x06Y\x00'
tRp1780
sa(dp1781
S'trial_loop.thisTrialN'
p1782
I60
sg895
g1217
sS'block_loop.thisIndex'
p1783
g889
sg38
S'right'
p1784
sg59
g63
sS'trial_loop.thisN'
p1785
I60
sg33
g1221
sg64
g65
sS'trial_loop.thisIndex'
p1786
g60
(g99
S'<\x00\x00\x00'
tRp1787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1788
I0
sg904
g1225
sS'block_loop.thisRepN'
p1789
I0
sg907
g1221
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1790
I0
sg910
g1228
sg55
g11
sS'block_loop.thisTrial'
p1791
Nsg70
Vn
sS'block_loop.thisTrialN'
p1792
I0
sg39
F0.86654646908209543
sg34
g753
(S'\x07\xdf\x07\r\n/\x03\x0f\x03\xc0'
tRp1793
sa(dp1794
S'trial_loop.thisTrialN'
p1795
I61
sg895
S'1-treacle_cookies.png'
p1796
sS'block_loop.thisIndex'
p1797
g889
sg38
S'left'
p1798
sg59
g63
sS'trial_loop.thisN'
p1799
I61
sg33
S'1-treacle_cookies.png'
p1800
sg64
g65
sS'trial_loop.thisIndex'
p1801
g60
(g99
S'=\x00\x00\x00'
tRp1802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1803
I0
sg904
S'21-nakd_banana_crunch.png'
p1804
sS'block_loop.thisRepN'
p1805
I0
sg907
g1800
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1806
I0
sg910
S'21-nakd_banana_crunch.png'
p1807
sg55
g11
sS'block_loop.thisTrial'
p1808
Nsg70
Vn
sS'block_loop.thisTrialN'
p1809
I0
sg39
F2.6996537191971584
sg34
g753
(S'\x07\xdf\x07\r\n/\t\rqh'
tRp1810
sa(dp1811
S'trial_loop.thisTrialN'
p1812
I62
sg895
g1322
sS'block_loop.thisIndex'
p1813
g889
sg38
S'right'
p1814
sg59
g63
sS'trial_loop.thisN'
p1815
I62
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p1816
g60
(g99
S'>\x00\x00\x00'
tRp1817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1818
I0
sg904
g1330
sS'block_loop.thisRepN'
p1819
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1820
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p1821
Nsg70
Vn
sS'block_loop.thisTrialN'
p1822
I0
sg39
F1.2332756863893337
sg34
g753
(S'\x07\xdf\x07\r\n/\x11\tn\x10'
tRp1823
sa(dp1824
S'trial_loop.thisTrialN'
p1825
I63
sg895
g1576
sS'block_loop.thisIndex'
p1826
g889
sg38
S'left'
p1827
sg59
g63
sS'trial_loop.thisN'
p1828
I63
sg33
g1399
sg64
g65
sS'trial_loop.thisIndex'
p1829
g60
(g99
S'?\x00\x00\x00'
tRp1830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1831
I0
sg904
g1583
sS'block_loop.thisRepN'
p1832
I0
sg907
g1399
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1833
I0
sg910
g1406
sg55
g11
sS'block_loop.thisTrial'
p1834
Nsg70
Vn
sS'block_loop.thisTrialN'
p1835
I0
sg39
F0.81667986673346604
sg34
g753
(S'\x07\xdf\x07\r\n/\x17\r\x90\xa8'
tRp1836
sa(dp1837
S'trial_loop.thisTrialN'
p1838
I64
sg895
S'13-mccoys_steak_crisps.png'
p1839
sS'block_loop.thisIndex'
p1840
g889
sg38
S'right'
p1841
sg59
g63
sS'trial_loop.thisN'
p1842
I64
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p1843
g60
(g99
S'@\x00\x00\x00'
tRp1844
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1845
I0
sg904
S'3-ellas_strawberries_apples.png'
p1846
sS'block_loop.thisRepN'
p1847
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1848
I0
sg910
g1025
sg55
g11
sS'block_loop.thisTrial'
p1849
Nsg70
Vn
sS'block_loop.thisTrialN'
p1850
I0
sg39
F1.2499186043396548
sg34
g753
(S'\x07\xdf\x07\r\n/\x1d\x0bF\xb8'
tRp1851
sa(dp1852
S'trial_loop.thisTrialN'
p1853
I65
sg895
g1217
sS'block_loop.thisIndex'
p1854
g889
sg38
S'right'
p1855
sg59
g63
sS'trial_loop.thisN'
p1856
I65
sg33
g1221
sg64
g65
sS'trial_loop.thisIndex'
p1857
g60
(g99
S'A\x00\x00\x00'
tRp1858
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1859
I0
sg904
g1225
sS'block_loop.thisRepN'
p1860
I0
sg907
g1221
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1861
I0
sg910
g1228
sg55
g11
sS'block_loop.thisTrial'
p1862
Nsg70
Vn
sS'block_loop.thisTrialN'
p1863
I0
sg39
F0.83321843858311695
sg34
g753
(S'\x07\xdf\x07\r\n/$\x00e\x90'
tRp1864
sa(dp1865
S'trial_loop.thisTrialN'
p1866
I66
sg895
g1048
sS'block_loop.thisIndex'
p1867
g889
sg38
S'left'
p1868
sg59
g63
sS'trial_loop.thisN'
p1869
I66
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p1870
g60
(g99
S'B\x00\x00\x00'
tRp1871
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1872
I0
sg904
g1056
sS'block_loop.thisRepN'
p1873
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1874
I0
sg910
g1059
sg55
g11
sS'block_loop.thisTrial'
p1875
Nsg70
Vn
sS'block_loop.thisTrialN'
p1876
I0
sg39
F1.4833137470573092
sg34
g753
(S'\x07\xdf\x07\r\n/)\r\x9c`'
tRp1877
sa(dp1878
S'trial_loop.thisTrialN'
p1879
I67
sg895
g1412
sS'block_loop.thisIndex'
p1880
g889
sg38
S'left'
p1881
sg59
g63
sS'trial_loop.thisN'
p1882
I67
sg33
g1228
sg64
g65
sS'trial_loop.thisIndex'
p1883
g60
(g99
S'C\x00\x00\x00'
tRp1884
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1885
I0
sg904
g1419
sS'block_loop.thisRepN'
p1886
I0
sg907
g1221
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1887
I0
sg910
g1228
sg55
g11
sS'block_loop.thisTrial'
p1888
Nsg70
Vn
sS'block_loop.thisTrialN'
p1889
I0
sg39
F0.88297698854876217
sg34
g753
(S'\x07\xdf\x07\r\n/0\x06\x0e\xc8'
tRp1890
sa(dp1891
S'trial_loop.thisTrialN'
p1892
I68
sg895
g1380
sS'block_loop.thisIndex'
p1893
g889
sg38
S'left'
p1894
sg59
g63
sS'trial_loop.thisN'
p1895
I68
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p1896
g60
(g99
S'D\x00\x00\x00'
tRp1897
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1898
I0
sg904
g1387
sS'block_loop.thisRepN'
p1899
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1900
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1901
Nsg70
Vn
sS'block_loop.thisTrialN'
p1902
I0
sg39
F1.5166306587088911
sg34
g753
(S'\x07\xdf\x07\r\n/6\x04\xf5\x88'
tRp1903
sa(dp1904
S'trial_loop.thisTrialN'
p1905
I69
sg895
S'8-liquorice_catherine_wheels.png'
p1906
sS'block_loop.thisIndex'
p1907
g889
sg38
S'right'
p1908
sg59
g63
sS'trial_loop.thisN'
p1909
I69
sg33
g1118
sg64
g65
sS'trial_loop.thisIndex'
p1910
g60
(g99
S'E\x00\x00\x00'
tRp1911
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1912
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1913
sS'block_loop.thisRepN'
p1914
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1915
I0
sg910
g1125
sg55
g11
sS'block_loop.thisTrial'
p1916
Nsg70
Vn
sS'block_loop.thisTrialN'
p1917
I0
sg39
F1.1166643573674264
sg34
g753
(S'\x07\xdf\x07\r\n0\x00\r#H'
tRp1918
sa(dp1919
S'trial_loop.thisTrialN'
p1920
I70
sg895
g1131
sS'block_loop.thisIndex'
p1921
g889
sg38
S'right'
p1922
sg59
g63
sS'trial_loop.thisN'
p1923
I70
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p1924
g60
(g99
S'F\x00\x00\x00'
tRp1925
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1926
I0
sg904
g1138
sS'block_loop.thisRepN'
p1927
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1928
I0
sg910
g1108
sg55
g11
sS'block_loop.thisTrial'
p1929
Nsg70
Vn
sS'block_loop.thisTrialN'
p1930
I0
sg39
F1.0832855793119052
sg34
g753
(S'\x07\xdf\x07\r\n0\x07\x00]\xc0'
tRp1931
sa(dp1932
S'trial_loop.thisTrialN'
p1933
I71
sg895
g1621
sS'block_loop.thisIndex'
p1934
g889
sg38
S'right'
p1935
sg59
g63
sS'trial_loop.thisN'
p1936
I71
sg33
g1309
sg64
g65
sS'trial_loop.thisIndex'
p1937
g60
(g99
S'G\x00\x00\x00'
tRp1938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1939
I0
sg904
g1628
sS'block_loop.thisRepN'
p1940
I0
sg907
g1309
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1941
I0
sg910
g1316
sg55
g11
sS'block_loop.thisTrial'
p1942
Nsg70
Vn
sS'block_loop.thisTrialN'
p1943
I0
sg39
F1.3663802565774859
sg34
g753
(S'\x07\xdf\x07\r\n0\r\x02\x1e\xf8'
tRp1944
sa(dp1945
S'trial_loop.thisTrialN'
p1946
I72
sg895
g1048
sS'block_loop.thisIndex'
p1947
g889
sg38
S'left'
p1948
sg59
g63
sS'trial_loop.thisN'
p1949
I72
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p1950
g60
(g99
S'H\x00\x00\x00'
tRp1951
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1952
I0
sg904
g1056
sS'block_loop.thisRepN'
p1953
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1954
I0
sg910
g1059
sg55
g11
sS'block_loop.thisTrial'
p1955
Nsg70
Vn
sS'block_loop.thisTrialN'
p1956
I0
sg39
F1.349998488977235
sg34
g753
(S'\x07\xdf\x07\r\n0\x13\x08)\xd8'
tRp1957
sa(dp1958
S'trial_loop.thisTrialN'
p1959
I73
sg895
g1097
sS'block_loop.thisIndex'
p1960
g889
sg38
S'left'
p1961
sg59
g63
sS'trial_loop.thisN'
p1962
I73
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p1963
g60
(g99
S'I\x00\x00\x00'
tRp1964
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1965
I0
sg904
g1105
sS'block_loop.thisRepN'
p1966
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1967
I0
sg910
g1108
sg55
g11
sS'block_loop.thisTrial'
p1968
Nsg70
Vn
sS'block_loop.thisTrialN'
p1969
I0
sg39
F0.71696576364547582
sg34
g753
(S'\x07\xdf\x07\r\n0\x19\r\xf68'
tRp1970
sa(dp1971
S'trial_loop.thisTrialN'
p1972
I74
sg895
g1249
sS'block_loop.thisIndex'
p1973
g889
sg38
S'left'
p1974
sg59
g63
sS'trial_loop.thisN'
p1975
I74
sg33
g1253
sg64
g65
sS'trial_loop.thisIndex'
p1976
g60
(g99
S'J\x00\x00\x00'
tRp1977
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1978
I0
sg904
g1257
sS'block_loop.thisRepN'
p1979
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1980
I0
sg910
g1260
sg55
g11
sS'block_loop.thisTrial'
p1981
Nsg70
Vn
sS'block_loop.thisTrialN'
p1982
I0
sg39
F1.4165057284872091
sg34
g753
(S'\x07\xdf\x07\r\n0\x1f\nA\x00'
tRp1983
sa(dp1984
S'trial_loop.thisTrialN'
p1985
I75
sg895
g997
sS'block_loop.thisIndex'
p1986
g889
sg38
S'right'
p1987
sg59
g63
sS'trial_loop.thisN'
p1988
I75
sg33
g1007
sg64
g65
sS'trial_loop.thisIndex'
p1989
g60
(g99
S'K\x00\x00\x00'
tRp1990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1991
I0
sg904
g1005
sS'block_loop.thisRepN'
p1992
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1993
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p1994
Nsg70
Vn
sS'block_loop.thisTrialN'
p1995
I0
sg39
F1.9499392454804365
sg34
g753
(S'\x07\xdf\x07\r\n0&\x01\xbdP'
tRp1996
sa(dp1997
S'trial_loop.thisTrialN'
p1998
I76
sg895
g916
sS'block_loop.thisIndex'
p1999
g889
sg38
S'right'
p2000
sg59
g63
sS'trial_loop.thisN'
p2001
I76
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2002
g60
(g99
S'L\x00\x00\x00'
tRp2003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2004
I0
sg904
g924
sS'block_loop.thisRepN'
p2005
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2006
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p2007
Nsg70
Vn
sS'block_loop.thisTrialN'
p2008
I0
sg39
F1.4666140944782455
sg34
g753
(S'\x07\xdf\x07\r\n0-\x01\x92X'
tRp2009
sa(dp2010
S'trial_loop.thisTrialN'
p2011
I77
sg895
g896
sS'block_loop.thisIndex'
p2012
g889
sg38
S'right'
p2013
sg59
g63
sS'trial_loop.thisN'
p2014
I77
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2015
g60
(g99
S'M\x00\x00\x00'
tRp2016
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2017
I0
sg904
g905
sS'block_loop.thisRepN'
p2018
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2019
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2020
Nsg70
Vn
sS'block_loop.thisTrialN'
p2021
I0
sg39
F0.84987589656384444
sg34
g753
(S'\x07\xdf\x07\r\n03\tG\x00'
tRp2022
sa(dp2023
S'trial_loop.thisTrialN'
p2024
I78
sg895
S'10-bounty_redo.png'
p2025
sS'block_loop.thisIndex'
p2026
g889
sg38
S'left'
p2027
sg59
g63
sS'trial_loop.thisN'
p2028
I78
sg33
g1333
sg64
g65
sS'trial_loop.thisIndex'
p2029
g60
(g99
S'N\x00\x00\x00'
tRp2030
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2031
I0
sg904
S'4-corn.png'
p2032
sS'block_loop.thisRepN'
p2033
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2034
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p2035
Nsg70
Vn
sS'block_loop.thisTrialN'
p2036
I0
sg39
F0.9502645430238772
sg34
g753
(S'\x07\xdf\x07\r\n09\x07z\x10'
tRp2037
sa(dp2038
S'trial_loop.thisTrialN'
p2039
I79
sg895
g1796
sS'block_loop.thisIndex'
p2040
g889
sg38
S'left'
p2041
sg59
g63
sS'trial_loop.thisN'
p2042
I79
sg33
g1800
sg64
g65
sS'trial_loop.thisIndex'
p2043
g60
(g99
S'O\x00\x00\x00'
tRp2044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2045
I0
sg904
g1804
sS'block_loop.thisRepN'
p2046
I0
sg907
g1800
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2047
I0
sg910
g1807
sg55
g11
sS'block_loop.thisTrial'
p2048
Nsg70
Vn
sS'block_loop.thisTrialN'
p2049
I0
sg39
F0.96665856986555809
sg34
g753
(S'\x07\xdf\x07\r\n1\x03\x07\x14\x80'
tRp2050
sa(dp2051
S'trial_loop.thisTrialN'
p2052
I80
sg895
g1701
sS'block_loop.thisIndex'
p2053
g889
sg38
S'left'
p2054
sg59
g63
sS'trial_loop.thisN'
p2055
I80
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2056
g60
(g99
S'P\x00\x00\x00'
tRp2057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2058
I0
sg904
g1708
sS'block_loop.thisRepN'
p2059
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2060
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2061
Nsg70
Vn
sS'block_loop.thisTrialN'
p2062
I0
sg39
F0.78325119641613128
sg34
g753
(S'\x07\xdf\x07\r\n1\t\x07+\xf0'
tRp2063
sa(dp2064
S'trial_loop.thisTrialN'
p2065
I81
sg895
g1131
sS'block_loop.thisIndex'
p2066
g889
sg38
S'right'
p2067
sg59
g63
sS'trial_loop.thisN'
p2068
I81
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p2069
g60
(g99
S'Q\x00\x00\x00'
tRp2070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2071
I0
sg904
g1138
sS'block_loop.thisRepN'
p2072
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2073
I0
sg910
g1108
sg55
g11
sS'block_loop.thisTrial'
p2074
Nsg70
Vn
sS'block_loop.thisTrialN'
p2075
I0
sg39
F0.64997357135644052
sg34
g753
(S'\x07\xdf\x07\r\n1\x0f\x04h\xe8'
tRp2076
sa(dp2077
S'trial_loop.thisTrialN'
p2078
I82
sg895
g1906
sS'block_loop.thisIndex'
p2079
g889
sg38
S'right'
p2080
sg59
g63
sS'trial_loop.thisN'
p2081
I82
sg33
g1118
sg64
g65
sS'trial_loop.thisIndex'
p2082
g60
(g99
S'R\x00\x00\x00'
tRp2083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2084
I0
sg904
g1913
sS'block_loop.thisRepN'
p2085
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2086
I0
sg910
g1125
sg55
g11
sS'block_loop.thisTrial'
p2087
Nsg70
Vn
sS'block_loop.thisTrialN'
p2088
I0
sg39
F0.91666851980744468
sg34
g753
(S'\x07\xdf\x07\r\n1\x14\x0e\xc5@'
tRp2089
sa(dp2090
S'trial_loop.thisTrialN'
p2091
I83
sg895
g1352
sS'block_loop.thisIndex'
p2092
g889
sg38
S'right'
p2093
sg59
g63
sS'trial_loop.thisN'
p2094
I83
sg33
g1253
sg64
g65
sS'trial_loop.thisIndex'
p2095
g60
(g99
S'S\x00\x00\x00'
tRp2096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2097
I0
sg904
g1359
sS'block_loop.thisRepN'
p2098
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2099
I0
sg910
g1260
sg55
g11
sS'block_loop.thisTrial'
p2100
Nsg70
Vn
sS'block_loop.thisTrialN'
p2101
I0
sg39
F0.96661352428100145
sg34
g753
(S'\x07\xdf\x07\r\n1\x1a\r\xe6\x98'
tRp2102
sa(dp2103
S'trial_loop.thisTrialN'
p2104
I84
sg895
g1591
sS'block_loop.thisIndex'
p2105
g889
sg38
S'right'
p2106
sg59
g63
sS'trial_loop.thisN'
p2107
I84
sg33
g1602
sg64
g65
sS'trial_loop.thisIndex'
p2108
g60
(g99
S'T\x00\x00\x00'
tRp2109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2110
I0
sg904
g1599
sS'block_loop.thisRepN'
p2111
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2112
I0
sg910
g1602
sg55
g11
sS'block_loop.thisTrial'
p2113
Nsg70
Vn
sS'block_loop.thisTrialN'
p2114
I0
sg39
F1.5166420626542276
sg34
g753
(S'\x07\xdf\x07\r\n1 \r\xfe\x08'
tRp2115
sa(dp2116
S'trial_loop.thisTrialN'
p2117
I85
sg895
g1395
sS'block_loop.thisIndex'
p2118
g889
sg38
S'right'
p2119
sg59
g63
sS'trial_loop.thisN'
p2120
I85
sg33
g1399
sg64
g65
sS'trial_loop.thisIndex'
p2121
g60
(g99
S'U\x00\x00\x00'
tRp2122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2123
I0
sg904
g1403
sS'block_loop.thisRepN'
p2124
I0
sg907
g1399
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2125
I0
sg910
g1406
sg55
g11
sS'block_loop.thisTrial'
p2126
Nsg70
Vn
sS'block_loop.thisTrialN'
p2127
I0
sg39
F0.83335528592851915
sg34
g753
(S"\x07\xdf\x07\r\n1'\x07(\x08"
tRp2128
sa(dp2129
S'trial_loop.thisTrialN'
p2130
I86
sg895
g1014
sS'block_loop.thisIndex'
p2131
g889
sg38
S'left'
p2132
sg59
g63
sS'trial_loop.thisN'
p2133
I86
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2134
g60
(g99
S'V\x00\x00\x00'
tRp2135
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2136
I0
sg904
g1022
sS'block_loop.thisRepN'
p2137
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2138
I0
sg910
g1025
sg55
g11
sS'block_loop.thisTrial'
p2139
Nsg70
Vn
sS'block_loop.thisTrialN'
p2140
I0
sg39
F0.80002982131736644
sg34
g753
(S'\x07\xdf\x07\r\n1-\x05\x1c\x98'
tRp2141
sa(dp2142
S'trial_loop.thisTrialN'
p2143
I87
sg895
g1768
sS'block_loop.thisIndex'
p2144
g889
sg38
S'right'
p2145
sg59
g63
sS'trial_loop.thisN'
p2146
I87
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2147
g60
(g99
S'W\x00\x00\x00'
tRp2148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2149
I0
sg904
g1775
sS'block_loop.thisRepN'
p2150
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2151
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p2152
Nsg70
Vn
sS'block_loop.thisTrialN'
p2153
I0
sg39
F1.8666285774893367
sg34
g753
(S'\x07\xdf\x07\r\n13\x02\x94('
tRp2154
sa(dp2155
S'trial_loop.thisTrialN'
p2156
I88
sg895
g933
sS'block_loop.thisIndex'
p2157
g889
sg38
S'right'
p2158
sg59
g63
sS'trial_loop.thisN'
p2159
I88
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2160
g60
(g99
S'X\x00\x00\x00'
tRp2161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2162
I0
sg904
g941
sS'block_loop.thisRepN'
p2163
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2164
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2165
Nsg70
Vn
sS'block_loop.thisTrialN'
p2166
I0
sg39
F2.9832071201672079
sg34
g753
(S'\x07\xdf\x07\r\n1:\x00\xfd\xe8'
tRp2167
sa(dp2168
S'trial_loop.thisTrialN'
p2169
I89
sg895
g1217
sS'block_loop.thisIndex'
p2170
g889
sg38
S'right'
p2171
sg59
g63
sS'trial_loop.thisN'
p2172
I89
sg33
g1221
sg64
g65
sS'trial_loop.thisIndex'
p2173
g60
(g99
S'Y\x00\x00\x00'
tRp2174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2175
I0
sg904
g1225
sS'block_loop.thisRepN'
p2176
I0
sg907
g1221
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2177
I0
sg910
g1228
sg55
g11
sS'block_loop.thisTrial'
p2178
Nsg70
Vn
sS'block_loop.thisTrialN'
p2179
I0
sg39
F1.1169106825886956
sg34
g753
(S'\x07\xdf\x07\r\n2\x06\x01D8'
tRp2180
sa(dp2181
S'trial_loop.thisTrialN'
p2182
I90
sg895
g1796
sS'block_loop.thisIndex'
p2183
g889
sg38
S'left'
p2184
sg59
g63
sS'trial_loop.thisN'
p2185
I90
sg33
g1800
sg64
g65
sS'trial_loop.thisIndex'
p2186
g60
(g99
S'Z\x00\x00\x00'
tRp2187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2188
I0
sg904
g1804
sS'block_loop.thisRepN'
p2189
I0
sg907
g1800
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2190
I0
sg910
g1807
sg55
g11
sS'block_loop.thisTrial'
p2191
Nsg70
Vn
sS'block_loop.thisTrialN'
p2192
I0
sg39
F0.91661406596858797
sg34
g753
(S'\x07\xdf\x07\r\n2\x0c\x03~\x88'
tRp2193
sa(dp2194
S'trial_loop.thisTrialN'
p2195
I91
sg895
g2025
sS'block_loop.thisIndex'
p2196
g889
sg38
S'left'
p2197
sg59
g63
sS'trial_loop.thisN'
p2198
I91
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p2199
g60
(g99
S'[\x00\x00\x00'
tRp2200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2201
I0
sg904
g2032
sS'block_loop.thisRepN'
p2202
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2203
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p2204
Nsg70
Vn
sS'block_loop.thisTrialN'
p2205
I0
sg39
F0.86654105220759448
sg34
g753
(S'\x07\xdf\x07\r\n2\x12\x02\xe2H'
tRp2206
sa(dp2207
S'trial_loop.thisTrialN'
p2208
I92
sg895
g1839
sS'block_loop.thisIndex'
p2209
g889
sg38
S'right'
p2210
sg59
g63
sS'trial_loop.thisN'
p2211
I92
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2212
g60
(g99
S'\\\x00\x00\x00'
tRp2213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2214
I0
sg904
g1846
sS'block_loop.thisRepN'
p2215
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2216
I0
sg910
g1025
sg55
g11
sS'block_loop.thisTrial'
p2217
Nsg70
Vn
sS'block_loop.thisTrialN'
p2218
I0
sg39
F0.88321875219162393
sg34
g753
(S'\x07\xdf\x07\r\n2\x18\x01L\x08'
tRp2219
sa(dp2220
S'trial_loop.thisTrialN'
p2221
I93
sg895
g1217
sS'block_loop.thisIndex'
p2222
g889
sg38
S'right'
p2223
sg59
g63
sS'trial_loop.thisN'
p2224
I93
sg33
g1221
sg64
g65
sS'trial_loop.thisIndex'
p2225
g60
(g99
S']\x00\x00\x00'
tRp2226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2227
I0
sg904
g1225
sS'block_loop.thisRepN'
p2228
I0
sg907
g1221
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2229
I0
sg910
g1228
sg55
g11
sS'block_loop.thisTrial'
p2230
Nsg70
Vn
sS'block_loop.thisTrialN'
p2231
I0
sg39
F0.73314083473496794
sg34
g753
(S'\x07\xdf\x07\r\n2\x1d\x0f:p'
tRp2232
sa(dp2233
S'trial_loop.thisTrialN'
p2234
I94
sg895
g2025
sS'block_loop.thisIndex'
p2235
g889
sg38
S'left'
p2236
sg59
g63
sS'trial_loop.thisN'
p2237
I94
sg33
g1333
sg64
g65
sS'trial_loop.thisIndex'
p2238
g60
(g99
S'^\x00\x00\x00'
tRp2239
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2240
I0
sg904
g2032
sS'block_loop.thisRepN'
p2241
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2242
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p2243
Nsg70
Vn
sS'block_loop.thisTrialN'
p2244
I0
sg39
F0.79996424863111315
sg34
g753
(S'\x07\xdf\x07\r\n2#\x0b\xbf\xd0'
tRp2245
sa(dp2246
S'trial_loop.thisTrialN'
p2247
I95
sg895
g1576
sS'block_loop.thisIndex'
p2248
g889
sg38
S'left'
p2249
sg59
g63
sS'trial_loop.thisN'
p2250
I95
sg33
g1406
sg64
g65
sS'trial_loop.thisIndex'
p2251
g60
(g99
S'_\x00\x00\x00'
tRp2252
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2253
I0
sg904
g1583
sS'block_loop.thisRepN'
p2254
I0
sg907
g1399
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2255
I0
sg910
g1406
sg55
g11
sS'block_loop.thisTrial'
p2256
Nsg70
Vn
sS'block_loop.thisTrialN'
p2257
I0
sg39
F0.6500100639818811
sg34
g753
(S'\x07\xdf\x07\r\n2)\t7`'
tRp2258
sa(dp2259
S'trial_loop.thisTrialN'
p2260
I96
sg895
g1906
sS'block_loop.thisIndex'
p2261
g889
sg38
S'right'
p2262
sg59
g63
sS'trial_loop.thisN'
p2263
I96
sg33
g1118
sg64
g65
sS'trial_loop.thisIndex'
p2264
g60
(g99
S'`\x00\x00\x00'
tRp2265
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2266
I0
sg904
g1913
sS'block_loop.thisRepN'
p2267
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2268
I0
sg910
g1125
sg55
g11
sS'block_loop.thisTrial'
p2269
Nsg70
Vn
sS'block_loop.thisTrialN'
p2270
I0
sg39
F0.89992923851832529
sg34
g753
(S'\x07\xdf\x07\r\n2/\x04Qx'
tRp2271
sa(dp2272
S'trial_loop.thisTrialN'
p2273
I97
sg895
g2025
sS'block_loop.thisIndex'
p2274
g889
sg38
S'left'
p2275
sg59
g63
sS'trial_loop.thisN'
p2276
I97
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p2277
g60
(g99
S'a\x00\x00\x00'
tRp2278
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2279
I0
sg904
g2032
sS'block_loop.thisRepN'
p2280
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2281
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p2282
Nsg70
Vn
sS'block_loop.thisTrialN'
p2283
I0
sg39
F0.68322120403990994
sg34
g753
(S'\x07\xdf\x07\r\n25\x0388'
tRp2284
sa(dp2285
S'trial_loop.thisTrialN'
p2286
I98
sg895
g950
sS'block_loop.thisIndex'
p2287
g889
sg38
S'right'
p2288
sg59
g63
sS'trial_loop.thisN'
p2289
I98
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p2290
g60
(g99
S'b\x00\x00\x00'
tRp2291
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2292
I0
sg904
g958
sS'block_loop.thisRepN'
p2293
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2294
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p2295
Nsg70
Vn
sS'block_loop.thisTrialN'
p2296
I0
sg39
F2.4331885602459806
sg34
g753
(S'\x07\xdf\x07\r\n2:\x0eH@'
tRp2297
sa(dp2298
S'trial_loop.thisTrialN'
p2299
I99
sg895
g1380
sS'block_loop.thisIndex'
p2300
g889
sg38
S'left'
p2301
sg59
g63
sS'trial_loop.thisN'
p2302
I99
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2303
g60
(g99
S'c\x00\x00\x00'
tRp2304
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2305
I0
sg904
g1387
sS'block_loop.thisRepN'
p2306
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2307
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2308
Nsg70
Vn
sS'block_loop.thisTrialN'
p2309
I0
sg39
F1.6666204806874703
sg34
g753
(S'\x07\xdf\x07\r\n3\x06\x05\xff('
tRp2310
sa(dp2311
S'trial_loop.thisTrialN'
p2312
I100
sg895
g1701
sS'block_loop.thisIndex'
p2313
g889
sg38
S'left'
p2314
sg59
g63
sS'trial_loop.thisN'
p2315
I100
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2316
g60
(g99
S'd\x00\x00\x00'
tRp2317
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2318
I0
sg904
g1708
sS'block_loop.thisRepN'
p2319
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2320
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2321
Nsg70
Vn
sS'block_loop.thisTrialN'
p2322
I0
sg39
F1.2166501594556394
sg34
g753
(S'\x07\xdf\x07\r\n3\r\x01\x8a\x88'
tRp2323
sa(dp2324
S'trial_loop.thisTrialN'
p2325
I101
sg895
g1535
sS'block_loop.thisIndex'
p2326
g889
sg38
S'left'
p2327
sg59
g63
sS'trial_loop.thisN'
p2328
I101
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p2329
g60
(g99
S'e\x00\x00\x00'
tRp2330
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2331
I0
sg904
g1542
sS'block_loop.thisRepN'
p2332
I0
sg907
g1035
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2333
I0
sg910
g1042
sg55
g11
sS'block_loop.thisTrial'
p2334
Nsg70
Vn
sS'block_loop.thisTrialN'
p2335
I0
sg39
F1.9333351009449871
sg34
g753
(S'\x07\xdf\x07\r\n3\x13\x05n\xa0'
tRp2336
sa(dp2337
S'trial_loop.thisTrialN'
p2338
I102
sg895
g1591
sS'block_loop.thisIndex'
p2339
g889
sg38
S'left'
p2340
sg59
g63
sS'trial_loop.thisN'
p2341
I102
sg33
g1595
sg64
g65
sS'trial_loop.thisIndex'
p2342
g60
(g99
S'f\x00\x00\x00'
tRp2343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2344
I0
sg904
g1599
sS'block_loop.thisRepN'
p2345
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2346
I0
sg910
g1602
sg55
g11
sS'block_loop.thisTrial'
p2347
Nsg70
Vn
sS'block_loop.thisTrialN'
p2348
I0
sg39
F1.0498988184940572
sg34
g753
(S'\x07\xdf\x07\r\n3\x1a\x04\xca\x90'
tRp2349
sa(dp2350
S'trial_loop.thisTrialN'
p2351
I103
sg895
g1065
sS'block_loop.thisIndex'
p2352
g889
sg38
S'left'
p2353
sg59
g63
sS'trial_loop.thisN'
p2354
I103
sg33
g1075
sg64
g65
sS'trial_loop.thisIndex'
p2355
g60
(g99
S'g\x00\x00\x00'
tRp2356
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2357
I0
sg904
g1073
sS'block_loop.thisRepN'
p2358
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2359
I0
sg910
g1069
sg55
g11
sS'block_loop.thisTrial'
p2360
Nsg70
Vn
sS'block_loop.thisTrialN'
p2361
I0
sg39
F1.4996436267051649
sg34
g753
(S'\x07\xdf\x07\r\n3 \x06\x12\xb0'
tRp2362
sa(dp2363
S'trial_loop.thisTrialN'
p2364
I104
sg895
g1481
sS'block_loop.thisIndex'
p2365
g889
sg38
S'right'
p2366
sg59
g63
sS'trial_loop.thisN'
p2367
I104
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2368
g60
(g99
S'h\x00\x00\x00'
tRp2369
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2370
I0
sg904
g1488
sS'block_loop.thisRepN'
p2371
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2372
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2373
Nsg70
Vn
sS'block_loop.thisTrialN'
p2374
I0
sg39
F2.4498514351007543
sg34
g753
(S'\x07\xdf\x07\r\n3&\x0e@p'
tRp2375
sa(dp2376
S'trial_loop.thisTrialN'
p2377
I105
sg895
g1412
sS'block_loop.thisIndex'
p2378
g889
sg38
S'left'
p2379
sg59
g63
sS'trial_loop.thisN'
p2380
I105
sg33
g1221
sg64
g65
sS'trial_loop.thisIndex'
p2381
g60
(g99
S'i\x00\x00\x00'
tRp2382
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2383
I0
sg904
g1419
sS'block_loop.thisRepN'
p2384
I0
sg907
g1221
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2385
I0
sg910
g1228
sg55
g11
sS'block_loop.thisTrial'
p2386
Nsg70
Vn
sS'block_loop.thisTrialN'
p2387
I0
sg39
F0.80032689409563318
sg34
g753
(S'\x07\xdf\x07\r\n3.\x06pp'
tRp2388
sa(dp2389
S'trial_loop.thisTrialN'
p2390
I106
sg895
g1576
sS'block_loop.thisIndex'
p2391
g889
sg38
S'left'
p2392
sg59
g63
sS'trial_loop.thisN'
p2393
I106
sg33
g1406
sg64
g65
sS'trial_loop.thisIndex'
p2394
g60
(g99
S'j\x00\x00\x00'
tRp2395
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2396
I0
sg904
g1583
sS'block_loop.thisRepN'
p2397
I0
sg907
g1399
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2398
I0
sg910
g1406
sg55
g11
sS'block_loop.thisTrial'
p2399
Nsg70
Vn
sS'block_loop.thisTrialN'
p2400
I0
sg39
F0.64991712182700212
sg34
g753
(S'\x07\xdf\x07\r\n34\x03\xeb\xe8'
tRp2401
sa(dp2402
S'trial_loop.thisTrialN'
p2403
I107
sg895
g1427
sS'block_loop.thisIndex'
p2404
g889
sg38
S'right'
p2405
sg59
g63
sS'trial_loop.thisN'
p2406
I107
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p2407
g60
(g99
S'k\x00\x00\x00'
tRp2408
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2409
I0
sg904
g1434
sS'block_loop.thisRepN'
p2410
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2411
I0
sg910
g1059
sg55
g11
sS'block_loop.thisTrial'
p2412
Nsg70
Vn
sS'block_loop.thisTrialN'
p2413
I0
sg39
F1.4333051655880809
sg34
g753
(S'\x07\xdf\x07\r\n39\x0eDX'
tRp2414
sa(dp2415
S'trial_loop.thisTrialN'
p2416
I108
sg895
g1159
sS'block_loop.thisIndex'
p2417
g889
sg38
S'right'
p2418
sg59
g63
sS'trial_loop.thisN'
p2419
I108
sg33
g1075
sg64
g65
sS'trial_loop.thisIndex'
p2420
g60
(g99
S'l\x00\x00\x00'
tRp2421
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2422
I0
sg904
g1166
sS'block_loop.thisRepN'
p2423
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2424
I0
sg910
g1069
sg55
g11
sS'block_loop.thisTrial'
p2425
Nsg70
Vn
sS'block_loop.thisTrialN'
p2426
I0
sg39
F1.1662715199581726
sg34
g753
(S'\x07\xdf\x07\r\n4\x04\x06\x03\x10'
tRp2427
sa(dp2428
S'trial_loop.thisTrialN'
p2429
I109
sg895
g1305
sS'block_loop.thisIndex'
p2430
g889
sg38
S'left'
p2431
sg59
g63
sS'trial_loop.thisN'
p2432
I109
sg33
g1309
sg64
g65
sS'trial_loop.thisIndex'
p2433
g60
(g99
S'm\x00\x00\x00'
tRp2434
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2435
I0
sg904
g1313
sS'block_loop.thisRepN'
p2436
I0
sg907
g1309
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2437
I0
sg910
g1316
sg55
g11
sS'block_loop.thisTrial'
p2438
Nsg70
Vn
sS'block_loop.thisTrialN'
p2439
I0
sg39
F1.0163583895118791
sg34
g753
(S'\x07\xdf\x07\r\n4\n\t/\x90'
tRp2440
sa(dp2441
S'trial_loop.thisTrialN'
p2442
I110
sg895
g896
sS'block_loop.thisIndex'
p2443
g889
sg38
S'right'
p2444
sg59
g63
sS'trial_loop.thisN'
p2445
I110
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2446
g60
(g99
S'n\x00\x00\x00'
tRp2447
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2448
I0
sg904
g905
sS'block_loop.thisRepN'
p2449
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2450
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2451
Nsg70
Vn
sS'block_loop.thisTrialN'
p2452
I0
sg39
F0.83368286426093619
sg34
g753
(S'\x07\xdf\x07\r\n4\x10\t\xfe\x98'
tRp2453
sa(dp2454
S'trial_loop.thisTrialN'
p2455
I111
sg895
g916
sS'block_loop.thisIndex'
p2456
g889
sg38
S'right'
p2457
sg59
g63
sS'trial_loop.thisN'
p2458
I111
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2459
g60
(g99
S'o\x00\x00\x00'
tRp2460
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2461
I0
sg904
g924
sS'block_loop.thisRepN'
p2462
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2463
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p2464
Nsg70
Vn
sS'block_loop.thisTrialN'
p2465
I0
sg39
F1.183273377090245
sg34
g753
(S'\x07\xdf\x07\r\n4\x16\x07\xf3('
tRp2466
sa(dp2467
S'trial_loop.thisTrialN'
p2468
I112
sg895
g1535
sS'block_loop.thisIndex'
p2469
g889
sg38
S'left'
p2470
sg59
g63
sS'trial_loop.thisN'
p2471
I112
sg33
g1042
sg64
g65
sS'trial_loop.thisIndex'
p2472
g60
(g99
S'p\x00\x00\x00'
tRp2473
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2474
I0
sg904
g1542
sS'block_loop.thisRepN'
p2475
I0
sg907
g1035
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2476
I0
sg910
g1042
sg55
g11
sS'block_loop.thisTrial'
p2477
Nsg70
Vn
sS'block_loop.thisTrialN'
p2478
I0
sg39
F2.2665392845965471
sg34
g753
(S'\x07\xdf\x07\r\n4\x1c\x0b#\x90'
tRp2479
sa(dp2480
S'trial_loop.thisTrialN'
p2481
I113
sg895
S'40-sardines.png'
p2482
sS'block_loop.thisIndex'
p2483
g889
sg38
S'left'
p2484
sg59
g63
sS'trial_loop.thisN'
p2485
I113
sg33
g1595
sg64
g65
sS'trial_loop.thisIndex'
p2486
g60
(g99
S'q\x00\x00\x00'
tRp2487
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2488
I0
sg904
S'5-pineapple.png'
p2489
sS'block_loop.thisRepN'
p2490
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2491
I0
sg910
g1602
sg55
g11
sS'block_loop.thisTrial'
p2492
Nsg70
Vn
sS'block_loop.thisTrialN'
p2493
I0
sg39
F1.28328882943606
sg34
g753
(S'\x07\xdf\x07\r\n4$\x00u0'
tRp2494
sa(dp2495
S'trial_loop.thisTrialN'
p2496
I114
sg895
g1322
sS'block_loop.thisIndex'
p2497
g889
sg38
S'right'
p2498
sg59
g63
sS'trial_loop.thisN'
p2499
I114
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p2500
g60
(g99
S'r\x00\x00\x00'
tRp2501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2502
I0
sg904
g1330
sS'block_loop.thisRepN'
p2503
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2504
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p2505
Nsg70
Vn
sS'block_loop.thisTrialN'
p2506
I0
sg39
F0.84992806961417955
sg34
g753
(S'\x07\xdf\x07\r\n4*\x05O`'
tRp2507
sa(dp2508
S'trial_loop.thisTrialN'
p2509
I115
sg895
S'41-peanuts_redo.png'
p2510
sS'block_loop.thisIndex'
p2511
g889
sg38
S'left'
p2512
sg59
g63
sS'trial_loop.thisN'
p2513
I115
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p2514
g60
(g99
S's\x00\x00\x00'
tRp2515
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2516
I0
sg904
S'45-chewy_nougat_redo.png'
p2517
sS'block_loop.thisRepN'
p2518
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2519
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p2520
Nsg70
Vn
sS'block_loop.thisTrialN'
p2521
I0
sg39
F1.0167210349763991
sg34
g753
(S'\x07\xdf\x07\r\n40\x03\x82p'
tRp2522
sa(dp2523
S'trial_loop.thisTrialN'
p2524
I116
sg895
g1159
sS'block_loop.thisIndex'
p2525
g889
sg38
S'right'
p2526
sg59
g63
sS'trial_loop.thisN'
p2527
I116
sg33
g1075
sg64
g65
sS'trial_loop.thisIndex'
p2528
g60
(g99
S't\x00\x00\x00'
tRp2529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2530
I0
sg904
g1166
sS'block_loop.thisRepN'
p2531
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2532
I0
sg910
g1069
sg55
g11
sS'block_loop.thisTrial'
p2533
Nsg70
Vn
sS'block_loop.thisTrialN'
p2534
I0
sg39
F1.0664026083104545
sg34
g753
(S'\x07\xdf\x07\r\n46\x04M\x90'
tRp2535
sa(dp2536
S'trial_loop.thisTrialN'
p2537
I117
sg895
g933
sS'block_loop.thisIndex'
p2538
g889
sg38
S'left'
p2539
sg59
g63
sS'trial_loop.thisN'
p2540
I117
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2541
g60
(g99
S'u\x00\x00\x00'
tRp2542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2543
I0
sg904
g941
sS'block_loop.thisRepN'
p2544
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2545
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2546
Nsg70
Vn
sS'block_loop.thisTrialN'
p2547
I0
sg39
F1.3331890734234548
sg34
g753
(S'\x07\xdf\x07\r\n5\x00\x05\xd40'
tRp2548
sa(dp2549
S'trial_loop.thisTrialN'
p2550
I118
sg895
g1031
sS'block_loop.thisIndex'
p2551
g889
sg38
S'right'
p2552
sg59
g63
sS'trial_loop.thisN'
p2553
I118
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p2554
g60
(g99
S'v\x00\x00\x00'
tRp2555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2556
I0
sg904
g1039
sS'block_loop.thisRepN'
p2557
I0
sg907
g1035
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2558
I0
sg910
g1042
sg55
g11
sS'block_loop.thisTrial'
p2559
Nsg70
Vn
sS'block_loop.thisTrialN'
p2560
I0
sg39
F1.1332419877303437
sg34
g753
(S'\x07\xdf\x07\r\n5\x06\x0be\xf8'
tRp2561
sa(dp2562
S'trial_loop.thisTrialN'
p2563
I119
sg895
g2510
sS'block_loop.thisIndex'
p2564
g889
sg38
S'left'
p2565
sg59
g63
sS'trial_loop.thisN'
p2566
I119
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p2567
g60
(g99
S'w\x00\x00\x00'
tRp2568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2569
I0
sg904
g2517
sS'block_loop.thisRepN'
p2570
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2571
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p2572
Nsg70
Vn
sS'block_loop.thisTrialN'
p2573
I0
sg39
F0.91660494281177307
sg34
g753
(S'\x07\xdf\x07\r\n5\x0c\r\xde\xc8'
tRp2574
sa(dp2575
S'trial_loop.thisTrialN'
p2576
I120
sg895
g1412
sS'block_loop.thisIndex'
p2577
g889
sg38
S'left'
p2578
sg59
g63
sS'trial_loop.thisN'
p2579
I120
sg33
g1221
sg64
g65
sS'trial_loop.thisIndex'
p2580
g60
(g99
S'x\x00\x00\x00'
tRp2581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2582
I0
sg904
g1419
sS'block_loop.thisRepN'
p2583
I0
sg907
g1221
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2584
I0
sg910
g1228
sg55
g11
sS'block_loop.thisTrial'
p2585
Nsg70
Vn
sS'block_loop.thisTrialN'
p2586
I0
sg39
F0.6169887996147736
sg34
g753
(S'\x07\xdf\x07\r\n5\x12\r>\xa0'
tRp2587
sa(dp2588
S'trial_loop.thisTrialN'
p2589
I121
sg895
g1065
sS'block_loop.thisIndex'
p2590
g889
sg38
S'left'
p2591
sg59
g63
sS'trial_loop.thisN'
p2592
I121
sg33
g1075
sg64
g65
sS'trial_loop.thisIndex'
p2593
g60
(g99
S'y\x00\x00\x00'
tRp2594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2595
I0
sg904
g1073
sS'block_loop.thisRepN'
p2596
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2597
I0
sg910
g1069
sg55
g11
sS'block_loop.thisTrial'
p2598
Nsg70
Vn
sS'block_loop.thisTrialN'
p2599
I0
sg39
F0.64975946228105386
sg34
g753
(S'\x07\xdf\x07\r\n5\x18\x07\xdb\xb8'
tRp2600
sa(dp2601
S'trial_loop.thisTrialN'
p2602
I122
sg895
g1305
sS'block_loop.thisIndex'
p2603
g889
sg38
S'left'
p2604
sg59
g63
sS'trial_loop.thisN'
p2605
I122
sg33
g1309
sg64
g65
sS'trial_loop.thisIndex'
p2606
g60
(g99
S'z\x00\x00\x00'
tRp2607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2608
I0
sg904
g1313
sS'block_loop.thisRepN'
p2609
I0
sg907
g1309
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2610
I0
sg910
g1316
sg55
g11
sS'block_loop.thisTrial'
p2611
Nsg70
Vn
sS'block_loop.thisTrialN'
p2612
I0
sg39
F0.86644782495386607
sg34
g753
(S'\x07\xdf\x07\r\n5\x1e\x02\xf5\xd0'
tRp2613
sa(dp2614
S'trial_loop.thisTrialN'
p2615
I123
sg895
g950
sS'block_loop.thisIndex'
p2616
g889
sg38
S'left'
p2617
sg59
g63
sS'trial_loop.thisN'
p2618
I123
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p2619
g60
(g99
S'{\x00\x00\x00'
tRp2620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2621
I0
sg904
g958
sS'block_loop.thisRepN'
p2622
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2623
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p2624
Nsg70
Vn
sS'block_loop.thisTrialN'
p2625
I0
sg39
F2.7999123606791727
sg34
g753
(S'\x07\xdf\x07\r\n5$\x01\x9e\x10'
tRp2626
sa(dp2627
S'trial_loop.thisTrialN'
p2628
I124
sg895
g1305
sS'block_loop.thisIndex'
p2629
g889
sg38
S'left'
p2630
sg59
g63
sS'trial_loop.thisN'
p2631
I124
sg33
g1309
sg64
g65
sS'trial_loop.thisIndex'
p2632
g60
(g99
S'|\x00\x00\x00'
tRp2633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2634
I0
sg904
g1313
sS'block_loop.thisRepN'
p2635
I0
sg907
g1309
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2636
I0
sg910
g1316
sg55
g11
sS'block_loop.thisTrial'
p2637
Nsg70
Vn
sS'block_loop.thisTrialN'
p2638
I0
sg39
F0.66618057349296578
sg34
g753
(S'\x07\xdf\x07\r\n5+\x0eL('
tRp2639
sa(dp2640
S'trial_loop.thisTrialN'
p2641
I125
sg895
S'21-nakd_banana_crunch.png'
p2642
sS'block_loop.thisIndex'
p2643
g889
sg38
S'right'
p2644
sg59
g63
sS'trial_loop.thisN'
p2645
I125
sg33
g1800
sg64
g65
sS'trial_loop.thisIndex'
p2646
g60
(g99
S'}\x00\x00\x00'
tRp2647
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2648
I0
sg904
S'1-treacle_cookies.png'
p2649
sS'block_loop.thisRepN'
p2650
I0
sg907
g1800
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2651
I0
sg910
g1807
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vn
sS'block_loop.thisTrialN'
p2653
I0
sg39
F1.0999992017241311
sg34
g753
(S'\x07\xdf\x07\r\n51\t\xa0\xd8'
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g1322
sS'block_loop.thisIndex'
p2657
g889
sg38
S'right'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g1330
sS'block_loop.thisRepN'
p2663
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2664
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vn
sS'block_loop.thisTrialN'
p2666
I0
sg39
F0.88332708967345752
sg34
g753
(S'\x07\xdf\x07\r\n57\x0b\xa0\x90'
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g1014
sS'block_loop.thisIndex'
p2670
g889
sg38
S'left'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g1022
sS'block_loop.thisRepN'
p2676
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2677
I0
sg910
g1025
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vn
sS'block_loop.thisTrialN'
p2679
I0
sg39
F0.69990489109522969
sg34
g753
(S'\x07\xdf\x07\r\n6\x01\n\x87P'
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g1352
sS'block_loop.thisIndex'
p2683
g889
sg38
S'right'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g1253
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g1359
sS'block_loop.thisRepN'
p2689
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2690
I0
sg910
g1260
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vn
sS'block_loop.thisTrialN'
p2692
I0
sg39
F1.4832302131567303
sg34
g753
(S'\x07\xdf\x07\r\n6\x07\x06U\x18'
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g1380
sS'block_loop.thisIndex'
p2696
g889
sg38
S'left'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g1387
sS'block_loop.thisRepN'
p2702
I0
sg907
g908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2703
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vn
sS'block_loop.thisTrialN'
p2705
I0
sg39
F0.73331417470490123
sg34
g753
(S'\x07\xdf\x07\r\n6\r\x0eH@'
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g1082
sS'block_loop.thisIndex'
p2709
g889
sg38
S'left'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g1007
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g1089
sS'block_loop.thisRepN'
p2715
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2716
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vn
sS'block_loop.thisTrialN'
p2718
I0
sg39
F1.1333169686713518
sg34
g753
(S'\x07\xdf\x07\r\n6\x13\n\x93\x08'
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g2482
sS'block_loop.thisIndex'
p2722
g889
sg38
S'left'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g1595
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g2489
sS'block_loop.thisRepN'
p2728
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg910
g1602
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vn
sS'block_loop.thisTrialN'
p2731
I0
sg39
F1.4166023769244021
sg34
g753
(S'\x07\xdf\x07\r\n6\x19\rFp'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g1839
sS'block_loop.thisIndex'
p2735
g889
sg38
S'right'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g1846
sS'block_loop.thisRepN'
p2741
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg910
g1025
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vn
sS'block_loop.thisTrialN'
p2744
I0
sg39
F0.98329892192805346
sg34
g753
(S'\x07\xdf\x07\r\n6 \x04\xc6\xa8'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g1535
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1042
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g1542
sS'block_loop.thisRepN'
p2754
I0
sg907
g1035
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg910
g1042
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vn
sS'block_loop.thisTrialN'
p2757
I0
sg39
F1.2666239588911594
sg34
g753
(S'\x07\xdf\x07\r\n6&\x05\x1c\x98'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g2025
sS'block_loop.thisIndex'
p2761
g889
sg38
S'left'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g2032
sS'block_loop.thisRepN'
p2767
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vn
sS'block_loop.thisTrialN'
p2770
I0
sg39
F1.3498761816626939
sg34
g753
(S'\x07\xdf\x07\r\n6,\t\xb8H'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g1768
sS'block_loop.thisIndex'
p2774
g889
sg38
S'right'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g1775
sS'block_loop.thisRepN'
p2780
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vn
sS'block_loop.thisTrialN'
p2783
I0
sg39
F1.0836630499052262
sg34
g753
(S'\x07\xdf\x07\r\n63\x00Bh'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1082
sS'block_loop.thisIndex'
p2787
g889
sg38
S'left'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g1007
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1089
sS'block_loop.thisRepN'
p2793
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vn
sS'block_loop.thisTrialN'
p2796
I0
sg39
F0.78325376230395705
sg34
g753
(S'\x07\xdf\x07\r\n69\x02\x07\x88'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g1591
sS'block_loop.thisIndex'
p2800
g889
sg38
S'right'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g1595
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g1599
sS'block_loop.thisRepN'
p2806
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg910
g1602
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vn
sS'block_loop.thisTrialN'
p2809
I0
sg39
F1.3999166941785006
sg34
g753
(S'\x07\xdf\x07\r\n7\x02\x0e\x82\xd8'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g933
sS'block_loop.thisIndex'
p2813
g889
sg38
S'left'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g941
sS'block_loop.thisRepN'
p2819
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vn
sS'block_loop.thisTrialN'
p2822
I0
sg39
F0.91655961212882175
sg34
g753
(S'\x07\xdf\x07\r\n7\t\x05\xc8x'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1768
sS'block_loop.thisIndex'
p2826
g889
sg38
S'right'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1775
sS'block_loop.thisRepN'
p2832
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vn
sS'block_loop.thisTrialN'
p2835
I0
sg39
F1.3332150173991977
sg34
g753
(S'\x07\xdf\x07\r\n7\x0f\x05(P'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g1031
sS'block_loop.thisIndex'
p2839
g889
sg38
S'left'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g1039
sS'block_loop.thisRepN'
p2845
I0
sg907
g1035
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg910
g1042
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vn
sS'block_loop.thisTrialN'
p2848
I0
sg39
F0.86697326173953115
sg34
g753
(S'\x07\xdf\x07\r\n7\x15\n\xba\x18'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1796
sS'block_loop.thisIndex'
p2852
g889
sg38
S'left'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1800
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1804
sS'block_loop.thisRepN'
p2858
I0
sg907
g1800
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg910
g1807
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vn
sS'block_loop.thisTrialN'
p2861
I0
sg39
F0.76665902602326241
sg34
g753
(S'\x07\xdf\x07\r\n7\x1b\t#\xd8'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g1621
sS'block_loop.thisIndex'
p2865
g889
sg38
S'right'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g1309
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g1628
sS'block_loop.thisRepN'
p2871
I0
sg907
g1309
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg910
g1316
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vn
sS'block_loop.thisTrialN'
p2874
I0
sg39
F1.2163747541735574
sg34
g753
(S'\x07\xdf\x07\r\n7!\x06&8'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g2642
sS'block_loop.thisIndex'
p2878
g889
sg38
S'right'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1800
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g2649
sS'block_loop.thisRepN'
p2884
I0
sg907
g1800
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg910
g1807
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vn
sS'block_loop.thisTrialN'
p2887
I0
sg39
F0.81644694114856975
sg34
g753
(S"\x07\xdf\x07\r\n7'\t\xcf\xb8"
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1305
sS'block_loop.thisIndex'
p2891
g889
sg38
S'left'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g1316
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1313
sS'block_loop.thisRepN'
p2897
I0
sg907
g1309
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg910
g1316
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vn
sS'block_loop.thisTrialN'
p2900
I0
sg39
F0.84973220685196793
sg34
g753
(S'\x07\xdf\x07\r\n7-\x07\x85\xc8'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1701
sS'block_loop.thisIndex'
p2904
g889
sg38
S'left'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1708
sS'block_loop.thisRepN'
p2910
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vn
sS'block_loop.thisTrialN'
p2913
I0
sg39
F1.2999750823792056
sg34
g753
(S'\x07\xdf\x07\r\n73\x05\xb4\xf0'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1159
sS'block_loop.thisIndex'
p2917
g889
sg38
S'right'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1075
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1166
sS'block_loop.thisRepN'
p2923
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg910
g1069
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vn
sS'block_loop.thisTrialN'
p2926
I0
sg39
F0.9663683394542204
sg34
g753
(S'\x07\xdf\x07\r\n79\n\xcd\xa0'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g2482
sS'block_loop.thisIndex'
p2930
g889
sg38
S'left'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g1595
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g2489
sS'block_loop.thisRepN'
p2936
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg910
g1602
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vn
sS'block_loop.thisTrialN'
p2939
I0
sg39
F1.433266962370908
sg34
g753
(S'\x07\xdf\x07\r\n8\x03\n\xe5\x10'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g997
sS'block_loop.thisIndex'
p2943
g889
sg38
S'right'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1005
sS'block_loop.thisRepN'
p2949
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vn
sS'block_loop.thisTrialN'
p2952
I0
sg39
F0.89983287517998178
sg34
g753
(S'\x07\xdf\x07\r\n8\n\x02\xde`'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1839
sS'block_loop.thisIndex'
p2956
g889
sg38
S'right'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1846
sS'block_loop.thisRepN'
p2962
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg910
g1025
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vn
sS'block_loop.thisTrialN'
p2965
I0
sg39
F0.88322245847393788
sg34
g753
(S'\x07\xdf\x07\r\n8\x10\x01\xc5 '
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g1481
sS'block_loop.thisIndex'
p2969
g889
sg38
S'right'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g1488
sS'block_loop.thisRepN'
p2975
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vn
sS'block_loop.thisTrialN'
p2978
I0
sg39
F0.93366524516522986
sg34
g753
(S'\x07\xdf\x07\r\n8\x16\x00m`'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1159
sS'block_loop.thisIndex'
p2982
g889
sg38
S'right'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1075
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1166
sS'block_loop.thisRepN'
p2988
I0
sg907
g1075
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg910
g1069
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vn
sS'block_loop.thisTrialN'
p2991
I0
sg39
F0.86637540990068374
sg34
g753
(S'\x07\xdf\x07\r\n8\x1c\x00\x0b\xb8'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g2482
sS'block_loop.thisIndex'
p2995
g889
sg38
S'left'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g1595
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g2489
sS'block_loop.thisRepN'
p3001
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg910
g1602
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vn
sS'block_loop.thisTrialN'
p3004
I0
sg39
F1.4666582847667087
sg34
g753
(S'\x07\xdf\x07\r\n8!\r\xbb\xa0'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1621
sS'block_loop.thisIndex'
p3008
g889
sg38
S'right'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g1309
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1628
sS'block_loop.thisRepN'
p3014
I0
sg907
g1309
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg910
g1316
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vn
sS'block_loop.thisTrialN'
p3017
I0
sg39
F0.93305655957783529
sg34
g753
(S'\x07\xdf\x07\r\n8(\x06.\x08'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1187
sS'block_loop.thisIndex'
p3021
g889
sg38
S'right'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1195
sS'block_loop.thisRepN'
p3027
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vn
sS'block_loop.thisTrialN'
p3030
I0
sg39
F1.1332975819645981
sg34
g753
(S'\x07\xdf\x07\r\n8.\x05\x8d\xe0'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1481
sS'block_loop.thisIndex'
p3034
g889
sg38
S'right'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1488
sS'block_loop.thisRepN'
p3040
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vn
sS'block_loop.thisTrialN'
p3043
I0
sg39
F0.91702318251054749
sg34
g753
(S'\x07\xdf\x07\r\n84\x08\x06\xb0'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g967
sS'block_loop.thisIndex'
p3047
g889
sg38
S'right'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g975
sS'block_loop.thisRepN'
p3053
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vn
sS'block_loop.thisTrialN'
p3056
I0
sg39
F1.0332712958702359
sg34
g753
(S'\x07\xdf\x07\r\n8:\x07f\x88'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g1249
sS'block_loop.thisIndex'
p3060
g889
sg38
S'left'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g1253
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g1257
sS'block_loop.thisRepN'
p3066
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg910
g1260
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vn
sS'block_loop.thisTrialN'
p3069
I0
sg39
F0.83329997679311418
sg34
g753
(S'\x07\xdf\x07\r\n9\x04\x08t\x10'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1187
sS'block_loop.thisIndex'
p3073
g889
sg38
S'right'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1195
sS'block_loop.thisRepN'
p3079
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vn
sS'block_loop.thisTrialN'
p3082
I0
sg39
F1.1499137006426281
sg34
g753
(S'\x07\xdf\x07\r\n9\n\x06d\xb8'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g2642
sS'block_loop.thisIndex'
p3086
g889
sg38
S'right'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g1800
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g2649
sS'block_loop.thisRepN'
p3092
I0
sg907
g1800
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg910
g1807
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vn
sS'block_loop.thisTrialN'
p3095
I0
sg39
F0.91656075252376468
sg34
g753
(S'\x07\xdf\x07\r\n9\x10\t\x1c\x08'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1906
sS'block_loop.thisIndex'
p3099
g889
sg38
S'right'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1118
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1913
sS'block_loop.thisRepN'
p3105
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg910
g1125
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vn
sS'block_loop.thisTrialN'
p3108
I0
sg39
F0.89990129885200076
sg34
g753
(S'\x07\xdf\x07\r\n9\x16\x08=`'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1249
sS'block_loop.thisIndex'
p3112
g889
sg38
S'left'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1253
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1257
sS'block_loop.thisRepN'
p3118
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg910
g1260
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vn
sS'block_loop.thisTrialN'
p3121
I0
sg39
F0.71657232752795608
sg34
g753
(S'\x07\xdf\x07\r\n9\x1c\x07b\xa0'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1322
sS'block_loop.thisIndex'
p3125
g889
sg38
S'right'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1326
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1330
sS'block_loop.thisRepN'
p3131
I0
sg907
g1326
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg910
g1333
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vn
sS'block_loop.thisTrialN'
p3134
I0
sg39
F0.73329678368827445
sg34
g753
(S'\x07\xdf\x07\r\n9"\x03n\xe8'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g2642
sS'block_loop.thisIndex'
p3138
g889
sg38
S'right'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g1800
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g2649
sS'block_loop.thisRepN'
p3144
I0
sg907
g1800
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg910
g1807
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vn
sS'block_loop.thisTrialN'
p3147
I0
sg39
F0.73332614884793657
sg34
g753
(S"\x07\xdf\x07\r\n9'\x0f6\x88"
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g1014
sS'block_loop.thisIndex'
p3151
g889
sg38
S'left'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g1022
sS'block_loop.thisRepN'
p3157
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg910
g1025
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vn
sS'block_loop.thisTrialN'
p3160
I0
sg39
F0.70005257218826955
sg34
g753
(S'\x07\xdf\x07\r\n9-\x0b\xbb\xe8'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1535
sS'block_loop.thisIndex'
p3164
g889
sg38
S'right'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g1042
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1542
sS'block_loop.thisRepN'
p3170
I0
sg907
g1035
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg910
g1042
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vn
sS'block_loop.thisTrialN'
p3173
I0
sg39
F1.2999499936995562
sg34
g753
(S'\x07\xdf\x07\r\n93\x07\x89\xb0'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1048
sS'block_loop.thisIndex'
p3177
g889
sg38
S'left'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1056
sS'block_loop.thisRepN'
p3183
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg910
g1059
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vn
sS'block_loop.thisTrialN'
p3186
I0
sg39
F0.79987387236360519
sg34
g753
(S'\x07\xdf\x07\r\n99\x0c\xa2`'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g1591
sS'block_loop.thisIndex'
p3190
g889
sg38
S'right'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g1595
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g1599
sS'block_loop.thisRepN'
p3196
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg910
g1602
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vn
sS'block_loop.thisTrialN'
p3199
I0
sg39
F1.2165908589395258
sg34
g753
(S'\x07\xdf\x07\r\n:\x03\n\x19\xf0'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1906
sS'block_loop.thisIndex'
p3203
g889
sg38
S'right'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1118
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1913
sS'block_loop.thisRepN'
p3209
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg910
g1125
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vn
sS'block_loop.thisTrialN'
p3212
I0
sg39
F0.83328401126937024
sg34
g753
(S'\x07\xdf\x07\r\n:\t\x0e\x01\xf0'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g2482
sS'block_loop.thisIndex'
p3216
g889
sg38
S'left'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1595
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g2489
sS'block_loop.thisRepN'
p3222
I0
sg907
g1595
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg910
g1602
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vn
sS'block_loop.thisTrialN'
p3225
I0
sg39
F1.3666163182479067
sg34
g753
(S'\x07\xdf\x07\r\n:\x0f\x0b\xf2\x98'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1031
sS'block_loop.thisIndex'
p3229
g889
sg38
S'left'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1039
sS'block_loop.thisRepN'
p3235
I0
sg907
g1035
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg910
g1042
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vn
sS'block_loop.thisTrialN'
p3238
I0
sg39
F1.7499254467065839
sg34
g753
(S'\x07\xdf\x07\r\n:\x16\x02\xbb8'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1131
sS'block_loop.thisIndex'
p3242
g889
sg38
S'right'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1138
sS'block_loop.thisRepN'
p3248
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg910
g1108
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vn
sS'block_loop.thisTrialN'
p3251
I0
sg39
F0.7999696655056141
sg34
g753
(S'\x07\xdf\x07\r\n:\x1c\x0e\xb9\x88'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1395
sS'block_loop.thisIndex'
p3255
g889
sg38
S'right'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g1406
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1403
sS'block_loop.thisRepN'
p3261
I0
sg907
g1399
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg910
g1406
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vn
sS'block_loop.thisTrialN'
p3264
I0
sg39
F0.81665192706714151
sg34
g753
(S'\x07\xdf\x07\r\n:"\x0c5\x00'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g916
sS'block_loop.thisIndex'
p3268
g889
sg38
S'right'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g924
sS'block_loop.thisRepN'
p3274
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vn
sS'block_loop.thisTrialN'
p3277
I0
sg39
F1.0499290389498128
sg34
g753
(S'\x07\xdf\x07\r\n:(\t\xeb\x10'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g1701
sS'block_loop.thisIndex'
p3281
g889
sg38
S'left'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g1708
sS'block_loop.thisRepN'
p3287
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vn
sS'block_loop.thisTrialN'
p3290
I0
sg39
F1.0499452895719514
sg34
g753
(S'\x07\xdf\x07\r\n:.\x0b30'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g1234
sS'block_loop.thisIndex'
p3294
g889
sg38
S'left'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g1241
sS'block_loop.thisRepN'
p3300
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vn
sS'block_loop.thisTrialN'
p3303
I0
sg39
F0.81657095905484312
sg34
g753
(S'\x07\xdf\x07\r\n:4\x0c{P'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g997
sS'block_loop.thisIndex'
p3307
g889
sg38
S'right'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g1007
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1005
sS'block_loop.thisRepN'
p3313
I0
sg907
g1007
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg910
g1001
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vn
sS'block_loop.thisTrialN'
p3316
I0
sg39
F0.76661055925478649
sg34
g753
(S'\x07\xdf\x07\r\n::\n1`'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g1796
sS'block_loop.thisIndex'
p3320
g889
sg38
S'left'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1800
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g1804
sS'block_loop.thisRepN'
p3326
I0
sg907
g1800
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg910
g1807
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vn
sS'block_loop.thisTrialN'
p3329
I0
sg39
F0.83333133764290324
sg34
g753
(S'\x07\xdf\x07\r\n;\x04\x07/\xd8'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g1576
sS'block_loop.thisIndex'
p3333
g889
sg38
S'left'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1399
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g1583
sS'block_loop.thisRepN'
p3339
I0
sg907
g1399
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg910
g1406
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vn
sS'block_loop.thisTrialN'
p3342
I0
sg39
F0.68324173114206133
sg34
g753
(S'\x07\xdf\x07\r\n;\n\x05$h'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g1427
sS'block_loop.thisIndex'
p3346
g889
sg38
S'right'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1059
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g1434
sS'block_loop.thisRepN'
p3352
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg910
g1059
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vn
sS'block_loop.thisTrialN'
p3355
I0
sg39
F0.81657751632337749
sg34
g753
(S'\x07\xdf\x07\r\n;\x10\x00\xb3\xb0'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g2510
sS'block_loop.thisIndex'
p3359
g889
sg38
S'left'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g2517
sS'block_loop.thisRepN'
p3365
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vn
sS'block_loop.thisTrialN'
p3368
I0
sg39
F0.8833145453331781
sg34
g753
(S'\x07\xdf\x07\r\n;\x15\r\xac\x00'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1839
sS'block_loop.thisIndex'
p3372
g889
sg38
S'right'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1846
sS'block_loop.thisRepN'
p3378
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg910
g1025
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vn
sS'block_loop.thisTrialN'
p3381
I0
sg39
F0.7166016926876182
sg34
g753
(S'\x07\xdf\x07\r\n;\x1b\x0cX('
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g1234
sS'block_loop.thisIndex'
p3385
g889
sg38
S'left'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g1241
sS'block_loop.thisRepN'
p3391
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vn
sS'block_loop.thisTrialN'
p3394
I0
sg39
F0.89996230996030135
sg34
g753
(S'\x07\xdf\x07\r\n;!\x08\x9f\x08'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g1031
sS'block_loop.thisIndex'
p3398
g889
sg38
S'left'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g1039
sS'block_loop.thisRepN'
p3404
I0
sg907
g1035
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg910
g1042
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vn
sS'block_loop.thisTrialN'
p3407
I0
sg39
F0.86696812996387962
sg34
g753
(S"\x07\xdf\x07\r\n;'\x07\x85\xc8"
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g1352
sS'block_loop.thisIndex'
p3411
g889
sg38
S'right'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g1260
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g1359
sS'block_loop.thisRepN'
p3417
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg910
g1260
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vn
sS'block_loop.thisTrialN'
p3420
I0
sg39
F1.0498532027127112
sg34
g753
(S'\x07\xdf\x07\r\n;-\x05\xf3p'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g2642
sS'block_loop.thisIndex'
p3424
g889
sg38
S'right'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1800
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g2649
sS'block_loop.thisRepN'
p3430
I0
sg907
g1800
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg910
g1807
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vn
sS'block_loop.thisTrialN'
p3433
I0
sg39
F0.83320047736924607
sg34
g753
(S'\x07\xdf\x07\r\n;3\x07;\x90'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g1114
sS'block_loop.thisIndex'
p3437
g889
sg38
S'left'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g1118
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g1122
sS'block_loop.thisRepN'
p3443
I0
sg907
g1118
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg910
g1125
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vn
sS'block_loop.thisTrialN'
p3446
I0
sg39
F0.93334793038366115
sg34
g753
(S'\x07\xdf\x07\r\n;9\x050 '
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g967
sS'block_loop.thisIndex'
p3450
g889
sg38
S'right'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g975
sS'block_loop.thisRepN'
p3456
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vn
sS'block_loop.thisTrialN'
p3459
I0
sg39
F0.90002503166033421
sg34
g753
(S'\x07\xdf\x07\r\x0b\x00\x03\x04\xca\x90'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1131
sS'block_loop.thisIndex'
p3463
g889
sg38
S'right'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1101
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1138
sS'block_loop.thisRepN'
p3469
I0
sg907
g1101
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg910
g1108
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vn
sS'block_loop.thisTrialN'
p3472
I0
sg39
F0.91659353886689132
sg34
g753
(S'\x07\xdf\x07\r\x0b\x00\t\x03\xb1P'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g950
sS'block_loop.thisIndex'
p3476
g889
sg38
S'left'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g958
sS'block_loop.thisRepN'
p3482
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vn
sS'block_loop.thisTrialN'
p3485
I0
sg39
F1.1663599005346441
sg34
g753
(S'\x07\xdf\x07\r\x0b\x00\x0f\x03\x15\x10'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1234
sS'block_loop.thisIndex'
p3489
g889
sg38
S'left'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1241
sS'block_loop.thisRepN'
p3495
I0
sg907
g926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vn
sS'block_loop.thisTrialN'
p3498
I0
sg39
F0.88331939201043497
sg34
g753
(S'\x07\xdf\x07\r\x0b\x00\x15\x06\x06\xf8'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g1352
sS'block_loop.thisIndex'
p3502
g889
sg38
S'right'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1253
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g1359
sS'block_loop.thisRepN'
p3508
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg910
g1260
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vn
sS'block_loop.thisTrialN'
p3511
I0
sg39
F0.98303976726811015
sg34
g753
(S'\x07\xdf\x07\r\x0b\x00\x1b\x04\xaf8'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g2510
sS'block_loop.thisIndex'
p3515
g889
sg38
S'left'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g2517
sS'block_loop.thisRepN'
p3521
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vn
sS'block_loop.thisTrialN'
p3524
I0
sg39
F2.283352121333337
sg34
g753
(S'\x07\xdf\x07\r\x0b\x00!\x05\x05('
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1481
sS'block_loop.thisIndex'
p3528
g889
sg38
S'right'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1488
sS'block_loop.thisRepN'
p3534
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vn
sS'block_loop.thisTrialN'
p3537
I0
sg39
F1.2831819174480188
sg34
g753
(S'\x07\xdf\x07\r\x0b\x00(\t\xd7\x88'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g2510
sS'block_loop.thisIndex'
p3541
g889
sg38
S'left'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g2517
sS'block_loop.thisRepN'
p3547
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg910
g1198
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vn
sS'block_loop.thisTrialN'
p3550
I0
sg39
F0.93359368540723153
sg34
g753
(S'\x07\xdf\x07\r\x0b\x00.\x0e\xb1\xb8'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g967
sS'block_loop.thisIndex'
p3554
g889
sg38
S'right'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g975
sS'block_loop.thisRepN'
p3560
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vn
sS'block_loop.thisTrialN'
p3563
I0
sg39
F0.99993214652477036
sg34
g753
(S'\x07\xdf\x07\r\x0b\x004\x0e\x11\x90'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1621
sS'block_loop.thisIndex'
p3567
g889
sg38
S'right'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1309
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1628
sS'block_loop.thisRepN'
p3573
I0
sg907
g1309
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg910
g1316
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vn
sS'block_loop.thisTrialN'
p3576
I0
sg39
F1.0830777424062035
sg34
g753
(S'\x07\xdf\x07\r\x0b\x00:\x0e\xa6\x00'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1395
sS'block_loop.thisIndex'
p3580
g889
sg38
S'right'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1399
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1403
sS'block_loop.thisRepN'
p3586
I0
sg907
g1399
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg910
g1406
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vn
sS'block_loop.thisTrialN'
p3589
I0
sg39
F0.74990349411200441
sg34
g753
(S'\x07\xdf\x07\r\x0b\x01\x05\x01\xdc\x90'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g1768
sS'block_loop.thisIndex'
p3593
g889
sg38
S'right'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1775
sS'block_loop.thisRepN'
p3599
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg910
g954
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vn
sS'block_loop.thisTrialN'
p3602
I0
sg39
F0.98326613558492681
sg34
g753
(S'\x07\xdf\x07\r\x0b\x01\n\r\xa40'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g933
sS'block_loop.thisIndex'
p3606
g889
sg38
S'left'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g941
sS'block_loop.thisRepN'
p3612
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vn
sS'block_loop.thisTrialN'
p3615
I0
sg39
F0.98330661959107601
sg34
g753
(S'\x07\xdf\x07\r\x0b\x01\x10\r\xf68'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F114.08052810530853
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vn
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vn
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'51-mars.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'left'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'51-mars.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'27-hartleys_raspberries_jelly.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'27-hartleys_raspberries_jelly.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vn
sS'block_loop.thisTrialN'
p3650
I0
sg39
F1.2830772862489539
sg34
g753
(S'\x07\xdf\x07\r\x0b\x04\x19\x02\xee\x00'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'3-ellas_strawberries_apples.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'left'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'3-ellas_strawberries_apples.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'13-mccoys_steak_crisps.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
S'13-mccoys_steak_crisps.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vn
sS'block_loop.thisTrialN'
p3667
I0
sg39
F0.66666210508810764
sg34
g753
(S'\x07\xdf\x07\r\x0b\x04\x1f\x07\x89\xb0'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'1-treacle_cookies.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'left'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'1-treacle_cookies.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'21-nakd_banana_crunch.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3681
I1
sg3647
S'21-nakd_banana_crunch.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vn
sS'block_loop.thisTrialN'
p3684
I0
sg39
F0.69981993170176793
sg34
g753
(S'\x07\xdf\x07\r\x0b\x04%\x02\xde`'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'31-hobnobs.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'right'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'25-kitkat.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'25-kitkat.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3698
I1
sg3647
S'31-hobnobs.png'
p3699
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vn
sS'block_loop.thisTrialN'
p3701
I0
sg39
F0.96659727365886283
sg34
g753
(S'\x07\xdf\x07\r\x0b\x04*\x0e,\xe8'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'41-peanuts_redo.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'left'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'41-peanuts_redo.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'45-chewy_nougat_redo.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3715
I1
sg3647
S'45-chewy_nougat_redo.png'
p3716
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vn
sS'block_loop.thisTrialN'
p3718
I0
sg39
F0.84986734360472838
sg34
g753
(S'\x07\xdf\x07\r\x0b\x040\x0e\t\xc0'
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
S'16-skips_prawn.png'
p3722
sS'block_loop.thisIndex'
p3723
g3627
sg38
S'right'
p3724
sg59
g63
sS'trial_loop.thisN'
p3725
I5
sg33
S'42-mrkipling_lemon_slices.png'
p3726
sg64
g65
sS'trial_loop.thisIndex'
p3727
g60
(g99
S'\x05\x00\x00\x00'
tRp3728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3729
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p3730
sS'block_loop.thisRepN'
p3731
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3732
I1
sg3647
S'16-skips_prawn.png'
p3733
sg55
g11
sS'block_loop.thisTrial'
p3734
Nsg70
Vn
sS'block_loop.thisTrialN'
p3735
I0
sg39
F0.93318713475309778
sg34
g753
(S'\x07\xdf\x07\r\x0b\x046\x0cs\x80'
tRp3736
sa(dp3737
S'trial_loop.thisTrialN'
p3738
I6
sg3633
g3654
sS'block_loop.thisIndex'
p3739
g3627
sg38
S'left'
p3740
sg59
g63
sS'trial_loop.thisN'
p3741
I6
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p3742
g60
(g99
S'\x06\x00\x00\x00'
tRp3743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3744
I0
sg3642
g3662
sS'block_loop.thisRepN'
p3745
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3746
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p3747
Nsg70
Vn
sS'block_loop.thisTrialN'
p3748
I0
sg39
F0.71665500613244149
sg34
g753
(S'\x07\xdf\x07\r\x0b\x05\x00\x0b\xd7@'
tRp3749
sa(dp3750
S'trial_loop.thisTrialN'
p3751
I7
sg3633
S'4-corn.png'
p3752
sS'block_loop.thisIndex'
p3753
g3627
sg38
S'right'
p3754
sg59
g63
sS'trial_loop.thisN'
p3755
I7
sg33
S'10-bounty_redo.png'
p3756
sg64
g65
sS'trial_loop.thisIndex'
p3757
g60
(g99
S'\x07\x00\x00\x00'
tRp3758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3759
I0
sg3642
S'10-bounty_redo.png'
p3760
sS'block_loop.thisRepN'
p3761
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3762
I1
sg3647
S'4-corn.png'
p3763
sg55
g11
sS'block_loop.thisTrial'
p3764
Nsg70
Vn
sS'block_loop.thisTrialN'
p3765
I0
sg39
F0.69989833382669531
sg34
g753
(S'\x07\xdf\x07\r\x0b\x05\x06\x08\x1e '
tRp3766
sa(dp3767
S'trial_loop.thisTrialN'
p3768
I8
sg3633
g3671
sS'block_loop.thisIndex'
p3769
g3627
sg38
S'left'
p3770
sg59
g63
sS'trial_loop.thisN'
p3771
I8
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p3772
g60
(g99
S'\x08\x00\x00\x00'
tRp3773
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3774
I0
sg3642
g3679
sS'block_loop.thisRepN'
p3775
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3776
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p3777
Nsg70
Vn
sS'block_loop.thisTrialN'
p3778
I0
sg39
F0.6999165801394156
sg34
g753
(S'\x07\xdf\x07\r\x0b\x05\x0c\x03\xeb\xe8'
tRp3779
sa(dp3780
S'trial_loop.thisTrialN'
p3781
I9
sg3633
S'26-walkers_smoky_bacon.png'
p3782
sS'block_loop.thisIndex'
p3783
g3627
sg38
S'right'
p3784
sg59
g63
sS'trial_loop.thisN'
p3785
I9
sg33
S'44-crunch.png'
p3786
sg64
g65
sS'trial_loop.thisIndex'
p3787
g60
(g99
S'\t\x00\x00\x00'
tRp3788
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3789
I0
sg3642
S'44-crunch.png'
p3790
sS'block_loop.thisRepN'
p3791
I1
sg3645
g3786
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3792
I1
sg3647
S'26-walkers_smoky_bacon.png'
p3793
sg55
g11
sS'block_loop.thisTrial'
p3794
Nsg70
Vn
sS'block_loop.thisTrialN'
p3795
I0
sg39
F0.96658586971352634
sg34
g753
(S'\x07\xdf\x07\r\x0b\x05\x11\x0f:p'
tRp3796
sa(dp3797
S'trial_loop.thisTrialN'
p3798
I10
sg3633
S'21-nakd_banana_crunch.png'
p3799
sS'block_loop.thisIndex'
p3800
g3627
sg38
S'right'
p3801
sg59
g63
sS'trial_loop.thisN'
p3802
I10
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p3803
g60
(g99
S'\n\x00\x00\x00'
tRp3804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3805
I0
sg3642
S'1-treacle_cookies.png'
p3806
sS'block_loop.thisRepN'
p3807
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3808
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p3809
Nsg70
Vn
sS'block_loop.thisTrialN'
p3810
I0
sg39
F0.88320649295019393
sg34
g753
(S'\x07\xdf\x07\r\x0b\x05\x17\x0f\x17H'
tRp3811
sa(dp3812
S'trial_loop.thisTrialN'
p3813
I11
sg3633
S'48-twix.png'
p3814
sS'block_loop.thisIndex'
p3815
g3627
sg38
S'right'
p3816
sg59
g63
sS'trial_loop.thisN'
p3817
I11
sg33
S'50-polo.png'
p3818
sg64
g65
sS'trial_loop.thisIndex'
p3819
g60
(g99
S'\x0b\x00\x00\x00'
tRp3820
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3821
I0
sg3642
S'50-polo.png'
p3822
sS'block_loop.thisRepN'
p3823
I1
sg3645
S'48-twix.png'
p3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3825
I1
sg3647
g3818
sg55
g11
sS'block_loop.thisTrial'
p3826
Nsg70
Vn
sS'block_loop.thisTrialN'
p3827
I0
sg39
F2.4001761339368386
sg34
g753
(S'\x07\xdf\x07\r\x0b\x05\x1d\r\xfe\x08'
tRp3828
sa(dp3829
S'trial_loop.thisTrialN'
p3830
I12
sg3633
S'25-kitkat.png'
p3831
sS'block_loop.thisIndex'
p3832
g3627
sg38
S'left'
p3833
sg59
g63
sS'trial_loop.thisN'
p3834
I12
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p3835
g60
(g99
S'\x0c\x00\x00\x00'
tRp3836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3837
I0
sg3642
S'31-hobnobs.png'
p3838
sS'block_loop.thisRepN'
p3839
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3840
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p3841
Nsg70
Vn
sS'block_loop.thisTrialN'
p3842
I0
sg39
F0.73332928493300642
sg34
g753
(S'\x07\xdf\x07\r\x0b\x05%\x057\xf0'
tRp3843
sa(dp3844
S'trial_loop.thisTrialN'
p3845
I13
sg3633
g3634
sS'block_loop.thisIndex'
p3846
g3627
sg38
S'left'
p3847
sg59
g63
sS'trial_loop.thisN'
p3848
I13
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3849
g60
(g99
S'\r\x00\x00\x00'
tRp3850
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3851
I0
sg3642
g3643
sS'block_loop.thisRepN'
p3852
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3853
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3854
Nsg70
Vn
sS'block_loop.thisTrialN'
p3855
I0
sg39
F0.58327246477438166
sg34
g753
(S'\x07\xdf\x07\r\x0b\x05+\x01\xbdP'
tRp3856
sa(dp3857
S'trial_loop.thisTrialN'
p3858
I14
sg3633
g3654
sS'block_loop.thisIndex'
p3859
g3627
sg38
S'left'
p3860
sg59
g63
sS'trial_loop.thisN'
p3861
I14
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p3862
g60
(g99
S'\x0e\x00\x00\x00'
tRp3863
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3864
I0
sg3642
g3662
sS'block_loop.thisRepN'
p3865
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3866
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p3867
Nsg70
Vn
sS'block_loop.thisTrialN'
p3868
I0
sg39
F1.5166118421993815
sg34
g753
(S'\x07\xdf\x07\r\x0b\x050\x0b#\x90'
tRp3869
sa(dp3870
S'trial_loop.thisTrialN'
p3871
I15
sg3633
S'7-olives.png'
p3872
sS'block_loop.thisIndex'
p3873
g3627
sg38
S'right'
p3874
sg59
g63
sS'trial_loop.thisN'
p3875
I15
sg33
S'22-daim.png'
p3876
sg64
g65
sS'trial_loop.thisIndex'
p3877
g60
(g99
S'\x0f\x00\x00\x00'
tRp3878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3879
I0
sg3642
S'22-daim.png'
p3880
sS'block_loop.thisRepN'
p3881
I1
sg3645
g3876
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3882
I1
sg3647
S'7-olives.png'
p3883
sg55
g11
sS'block_loop.thisTrial'
p3884
Nsg70
Vn
sS'block_loop.thisTrialN'
p3885
I0
sg39
F0.74991860433965485
sg34
g753
(S'\x07\xdf\x07\r\x0b\x057\x04M\x90'
tRp3886
sa(dp3887
S'trial_loop.thisTrialN'
p3888
I16
sg3633
S'50-polo.png'
p3889
sS'block_loop.thisIndex'
p3890
g3627
sg38
S'left'
p3891
sg59
g63
sS'trial_loop.thisN'
p3892
I16
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p3893
g60
(g99
S'\x10\x00\x00\x00'
tRp3894
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3895
I0
sg3642
S'48-twix.png'
p3896
sS'block_loop.thisRepN'
p3897
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3898
I1
sg3647
g3818
sg55
g11
sS'block_loop.thisTrial'
p3899
Nsg70
Vn
sS'block_loop.thisTrialN'
p3900
I0
sg39
F0.84988045814179713
sg34
g753
(S'\x07\xdf\x07\r\x0b\x06\x01\x00\xd2\xf0'
tRp3901
sa(dp3902
S'trial_loop.thisTrialN'
p3903
I17
sg3633
S'49-yorkie.png'
p3904
sS'block_loop.thisIndex'
p3905
g3627
sg38
S'left'
p3906
sg59
g63
sS'trial_loop.thisN'
p3907
I17
sg33
S'49-yorkie.png'
p3908
sg64
g65
sS'trial_loop.thisIndex'
p3909
g60
(g99
S'\x11\x00\x00\x00'
tRp3910
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3911
I0
sg3642
S'35-raisins.png'
p3912
sS'block_loop.thisRepN'
p3913
I1
sg3645
g3908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3914
I1
sg3647
S'35-raisins.png'
p3915
sg55
g11
sS'block_loop.thisTrial'
p3916
Nsg70
Vn
sS'block_loop.thisTrialN'
p3917
I0
sg39
F0.71689733997254734
sg34
g753
(S'\x07\xdf\x07\r\x0b\x06\x06\x0eDX'
tRp3918
sa(dp3919
S'trial_loop.thisTrialN'
p3920
I18
sg3633
S'6-sour_patch_kids.png'
p3921
sS'block_loop.thisIndex'
p3922
g3627
sg38
S'right'
p3923
sg59
g63
sS'trial_loop.thisN'
p3924
I18
sg33
S'38-maltesers.png'
p3925
sg64
g65
sS'trial_loop.thisIndex'
p3926
g60
(g99
S'\x12\x00\x00\x00'
tRp3927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3928
I0
sg3642
S'38-maltesers.png'
p3929
sS'block_loop.thisRepN'
p3930
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3931
I1
sg3647
S'6-sour_patch_kids.png'
p3932
sg55
g11
sS'block_loop.thisTrial'
p3933
Nsg70
Vn
sS'block_loop.thisTrialN'
p3934
I0
sg39
F0.93300239083737324
sg34
g753
(S'\x07\xdf\x07\r\x0b\x06\x0c\n\x8f '
tRp3935
sa(dp3936
S'trial_loop.thisTrialN'
p3937
I19
sg3633
S'36-fig_rolls.png'
p3938
sS'block_loop.thisIndex'
p3939
g3627
sg38
S'right'
p3940
sg59
g63
sS'trial_loop.thisN'
p3941
I19
sg33
S'36-fig_rolls.png'
p3942
sg64
g65
sS'trial_loop.thisIndex'
p3943
g60
(g99
S'\x13\x00\x00\x00'
tRp3944
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3945
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p3946
sS'block_loop.thisRepN'
p3947
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3948
I1
sg3647
S'34-hula_hoops_bbq_beef_redo.png'
p3949
sg55
g11
sS'block_loop.thisTrial'
p3950
Nsg70
Vn
sS'block_loop.thisTrialN'
p3951
I0
sg39
F0.8333048234699163
sg34
g753
(S'\x07\xdf\x07\r\x0b\x06\x12\n-x'
tRp3952
sa(dp3953
S'trial_loop.thisTrialN'
p3954
I20
sg3633
S'40-sardines.png'
p3955
sS'block_loop.thisIndex'
p3956
g3627
sg38
S'left'
p3957
sg59
g63
sS'trial_loop.thisN'
p3958
I20
sg33
S'40-sardines.png'
p3959
sg64
g65
sS'trial_loop.thisIndex'
p3960
g60
(g99
S'\x14\x00\x00\x00'
tRp3961
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3962
I0
sg3642
S'5-pineapple.png'
p3963
sS'block_loop.thisRepN'
p3964
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3965
I1
sg3647
S'5-pineapple.png'
p3966
sg55
g11
sS'block_loop.thisTrial'
p3967
Nsg70
Vn
sS'block_loop.thisTrialN'
p3968
I0
sg39
F1.1499416403094074
sg34
g753
(S'\x07\xdf\x07\r\x0b\x06\x18\x08\x1e '
tRp3969
sa(dp3970
S'trial_loop.thisTrialN'
p3971
I21
sg3633
S'27-hartleys_raspberries_jelly.png'
p3972
sS'block_loop.thisIndex'
p3973
g3627
sg38
S'right'
p3974
sg59
g63
sS'trial_loop.thisN'
p3975
I21
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p3976
g60
(g99
S'\x15\x00\x00\x00'
tRp3977
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3978
I0
sg3642
S'51-mars.png'
p3979
sS'block_loop.thisRepN'
p3980
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3981
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3982
Nsg70
Vn
sS'block_loop.thisTrialN'
p3983
I0
sg39
F0.899960029171325
sg34
g753
(S'\x07\xdf\x07\r\x0b\x06\x1e\n\xd5p'
tRp3984
sa(dp3985
S'trial_loop.thisTrialN'
p3986
I22
sg3633
S'35-raisins.png'
p3987
sS'block_loop.thisIndex'
p3988
g3627
sg38
S'right'
p3989
sg59
g63
sS'trial_loop.thisN'
p3990
I22
sg33
g3908
sg64
g65
sS'trial_loop.thisIndex'
p3991
g60
(g99
S'\x16\x00\x00\x00'
tRp3992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3993
I0
sg3642
S'49-yorkie.png'
p3994
sS'block_loop.thisRepN'
p3995
I1
sg3645
g3908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3996
I1
sg3647
g3915
sg55
g11
sS'block_loop.thisTrial'
p3997
Nsg70
Vn
sS'block_loop.thisTrialN'
p3998
I0
sg39
F0.79994343643056709
sg34
g753
(S'\x07\xdf\x07\r\x0b\x06$\t\xbc0'
tRp3999
sa(dp4000
S'trial_loop.thisTrialN'
p4001
I23
sg3633
g3722
sS'block_loop.thisIndex'
p4002
g3627
sg38
S'right'
p4003
sg59
g63
sS'trial_loop.thisN'
p4004
I23
sg33
g3733
sg64
g65
sS'trial_loop.thisIndex'
p4005
g60
(g99
S'\x17\x00\x00\x00'
tRp4006
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4007
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4008
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4009
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4010
Nsg70
Vn
sS'block_loop.thisTrialN'
p4011
I0
sg39
F0.86699749512308699
sg34
g753
(S'\x07\xdf\x07\r\x0b\x06*\x073\xc0'
tRp4012
sa(dp4013
S'trial_loop.thisTrialN'
p4014
I24
sg3633
S'2-steamed_puddings.png'
p4015
sS'block_loop.thisIndex'
p4016
g3627
sg38
S'left'
p4017
sg59
g63
sS'trial_loop.thisN'
p4018
I24
sg33
S'2-steamed_puddings.png'
p4019
sg64
g65
sS'trial_loop.thisIndex'
p4020
g60
(g99
S'\x18\x00\x00\x00'
tRp4021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4022
I0
sg3642
S'20-fruit_pastilles.png'
p4023
sS'block_loop.thisRepN'
p4024
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4025
I1
sg3647
S'20-fruit_pastilles.png'
p4026
sg55
g11
sS'block_loop.thisTrial'
p4027
Nsg70
Vn
sS'block_loop.thisTrialN'
p4028
I0
sg39
F0.88321960748771744
sg34
g753
(S'\x07\xdf\x07\r\x0b\x060\x05\xa1h'
tRp4029
sa(dp4030
S'trial_loop.thisTrialN'
p4031
I25
sg3633
S'22-daim.png'
p4032
sS'block_loop.thisIndex'
p4033
g3627
sg38
S'left'
p4034
sg59
g63
sS'trial_loop.thisN'
p4035
I25
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p4036
g60
(g99
S'\x19\x00\x00\x00'
tRp4037
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4038
I0
sg3642
S'7-olives.png'
p4039
sS'block_loop.thisRepN'
p4040
I1
sg3645
g3876
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4041
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p4042
Nsg70
Vn
sS'block_loop.thisTrialN'
p4043
I0
sg39
F0.96661067329432626
sg34
g753
(S'\x07\xdf\x07\r\x0b\x066\x04\x88('
tRp4044
sa(dp4045
S'trial_loop.thisTrialN'
p4046
I26
sg3633
g3671
sS'block_loop.thisIndex'
p4047
g3627
sg38
S'left'
p4048
sg59
g63
sS'trial_loop.thisN'
p4049
I26
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4050
g60
(g99
S'\x1a\x00\x00\x00'
tRp4051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4052
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4053
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4054
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4055
Nsg70
Vn
sS'block_loop.thisTrialN'
p4056
I0
sg39
F0.68327537278082673
sg34
g753
(S'\x07\xdf\x07\r\x0b\x07\x00\x04a\x18'
tRp4057
sa(dp4058
S'trial_loop.thisTrialN'
p4059
I27
sg3633
S'42-mrkipling_lemon_slices.png'
p4060
sS'block_loop.thisIndex'
p4061
g3627
sg38
S'left'
p4062
sg59
g63
sS'trial_loop.thisN'
p4063
I27
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4064
g60
(g99
S'\x1b\x00\x00\x00'
tRp4065
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4066
I0
sg3642
S'16-skips_prawn.png'
p4067
sS'block_loop.thisRepN'
p4068
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4069
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4070
Nsg70
Vn
sS'block_loop.thisTrialN'
p4071
I0
sg39
F0.88322017768496153
sg34
g753
(S'\x07\xdf\x07\r\x0b\x07\x06\x002\xc8'
tRp4072
sa(dp4073
S'trial_loop.thisTrialN'
p4074
I28
sg3633
S'5-pineapple.png'
p4075
sS'block_loop.thisIndex'
p4076
g3627
sg38
S'right'
p4077
sg59
g63
sS'trial_loop.thisN'
p4078
I28
sg33
g3966
sg64
g65
sS'trial_loop.thisIndex'
p4079
g60
(g99
S'\x1c\x00\x00\x00'
tRp4080
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4081
I0
sg3642
S'40-sardines.png'
p4082
sS'block_loop.thisRepN'
p4083
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4084
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p4085
Nsg70
Vn
sS'block_loop.thisTrialN'
p4086
I0
sg39
F1.1165548794915594
sg34
g753
(S'\x07\xdf\x07\r\x0b\x07\x0b\x0e\x1dH'
tRp4087
sa(dp4088
S'trial_loop.thisTrialN'
p4089
I29
sg3633
g3938
sS'block_loop.thisIndex'
p4090
g3627
sg38
S'right'
p4091
sg59
g63
sS'trial_loop.thisN'
p4092
I29
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p4093
g60
(g99
S'\x1d\x00\x00\x00'
tRp4094
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4095
I0
sg3642
g3946
sS'block_loop.thisRepN'
p4096
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4097
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p4098
Nsg70
Vn
sS'block_loop.thisTrialN'
p4099
I0
sg39
F0.94999027813628345
sg34
g753
(S'\x07\xdf\x07\r\x0b\x07\x12\x01\x19@'
tRp4100
sa(dp4101
S'trial_loop.thisTrialN'
p4102
I30
sg3633
S'46-pistachios.png'
p4103
sS'block_loop.thisIndex'
p4104
g3627
sg38
S'left'
p4105
sg59
g63
sS'trial_loop.thisN'
p4106
I30
sg33
S'29-beans.png'
p4107
sg64
g65
sS'trial_loop.thisIndex'
p4108
g60
(g99
S'\x1e\x00\x00\x00'
tRp4109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4110
I0
sg3642
S'29-beans.png'
p4111
sS'block_loop.thisRepN'
p4112
I1
sg3645
S'46-pistachios.png'
p4113
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4114
I1
sg3647
g4107
sg55
g11
sS'block_loop.thisTrial'
p4115
Nsg70
Vn
sS'block_loop.thisTrialN'
p4116
I0
sg39
F0.94991643758976352
sg34
g753
(S'\x07\xdf\x07\r\x0b\x07\x18\x00\xf20'
tRp4117
sa(dp4118
S'trial_loop.thisTrialN'
p4119
I31
sg3633
S'19-caramello_redo.png'
p4120
sS'block_loop.thisIndex'
p4121
g3627
sg38
S'left'
p4122
sg59
g63
sS'trial_loop.thisN'
p4123
I31
sg33
S'19-caramello_redo.png'
p4124
sg64
g65
sS'trial_loop.thisIndex'
p4125
g60
(g99
S'\x1f\x00\x00\x00'
tRp4126
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4127
I0
sg3642
S'30-spaghetti_hoops.png'
p4128
sS'block_loop.thisRepN'
p4129
I1
sg3645
g4124
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4130
I1
sg3647
S'30-spaghetti_hoops.png'
p4131
sg55
g11
sS'block_loop.thisTrial'
p4132
Nsg70
Vn
sS'block_loop.thisTrialN'
p4133
I0
sg39
F0.7331630724279421
sg34
g753
(S'\x07\xdf\x07\r\x0b\x07\x1e\x00\x90\x88'
tRp4134
sa(dp4135
S'trial_loop.thisTrialN'
p4136
I32
sg3633
g3987
sS'block_loop.thisIndex'
p4137
g3627
sg38
S'right'
p4138
sg59
g63
sS'trial_loop.thisN'
p4139
I32
sg33
g3915
sg64
g65
sS'trial_loop.thisIndex'
p4140
g60
(g99
S' \x00\x00\x00'
tRp4141
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4142
I0
sg3642
g3994
sS'block_loop.thisRepN'
p4143
I1
sg3645
g3908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4144
I1
sg3647
g3915
sg55
g11
sS'block_loop.thisTrial'
p4145
Nsg70
Vn
sS'block_loop.thisTrialN'
p4146
I0
sg39
F0.84990184054004203
sg34
g753
(S'\x07\xdf\x07\r\x0b\x07#\x0cX('
tRp4147
sa(dp4148
S'trial_loop.thisTrialN'
p4149
I33
sg3633
g3634
sS'block_loop.thisIndex'
p4150
g3627
sg38
S'left'
p4151
sg59
g63
sS'trial_loop.thisN'
p4152
I33
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4153
g60
(g99
S'!\x00\x00\x00'
tRp4154
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4155
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4156
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4157
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4158
Nsg70
Vn
sS'block_loop.thisTrialN'
p4159
I0
sg39
F0.78324093286528296
sg34
g753
(S'\x07\xdf\x07\r\x0b\x07)\n\x87P'
tRp4160
sa(dp4161
S'trial_loop.thisTrialN'
p4162
I34
sg3633
S'23-crunchie_redo.png'
p4163
sS'block_loop.thisIndex'
p4164
g3627
sg38
S'left'
p4165
sg59
g63
sS'trial_loop.thisN'
p4166
I34
sg33
S'23-crunchie_redo.png'
p4167
sg64
g65
sS'trial_loop.thisIndex'
p4168
g60
(g99
S'"\x00\x00\x00'
tRp4169
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4170
I0
sg3642
S'33-ambrosia_rice.png'
p4171
sS'block_loop.thisRepN'
p4172
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4173
I1
sg3647
S'33-ambrosia_rice.png'
p4174
sg55
g11
sS'block_loop.thisTrial'
p4175
Nsg70
Vn
sS'block_loop.thisTrialN'
p4176
I0
sg39
F0.6165953634977086
sg34
g753
(S'\x07\xdf\x07\r\x0b\x07/\x07\xc4H'
tRp4177
sa(dp4178
S'trial_loop.thisTrialN'
p4179
I35
sg3633
g3634
sS'block_loop.thisIndex'
p4180
g3627
sg38
S'left'
p4181
sg59
g63
sS'trial_loop.thisN'
p4182
I35
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4183
g60
(g99
S'#\x00\x00\x00'
tRp4184
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4185
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4186
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4187
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4188
Nsg70
Vn
sS'block_loop.thisTrialN'
p4189
I0
sg39
F0.70034850457204811
sg34
g753
(S'\x07\xdf\x07\r\x0b\x075\x02a`'
tRp4190
sa(dp4191
S'trial_loop.thisTrialN'
p4192
I36
sg3633
S'43-mrporky_pork_crackles_redo.png'
p4193
sS'block_loop.thisIndex'
p4194
g3627
sg38
S'right'
p4195
sg59
g63
sS'trial_loop.thisN'
p4196
I36
sg33
S'18-mms.png'
p4197
sg64
g65
sS'trial_loop.thisIndex'
p4198
g60
(g99
S'$\x00\x00\x00'
tRp4199
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4200
I0
sg3642
S'18-mms.png'
p4201
sS'block_loop.thisRepN'
p4202
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4203
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p4204
sg55
g11
sS'block_loop.thisTrial'
p4205
Nsg70
Vn
sS'block_loop.thisTrialN'
p4206
I0
sg39
F0.8832908821464116
sg34
g753
(S'\x07\xdf\x07\r\x0b\x07:\r\xaf\xe8'
tRp4207
sa(dp4208
S'trial_loop.thisTrialN'
p4209
I37
sg3633
S'30-spaghetti_hoops.png'
p4210
sS'block_loop.thisIndex'
p4211
g3627
sg38
S'right'
p4212
sg59
g63
sS'trial_loop.thisN'
p4213
I37
sg33
g4124
sg64
g65
sS'trial_loop.thisIndex'
p4214
g60
(g99
S'%\x00\x00\x00'
tRp4215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4216
I0
sg3642
S'19-caramello_redo.png'
p4217
sS'block_loop.thisRepN'
p4218
I1
sg3645
g4124
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4219
I1
sg3647
g4131
sg55
g11
sS'block_loop.thisTrial'
p4220
Nsg70
Vn
sS'block_loop.thisTrialN'
p4221
I0
sg39
F0.79988698690067395
sg34
g753
(S'\x07\xdf\x07\r\x0b\x08\x04\x0cX('
tRp4222
sa(dp4223
S'trial_loop.thisTrialN'
p4224
I38
sg3633
g3799
sS'block_loop.thisIndex'
p4225
g3627
sg38
S'right'
p4226
sg59
g63
sS'trial_loop.thisN'
p4227
I38
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4228
g60
(g99
S'&\x00\x00\x00'
tRp4229
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4230
I0
sg3642
g3806
sS'block_loop.thisRepN'
p4231
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4232
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4233
Nsg70
Vn
sS'block_loop.thisTrialN'
p4234
I0
sg39
F0.88321561610655408
sg34
g753
(S'\x07\xdf\x07\r\x0b\x08\n\t\xd3\xa0'
tRp4235
sa(dp4236
S'trial_loop.thisTrialN'
p4237
I39
sg3633
S'38-maltesers.png'
p4238
sS'block_loop.thisIndex'
p4239
g3627
sg38
S'left'
p4240
sg59
g63
sS'trial_loop.thisN'
p4241
I39
sg33
g3932
sg64
g65
sS'trial_loop.thisIndex'
p4242
g60
(g99
S"'\x00\x00\x00"
tRp4243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4244
I0
sg3642
S'6-sour_patch_kids.png'
p4245
sS'block_loop.thisRepN'
p4246
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4247
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p4248
Nsg70
Vn
sS'block_loop.thisTrialN'
p4249
I0
sg39
F0.86634632983941628
sg34
g753
(S'\x07\xdf\x07\r\x0b\x08\x10\x08{\xe0'
tRp4250
sa(dp4251
S'trial_loop.thisTrialN'
p4252
I40
sg3633
g4120
sS'block_loop.thisIndex'
p4253
g3627
sg38
S'left'
p4254
sg59
g63
sS'trial_loop.thisN'
p4255
I40
sg33
g4124
sg64
g65
sS'trial_loop.thisIndex'
p4256
g60
(g99
S'(\x00\x00\x00'
tRp4257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4258
I0
sg3642
g4128
sS'block_loop.thisRepN'
p4259
I1
sg3645
g4124
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4260
I1
sg3647
g4131
sg55
g11
sS'block_loop.thisTrial'
p4261
Nsg70
Vn
sS'block_loop.thisTrialN'
p4262
I0
sg39
F0.6332599489446693
sg34
g753
(S'\x07\xdf\x07\r\x0b\x08\x16\x06\xe9\x88'
tRp4263
sa(dp4264
S'trial_loop.thisTrialN'
p4265
I41
sg3633
g3782
sS'block_loop.thisIndex'
p4266
g3627
sg38
S'right'
p4267
sg59
g63
sS'trial_loop.thisN'
p4268
I41
sg33
g3786
sg64
g65
sS'trial_loop.thisIndex'
p4269
g60
(g99
S')\x00\x00\x00'
tRp4270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4271
I0
sg3642
g3790
sS'block_loop.thisRepN'
p4272
I1
sg3645
g3786
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4273
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p4274
Nsg70
Vn
sS'block_loop.thisTrialN'
p4275
I0
sg39
F0.83371793139258443
sg34
g753
(S'\x07\xdf\x07\r\x0b\x08\x1c\x01\xff\xb8'
tRp4276
sa(dp4277
S'trial_loop.thisTrialN'
p4278
I42
sg3633
S'29-beans.png'
p4279
sS'block_loop.thisIndex'
p4280
g3627
sg38
S'right'
p4281
sg59
g63
sS'trial_loop.thisN'
p4282
I42
sg33
g4113
sg64
g65
sS'trial_loop.thisIndex'
p4283
g60
(g99
S'*\x00\x00\x00'
tRp4284
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4285
I0
sg3642
S'46-pistachios.png'
p4286
sS'block_loop.thisRepN'
p4287
I1
sg3645
g4113
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4288
I1
sg3647
g4107
sg55
g11
sS'block_loop.thisTrial'
p4289
Nsg70
Vn
sS'block_loop.thisTrialN'
p4290
I0
sg39
F0.98323505983353243
sg34
g753
(S'\x07\xdf\x07\r\x0b\x08!\x0f6\x88'
tRp4291
sa(dp4292
S'trial_loop.thisTrialN'
p4293
I43
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p4294
sS'block_loop.thisIndex'
p4295
g3627
sg38
S'left'
p4296
sg59
g63
sS'trial_loop.thisN'
p4297
I43
sg33
S'17-jacobs_mini_cheddars_redo.png'
p4298
sg64
g65
sS'trial_loop.thisIndex'
p4299
g60
(g99
S'+\x00\x00\x00'
tRp4300
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4301
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p4302
sS'block_loop.thisRepN'
p4303
I1
sg3645
g4298
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4304
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p4305
sg55
g11
sS'block_loop.thisTrial'
p4306
Nsg70
Vn
sS'block_loop.thisTrialN'
p4307
I0
sg39
F0.76634142614329903
sg34
g753
(S'\x07\xdf\x07\r\x0b\x08(\x00\x0b\xb8'
tRp4308
sa(dp4309
S'trial_loop.thisTrialN'
p4310
I44
sg3633
g4163
sS'block_loop.thisIndex'
p4311
g3627
sg38
S'left'
p4312
sg59
g63
sS'trial_loop.thisN'
p4313
I44
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p4314
g60
(g99
S',\x00\x00\x00'
tRp4315
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4316
I0
sg3642
g4171
sS'block_loop.thisRepN'
p4317
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4318
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p4319
Nsg70
Vn
sS'block_loop.thisTrialN'
p4320
I0
sg39
F0.6832115106863057
sg34
g753
(S'\x07\xdf\x07\r\x0b\x08-\x0cLp'
tRp4321
sa(dp4322
S'trial_loop.thisTrialN'
p4323
I45
sg3633
S'18-mms.png'
p4324
sS'block_loop.thisIndex'
p4325
g3627
sg38
S'left'
p4326
sg59
g63
sS'trial_loop.thisN'
p4327
I45
sg33
g4204
sg64
g65
sS'trial_loop.thisIndex'
p4328
g60
(g99
S'-\x00\x00\x00'
tRp4329
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4330
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p4331
sS'block_loop.thisRepN'
p4332
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4333
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p4334
Nsg70
Vn
sS'block_loop.thisTrialN'
p4335
I0
sg39
F0.89993864677353486
sg34
g753
(S'\x07\xdf\x07\r\x0b\x083\x08\x1a8'
tRp4336
sa(dp4337
S'trial_loop.thisTrialN'
p4338
I46
sg3633
g3752
sS'block_loop.thisIndex'
p4339
g3627
sg38
S'right'
p4340
sg59
g63
sS'trial_loop.thisN'
p4341
I46
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p4342
g60
(g99
S'.\x00\x00\x00'
tRp4343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4344
I0
sg3642
g3760
sS'block_loop.thisRepN'
p4345
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4346
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p4347
Nsg70
Vn
sS'block_loop.thisTrialN'
p4348
I0
sg39
F0.89992610243371018
sg34
g753
(S'\x07\xdf\x07\r\x0b\x089\x07\x00\xf8'
tRp4349
sa(dp4350
S'trial_loop.thisTrialN'
p4351
I47
sg3633
g4279
sS'block_loop.thisIndex'
p4352
g3627
sg38
S'right'
p4353
sg59
g63
sS'trial_loop.thisN'
p4354
I47
sg33
g4113
sg64
g65
sS'trial_loop.thisIndex'
p4355
g60
(g99
S'/\x00\x00\x00'
tRp4356
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4357
I0
sg3642
g4286
sS'block_loop.thisRepN'
p4358
I1
sg3645
g4113
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4359
I1
sg3647
g4107
sg55
g11
sS'block_loop.thisTrial'
p4360
Nsg70
Vn
sS'block_loop.thisTrialN'
p4361
I0
sg39
F0.91693280624303952
sg34
g753
(S'\x07\xdf\x07\r\x0b\t\x03\x05\xe7\xb8'
tRp4362
sa(dp4363
S'trial_loop.thisTrialN'
p4364
I48
sg3633
g3814
sS'block_loop.thisIndex'
p4365
g3627
sg38
S'right'
p4366
sg59
g63
sS'trial_loop.thisN'
p4367
I48
sg33
g3818
sg64
g65
sS'trial_loop.thisIndex'
p4368
g60
(g99
S'0\x00\x00\x00'
tRp4369
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4370
I0
sg3642
g3822
sS'block_loop.thisRepN'
p4371
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4372
I1
sg3647
g3818
sg55
g11
sS'block_loop.thisTrial'
p4373
Nsg70
Vn
sS'block_loop.thisTrialN'
p4374
I0
sg39
F1.1498960245276066
sg34
g753
(S'\x07\xdf\x07\r\x0b\t\t\x05Kx'
tRp4375
sa(dp4376
S'trial_loop.thisTrialN'
p4377
I49
sg3633
g4193
sS'block_loop.thisIndex'
p4378
g3627
sg38
S'right'
p4379
sg59
g63
sS'trial_loop.thisN'
p4380
I49
sg33
g4197
sg64
g65
sS'trial_loop.thisIndex'
p4381
g60
(g99
S'1\x00\x00\x00'
tRp4382
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4383
I0
sg3642
g4201
sS'block_loop.thisRepN'
p4384
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4385
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p4386
Nsg70
Vn
sS'block_loop.thisTrialN'
p4387
I0
sg39
F1.699882653401346
sg34
g753
(S'\x07\xdf\x07\r\x0b\t\x0f\x07\xfe\xe0'
tRp4388
sa(dp4389
S'trial_loop.thisTrialN'
p4390
I50
sg3633
g3671
sS'block_loop.thisIndex'
p4391
g3627
sg38
S'left'
p4392
sg59
g63
sS'trial_loop.thisN'
p4393
I50
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p4394
g60
(g99
S'2\x00\x00\x00'
tRp4395
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4396
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4397
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4398
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4399
Nsg70
Vn
sS'block_loop.thisTrialN'
p4400
I0
sg39
F0.81658949046595808
sg34
g753
(S'\x07\xdf\x07\r\x0b\t\x16\x04\x03X'
tRp4401
sa(dp4402
S'trial_loop.thisTrialN'
p4403
I51
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p4404
sS'block_loop.thisIndex'
p4405
g3627
sg38
S'left'
p4406
sg59
g63
sS'trial_loop.thisN'
p4407
I51
sg33
g3949
sg64
g65
sS'trial_loop.thisIndex'
p4408
g60
(g99
S'3\x00\x00\x00'
tRp4409
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4410
I0
sg3642
S'36-fig_rolls.png'
p4411
sS'block_loop.thisRepN'
p4412
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4413
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p4414
Nsg70
Vn
sS'block_loop.thisTrialN'
p4415
I0
sg39
F1.5999507349556552
sg34
g753
(S'\x07\xdf\x07\r\x0b\t\x1c\x01\xb9h'
tRp4416
sa(dp4417
S'trial_loop.thisTrialN'
p4418
I52
sg3633
g4210
sS'block_loop.thisIndex'
p4419
g3627
sg38
S'right'
p4420
sg59
g63
sS'trial_loop.thisN'
p4421
I52
sg33
g4124
sg64
g65
sS'trial_loop.thisIndex'
p4422
g60
(g99
S'4\x00\x00\x00'
tRp4423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4424
I0
sg3642
g4217
sS'block_loop.thisRepN'
p4425
I1
sg3645
g4124
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4426
I1
sg3647
g4131
sg55
g11
sS'block_loop.thisTrial'
p4427
Nsg70
Vn
sS'block_loop.thisTrialN'
p4428
I0
sg39
F0.81700145799413804
sg34
g753
(S'\x07\xdf\x07\r\x0b\t"\x0bVX'
tRp4429
sa(dp4430
S'trial_loop.thisTrialN'
p4431
I53
sg3633
g4404
sS'block_loop.thisIndex'
p4432
g3627
sg38
S'left'
p4433
sg59
g63
sS'trial_loop.thisN'
p4434
I53
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p4435
g60
(g99
S'5\x00\x00\x00'
tRp4436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4437
I0
sg3642
g4411
sS'block_loop.thisRepN'
p4438
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4439
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p4440
Nsg70
Vn
sS'block_loop.thisTrialN'
p4441
I0
sg39
F0.83322100447094272
sg34
g753
(S'\x07\xdf\x07\r\x0b\t(\t\x0ch'
tRp4442
sa(dp4443
S'trial_loop.thisTrialN'
p4444
I54
sg3633
g3889
sS'block_loop.thisIndex'
p4445
g3627
sg38
S'left'
p4446
sg59
g63
sS'trial_loop.thisN'
p4447
I54
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p4448
g60
(g99
S'6\x00\x00\x00'
tRp4449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4450
I0
sg3642
g3896
sS'block_loop.thisRepN'
p4451
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4452
I1
sg3647
g3818
sg55
g11
sS'block_loop.thisTrial'
p4453
Nsg70
Vn
sS'block_loop.thisTrialN'
p4454
I0
sg39
F1.016629518314403
sg34
g753
(S'\x07\xdf\x07\r\x0b\t.\x07\x00\xf8'
tRp4455
sa(dp4456
S'trial_loop.thisTrialN'
p4457
I55
sg3633
S'20-fruit_pastilles.png'
p4458
sS'block_loop.thisIndex'
p4459
g3627
sg38
S'right'
p4460
sg59
g63
sS'trial_loop.thisN'
p4461
I55
sg33
g4026
sg64
g65
sS'trial_loop.thisIndex'
p4462
g60
(g99
S'7\x00\x00\x00'
tRp4463
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4464
I0
sg3642
S'2-steamed_puddings.png'
p4465
sS'block_loop.thisRepN'
p4466
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4467
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p4468
Nsg70
Vn
sS'block_loop.thisTrialN'
p4469
I0
sg39
F1.3165786567178657
sg34
g753
(S'\x07\xdf\x07\r\x0b\t4\x07\xd0\x00'
tRp4470
sa(dp4471
S'trial_loop.thisTrialN'
p4472
I56
sg3633
g4210
sS'block_loop.thisIndex'
p4473
g3627
sg38
S'right'
p4474
sg59
g63
sS'trial_loop.thisN'
p4475
I56
sg33
g4124
sg64
g65
sS'trial_loop.thisIndex'
p4476
g60
(g99
S'8\x00\x00\x00'
tRp4477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4478
I0
sg3642
g4217
sS'block_loop.thisRepN'
p4479
I1
sg3645
g4124
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4480
I1
sg3647
g4131
sg55
g11
sS'block_loop.thisTrial'
p4481
Nsg70
Vn
sS'block_loop.thisTrialN'
p4482
I0
sg39
F0.91661406596858797
sg34
g753
(S'\x07\xdf\x07\r\x0b\t:\r#H'
tRp4483
sa(dp4484
S'trial_loop.thisTrialN'
p4485
I57
sg3633
g3872
sS'block_loop.thisIndex'
p4486
g3627
sg38
S'right'
p4487
sg59
g63
sS'trial_loop.thisN'
p4488
I57
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p4489
g60
(g99
S'9\x00\x00\x00'
tRp4490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4491
I0
sg3642
g3880
sS'block_loop.thisRepN'
p4492
I1
sg3645
g3876
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4493
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p4494
Nsg70
Vn
sS'block_loop.thisTrialN'
p4495
I0
sg39
F2.2999676698145777
sg34
g753
(S'\x07\xdf\x07\r\x0b\n\x04\x0cH\x88'
tRp4496
sa(dp4497
S'trial_loop.thisTrialN'
p4498
I58
sg3633
g3889
sS'block_loop.thisIndex'
p4499
g3627
sg38
S'left'
p4500
sg59
g63
sS'trial_loop.thisN'
p4501
I58
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p4502
g60
(g99
S':\x00\x00\x00'
tRp4503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4504
I0
sg3642
g3896
sS'block_loop.thisRepN'
p4505
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4506
I1
sg3647
g3818
sg55
g11
sS'block_loop.thisTrial'
p4507
Nsg70
Vn
sS'block_loop.thisTrialN'
p4508
I0
sg39
F0.91655761643869482
sg34
g753
(S'\x07\xdf\x07\r\x0b\n\x0c\x02\x17('
tRp4509
sa(dp4510
S'trial_loop.thisTrialN'
p4511
I59
sg3633
g3831
sS'block_loop.thisIndex'
p4512
g3627
sg38
S'left'
p4513
sg59
g63
sS'trial_loop.thisN'
p4514
I59
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4515
g60
(g99
S';\x00\x00\x00'
tRp4516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4517
I0
sg3642
g3838
sS'block_loop.thisRepN'
p4518
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4519
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4520
Nsg70
Vn
sS'block_loop.thisTrialN'
p4521
I0
sg39
F0.74997391347460507
sg34
g753
(S'\x07\xdf\x07\r\x0b\n\x12\x01w\x00'
tRp4522
sa(dp4523
S'trial_loop.thisTrialN'
p4524
I60
sg3633
g3722
sS'block_loop.thisIndex'
p4525
g3627
sg38
S'right'
p4526
sg59
g63
sS'trial_loop.thisN'
p4527
I60
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4528
g60
(g99
S'<\x00\x00\x00'
tRp4529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4530
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4531
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4532
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4533
Nsg70
Vn
sS'block_loop.thisTrialN'
p4534
I0
sg39
F0.84987618166223911
sg34
g753
(S'\x07\xdf\x07\r\x0b\n\x17\r>\xa0'
tRp4535
sa(dp4536
S'trial_loop.thisTrialN'
p4537
I61
sg3633
g3889
sS'block_loop.thisIndex'
p4538
g3627
sg38
S'left'
p4539
sg59
g63
sS'trial_loop.thisN'
p4540
I61
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p4541
g60
(g99
S'=\x00\x00\x00'
tRp4542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4543
I0
sg3642
g3896
sS'block_loop.thisRepN'
p4544
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4545
I1
sg3647
g3818
sg55
g11
sS'block_loop.thisTrial'
p4546
Nsg70
Vn
sS'block_loop.thisTrialN'
p4547
I0
sg39
F2.3831796936783576
sg34
g753
(S'\x07\xdf\x07\r\x0b\n\x1d\x0bm\xc8'
tRp4548
sa(dp4549
S'trial_loop.thisTrialN'
p4550
I62
sg3633
g3688
sS'block_loop.thisIndex'
p4551
g3627
sg38
S'right'
p4552
sg59
g63
sS'trial_loop.thisN'
p4553
I62
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4554
g60
(g99
S'>\x00\x00\x00'
tRp4555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4556
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4557
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4558
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4559
Nsg70
Vn
sS'block_loop.thisTrialN'
p4560
I0
sg39
F0.96664716591976685
sg34
g753
(S'\x07\xdf\x07\r\x0b\n%\x02\xab\x98'
tRp4561
sa(dp4562
S'trial_loop.thisTrialN'
p4563
I63
sg3633
g4060
sS'block_loop.thisIndex'
p4564
g3627
sg38
S'left'
p4565
sg59
g63
sS'trial_loop.thisN'
p4566
I63
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4567
g60
(g99
S'?\x00\x00\x00'
tRp4568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4569
I0
sg3642
g4067
sS'block_loop.thisRepN'
p4570
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4571
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4572
Nsg70
Vn
sS'block_loop.thisTrialN'
p4573
I0
sg39
F0.89986366583252675
sg34
g753
(S'\x07\xdf\x07\r\x0b\n+\x02\xc3\x08'
tRp4574
sa(dp4575
S'trial_loop.thisTrialN'
p4576
I64
sg3633
g3921
sS'block_loop.thisIndex'
p4577
g3627
sg38
S'right'
p4578
sg59
g63
sS'trial_loop.thisN'
p4579
I64
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p4580
g60
(g99
S'@\x00\x00\x00'
tRp4581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4582
I0
sg3642
g3929
sS'block_loop.thisRepN'
p4583
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4584
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p4585
Nsg70
Vn
sS'block_loop.thisTrialN'
p4586
I0
sg39
F1.0329998819693174
sg34
g753
(S'\x07\xdf\x07\r\x0b\n1\x01\xa9\xc8'
tRp4587
sa(dp4588
S'trial_loop.thisTrialN'
p4589
I65
sg3633
g3688
sS'block_loop.thisIndex'
p4590
g3627
sg38
S'right'
p4591
sg59
g63
sS'trial_loop.thisN'
p4592
I65
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4593
g60
(g99
S'A\x00\x00\x00'
tRp4594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4595
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4596
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4597
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4598
Nsg70
Vn
sS'block_loop.thisTrialN'
p4599
I0
sg39
F0.71671630233913675
sg34
g753
(S'\x07\xdf\x07\r\x0b\n7\x02\xb3h'
tRp4600
sa(dp4601
S'trial_loop.thisTrialN'
p4602
I66
sg3633
g4324
sS'block_loop.thisIndex'
p4603
g3627
sg38
S'left'
p4604
sg59
g63
sS'trial_loop.thisN'
p4605
I66
sg33
g4197
sg64
g65
sS'trial_loop.thisIndex'
p4606
g60
(g99
S'B\x00\x00\x00'
tRp4607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4608
I0
sg3642
g4331
sS'block_loop.thisRepN'
p4609
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4610
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p4611
Nsg70
Vn
sS'block_loop.thisTrialN'
p4612
I0
sg39
F0.98340013194365383
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0b\x00\x0e\x01\xf0'
tRp4613
sa(dp4614
S'trial_loop.thisTrialN'
p4615
I67
sg3633
g4032
sS'block_loop.thisIndex'
p4616
g3627
sg38
S'left'
p4617
sg59
g63
sS'trial_loop.thisN'
p4618
I67
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p4619
g60
(g99
S'C\x00\x00\x00'
tRp4620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4621
I0
sg3642
g4039
sS'block_loop.thisRepN'
p4622
I1
sg3645
g3876
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4623
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p4624
Nsg70
Vn
sS'block_loop.thisTrialN'
p4625
I0
sg39
F0.78330279926967705
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0b\x06\x0eW\xe0'
tRp4626
sa(dp4627
S'trial_loop.thisTrialN'
p4628
I68
sg3633
g4404
sS'block_loop.thisIndex'
p4629
g3627
sg38
S'right'
p4630
sg59
g63
sS'trial_loop.thisN'
p4631
I68
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p4632
g60
(g99
S'D\x00\x00\x00'
tRp4633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4634
I0
sg3642
g4411
sS'block_loop.thisRepN'
p4635
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4636
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p4637
Nsg70
Vn
sS'block_loop.thisTrialN'
p4638
I0
sg39
F1.4670289129931007
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0b\x0c\x0b\x90\xf0'
tRp4639
sa(dp4640
S'trial_loop.thisTrialN'
p4641
I69
sg3633
S'13-mccoys_steak_crisps.png'
p4642
sS'block_loop.thisIndex'
p4643
g3627
sg38
S'right'
p4644
sg59
g63
sS'trial_loop.thisN'
p4645
I69
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p4646
g60
(g99
S'E\x00\x00\x00'
tRp4647
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4648
I0
sg3642
S'3-ellas_strawberries_apples.png'
p4649
sS'block_loop.thisRepN'
p4650
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4651
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4652
Nsg70
Vn
sS'block_loop.thisTrialN'
p4653
I0
sg39
F0.86666278932534624
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0b\x13\x04\x07@'
tRp4654
sa(dp4655
S'trial_loop.thisTrialN'
p4656
I70
sg3633
S'8-liquorice_catherine_wheels.png'
p4657
sS'block_loop.thisIndex'
p4658
g3627
sg38
S'right'
p4659
sg59
g63
sS'trial_loop.thisN'
p4660
I70
sg33
g4305
sg64
g65
sS'trial_loop.thisIndex'
p4661
g60
(g99
S'F\x00\x00\x00'
tRp4662
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4663
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p4664
sS'block_loop.thisRepN'
p4665
I1
sg3645
g4298
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4666
I1
sg3647
g4305
sg55
g11
sS'block_loop.thisTrial'
p4667
Nsg70
Vn
sS'block_loop.thisTrialN'
p4668
I0
sg39
F0.89993322989948865
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0b\x19\x02q\x00'
tRp4669
sa(dp4670
S'trial_loop.thisTrialN'
p4671
I71
sg3633
g4238
sS'block_loop.thisIndex'
p4672
g3627
sg38
S'left'
p4673
sg59
g63
sS'trial_loop.thisN'
p4674
I71
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p4675
g60
(g99
S'G\x00\x00\x00'
tRp4676
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4677
I0
sg3642
g4245
sS'block_loop.thisRepN'
p4678
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4679
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p4680
Nsg70
Vn
sS'block_loop.thisTrialN'
p4681
I0
sg39
F1.08298137906786
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0b\x1f\x01W\xc0'
tRp4682
sa(dp4683
S'trial_loop.thisTrialN'
p4684
I72
sg3633
g3752
sS'block_loop.thisIndex'
p4685
g3627
sg38
S'right'
p4686
sg59
g63
sS'trial_loop.thisN'
p4687
I72
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p4688
g60
(g99
S'H\x00\x00\x00'
tRp4689
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4690
I0
sg3642
g3760
sS'block_loop.thisRepN'
p4691
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4692
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p4693
Nsg70
Vn
sS'block_loop.thisTrialN'
p4694
I0
sg39
F0.6498931735413862
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0b%\x03\x1c\xe0'
tRp4695
sa(dp4696
S'trial_loop.thisTrialN'
p4697
I73
sg3633
g4032
sS'block_loop.thisIndex'
p4698
g3627
sg38
S'left'
p4699
sg59
g63
sS'trial_loop.thisN'
p4700
I73
sg33
g3883
sg64
g65
sS'trial_loop.thisIndex'
p4701
g60
(g99
S'I\x00\x00\x00'
tRp4702
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4703
I0
sg3642
g4039
sS'block_loop.thisRepN'
p4704
I1
sg3645
g3876
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4705
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p4706
Nsg70
Vn
sS'block_loop.thisTrialN'
p4707
I0
sg39
F0.66660537046027457
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0b*\r\xb3\xd0'
tRp4708
sa(dp4709
S'trial_loop.thisTrialN'
p4710
I74
sg3633
g3799
sS'block_loop.thisIndex'
p4711
g3627
sg38
S'right'
p4712
sg59
g63
sS'trial_loop.thisN'
p4713
I74
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4714
g60
(g99
S'J\x00\x00\x00'
tRp4715
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4716
I0
sg3642
g3806
sS'block_loop.thisRepN'
p4717
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4718
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4719
Nsg70
Vn
sS'block_loop.thisTrialN'
p4720
I0
sg39
F0.96669192640592883
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0b0\t\x08\x80'
tRp4721
sa(dp4722
S'trial_loop.thisTrialN'
p4723
I75
sg3633
g3938
sS'block_loop.thisIndex'
p4724
g3627
sg38
S'left'
p4725
sg59
g63
sS'trial_loop.thisN'
p4726
I75
sg33
g3949
sg64
g65
sS'trial_loop.thisIndex'
p4727
g60
(g99
S'K\x00\x00\x00'
tRp4728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4729
I0
sg3642
g3946
sS'block_loop.thisRepN'
p4730
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4731
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p4732
Nsg70
Vn
sS'block_loop.thisTrialN'
p4733
I0
sg39
F1.0832382529383722
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0b6\x08\xe1p'
tRp4734
sa(dp4735
S'trial_loop.thisTrialN'
p4736
I76
sg3633
g4294
sS'block_loop.thisIndex'
p4737
g3627
sg38
S'left'
p4738
sg59
g63
sS'trial_loop.thisN'
p4739
I76
sg33
g4298
sg64
g65
sS'trial_loop.thisIndex'
p4740
g60
(g99
S'L\x00\x00\x00'
tRp4741
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4742
I0
sg3642
g4302
sS'block_loop.thisRepN'
p4743
I1
sg3645
g4298
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4744
I1
sg3647
g4305
sg55
g11
sS'block_loop.thisTrial'
p4745
Nsg70
Vn
sS'block_loop.thisTrialN'
p4746
I0
sg39
F0.73323605767882327
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0c\x00\n\xe1('
tRp4747
sa(dp4748
S'trial_loop.thisTrialN'
p4749
I77
sg3633
S'10-bounty_redo.png'
p4750
sS'block_loop.thisIndex'
p4751
g3627
sg38
S'left'
p4752
sg59
g63
sS'trial_loop.thisN'
p4753
I77
sg33
g3763
sg64
g65
sS'trial_loop.thisIndex'
p4754
g60
(g99
S'M\x00\x00\x00'
tRp4755
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4756
I0
sg3642
S'4-corn.png'
p4757
sS'block_loop.thisRepN'
p4758
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4759
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p4760
Nsg70
Vn
sS'block_loop.thisTrialN'
p4761
I0
sg39
F0.69995022177863575
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0c\x06\x07(\x08'
tRp4762
sa(dp4763
S'trial_loop.thisTrialN'
p4764
I78
sg3633
g4294
sS'block_loop.thisIndex'
p4765
g3627
sg38
S'left'
p4766
sg59
g63
sS'trial_loop.thisN'
p4767
I78
sg33
g4305
sg64
g65
sS'trial_loop.thisIndex'
p4768
g60
(g99
S'N\x00\x00\x00'
tRp4769
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4770
I0
sg3642
g4302
sS'block_loop.thisRepN'
p4771
I1
sg3645
g4298
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4772
I1
sg3647
g4305
sg55
g11
sS'block_loop.thisTrial'
p4773
Nsg70
Vn
sS'block_loop.thisTrialN'
p4774
I0
sg39
F0.78322553753923785
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0c\x0c\x034P'
tRp4775
sa(dp4776
S'trial_loop.thisTrialN'
p4777
I79
sg3633
g4103
sS'block_loop.thisIndex'
p4778
g3627
sg38
S'left'
p4779
sg59
g63
sS'trial_loop.thisN'
p4780
I79
sg33
g4113
sg64
g65
sS'trial_loop.thisIndex'
p4781
g60
(g99
S'O\x00\x00\x00'
tRp4782
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4783
I0
sg3642
g4111
sS'block_loop.thisRepN'
p4784
I1
sg3645
g4113
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4785
I1
sg3647
g4107
sg55
g11
sS'block_loop.thisTrial'
p4786
Nsg70
Vn
sS'block_loop.thisTrialN'
p4787
I0
sg39
F0.74995310127451376
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0c\x12\x00qH'
tRp4788
sa(dp4789
S'trial_loop.thisTrialN'
p4790
I80
sg3633
g4458
sS'block_loop.thisIndex'
p4791
g3627
sg38
S'right'
p4792
sg59
g63
sS'trial_loop.thisN'
p4793
I80
sg33
g4026
sg64
g65
sS'trial_loop.thisIndex'
p4794
g60
(g99
S'P\x00\x00\x00'
tRp4795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4796
I0
sg3642
g4465
sS'block_loop.thisRepN'
p4797
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4798
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p4799
Nsg70
Vn
sS'block_loop.thisTrialN'
p4800
I0
sg39
F1.2334381926116293
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0c\x17\x0c8\xe8'
tRp4801
sa(dp4802
S'trial_loop.thisTrialN'
p4803
I81
sg3633
g4238
sS'block_loop.thisIndex'
p4804
g3627
sg38
S'left'
p4805
sg59
g63
sS'trial_loop.thisN'
p4806
I81
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p4807
g60
(g99
S'Q\x00\x00\x00'
tRp4808
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4809
I0
sg3642
g4245
sS'block_loop.thisRepN'
p4810
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4811
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p4812
Nsg70
Vn
sS'block_loop.thisTrialN'
p4813
I0
sg39
F0.76634370693227538
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0c\x1e\x01\x19@'
tRp4814
sa(dp4815
S'trial_loop.thisTrialN'
p4816
I82
sg3633
S'45-chewy_nougat_redo.png'
p4817
sS'block_loop.thisIndex'
p4818
g3627
sg38
S'right'
p4819
sg59
g63
sS'trial_loop.thisN'
p4820
I82
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p4821
g60
(g99
S'R\x00\x00\x00'
tRp4822
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4823
I0
sg3642
S'41-peanuts_redo.png'
p4824
sS'block_loop.thisRepN'
p4825
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4826
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4827
Nsg70
Vn
sS'block_loop.thisTrialN'
p4828
I0
sg39
F1.1832802194576288
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0c#\rY\xf8'
tRp4829
sa(dp4830
S'trial_loop.thisTrialN'
p4831
I83
sg3633
g4657
sS'block_loop.thisIndex'
p4832
g3627
sg38
S'right'
p4833
sg59
g63
sS'trial_loop.thisN'
p4834
I83
sg33
g4305
sg64
g65
sS'trial_loop.thisIndex'
p4835
g60
(g99
S'S\x00\x00\x00'
tRp4836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4837
I0
sg3642
g4664
sS'block_loop.thisRepN'
p4838
I1
sg3645
g4298
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4839
I1
sg3647
g4305
sg55
g11
sS'block_loop.thisTrial'
p4840
Nsg70
Vn
sS'block_loop.thisTrialN'
p4841
I0
sg39
F1.2496871042467319
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0c*\x01H '
tRp4842
sa(dp4843
S'trial_loop.thisTrialN'
p4844
I84
sg3633
g4817
sS'block_loop.thisIndex'
p4845
g3627
sg38
S'right'
p4846
sg59
g63
sS'trial_loop.thisN'
p4847
I84
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4848
g60
(g99
S'T\x00\x00\x00'
tRp4849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4850
I0
sg3642
g4824
sS'block_loop.thisRepN'
p4851
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4852
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4853
Nsg70
Vn
sS'block_loop.thisTrialN'
p4854
I0
sg39
F0.9832208049019755
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0c0\x05\xa98'
tRp4855
sa(dp4856
S'trial_loop.thisTrialN'
p4857
I85
sg3633
g4060
sS'block_loop.thisIndex'
p4858
g3627
sg38
S'left'
p4859
sg59
g63
sS'trial_loop.thisN'
p4860
I85
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4861
g60
(g99
S'U\x00\x00\x00'
tRp4862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4863
I0
sg3642
g4067
sS'block_loop.thisRepN'
p4864
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4865
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4866
Nsg70
Vn
sS'block_loop.thisTrialN'
p4867
I0
sg39
F0.73359157567756483
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0c6\x05\xff('
tRp4868
sa(dp4869
S'trial_loop.thisTrialN'
p4870
I86
sg3633
g3831
sS'block_loop.thisIndex'
p4871
g3627
sg38
S'left'
p4872
sg59
g63
sS'trial_loop.thisN'
p4873
I86
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4874
g60
(g99
S'V\x00\x00\x00'
tRp4875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4876
I0
sg3642
g3838
sS'block_loop.thisRepN'
p4877
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4878
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4879
Nsg70
Vn
sS'block_loop.thisTrialN'
p4880
I0
sg39
F0.71659741620806017
sg34
g753
(S'\x07\xdf\x07\r\x0b\r\x00\x02F\x08'
tRp4881
sa(dp4882
S'trial_loop.thisTrialN'
p4883
I87
sg3633
g4294
sS'block_loop.thisIndex'
p4884
g3627
sg38
S'left'
p4885
sg59
g63
sS'trial_loop.thisN'
p4886
I87
sg33
g4298
sg64
g65
sS'trial_loop.thisIndex'
p4887
g60
(g99
S'W\x00\x00\x00'
tRp4888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4889
I0
sg3642
g4302
sS'block_loop.thisRepN'
p4890
I1
sg3645
g4298
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4891
I1
sg3647
g4305
sg55
g11
sS'block_loop.thisTrial'
p4892
Nsg70
Vn
sS'block_loop.thisTrialN'
p4893
I0
sg39
F1.2831377271595557
sg34
g753
(S'\x07\xdf\x07\r\x0b\r\x05\r\xcf('
tRp4894
sa(dp4895
S'trial_loop.thisTrialN'
p4896
I88
sg3633
g4015
sS'block_loop.thisIndex'
p4897
g3627
sg38
S'left'
p4898
sg59
g63
sS'trial_loop.thisN'
p4899
I88
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p4900
g60
(g99
S'X\x00\x00\x00'
tRp4901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4902
I0
sg3642
g4023
sS'block_loop.thisRepN'
p4903
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4904
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p4905
Nsg70
Vn
sS'block_loop.thisTrialN'
p4906
I0
sg39
F0.86662629669990565
sg34
g753
(S'\x07\xdf\x07\r\x0b\r\x0c\x03g\x18'
tRp4907
sa(dp4908
S'trial_loop.thisTrialN'
p4909
I89
sg3633
g4324
sS'block_loop.thisIndex'
p4910
g3627
sg38
S'left'
p4911
sg59
g63
sS'trial_loop.thisN'
p4912
I89
sg33
g4197
sg64
g65
sS'trial_loop.thisIndex'
p4913
g60
(g99
S'Y\x00\x00\x00'
tRp4914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4915
I0
sg3642
g4331
sS'block_loop.thisRepN'
p4916
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4917
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p4918
Nsg70
Vn
sS'block_loop.thisTrialN'
p4919
I0
sg39
F0.79992091363783402
sg34
g753
(S'\x07\xdf\x07\r\x0b\r\x12\x01\xd4\xc0'
tRp4920
sa(dp4921
S'trial_loop.thisTrialN'
p4922
I90
sg3633
g4750
sS'block_loop.thisIndex'
p4923
g3627
sg38
S'left'
p4924
sg59
g63
sS'trial_loop.thisN'
p4925
I90
sg33
g3763
sg64
g65
sS'trial_loop.thisIndex'
p4926
g60
(g99
S'Z\x00\x00\x00'
tRp4927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4928
I0
sg3642
g4757
sS'block_loop.thisRepN'
p4929
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4930
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p4931
Nsg70
Vn
sS'block_loop.thisTrialN'
p4932
I0
sg39
F0.6499305214629203
sg34
g753
(S'\x07\xdf\x07\r\x0b\r\x17\x0e\x92x'
tRp4933
sa(dp4934
S'trial_loop.thisTrialN'
p4935
I91
sg3633
S'44-crunch.png'
p4936
sS'block_loop.thisIndex'
p4937
g3627
sg38
S'left'
p4938
sg59
g63
sS'trial_loop.thisN'
p4939
I91
sg33
g3786
sg64
g65
sS'trial_loop.thisIndex'
p4940
g60
(g99
S'[\x00\x00\x00'
tRp4941
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4942
I0
sg3642
S'26-walkers_smoky_bacon.png'
p4943
sS'block_loop.thisRepN'
p4944
I1
sg3645
g3786
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4945
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p4946
Nsg70
Vn
sS'block_loop.thisTrialN'
p4947
I0
sg39
F0.75000213823932427
sg34
g753
(S'\x07\xdf\x07\r\x0b\r\x1d\t\xa8\xa8'
tRp4948
sa(dp4949
S'trial_loop.thisTrialN'
p4950
I92
sg3633
g4817
sS'block_loop.thisIndex'
p4951
g3627
sg38
S'right'
p4952
sg59
g63
sS'trial_loop.thisN'
p4953
I92
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4954
g60
(g99
S'\\\x00\x00\x00'
tRp4955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4956
I0
sg3642
g4824
sS'block_loop.thisRepN'
p4957
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4958
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4959
Nsg70
Vn
sS'block_loop.thisTrialN'
p4960
I0
sg39
F1.1165731258042797
sg34
g753
(S'\x07\xdf\x07\r\x0b\r#\x06l\x88'
tRp4961
sa(dp4962
S'trial_loop.thisTrialN'
p4963
I93
sg3633
g3782
sS'block_loop.thisIndex'
p4964
g3627
sg38
S'right'
p4965
sg59
g63
sS'trial_loop.thisN'
p4966
I93
sg33
g3786
sg64
g65
sS'trial_loop.thisIndex'
p4967
g60
(g99
S']\x00\x00\x00'
tRp4968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4969
I0
sg3642
g3790
sS'block_loop.thisRepN'
p4970
I1
sg3645
g3786
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4971
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p4972
Nsg70
Vn
sS'block_loop.thisTrialN'
p4973
I0
sg39
F0.9165923984719484
sg34
g753
(S'\x07\xdf\x07\r\x0b\r)\x08\xa6\xd8'
tRp4974
sa(dp4975
S'trial_loop.thisTrialN'
p4976
I94
sg3633
g4324
sS'block_loop.thisIndex'
p4977
g3627
sg38
S'left'
p4978
sg59
g63
sS'trial_loop.thisN'
p4979
I94
sg33
g4197
sg64
g65
sS'trial_loop.thisIndex'
p4980
g60
(g99
S'^\x00\x00\x00'
tRp4981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4982
I0
sg3642
g4331
sS'block_loop.thisRepN'
p4983
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4984
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p4985
Nsg70
Vn
sS'block_loop.thisTrialN'
p4986
I0
sg39
F1.1832668198221654
sg34
g753
(S'\x07\xdf\x07\r\x0b\r/\x08\x06\xb0'
tRp4987
sa(dp4988
S'trial_loop.thisTrialN'
p4989
I95
sg3633
S'33-ambrosia_rice.png'
p4990
sS'block_loop.thisIndex'
p4991
g3627
sg38
S'right'
p4992
sg59
g63
sS'trial_loop.thisN'
p4993
I95
sg33
g4174
sg64
g65
sS'trial_loop.thisIndex'
p4994
g60
(g99
S'_\x00\x00\x00'
tRp4995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4996
I0
sg3642
S'23-crunchie_redo.png'
p4997
sS'block_loop.thisRepN'
p4998
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4999
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p5000
Nsg70
Vn
sS'block_loop.thisTrialN'
p5001
I0
sg39
F0.68318442631607468
sg34
g753
(S'\x07\xdf\x07\r\x0b\r5\x0b7\x18'
tRp5002
sa(dp5003
S'trial_loop.thisTrialN'
p5004
I96
sg3633
g4458
sS'block_loop.thisIndex'
p5005
g3627
sg38
S'right'
p5006
sg59
g63
sS'trial_loop.thisN'
p5007
I96
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p5008
g60
(g99
S'`\x00\x00\x00'
tRp5009
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5010
I0
sg3642
g4465
sS'block_loop.thisRepN'
p5011
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5012
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p5013
Nsg70
Vn
sS'block_loop.thisTrialN'
p5014
I0
sg39
F1.0666554908002581
sg34
g753
(S'\x07\xdf\x07\r\x0b\r;\x07\x04\xe0'
tRp5015
sa(dp5016
S'trial_loop.thisTrialN'
p5017
I97
sg3633
g3955
sS'block_loop.thisIndex'
p5018
g3627
sg38
S'left'
p5019
sg59
g63
sS'trial_loop.thisN'
p5020
I97
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p5021
g60
(g99
S'a\x00\x00\x00'
tRp5022
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5023
I0
sg3642
g3963
sS'block_loop.thisRepN'
p5024
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5025
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p5026
Nsg70
Vn
sS'block_loop.thisTrialN'
p5027
I0
sg39
F1.3497210880050261
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0e\x05\x08\x8b\x80'
tRp5028
sa(dp5029
S'trial_loop.thisTrialN'
p5030
I98
sg3633
g3987
sS'block_loop.thisIndex'
p5031
g3627
sg38
S'right'
p5032
sg59
g63
sS'trial_loop.thisN'
p5033
I98
sg33
g3908
sg64
g65
sS'trial_loop.thisIndex'
p5034
g60
(g99
S'b\x00\x00\x00'
tRp5035
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5036
I0
sg3642
g3994
sS'block_loop.thisRepN'
p5037
I1
sg3645
g3908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5038
I1
sg3647
g3915
sg55
g11
sS'block_loop.thisTrial'
p5039
Nsg70
Vn
sS'block_loop.thisTrialN'
p5040
I0
sg39
F0.96665229769496364
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0e\x0b\x0eW\xe0'
tRp5041
sa(dp5042
S'trial_loop.thisTrialN'
p5043
I99
sg3633
g4642
sS'block_loop.thisIndex'
p5044
g3627
sg38
S'right'
p5045
sg59
g63
sS'trial_loop.thisN'
p5046
I99
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5047
g60
(g99
S'c\x00\x00\x00'
tRp5048
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5049
I0
sg3642
g4649
sS'block_loop.thisRepN'
p5050
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5051
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5052
Nsg70
Vn
sS'block_loop.thisTrialN'
p5053
I0
sg39
F0.76660229139451985
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0e\x11\x0e4\xb8'
tRp5054
sa(dp5055
S'trial_loop.thisTrialN'
p5056
I100
sg3633
g4404
sS'block_loop.thisIndex'
p5057
g3627
sg38
S'right'
p5058
sg59
g63
sS'trial_loop.thisN'
p5059
I100
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p5060
g60
(g99
S'd\x00\x00\x00'
tRp5061
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5062
I0
sg3642
g4411
sS'block_loop.thisRepN'
p5063
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5064
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p5065
Nsg70
Vn
sS'block_loop.thisTrialN'
p5066
I0
sg39
F1.5331994510142977
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0e\x17\x0b30'
tRp5067
sa(dp5068
S'trial_loop.thisTrialN'
p5069
I101
sg3633
g3872
sS'block_loop.thisIndex'
p5070
g3627
sg38
S'right'
p5071
sg59
g63
sS'trial_loop.thisN'
p5072
I101
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p5073
g60
(g99
S'e\x00\x00\x00'
tRp5074
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5075
I0
sg3642
g3880
sS'block_loop.thisRepN'
p5076
I1
sg3645
g3876
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5077
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p5078
Nsg70
Vn
sS'block_loop.thisTrialN'
p5079
I0
sg39
F0.80039389227476931
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0e\x1e\x04\x97\xc8'
tRp5080
sa(dp5081
S'trial_loop.thisTrialN'
p5082
I102
sg3633
g4103
sS'block_loop.thisIndex'
p5083
g3627
sg38
S'left'
p5084
sg59
g63
sS'trial_loop.thisN'
p5085
I102
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p5086
g60
(g99
S'f\x00\x00\x00'
tRp5087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5088
I0
sg3642
g4111
sS'block_loop.thisRepN'
p5089
I1
sg3645
g4113
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5090
I1
sg3647
g4107
sg55
g11
sS'block_loop.thisTrial'
p5091
Nsg70
Vn
sS'block_loop.thisTrialN'
p5092
I0
sg39
F0.78325490269889997
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0e$\x02\x13@'
tRp5093
sa(dp5094
S'trial_loop.thisTrialN'
p5095
I103
sg3633
g4060
sS'block_loop.thisIndex'
p5096
g3627
sg38
S'left'
p5097
sg59
g63
sS'trial_loop.thisN'
p5098
I103
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5099
g60
(g99
S'g\x00\x00\x00'
tRp5100
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5101
I0
sg3642
g4067
sS'block_loop.thisRepN'
p5102
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5103
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5104
Nsg70
Vn
sS'block_loop.thisTrialN'
p5105
I0
sg39
F0.81644665604926558
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0e)\x0e\x92x'
tRp5106
sa(dp5107
S'trial_loop.thisTrialN'
p5108
I104
sg3633
g3705
sS'block_loop.thisIndex'
p5109
g3627
sg38
S'left'
p5110
sg59
g63
sS'trial_loop.thisN'
p5111
I104
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5112
g60
(g99
S'h\x00\x00\x00'
tRp5113
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5114
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5115
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5116
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5117
Nsg70
Vn
sS'block_loop.thisTrialN'
p5118
I0
sg39
F0.83329227913054638
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0e/\x0cH\x88'
tRp5119
sa(dp5120
S'trial_loop.thisTrialN'
p5121
I105
sg3633
g3654
sS'block_loop.thisIndex'
p5122
g3627
sg38
S'left'
p5123
sg59
g63
sS'trial_loop.thisN'
p5124
I105
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5125
g60
(g99
S'i\x00\x00\x00'
tRp5126
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5127
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5128
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5129
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5130
Nsg70
Vn
sS'block_loop.thisTrialN'
p5131
I0
sg39
F0.6499741415536846
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0e5\n90'
tRp5132
sa(dp5133
S'trial_loop.thisTrialN'
p5134
I106
sg3633
g3814
sS'block_loop.thisIndex'
p5135
g3627
sg38
S'left'
p5136
sg59
g63
sS'trial_loop.thisN'
p5137
I106
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p5138
g60
(g99
S'j\x00\x00\x00'
tRp5139
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5140
I0
sg3642
g3822
sS'block_loop.thisRepN'
p5141
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5142
I1
sg3647
g3818
sg55
g11
sS'block_loop.thisTrial'
p5143
Nsg70
Vn
sS'block_loop.thisTrialN'
p5144
I0
sg39
F4.1165468967301422
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0e;\x05SH'
tRp5145
sa(dp5146
S'trial_loop.thisTrialN'
p5147
I107
sg3633
g4163
sS'block_loop.thisIndex'
p5148
g3627
sg38
S'left'
p5149
sg59
g63
sS'trial_loop.thisN'
p5150
I107
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p5151
g60
(g99
S'k\x00\x00\x00'
tRp5152
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5153
I0
sg3642
g4171
sS'block_loop.thisRepN'
p5154
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5155
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p5156
Nsg70
Vn
sS'block_loop.thisTrialN'
p5157
I0
sg39
F0.86652223569853959
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0f\x08\x07\xb8\x90'
tRp5158
sa(dp5159
S'trial_loop.thisTrialN'
p5160
I108
sg3633
g4657
sS'block_loop.thisIndex'
p5161
g3627
sg38
S'right'
p5162
sg59
g63
sS'trial_loop.thisN'
p5163
I108
sg33
g4298
sg64
g65
sS'trial_loop.thisIndex'
p5164
g60
(g99
S'l\x00\x00\x00'
tRp5165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5166
I0
sg3642
g4664
sS'block_loop.thisRepN'
p5167
I1
sg3645
g4298
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5168
I1
sg3647
g4305
sg55
g11
sS'block_loop.thisTrial'
p5169
Nsg70
Vn
sS'block_loop.thisTrialN'
p5170
I0
sg39
F1.000047326373533
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0f\x0e\x06&8'
tRp5171
sa(dp5172
S'trial_loop.thisTrialN'
p5173
I109
sg3633
g4032
sS'block_loop.thisIndex'
p5174
g3627
sg38
S'left'
p5175
sg59
g63
sS'trial_loop.thisN'
p5176
I109
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p5177
g60
(g99
S'm\x00\x00\x00'
tRp5178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5179
I0
sg3642
g4039
sS'block_loop.thisRepN'
p5180
I1
sg3645
g3876
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5181
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p5182
Nsg70
Vn
sS'block_loop.thisTrialN'
p5183
I0
sg39
F0.68334294115720695
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0f\x14\x06\xb6\xc0'
tRp5184
sa(dp5185
S'trial_loop.thisTrialN'
p5186
I110
sg3633
g3904
sS'block_loop.thisIndex'
p5187
g3627
sg38
S'left'
p5188
sg59
g63
sS'trial_loop.thisN'
p5189
I110
sg33
g3908
sg64
g65
sS'trial_loop.thisIndex'
p5190
g60
(g99
S'n\x00\x00\x00'
tRp5191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5192
I0
sg3642
g3912
sS'block_loop.thisRepN'
p5193
I1
sg3645
g3908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5194
I1
sg3647
g3915
sg55
g11
sS'block_loop.thisTrial'
p5195
Nsg70
Vn
sS'block_loop.thisTrialN'
p5196
I0
sg39
F0.63331126669891091
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0f\x1a\x02I\xf0'
tRp5197
sa(dp5198
S'trial_loop.thisTrialN'
p5199
I111
sg3633
g3972
sS'block_loop.thisIndex'
p5200
g3627
sg38
S'right'
p5201
sg59
g63
sS'trial_loop.thisN'
p5202
I111
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5203
g60
(g99
S'o\x00\x00\x00'
tRp5204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5205
I0
sg3642
g3979
sS'block_loop.thisRepN'
p5206
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5207
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5208
Nsg70
Vn
sS'block_loop.thisTrialN'
p5209
I0
sg39
F0.98329692623701703
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0f\x1f\x0c\xa2`'
tRp5210
sa(dp5211
S'trial_loop.thisTrialN'
p5212
I112
sg3633
g3705
sS'block_loop.thisIndex'
p5213
g3627
sg38
S'left'
p5214
sg59
g63
sS'trial_loop.thisN'
p5215
I112
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5216
g60
(g99
S'p\x00\x00\x00'
tRp5217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5218
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5219
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5220
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5221
Nsg70
Vn
sS'block_loop.thisTrialN'
p5222
I0
sg39
F0.81665990982946823
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0f%\x0c\xb9\xd0'
tRp5223
sa(dp5224
S'trial_loop.thisTrialN'
p5225
I113
sg3633
g4163
sS'block_loop.thisIndex'
p5226
g3627
sg38
S'left'
p5227
sg59
g63
sS'trial_loop.thisN'
p5228
I113
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p5229
g60
(g99
S'q\x00\x00\x00'
tRp5230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5231
I0
sg3642
g4171
sS'block_loop.thisRepN'
p5232
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5233
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p5234
Nsg70
Vn
sS'block_loop.thisTrialN'
p5235
I0
sg39
F0.66657657549785654
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0f+\no\xe0'
tRp5236
sa(dp5237
S'trial_loop.thisTrialN'
p5238
I114
sg3633
g4294
sS'block_loop.thisIndex'
p5239
g3627
sg38
S'left'
p5240
sg59
g63
sS'trial_loop.thisN'
p5241
I114
sg33
g4298
sg64
g65
sS'trial_loop.thisIndex'
p5242
g60
(g99
S'r\x00\x00\x00'
tRp5243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5244
I0
sg3642
g4302
sS'block_loop.thisRepN'
p5245
I1
sg3645
g4298
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5246
I1
sg3647
g4305
sg55
g11
sS'block_loop.thisTrial'
p5247
Nsg70
Vn
sS'block_loop.thisTrialN'
p5248
I0
sg39
F1.0331449971745315
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0f1\x06\x03\x10'
tRp5249
sa(dp5250
S'trial_loop.thisTrialN'
p5251
I115
sg3633
g4032
sS'block_loop.thisIndex'
p5252
g3627
sg38
S'left'
p5253
sg59
g63
sS'trial_loop.thisN'
p5254
I115
sg33
g3883
sg64
g65
sS'trial_loop.thisIndex'
p5255
g60
(g99
S's\x00\x00\x00'
tRp5256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5257
I0
sg3642
g4039
sS'block_loop.thisRepN'
p5258
I1
sg3645
g3876
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5259
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p5260
Nsg70
Vn
sS'block_loop.thisTrialN'
p5261
I0
sg39
F0.69989719343175238
sg34
g753
(S'\x07\xdf\x07\r\x0b\x0f7\x07\x0c\xb0'
tRp5262
sa(dp5263
S'trial_loop.thisTrialN'
p5264
I116
sg3633
g3921
sS'block_loop.thisIndex'
p5265
g3627
sg38
S'right'
p5266
sg59
g63
sS'trial_loop.thisN'
p5267
I116
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p5268
g60
(g99
S't\x00\x00\x00'
tRp5269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5270
I0
sg3642
g3929
sS'block_loop.thisRepN'
p5271
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5272
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p5273
Nsg70
Vn
sS'block_loop.thisTrialN'
p5274
I0
sg39
F0.83306733630615781
sg34
g753
(S'\x07\xdf\x07\r\x0b\x10\x01\x02\xdax'
tRp5275
sa(dp5276
S'trial_loop.thisTrialN'
p5277
I117
sg3633
g4990
sS'block_loop.thisIndex'
p5278
g3627
sg38
S'right'
p5279
sg59
g63
sS'trial_loop.thisN'
p5280
I117
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p5281
g60
(g99
S'u\x00\x00\x00'
tRp5282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5283
I0
sg3642
g4997
sS'block_loop.thisRepN'
p5284
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5285
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p5286
Nsg70
Vn
sS'block_loop.thisTrialN'
p5287
I0
sg39
F0.64994107011170854
sg34
g753
(S'\x07\xdf\x07\r\x0b\x10\x07\x00\xcf\x08'
tRp5288
sa(dp5289
S'trial_loop.thisTrialN'
p5290
I118
sg3633
g4193
sS'block_loop.thisIndex'
p5291
g3627
sg38
S'right'
p5292
sg59
g63
sS'trial_loop.thisN'
p5293
I118
sg33
g4197
sg64
g65
sS'trial_loop.thisIndex'
p5294
g60
(g99
S'v\x00\x00\x00'
tRp5295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5296
I0
sg3642
g4201
sS'block_loop.thisRepN'
p5297
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5298
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p5299
Nsg70
Vn
sS'block_loop.thisTrialN'
p5300
I0
sg39
F0.83367288580757304
sg34
g753
(S"\x07\xdf\x07\r\x0b\x10\x0c\x0b'x"
tRp5301
sa(dp5302
S'trial_loop.thisTrialN'
p5303
I119
sg3633
g3782
sS'block_loop.thisIndex'
p5304
g3627
sg38
S'right'
p5305
sg59
g63
sS'trial_loop.thisN'
p5306
I119
sg33
g3786
sg64
g65
sS'trial_loop.thisIndex'
p5307
g60
(g99
S'w\x00\x00\x00'
tRp5308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5309
I0
sg3642
g3790
sS'block_loop.thisRepN'
p5310
I1
sg3645
g3786
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5311
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p5312
Nsg70
Vn
sS'block_loop.thisTrialN'
p5313
I0
sg39
F0.89992296634864033
sg34
g753
(S'\x07\xdf\x07\r\x0b\x10\x12\t\x1c\x08'
tRp5314
sa(dp5315
S'trial_loop.thisTrialN'
p5316
I120
sg3633
g3752
sS'block_loop.thisIndex'
p5317
g3627
sg38
S'right'
p5318
sg59
g63
sS'trial_loop.thisN'
p5319
I120
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p5320
g60
(g99
S'x\x00\x00\x00'
tRp5321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5322
I0
sg3642
g3760
sS'block_loop.thisRepN'
p5323
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5324
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p5325
Nsg70
Vn
sS'block_loop.thisTrialN'
p5326
I0
sg39
F0.59991538272515754
sg34
g753
(S'\x07\xdf\x07\r\x0b\x10\x18\x08=`'
tRp5327
sa(dp5328
S'trial_loop.thisTrialN'
p5329
I121
sg3633
g3921
sS'block_loop.thisIndex'
p5330
g3627
sg38
S'right'
p5331
sg59
g63
sS'trial_loop.thisN'
p5332
I121
sg33
g3932
sg64
g65
sS'trial_loop.thisIndex'
p5333
g60
(g99
S'y\x00\x00\x00'
tRp5334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5335
I0
sg3642
g3929
sS'block_loop.thisRepN'
p5336
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5337
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p5338
Nsg70
Vn
sS'block_loop.thisTrialN'
p5339
I0
sg39
F0.88301348117420275
sg34
g753
(S'\x07\xdf\x07\r\x0b\x10\x1e\x02\x9f\xe0'
tRp5340
sa(dp5341
S'trial_loop.thisTrialN'
p5342
I122
sg3633
g4193
sS'block_loop.thisIndex'
p5343
g3627
sg38
S'right'
p5344
sg59
g63
sS'trial_loop.thisN'
p5345
I122
sg33
g4197
sg64
g65
sS'trial_loop.thisIndex'
p5346
g60
(g99
S'z\x00\x00\x00'
tRp5347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5348
I0
sg3642
g4201
sS'block_loop.thisRepN'
p5349
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5350
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p5351
Nsg70
Vn
sS'block_loop.thisTrialN'
p5352
I0
sg39
F0.66665212663610873
sg34
g753
(S'\x07\xdf\x07\r\x0b\x10$\x01L\x08'
tRp5353
sa(dp5354
S'trial_loop.thisTrialN'
p5355
I123
sg3633
g4075
sS'block_loop.thisIndex'
p5356
g3627
sg38
S'right'
p5357
sg59
g63
sS'trial_loop.thisN'
p5358
I123
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p5359
g60
(g99
S'{\x00\x00\x00'
tRp5360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5361
I0
sg3642
g4082
sS'block_loop.thisRepN'
p5362
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5363
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p5364
Nsg70
Vn
sS'block_loop.thisTrialN'
p5365
I0
sg39
F1.2332976389834585
sg34
g753
(S'\x07\xdf\x07\r\x0b\x10)\x0c\x1d\x90'
tRp5366
sa(dp5367
S'trial_loop.thisTrialN'
p5368
I124
sg3633
g3921
sS'block_loop.thisIndex'
p5369
g3627
sg38
S'right'
p5370
sg59
g63
sS'trial_loop.thisN'
p5371
I124
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p5372
g60
(g99
S'|\x00\x00\x00'
tRp5373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5374
I0
sg3642
g3929
sS'block_loop.thisRepN'
p5375
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5376
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p5377
Nsg70
Vn
sS'block_loop.thisTrialN'
p5378
I0
sg39
F0.91640622906288627
sg34
g753
(S'\x07\xdf\x07\r\x0b\x100\x00\xc3P'
tRp5379
sa(dp5380
S'trial_loop.thisTrialN'
p5381
I125
sg3633
g4642
sS'block_loop.thisIndex'
p5382
g3627
sg38
S'right'
p5383
sg59
g63
sS'trial_loop.thisN'
p5384
I125
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5385
g60
(g99
S'}\x00\x00\x00'
tRp5386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5387
I0
sg3642
g4649
sS'block_loop.thisRepN'
p5388
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5389
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5390
Nsg70
Vn
sS'block_loop.thisTrialN'
p5391
I0
sg39
F0.73332187236792379
sg34
g753
(S'\x07\xdf\x07\r\x0b\x106\x00#('
tRp5392
sa(dp5393
S'trial_loop.thisTrialN'
p5394
I126
sg3633
g3705
sS'block_loop.thisIndex'
p5395
g3627
sg38
S'left'
p5396
sg59
g63
sS'trial_loop.thisN'
p5397
I126
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5398
g60
(g99
S'~\x00\x00\x00'
tRp5399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5400
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5401
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5402
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5403
Nsg70
Vn
sS'block_loop.thisTrialN'
p5404
I0
sg39
F0.88335246345195628
sg34
g753
(S'\x07\xdf\x07\r\x0b\x10;\x0b\xacH'
tRp5405
sa(dp5406
S'trial_loop.thisTrialN'
p5407
I127
sg3633
g4750
sS'block_loop.thisIndex'
p5408
g3627
sg38
S'left'
p5409
sg59
g63
sS'trial_loop.thisN'
p5410
I127
sg33
g3763
sg64
g65
sS'trial_loop.thisIndex'
p5411
g60
(g99
S'\x7f\x00\x00\x00'
tRp5412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5413
I0
sg3642
g4757
sS'block_loop.thisRepN'
p5414
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5415
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p5416
Nsg70
Vn
sS'block_loop.thisTrialN'
p5417
I0
sg39
F0.64989146294919919
sg34
g753
(S'\x07\xdf\x07\r\x0b\x11\x05\n\x93\x08'
tRp5418
sa(dp5419
S'trial_loop.thisTrialN'
p5420
I128
sg3633
g4657
sS'block_loop.thisIndex'
p5421
g3627
sg38
S'right'
p5422
sg59
g63
sS'trial_loop.thisN'
p5423
I128
sg33
g4298
sg64
g65
sS'trial_loop.thisIndex'
p5424
g60
(g99
S'\x80\x00\x00\x00'
tRp5425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5426
I0
sg3642
g4664
sS'block_loop.thisRepN'
p5427
I1
sg3645
g4298
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5428
I1
sg3647
g4305
sg55
g11
sS'block_loop.thisTrial'
p5429
Nsg70
Vn
sS'block_loop.thisTrialN'
p5430
I0
sg39
F0.91660380241773964
sg34
g753
(S'\x07\xdf\x07\r\x0b\x11\x0b\x05\xad '
tRp5431
sa(dp5432
S'trial_loop.thisTrialN'
p5433
I129
sg3633
g4120
sS'block_loop.thisIndex'
p5434
g3627
sg38
S'left'
p5435
sg59
g63
sS'trial_loop.thisN'
p5436
I129
sg33
g4124
sg64
g65
sS'trial_loop.thisIndex'
p5437
g60
(g99
S'\x81\x00\x00\x00'
tRp5438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5439
I0
sg3642
g4128
sS'block_loop.thisRepN'
p5440
I1
sg3645
g4124
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5441
I1
sg3647
g4131
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vn
sS'block_loop.thisTrialN'
p5443
I0
sg39
F0.65002089773042826
sg34
g753
(S'\x07\xdf\x07\r\x0b\x11\x11\x04\xcex'
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g4075
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'right'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g4082
sS'block_loop.thisRepN'
p5453
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5454
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vn
sS'block_loop.thisTrialN'
p5456
I0
sg39
F0.8666086205839747
sg34
g753
(S'\x07\xdf\x07\r\x0b\x11\x17\x00#('
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g4163
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'left'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g4171
sS'block_loop.thisRepN'
p5466
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5467
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vn
sS'block_loop.thisTrialN'
p5469
I0
sg39
F0.70000296502530546
sg34
g753
(S'\x07\xdf\x07\r\x0b\x11\x1c\r\xd3\x10'
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g4817
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'right'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g4824
sS'block_loop.thisRepN'
p5479
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5480
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vn
sS'block_loop.thisTrialN'
p5482
I0
sg39
F0.89976331111211039
sg34
g753
(S'\x07\xdf\x07\r\x0b\x11"\t\xa0\xd8'
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g4404
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'right'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g4411
sS'block_loop.thisRepN'
p5492
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5493
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vn
sS'block_loop.thisTrialN'
p5495
I0
sg39
F1.0499957520305543
sg34
g753
(S'\x07\xdf\x07\r\x0b\x11(\x08\xc6\x18'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g3831
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'left'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g3838
sS'block_loop.thisRepN'
p5505
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5506
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vn
sS'block_loop.thisTrialN'
p5508
I0
sg39
F0.68332127366102213
sg34
g753
(S'\x07\xdf\x07\r\x0b\x11.\n\x0e8'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g4238
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'left'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g4245
sS'block_loop.thisRepN'
p5518
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5519
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vn
sS'block_loop.thisTrialN'
p5521
I0
sg39
F0.81640873793094215
sg34
g753
(S'\x07\xdf\x07\r\x0b\x114\x05\xa1h'
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g3671
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'left'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5531
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5532
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vn
sS'block_loop.thisTrialN'
p5534
I0
sg39
F0.9500025373781682
sg34
g753
(S'\x07\xdf\x07\r\x0b\x11:\x03Wx'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g4279
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'right'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g4113
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g4286
sS'block_loop.thisRepN'
p5544
I1
sg3645
g4113
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5545
I1
sg3647
g4107
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vn
sS'block_loop.thisTrialN'
p5547
I0
sg39
F0.80001157500464615
sg34
g753
(S'\x07\xdf\x07\r\x0b\x12\x04\x030h'
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g3752
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'right'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g3760
sS'block_loop.thisRepN'
p5557
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5558
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vn
sS'block_loop.thisTrialN'
p5560
I0
sg39
F0.76661112945294008
sg34
g753
(S'\x07\xdf\x07\r\x0b\x12\n\x00\xa7\xf8'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g3722
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'right'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g3730
sS'block_loop.thisRepN'
p5570
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5571
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vn
sS'block_loop.thisTrialN'
p5573
I0
sg39
F0.99974569201731356
sg34
g753
(S'\x07\xdf\x07\r\x0b\x12\x0f\x0c\xae\x18'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g4238
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'left'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g4245
sS'block_loop.thisRepN'
p5583
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vn
sS'block_loop.thisTrialN'
p5586
I0
sg39
F0.93302006695284945
sg34
g753
(S'\x07\xdf\x07\r\x0b\x12\x15\r>\xa0'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g4642
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'right'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g4649
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vn
sS'block_loop.thisTrialN'
p5599
I0
sg39
F0.7666672938839838
sg34
g753
(S'\x07\xdf\x07\r\x0b\x12\x1b\x0c\xdc\xf8'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g4279
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'right'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g4286
sS'block_loop.thisRepN'
p5609
I1
sg3645
g4113
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3647
g4107
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vn
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.63364397680652473
sg34
g753
(S'\x07\xdf\x07\r\x0b\x12!\t\xa0\xd8'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g4324
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'left'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g4197
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g4331
sS'block_loop.thisRepN'
p5622
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vn
sS'block_loop.thisTrialN'
p5625
I0
sg39
F0.96661922625298757
sg34
g753
(S"\x07\xdf\x07\r\x0b\x12'\x04\xb7\x08"
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g3955
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'left'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g3963
sS'block_loop.thisRepN'
p5635
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vn
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.96657446576864459
sg34
g753
(S'\x07\xdf\x07\r\x0b\x12-\x04\x93\xe0'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g3987
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'right'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g3908
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g3994
sS'block_loop.thisRepN'
p5648
I1
sg3645
g3908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3647
g3915
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vn
sS'block_loop.thisTrialN'
p5651
I0
sg39
F0.68328934261353425
sg34
g753
(S'\x07\xdf\x07\r\x0b\x123\x04\xabP'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g3688
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5661
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vn
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.89995489739521872
sg34
g753
(S'\x07\xdf\x07\r\x0b\x129\x00:\x98'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g3799
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'right'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g3806
sS'block_loop.thisRepN'
p5674
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vn
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.7832591791775485
sg34
g753
(S'\x07\xdf\x07\r\x0b\x13\x02\x0e\xa2\x18'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g4210
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'right'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g4124
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g4217
sS'block_loop.thisRepN'
p5687
I1
sg3645
g4124
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g4131
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vn
sS'block_loop.thisTrialN'
p5690
I0
sg39
F0.7000252027200986
sg34
g753
(S'\x07\xdf\x07\r\x0b\x13\x08\x0b\xa0\x90'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g3904
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'left'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g3908
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g3912
sS'block_loop.thisRepN'
p5700
I1
sg3645
g3908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g3915
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vn
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.7499263020026774
sg34
g753
(S'\x07\xdf\x07\r\x0b\x13\x0e\x07\xac\xd8'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g4936
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'left'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g3786
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g4943
sS'block_loop.thisRepN'
p5713
I1
sg3645
g3786
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vn
sS'block_loop.thisTrialN'
p5716
I0
sg39
F0.6999998289411451
sg34
g753
(S'\x07\xdf\x07\r\x0b\x13\x14\x04l\xd0'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g4990
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'right'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g4997
sS'block_loop.thisRepN'
p5726
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vn
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.64999381336019724
sg34
g753
(S'\x07\xdf\x07\r\x0b\x13\x1a\x00>\x80'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g4936
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'left'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3786
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g4943
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3786
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vn
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.64997328625850059
sg34
g753
(S'\x07\xdf\x07\r\x0b\x13\x1f\n\xd5p'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g3872
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'right'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g3880
sS'block_loop.thisRepN'
p5752
I1
sg3645
g3876
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vn
sS'block_loop.thisTrialN'
p5755
I0
sg39
F0.6665805668790199
sg34
g753
(S'\x07\xdf\x07\r\x0b\x13%\x05\xeb\xa0'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g4015
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'left'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g4023
sS'block_loop.thisRepN'
p5765
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vn
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.9837128851468151
sg34
g753
(S'\x07\xdf\x07\r\x0b\x13+\x01@P'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g4103
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'left'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g4113
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g4111
sS'block_loop.thisRepN'
p5778
I1
sg3645
g4113
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g4107
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vn
sS'block_loop.thisTrialN'
p5781
I0
sg39
F0.81659376694551611
sg34
g753
(S'\x07\xdf\x07\r\x0b\x131\x01\x96@'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g3904
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'left'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g3908
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g3912
sS'block_loop.thisRepN'
p5791
I1
sg3645
g3908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g3915
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vn
sS'block_loop.thisTrialN'
p5794
I0
sg39
F0.64997670744196512
sg34
g753
(S'\x07\xdf\x07\r\x0b\x136\x0e\x8e\x90'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g3814
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'left'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g3822
sS'block_loop.thisRepN'
p5804
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g3818
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vn
sS'block_loop.thisTrialN'
p5807
I0
sg39
F1.8832007909777531
sg34
g753
(S'\x07\xdf\x07\r\x0b\x14\x00\t\xa4\xc0'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g4936
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'left'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g3786
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g4943
sS'block_loop.thisRepN'
p5817
I1
sg3645
g3786
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vn
sS'block_loop.thisTrialN'
p5820
I0
sg39
F0.66659653240185435
sg34
g753
(S'\x07\xdf\x07\r\x0b\x14\x07\x08\x83\xb0'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g4103
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'left'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g4113
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g4111
sS'block_loop.thisRepN'
p5830
I1
sg3645
g4113
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g4107
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vn
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.59990540427315864
sg34
g753
(S'\x07\xdf\x07\r\x0b\x14\r\x03\xd8`'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g4075
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'right'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g4082
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vn
sS'block_loop.thisTrialN'
p5846
I0
sg39
F0.88361304360478243
sg34
g753
(S'\x07\xdf\x07\r\x0b\x14\x12\r} '
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g3972
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'right'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g3979
sS'block_loop.thisRepN'
p5856
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vn
sS'block_loop.thisTrialN'
p5859
I0
sg39
F0.83318878832506016
sg34
g753
(S'\x07\xdf\x07\r\x0b\x14\x18\x0c)H'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g3938
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'left'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3949
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g3946
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vn
sS'block_loop.thisTrialN'
p5872
I0
sg39
F0.9999900215470916
sg34
g753
(S'\x07\xdf\x07\r\x0b\x14\x1e\n\x19\xf0'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g4075
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'right'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g4082
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vn
sS'block_loop.thisTrialN'
p5885
I0
sg39
F0.86662259041713696
sg34
g753
(S'\x07\xdf\x07\r\x0b\x14$\n\xaax'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g4060
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'left'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g4067
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vn
sS'block_loop.thisTrialN'
p5898
I0
sg39
F0.93323218033765443
sg34
g753
(S'\x07\xdf\x07\r\x0b\x14*\t\x18 '
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g4120
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'left'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g4124
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g4128
sS'block_loop.thisRepN'
p5908
I1
sg3645
g4124
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g4131
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vn
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.69994965158093692
sg34
g753
(S'\x07\xdf\x07\r\x0b\x140\x08\xb6x'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g3654
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'left'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vn
sS'block_loop.thisTrialN'
p5924
I0
sg39
F0.7836802698629981
sg34
g753
(S'\x07\xdf\x07\r\x0b\x146\x04\x84@'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g3688
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'right'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5934
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vn
sS'block_loop.thisTrialN'
p5937
I0
sg39
F0.81659205635423859
sg34
g753
(S'\x07\xdf\x07\r\x0b\x15\x00\x01\xc18'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g4015
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'left'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g4023
sS'block_loop.thisRepN'
p5947
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vn
sS'block_loop.thisTrialN'
p5950
I0
sg39
F0.81658036731005268
sg34
g753
(S'\x07\xdf\x07\r\x0b\x15\x05\x0e\xb9\x88'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g3972
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'right'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g3979
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vn
sS'block_loop.thisTrialN'
p5963
I0
sg39
F0.78304592539916484
sg34
g753
(S'\x07\xdf\x07\r\x0b\x15\x0b\x0co\x98'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g4279
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'right'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g4113
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g4286
sS'block_loop.thisRepN'
p5973
I1
sg3645
g4113
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g4107
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vn
sS'block_loop.thisTrialN'
p5976
I0
sg39
F1.0499803567045092
sg34
g753
(S'\x07\xdf\x07\r\x0b\x15\x11\t\xac\x90'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g3972
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'right'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g3979
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vn
sS'block_loop.thisTrialN'
p5989
I0
sg39
F1.0499663868713469
sg34
g753
(S'\x07\xdf\x07\r\x0b\x15\x17\n\xf4\xb0'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g3831
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'left'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g3838
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vn
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.88370370497159456
sg34
g753
(S'\x07\xdf\x07\r\x0b\x15\x1d\x0c<\xd0'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g3782
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'right'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3793
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g3790
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3786
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vn
sS'block_loop.thisTrialN'
p6015
I0
sg39
F0.74991147687433113
sg34
g753
(S'\x07\xdf\x07\r\x0b\x15#\n\xe5\x10'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4642
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'right'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4649
sS'block_loop.thisRepN'
p6025
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vn
sS'block_loop.thisTrialN'
p6028
I0
sg39
F0.89991469848882844
sg34
g753
(S'\x07\xdf\x07\r\x0b\x15)\x07\xa8\xf0'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g3987
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'right'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3908
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g3994
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g3915
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vn
sS'block_loop.thisTrialN'
p6041
I0
sg39
F0.6832306122951195
sg34
g753
(S'\x07\xdf\x07\r\x0b\x15/\x06\x8f\xb0'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g3872
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'right'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g3880
sS'block_loop.thisRepN'
p6051
I1
sg3645
g3876
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vn
sS'block_loop.thisTrialN'
p6054
I0
sg39
F0.64997186076470825
sg34
g753
(S'\x07\xdf\x07\r\x0b\x155\x02]x'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g4210
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'right'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g4124
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g4217
sS'block_loop.thisRepN'
p6064
I1
sg3645
g4124
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g4131
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vn
sS'block_loop.thisTrialN'
p6067
I0
sg39
F0.81662056621735246
sg34
g753
(S'\x07\xdf\x07\r\x0b\x15:\x0c\xb5\xe8'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g4458
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'right'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g4026
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g4465
sS'block_loop.thisRepN'
p6077
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vn
sS'block_loop.thisTrialN'
p6080
I0
sg39
F0.96701978983674053
sg34
g753
(S'\x07\xdf\x07\r\x0b\x16\x04\nk\xf8'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g4936
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'left'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3786
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g4943
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3786
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vn
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.78324777523357625
sg34
g753
(S'\x07\xdf\x07\r\x0b\x16\n\n\x83h'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g3814
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'left'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g3822
sS'block_loop.thisRepN'
p6103
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g3818
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vn
sS'block_loop.thisTrialN'
p6106
I0
sg39
F0.94975250587413029
sg34
g753
(S'\x07\xdf\x07\r\x0b\x16\x10\x07\xc0`'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g4120
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'left'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g4131
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g4128
sS'block_loop.thisRepN'
p6116
I1
sg3645
g4124
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g4131
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vn
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.6332131927683804
sg34
g753
(S'\x07\xdf\x07\r\x0b\x16\x16\x07^\xb8'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g4750
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'left'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g3763
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g4757
sS'block_loop.thisRepN'
p6129
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vn
sS'block_loop.thisTrialN'
p6132
I0
sg39
F0.71658088048752688
sg34
g753
(S'\x07\xdf\x07\r\x0b\x16\x1c\x02:P'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g3634
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'left'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g3643
sS'block_loop.thisRepN'
p6142
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vn
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.63324255792758777
sg34
g753
(S'\x07\xdf\x07\r\x0b\x16!\r\xc3p'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g3722
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'right'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g3730
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vn
sS'block_loop.thisTrialN'
p6158
I0
sg39
F0.95025827085373749
sg34
g753
(S"\x07\xdf\x07\r\x0b\x16'\x08\x9f\x08"
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g3705
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'left'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g3713
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vn
sS'block_loop.thisTrialN'
p6171
I0
sg39
F1.0666281213307229
sg34
g753
(S'\x07\xdf\x07\r\x0b\x16-\x08{\xe0'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g4657
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'right'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g4298
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g4664
sS'block_loop.thisRepN'
p6181
I1
sg3645
g4298
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g4305
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vn
sS'block_loop.thisTrialN'
p6184
I0
sg39
F1.0333288857946172
sg34
g753
(S'\x07\xdf\x07\r\x0b\x163\t\xfe\x98'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g4990
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'right'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g4997
sS'block_loop.thisRepN'
p6194
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vn
sS'block_loop.thisTrialN'
p6197
I0
sg39
F0.58321573014654859
sg34
g753
(S'\x07\xdf\x07\r\x0b\x169\x0b\x0c '
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g3955
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'left'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g3963
sS'block_loop.thisRepN'
p6207
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vn
sS'block_loop.thisTrialN'
p6210
I0
sg39
F0.98331859373320185
sg34
g753
(S'\x07\xdf\x07\r\x0b\x17\x03\x050 '
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g3889
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'right'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g3824
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g3896
sS'block_loop.thisRepN'
p6220
I1
sg3645
g3824
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g3818
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vn
sS'block_loop.thisTrialN'
p6223
I0
sg39
F0.93328321299304662
sg34
g753
(S'\x07\xdf\x07\r\x0b\x17\t\x05G\x90'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g3955
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'left'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3959
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g3963
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3959
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g3966
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vn
sS'block_loop.thisTrialN'
p6236
I0
sg39
F0.78330964163706085
sg34
g753
(S'\x07\xdf\x07\r\x0b\x17\x0f\x04\xe2\x00'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g4817
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'right'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g4824
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vn
sS'block_loop.thisTrialN'
p6249
I0
sg39
F0.91651200065643934
sg34
g753
(S'\x07\xdf\x07\r\x0b\x17\x15\x02\x1e\xf8'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g3904
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'left'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g3908
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g3912
sS'block_loop.thisRepN'
p6259
I1
sg3645
g3908
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g3915
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vn
sS'block_loop.thisTrialN'
p6262
I0
sg39
F0.7665663689667781
sg34
g753
(S'\x07\xdf\x07\r\x0b\x17\x1b\x01D8'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g3938
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'left'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g3946
sS'block_loop.thisRepN'
p6272
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vn
sS'block_loop.thisTrialN'
p6275
I0
sg39
F2.099884877171462
sg34
g753
(S'\x07\xdf\x07\r\x0b\x17 \r\x84\xf0'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g4458
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'right'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g4026
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g4465
sS'block_loop.thisRepN'
p6285
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vn
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.89990158395175968
sg34
g753
(S'\x07\xdf\x07\r\x0b\x17(\x00:\x98'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g4750
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'left'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g3763
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g4757
sS'block_loop.thisRepN'
p6298
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vn
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.66695604178221402
sg34
g753
(S'\x07\xdf\x07\r\x0b\x17-\x0ec\x98'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g3799
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'right'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g3806
sS'block_loop.thisRepN'
p6311
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vn
sS'block_loop.thisTrialN'
p6314
I0
sg39
F0.79979832122535299
sg34
g753
(S'\x07\xdf\x07\r\x0b\x173\t\xf6\xc8'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4990
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'right'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g4167
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4997
sS'block_loop.thisRepN'
p6324
I1
sg3645
g4167
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g4174
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vn
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.69992256721070589
sg34
g753
(S'\x07\xdf\x07\r\x0b\x179\x07nX'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g4193
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'right'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g4197
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g4201
sS'block_loop.thisRepN'
p6337
I1
sg3645
g4197
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g4204
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vn
sS'block_loop.thisTrialN'
p6340
I0
sg39
F0.73334097397673759
sg34
g753
(S'\x07\xdf\x07\r\x0b\x18\x03\x03< '
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g4015
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'left'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g4019
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g4023
sS'block_loop.thisRepN'
p6350
I1
sg3645
g4019
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g4026
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vn
sS'block_loop.thisTrialN'
p6353
I0
sg39
F1.349945745729201
sg34
g753
(S'\x07\xdf\x07\r\x0b\x18\x08\x0f\x07\xa8'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F174.51292466154518
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vn
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vn
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'46-pistachios.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'left'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'46-pistachios.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'29-beans.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'29-beans.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vn
sS'block_loop.thisTrialN'
p6388
I0
sg39
F0.73312458411237458
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1b;\x0e%\x18'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'25-kitkat.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'left'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'25-kitkat.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'31-hobnobs.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6385
S'31-hobnobs.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vn
sS'block_loop.thisTrialN'
p6405
I0
sg39
F1.2665509736398235
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1c\x05\n\xaax'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'13-mccoys_steak_crisps.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'right'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'13-mccoys_steak_crisps.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
S'3-ellas_strawberries_apples.png'
p6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6420
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vn
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.68322548052037746
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1c\x0c\x00\x07\xd0'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'27-hartleys_raspberries_jelly.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'right'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'51-mars.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'51-mars.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6436
I2
sg6385
S'27-hartleys_raspberries_jelly.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vn
sS'block_loop.thisTrialN'
p6439
I0
sg39
F0.79987871903995256
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1c\x11\n\xd9X'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'33-ambrosia_rice.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'right'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
S'23-crunchie_redo.png'
p6447
sg64
g65
sS'trial_loop.thisIndex'
p6448
g60
(g99
S'\x04\x00\x00\x00'
tRp6449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6450
I0
sg6380
S'23-crunchie_redo.png'
p6451
sS'block_loop.thisRepN'
p6452
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6453
I2
sg6385
S'33-ambrosia_rice.png'
p6454
sg55
g11
sS'block_loop.thisTrial'
p6455
Nsg70
Vn
sS'block_loop.thisTrialN'
p6456
I0
sg39
F0.55006617139406444
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1c\x17\x08T\xd0'
tRp6457
sa(dp6458
S'trial_loop.thisTrialN'
p6459
I5
sg6371
g6426
sS'block_loop.thisIndex'
p6460
g6365
sg38
S'right'
p6461
sg59
g63
sS'trial_loop.thisN'
p6462
I5
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6463
g60
(g99
S'\x05\x00\x00\x00'
tRp6464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6465
I0
sg6380
g6434
sS'block_loop.thisRepN'
p6466
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6467
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6468
Nsg70
Vn
sS'block_loop.thisTrialN'
p6469
I0
sg39
F0.63373634876461438
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1c\x1d\x01\xff\xb8'
tRp6470
sa(dp6471
S'trial_loop.thisTrialN'
p6472
I6
sg6371
S'41-peanuts_redo.png'
p6473
sS'block_loop.thisIndex'
p6474
g6365
sg38
S'right'
p6475
sg59
g63
sS'trial_loop.thisN'
p6476
I6
sg33
S'41-peanuts_redo.png'
p6477
sg64
g65
sS'trial_loop.thisIndex'
p6478
g60
(g99
S'\x06\x00\x00\x00'
tRp6479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6480
I0
sg6380
S'45-chewy_nougat_redo.png'
p6481
sS'block_loop.thisRepN'
p6482
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6483
I2
sg6385
S'45-chewy_nougat_redo.png'
p6484
sg55
g11
sS'block_loop.thisTrial'
p6485
Nsg70
Vn
sS'block_loop.thisTrialN'
p6486
I0
sg39
F0.66654920602832135
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1c"\x0c\x19\xa8'
tRp6487
sa(dp6488
S'trial_loop.thisTrialN'
p6489
I7
sg6371
S'51-mars.png'
p6490
sS'block_loop.thisIndex'
p6491
g6365
sg38
S'left'
p6492
sg59
g63
sS'trial_loop.thisN'
p6493
I7
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6494
g60
(g99
S'\x07\x00\x00\x00'
tRp6495
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6496
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6497
sS'block_loop.thisRepN'
p6498
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6499
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6500
Nsg70
Vn
sS'block_loop.thisTrialN'
p6501
I0
sg39
F0.74996051383914164
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1c(\x07\xac\xd8'
tRp6502
sa(dp6503
S'trial_loop.thisTrialN'
p6504
I8
sg6371
g6409
sS'block_loop.thisIndex'
p6505
g6365
sg38
S'right'
p6506
sg59
g63
sS'trial_loop.thisN'
p6507
I8
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p6508
g60
(g99
S'\x08\x00\x00\x00'
tRp6509
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6510
I0
sg6380
g6417
sS'block_loop.thisRepN'
p6511
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6512
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p6513
Nsg70
Vn
sS'block_loop.thisTrialN'
p6514
I0
sg39
F0.74997961544795544
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1c.\x0428'
tRp6515
sa(dp6516
S'trial_loop.thisTrialN'
p6517
I9
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p6518
sS'block_loop.thisIndex'
p6519
g6365
sg38
S'left'
p6520
sg59
g63
sS'trial_loop.thisN'
p6521
I9
sg33
S'8-liquorice_catherine_wheels.png'
p6522
sg64
g65
sS'trial_loop.thisIndex'
p6523
g60
(g99
S'\t\x00\x00\x00'
tRp6524
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6525
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p6526
sS'block_loop.thisRepN'
p6527
I2
sg6383
S'17-jacobs_mini_cheddars_redo.png'
p6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6529
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p6530
Nsg70
Vn
sS'block_loop.thisTrialN'
p6531
I0
sg39
F0.86656614088769857
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1c4\x00\xf6\x18'
tRp6532
sa(dp6533
S'trial_loop.thisTrialN'
p6534
I10
sg6371
g6372
sS'block_loop.thisIndex'
p6535
g6365
sg38
S'left'
p6536
sg59
g63
sS'trial_loop.thisN'
p6537
I10
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6538
g60
(g99
S'\n\x00\x00\x00'
tRp6539
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6540
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6541
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6542
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6543
Nsg70
Vn
sS'block_loop.thisTrialN'
p6544
I0
sg39
F0.69997302966930874
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1c9\x0e\xa2\x18'
tRp6545
sa(dp6546
S'trial_loop.thisTrialN'
p6547
I11
sg6371
S'30-spaghetti_hoops.png'
p6548
sS'block_loop.thisIndex'
p6549
g6365
sg38
S'right'
p6550
sg59
g63
sS'trial_loop.thisN'
p6551
I11
sg33
S'19-caramello_redo.png'
p6552
sg64
g65
sS'trial_loop.thisIndex'
p6553
g60
(g99
S'\x0b\x00\x00\x00'
tRp6554
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6555
I0
sg6380
S'19-caramello_redo.png'
p6556
sS'block_loop.thisRepN'
p6557
I2
sg6383
g6552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6558
I2
sg6385
S'30-spaghetti_hoops.png'
p6559
sg55
g11
sS'block_loop.thisTrial'
p6560
Nsg70
Vn
sS'block_loop.thisTrialN'
p6561
I0
sg39
F0.88370056888561521
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1d\x03\n\xae`'
tRp6562
sa(dp6563
S'trial_loop.thisTrialN'
p6564
I12
sg6371
S'2-steamed_puddings.png'
p6565
sS'block_loop.thisIndex'
p6566
g6365
sg38
S'left'
p6567
sg59
g63
sS'trial_loop.thisN'
p6568
I12
sg33
S'2-steamed_puddings.png'
p6569
sg64
g65
sS'trial_loop.thisIndex'
p6570
g60
(g99
S'\x0c\x00\x00\x00'
tRp6571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6572
I0
sg6380
S'20-fruit_pastilles.png'
p6573
sS'block_loop.thisRepN'
p6574
I2
sg6383
g6569
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6575
I2
sg6385
S'20-fruit_pastilles.png'
p6576
sg55
g11
sS'block_loop.thisTrial'
p6577
Nsg70
Vn
sS'block_loop.thisTrialN'
p6578
I0
sg39
F0.74999016409674368
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1d\t\tZ\x88'
tRp6579
sa(dp6580
S'trial_loop.thisTrialN'
p6581
I13
sg6371
S'8-liquorice_catherine_wheels.png'
p6582
sS'block_loop.thisIndex'
p6583
g6365
sg38
S'right'
p6584
sg59
g63
sS'trial_loop.thisN'
p6585
I13
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p6586
g60
(g99
S'\r\x00\x00\x00'
tRp6587
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6588
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p6589
sS'block_loop.thisRepN'
p6590
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6591
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p6592
Nsg70
Vn
sS'block_loop.thisTrialN'
p6593
I0
sg39
F1.9166519840873661
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1d\x0f\x06\x1a\x80'
tRp6594
sa(dp6595
S'trial_loop.thisTrialN'
p6596
I14
sg6371
S'18-mms.png'
p6597
sS'block_loop.thisIndex'
p6598
g6365
sg38
S'left'
p6599
sg59
g63
sS'trial_loop.thisN'
p6600
I14
sg33
S'43-mrporky_pork_crackles_redo.png'
p6601
sg64
g65
sS'trial_loop.thisIndex'
p6602
g60
(g99
S'\x0e\x00\x00\x00'
tRp6603
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6604
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p6605
sS'block_loop.thisRepN'
p6606
I2
sg6383
S'18-mms.png'
p6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6608
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p6609
Nsg70
Vn
sS'block_loop.thisTrialN'
p6610
I0
sg39
F0.71659228443240863
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1d\x16\x057\xf0'
tRp6611
sa(dp6612
S'trial_loop.thisTrialN'
p6613
I15
sg6371
S'29-beans.png'
p6614
sS'block_loop.thisIndex'
p6615
g6365
sg38
S'right'
p6616
sg59
g63
sS'trial_loop.thisN'
p6617
I15
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6618
g60
(g99
S'\x0f\x00\x00\x00'
tRp6619
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6620
I0
sg6380
S'46-pistachios.png'
p6621
sS'block_loop.thisRepN'
p6622
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6623
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6624
Nsg70
Vn
sS'block_loop.thisTrialN'
p6625
I0
sg39
F0.81662997447256203
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1d\x1c\x01\x82\xb8'
tRp6626
sa(dp6627
S'trial_loop.thisTrialN'
p6628
I16
sg6371
S'22-daim.png'
p6629
sS'block_loop.thisIndex'
p6630
g6365
sg38
S'left'
p6631
sg59
g63
sS'trial_loop.thisN'
p6632
I16
sg33
S'22-daim.png'
p6633
sg64
g65
sS'trial_loop.thisIndex'
p6634
g60
(g99
S'\x10\x00\x00\x00'
tRp6635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6636
I0
sg6380
S'7-olives.png'
p6637
sS'block_loop.thisRepN'
p6638
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6639
I2
sg6385
S'7-olives.png'
p6640
sg55
g11
sS'block_loop.thisTrial'
p6641
Nsg70
Vn
sS'block_loop.thisTrialN'
p6642
I0
sg39
F0.78365917256360262
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1d!\x0e{\x08'
tRp6643
sa(dp6644
S'trial_loop.thisTrialN'
p6645
I17
sg6371
S'19-caramello_redo.png'
p6646
sS'block_loop.thisIndex'
p6647
g6365
sg38
S'left'
p6648
sg59
g63
sS'trial_loop.thisN'
p6649
I17
sg33
g6552
sg64
g65
sS'trial_loop.thisIndex'
p6650
g60
(g99
S'\x11\x00\x00\x00'
tRp6651
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6652
I0
sg6380
S'30-spaghetti_hoops.png'
p6653
sS'block_loop.thisRepN'
p6654
I2
sg6383
g6552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6655
I2
sg6385
g6559
sg55
g11
sS'block_loop.thisTrial'
p6656
Nsg70
Vn
sS'block_loop.thisTrialN'
p6657
I0
sg39
F0.64990400728856912
sg34
g753
(S"\x07\xdf\x07\r\x0b\x1d'\x0b\xb4\x18"
tRp6658
sa(dp6659
S'trial_loop.thisTrialN'
p6660
I18
sg6371
S'43-mrporky_pork_crackles_redo.png'
p6661
sS'block_loop.thisIndex'
p6662
g6365
sg38
S'right'
p6663
sg59
g63
sS'trial_loop.thisN'
p6664
I18
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p6665
g60
(g99
S'\x12\x00\x00\x00'
tRp6666
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6667
I0
sg6380
S'18-mms.png'
p6668
sS'block_loop.thisRepN'
p6669
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6670
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p6671
Nsg70
Vn
sS'block_loop.thisTrialN'
p6672
I0
sg39
F1.2332708397116221
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1d-\x06\xce0'
tRp6673
sa(dp6674
S'trial_loop.thisTrialN'
p6675
I19
sg6371
S'23-crunchie_redo.png'
p6676
sS'block_loop.thisIndex'
p6677
g6365
sg38
S'left'
p6678
sg59
g63
sS'trial_loop.thisN'
p6679
I19
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6680
g60
(g99
S'\x13\x00\x00\x00'
tRp6681
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6682
I0
sg6380
S'33-ambrosia_rice.png'
p6683
sS'block_loop.thisRepN'
p6684
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6685
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p6686
Nsg70
Vn
sS'block_loop.thisTrialN'
p6687
I0
sg39
F0.63324825990093814
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1d3\n\xf0\xc8'
tRp6688
sa(dp6689
S'trial_loop.thisTrialN'
p6690
I20
sg6371
S'48-twix.png'
p6691
sS'block_loop.thisIndex'
p6692
g6365
sg38
S'left'
p6693
sg59
g63
sS'trial_loop.thisN'
p6694
I20
sg33
S'48-twix.png'
p6695
sg64
g65
sS'trial_loop.thisIndex'
p6696
g60
(g99
S'\x14\x00\x00\x00'
tRp6697
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6698
I0
sg6380
S'50-polo.png'
p6699
sS'block_loop.thisRepN'
p6700
I2
sg6383
g6695
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6701
I2
sg6385
S'50-polo.png'
p6702
sg55
g11
sS'block_loop.thisTrial'
p6703
Nsg70
Vn
sS'block_loop.thisTrialN'
p6704
I0
sg39
F1.3333233548810313
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1d9\x05\xcc`'
tRp6705
sa(dp6706
S'trial_loop.thisTrialN'
p6707
I21
sg6371
g6548
sS'block_loop.thisIndex'
p6708
g6365
sg38
S'right'
p6709
sg59
g63
sS'trial_loop.thisN'
p6710
I21
sg33
g6552
sg64
g65
sS'trial_loop.thisIndex'
p6711
g60
(g99
S'\x15\x00\x00\x00'
tRp6712
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6713
I0
sg6380
g6556
sS'block_loop.thisRepN'
p6714
I2
sg6383
g6552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6715
I2
sg6385
g6559
sg55
g11
sS'block_loop.thisTrial'
p6716
Nsg70
Vn
sS'block_loop.thisTrialN'
p6717
I0
sg39
F0.69996020023063465
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1e\x03\x0b^('
tRp6718
sa(dp6719
S'trial_loop.thisTrialN'
p6720
I22
sg6371
S'4-corn.png'
p6721
sS'block_loop.thisIndex'
p6722
g6365
sg38
S'right'
p6723
sg59
g63
sS'trial_loop.thisN'
p6724
I22
sg33
S'10-bounty_redo.png'
p6725
sg64
g65
sS'trial_loop.thisIndex'
p6726
g60
(g99
S'\x16\x00\x00\x00'
tRp6727
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6728
I0
sg6380
S'10-bounty_redo.png'
p6729
sS'block_loop.thisRepN'
p6730
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6731
I2
sg6385
S'4-corn.png'
p6732
sg55
g11
sS'block_loop.thisTrial'
p6733
Nsg70
Vn
sS'block_loop.thisTrialN'
p6734
I0
sg39
F0.96668365854566218
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1e\t\x07jp'
tRp6735
sa(dp6736
S'trial_loop.thisTrialN'
p6737
I23
sg6371
S'5-pineapple.png'
p6738
sS'block_loop.thisIndex'
p6739
g6365
sg38
S'right'
p6740
sg59
g63
sS'trial_loop.thisN'
p6741
I23
sg33
S'40-sardines.png'
p6742
sg64
g65
sS'trial_loop.thisIndex'
p6743
g60
(g99
S'\x17\x00\x00\x00'
tRp6744
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6745
I0
sg6380
S'40-sardines.png'
p6746
sS'block_loop.thisRepN'
p6747
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6748
I2
sg6385
S'5-pineapple.png'
p6749
sg55
g11
sS'block_loop.thisTrial'
p6750
Nsg70
Vn
sS'block_loop.thisTrialN'
p6751
I0
sg39
F0.96663661727052386
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1e\x0f\x07C`'
tRp6752
sa(dp6753
S'trial_loop.thisTrialN'
p6754
I24
sg6371
S'35-raisins.png'
p6755
sS'block_loop.thisIndex'
p6756
g6365
sg38
S'right'
p6757
sg59
g63
sS'trial_loop.thisN'
p6758
I24
sg33
S'49-yorkie.png'
p6759
sg64
g65
sS'trial_loop.thisIndex'
p6760
g60
(g99
S'\x18\x00\x00\x00'
tRp6761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6762
I0
sg6380
S'49-yorkie.png'
p6763
sS'block_loop.thisRepN'
p6764
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6765
I2
sg6385
S'35-raisins.png'
p6766
sg55
g11
sS'block_loop.thisTrial'
p6767
Nsg70
Vn
sS'block_loop.thisTrialN'
p6768
I0
sg39
F0.73326798872585641
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1e\x15\x07Z\xd0'
tRp6769
sa(dp6770
S'trial_loop.thisTrialN'
p6771
I25
sg6371
g6582
sS'block_loop.thisIndex'
p6772
g6365
sg38
S'right'
p6773
sg59
g63
sS'trial_loop.thisN'
p6774
I25
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p6775
g60
(g99
S'\x19\x00\x00\x00'
tRp6776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6777
I0
sg6380
g6589
sS'block_loop.thisRepN'
p6778
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6779
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p6780
Nsg70
Vn
sS'block_loop.thisTrialN'
p6781
I0
sg39
F1.3166462250947006
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1e\x1b\x03\xe00'
tRp6782
sa(dp6783
S'trial_loop.thisTrialN'
p6784
I26
sg6371
S'10-bounty_redo.png'
p6785
sS'block_loop.thisIndex'
p6786
g6365
sg38
S'left'
p6787
sg59
g63
sS'trial_loop.thisN'
p6788
I26
sg33
g6725
sg64
g65
sS'trial_loop.thisIndex'
p6789
g60
(g99
S'\x1a\x00\x00\x00'
tRp6790
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6791
I0
sg6380
S'4-corn.png'
p6792
sS'block_loop.thisRepN'
p6793
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6794
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p6795
Nsg70
Vn
sS'block_loop.thisTrialN'
p6796
I0
sg39
F0.6999716041764259
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1e!\t3x'
tRp6797
sa(dp6798
S'trial_loop.thisTrialN'
p6799
I27
sg6371
S'40-sardines.png'
p6800
sS'block_loop.thisIndex'
p6801
g6365
sg38
S'left'
p6802
sg59
g63
sS'trial_loop.thisN'
p6803
I27
sg33
g6749
sg64
g65
sS'trial_loop.thisIndex'
p6804
g60
(g99
S'\x1b\x00\x00\x00'
tRp6805
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6806
I0
sg6380
S'5-pineapple.png'
p6807
sS'block_loop.thisRepN'
p6808
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6809
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p6810
Nsg70
Vn
sS'block_loop.thisTrialN'
p6811
I0
sg39
F1.4170046510989778
sg34
g753
(S"\x07\xdf\x07\r\x0b\x1e'\x05\x01@"
tRp6812
sa(dp6813
S'trial_loop.thisTrialN'
p6814
I28
sg6371
g6785
sS'block_loop.thisIndex'
p6815
g6365
sg38
S'left'
p6816
sg59
g63
sS'trial_loop.thisN'
p6817
I28
sg33
g6725
sg64
g65
sS'trial_loop.thisIndex'
p6818
g60
(g99
S'\x1c\x00\x00\x00'
tRp6819
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6820
I0
sg6380
g6792
sS'block_loop.thisRepN'
p6821
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6822
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p6823
Nsg70
Vn
sS'block_loop.thisTrialN'
p6824
I0
sg39
F0.63338938372544362
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1e-\x0c\x028'
tRp6825
sa(dp6826
S'trial_loop.thisTrialN'
p6827
I29
sg6371
g6597
sS'block_loop.thisIndex'
p6828
g6365
sg38
S'left'
p6829
sg59
g63
sS'trial_loop.thisN'
p6830
I29
sg33
g6601
sg64
g65
sS'trial_loop.thisIndex'
p6831
g60
(g99
S'\x1d\x00\x00\x00'
tRp6832
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6833
I0
sg6380
g6605
sS'block_loop.thisRepN'
p6834
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6835
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p6836
Nsg70
Vn
sS'block_loop.thisTrialN'
p6837
I0
sg39
F0.61658139366500109
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1e3\x06\xdd\xd0'
tRp6838
sa(dp6839
S'trial_loop.thisTrialN'
p6840
I30
sg6371
S'1-treacle_cookies.png'
p6841
sS'block_loop.thisIndex'
p6842
g6365
sg38
S'left'
p6843
sg59
g63
sS'trial_loop.thisN'
p6844
I30
sg33
S'1-treacle_cookies.png'
p6845
sg64
g65
sS'trial_loop.thisIndex'
p6846
g60
(g99
S'\x1e\x00\x00\x00'
tRp6847
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6848
I0
sg6380
S'21-nakd_banana_crunch.png'
p6849
sS'block_loop.thisRepN'
p6850
I2
sg6383
g6845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6851
I2
sg6385
S'21-nakd_banana_crunch.png'
p6852
sg55
g11
sS'block_loop.thisTrial'
p6853
Nsg70
Vn
sS'block_loop.thisTrialN'
p6854
I0
sg39
F0.80000387734162359
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1e9\x01z\xe8'
tRp6855
sa(dp6856
S'trial_loop.thisTrialN'
p6857
I31
sg6371
S'49-yorkie.png'
p6858
sS'block_loop.thisIndex'
p6859
g6365
sg38
S'left'
p6860
sg59
g63
sS'trial_loop.thisN'
p6861
I31
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p6862
g60
(g99
S'\x1f\x00\x00\x00'
tRp6863
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6864
I0
sg6380
S'35-raisins.png'
p6865
sS'block_loop.thisRepN'
p6866
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6867
I2
sg6385
g6766
sg55
g11
sS'block_loop.thisTrial'
p6868
Nsg70
Vn
sS'block_loop.thisTrialN'
p6869
I0
sg39
F0.64990372219108394
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1f\x02\x0e4\xb8'
tRp6870
sa(dp6871
S'trial_loop.thisTrialN'
p6872
I32
sg6371
g6661
sS'block_loop.thisIndex'
p6873
g6365
sg38
S'right'
p6874
sg59
g63
sS'trial_loop.thisN'
p6875
I32
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p6876
g60
(g99
S' \x00\x00\x00'
tRp6877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6878
I0
sg6380
g6668
sS'block_loop.thisRepN'
p6879
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6880
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p6881
Nsg70
Vn
sS'block_loop.thisTrialN'
p6882
I0
sg39
F1.5000983590289252
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1f\x08\tN\xd0'
tRp6883
sa(dp6884
S'trial_loop.thisTrialN'
p6885
I33
sg6371
S'44-crunch.png'
p6886
sS'block_loop.thisIndex'
p6887
g6365
sg38
S'left'
p6888
sg59
g63
sS'trial_loop.thisN'
p6889
I33
sg33
S'44-crunch.png'
p6890
sg64
g65
sS'trial_loop.thisIndex'
p6891
g60
(g99
S'!\x00\x00\x00'
tRp6892
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6893
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6894
sS'block_loop.thisRepN'
p6895
I2
sg6383
g6890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6896
I2
sg6385
S'26-walkers_smoky_bacon.png'
p6897
sg55
g11
sS'block_loop.thisTrial'
p6898
Nsg70
Vn
sS'block_loop.thisTrialN'
p6899
I0
sg39
F0.81668699419969926
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1f\x0f\x02:P'
tRp6900
sa(dp6901
S'trial_loop.thisTrialN'
p6902
I34
sg6371
S'6-sour_patch_kids.png'
p6903
sS'block_loop.thisIndex'
p6904
g6365
sg38
S'right'
p6905
sg59
g63
sS'trial_loop.thisN'
p6906
I34
sg33
S'38-maltesers.png'
p6907
sg64
g65
sS'trial_loop.thisIndex'
p6908
g60
(g99
S'"\x00\x00\x00'
tRp6909
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6910
I0
sg6380
S'38-maltesers.png'
p6911
sS'block_loop.thisRepN'
p6912
I2
sg6383
g6907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6913
I2
sg6385
S'6-sour_patch_kids.png'
p6914
sg55
g11
sS'block_loop.thisTrial'
p6915
Nsg70
Vn
sS'block_loop.thisTrialN'
p6916
I0
sg39
F0.98303748647867906
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1f\x14\x0f2\xa0'
tRp6917
sa(dp6918
S'trial_loop.thisTrialN'
p6919
I35
sg6371
g6597
sS'block_loop.thisIndex'
p6920
g6365
sg38
S'left'
p6921
sg59
g63
sS'trial_loop.thisN'
p6922
I35
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p6923
g60
(g99
S'#\x00\x00\x00'
tRp6924
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6925
I0
sg6380
g6605
sS'block_loop.thisRepN'
p6926
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6927
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p6928
Nsg70
Vn
sS'block_loop.thisTrialN'
p6929
I0
sg39
F0.88326892955137737
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1f\x1b\x00FP'
tRp6930
sa(dp6931
S'trial_loop.thisTrialN'
p6932
I36
sg6371
g6392
sS'block_loop.thisIndex'
p6933
g6365
sg38
S'left'
p6934
sg59
g63
sS'trial_loop.thisN'
p6935
I36
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p6936
g60
(g99
S'$\x00\x00\x00'
tRp6937
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6938
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6939
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6940
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6941
Nsg70
Vn
sS'block_loop.thisTrialN'
p6942
I0
sg39
F0.71658373147329257
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1f \x0e0\xd0'
tRp6943
sa(dp6944
S'trial_loop.thisTrialN'
p6945
I37
sg6371
g6886
sS'block_loop.thisIndex'
p6946
g6365
sg38
S'left'
p6947
sg59
g63
sS'trial_loop.thisN'
p6948
I37
sg33
g6890
sg64
g65
sS'trial_loop.thisIndex'
p6949
g60
(g99
S'%\x00\x00\x00'
tRp6950
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6951
I0
sg6380
g6894
sS'block_loop.thisRepN'
p6952
I2
sg6383
g6890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6953
I2
sg6385
g6897
sg55
g11
sS'block_loop.thisTrial'
p6954
Nsg70
Vn
sS'block_loop.thisTrialN'
p6955
I0
sg39
F0.63328703331535507
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1f&\nw\xb0'
tRp6956
sa(dp6957
S'trial_loop.thisTrialN'
p6958
I38
sg6371
S'38-maltesers.png'
p6959
sS'block_loop.thisIndex'
p6960
g6365
sg38
S'left'
p6961
sg59
g63
sS'trial_loop.thisN'
p6962
I38
sg33
g6907
sg64
g65
sS'trial_loop.thisIndex'
p6963
g60
(g99
S'&\x00\x00\x00'
tRp6964
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6965
I0
sg6380
S'6-sour_patch_kids.png'
p6966
sS'block_loop.thisRepN'
p6967
I2
sg6383
g6907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6968
I2
sg6385
g6914
sg55
g11
sS'block_loop.thisTrial'
p6969
Nsg70
Vn
sS'block_loop.thisTrialN'
p6970
I0
sg39
F0.58307774240620347
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1f,\x05SH'
tRp6971
sa(dp6972
S'trial_loop.thisTrialN'
p6973
I39
sg6371
g6443
sS'block_loop.thisIndex'
p6974
g6365
sg38
S'right'
p6975
sg59
g63
sS'trial_loop.thisN'
p6976
I39
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6977
g60
(g99
S"'\x00\x00\x00"
tRp6978
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6979
I0
sg6380
g6451
sS'block_loop.thisRepN'
p6980
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6981
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p6982
Nsg70
Vn
sS'block_loop.thisTrialN'
p6983
I0
sg39
F0.65001120437591453
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1f1\x0e\xb9\x88'
tRp6984
sa(dp6985
S'trial_loop.thisTrialN'
p6986
I40
sg6371
g6426
sS'block_loop.thisIndex'
p6987
g6365
sg38
S'right'
p6988
sg59
g63
sS'trial_loop.thisN'
p6989
I40
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6990
g60
(g99
S'(\x00\x00\x00'
tRp6991
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6992
I0
sg6380
g6434
sS'block_loop.thisRepN'
p6993
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6994
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6995
Nsg70
Vn
sS'block_loop.thisTrialN'
p6996
I0
sg39
F0.66661392341848114
sg34
g753
(S'\x07\xdf\x07\r\x0b\x1f7\t\xd3\xa0'
tRp6997
sa(dp6998
S'trial_loop.thisTrialN'
p6999
I41
sg6371
g6676
sS'block_loop.thisIndex'
p7000
g6365
sg38
S'left'
p7001
sg59
g63
sS'trial_loop.thisN'
p7002
I41
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7003
g60
(g99
S')\x00\x00\x00'
tRp7004
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7005
I0
sg6380
g6683
sS'block_loop.thisRepN'
p7006
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7007
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7008
Nsg70
Vn
sS'block_loop.thisTrialN'
p7009
I0
sg39
F0.56658050985879527
sg34
g753
(S'\x07\xdf\x07\r\x0b \x01\x05b\xe8'
tRp7010
sa(dp7011
S'trial_loop.thisTrialN'
p7012
I42
sg6371
S'16-skips_prawn.png'
p7013
sS'block_loop.thisIndex'
p7014
g6365
sg38
S'right'
p7015
sg59
g63
sS'trial_loop.thisN'
p7016
I42
sg33
S'42-mrkipling_lemon_slices.png'
p7017
sg64
g65
sS'trial_loop.thisIndex'
p7018
g60
(g99
S'*\x00\x00\x00'
tRp7019
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7020
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p7021
sS'block_loop.thisRepN'
p7022
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7023
I2
sg6385
S'16-skips_prawn.png'
p7024
sg55
g11
sS'block_loop.thisTrial'
p7025
Nsg70
Vn
sS'block_loop.thisTrialN'
p7026
I0
sg39
F1.0832060367929444
sg34
g753
(S'\x07\xdf\x07\r\x0b \x06\x0eP\x10'
tRp7027
sa(dp7028
S'trial_loop.thisTrialN'
p7029
I43
sg6371
g6785
sS'block_loop.thisIndex'
p7030
g6365
sg38
S'left'
p7031
sg59
g63
sS'trial_loop.thisN'
p7032
I43
sg33
g6725
sg64
g65
sS'trial_loop.thisIndex'
p7033
g60
(g99
S'+\x00\x00\x00'
tRp7034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7035
I0
sg6380
g6792
sS'block_loop.thisRepN'
p7036
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7037
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p7038
Nsg70
Vn
sS'block_loop.thisTrialN'
p7039
I0
sg39
F0.61652266334567685
sg34
g753
(S'\x07\xdf\x07\r\x0b \r\x01\r\x88'
tRp7040
sa(dp7041
S'trial_loop.thisTrialN'
p7042
I44
sg6371
g6646
sS'block_loop.thisIndex'
p7043
g6365
sg38
S'left'
p7044
sg59
g63
sS'trial_loop.thisN'
p7045
I44
sg33
g6552
sg64
g65
sS'trial_loop.thisIndex'
p7046
g60
(g99
S',\x00\x00\x00'
tRp7047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7048
I0
sg6380
g6653
sS'block_loop.thisRepN'
p7049
I2
sg6383
g6552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7050
I2
sg6385
g6559
sg55
g11
sS'block_loop.thisTrial'
p7051
Nsg70
Vn
sS'block_loop.thisTrialN'
p7052
I0
sg39
F0.5832120238637799
sg34
g753
(S'\x07\xdf\x07\r\x0b \x12\n\xec\xe0'
tRp7053
sa(dp7054
S'trial_loop.thisTrialN'
p7055
I45
sg6371
g6858
sS'block_loop.thisIndex'
p7056
g6365
sg38
S'left'
p7057
sg59
g63
sS'trial_loop.thisN'
p7058
I45
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p7059
g60
(g99
S'-\x00\x00\x00'
tRp7060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7061
I0
sg6380
g6865
sS'block_loop.thisRepN'
p7062
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7063
I2
sg6385
g6766
sg55
g11
sS'block_loop.thisTrial'
p7064
Nsg70
Vn
sS'block_loop.thisTrialN'
p7065
I0
sg39
F0.56666575435156119
sg34
g753
(S'\x07\xdf\x07\r\x0b \x18\x05\x10\xe0'
tRp7066
sa(dp7067
S'trial_loop.thisTrialN'
p7068
I46
sg6371
S'21-nakd_banana_crunch.png'
p7069
sS'block_loop.thisIndex'
p7070
g6365
sg38
S'right'
p7071
sg59
g63
sS'trial_loop.thisN'
p7072
I46
sg33
g6845
sg64
g65
sS'trial_loop.thisIndex'
p7073
g60
(g99
S'.\x00\x00\x00'
tRp7074
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7075
I0
sg6380
S'1-treacle_cookies.png'
p7076
sS'block_loop.thisRepN'
p7077
I2
sg6383
g6845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7078
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p7079
Nsg70
Vn
sS'block_loop.thisTrialN'
p7080
I0
sg39
F0.76666301740442577
sg34
g753
(S'\x07\xdf\x07\r\x0b \x1d\x0e<\x88'
tRp7081
sa(dp7082
S'trial_loop.thisTrialN'
p7083
I47
sg6371
g6490
sS'block_loop.thisIndex'
p7084
g6365
sg38
S'left'
p7085
sg59
g63
sS'trial_loop.thisN'
p7086
I47
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7087
g60
(g99
S'/\x00\x00\x00'
tRp7088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7089
I0
sg6380
g6497
sS'block_loop.thisRepN'
p7090
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7091
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7092
Nsg70
Vn
sS'block_loop.thisTrialN'
p7093
I0
sg39
F0.58334602022296167
sg34
g753
(S'\x07\xdf\x07\r\x0b #\x0b;\x00'
tRp7094
sa(dp7095
S'trial_loop.thisTrialN'
p7096
I48
sg6371
g6785
sS'block_loop.thisIndex'
p7097
g6365
sg38
S'left'
p7098
sg59
g63
sS'trial_loop.thisN'
p7099
I48
sg33
g6725
sg64
g65
sS'trial_loop.thisIndex'
p7100
g60
(g99
S'0\x00\x00\x00'
tRp7101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7102
I0
sg6380
g6792
sS'block_loop.thisRepN'
p7103
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7104
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p7105
Nsg70
Vn
sS'block_loop.thisTrialN'
p7106
I0
sg39
F0.61666036598671781
sg34
g753
(S'\x07\xdf\x07\r\x0b )\x05_\x00'
tRp7107
sa(dp7108
S'trial_loop.thisTrialN'
p7109
I49
sg6371
g6443
sS'block_loop.thisIndex'
p7110
g6365
sg38
S'right'
p7111
sg59
g63
sS'trial_loop.thisN'
p7112
I49
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7113
g60
(g99
S'1\x00\x00\x00'
tRp7114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7115
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7116
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7117
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7118
Nsg70
Vn
sS'block_loop.thisTrialN'
p7119
I0
sg39
F0.63335602718507289
sg34
g753
(S'\x07\xdf\x07\r\x0b .\x0f>X'
tRp7120
sa(dp7121
S'trial_loop.thisTrialN'
p7122
I50
sg6371
S'3-ellas_strawberries_apples.png'
p7123
sS'block_loop.thisIndex'
p7124
g6365
sg38
S'left'
p7125
sg59
g63
sS'trial_loop.thisN'
p7126
I50
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p7127
g60
(g99
S'2\x00\x00\x00'
tRp7128
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7129
I0
sg6380
S'13-mccoys_steak_crisps.png'
p7130
sS'block_loop.thisRepN'
p7131
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7132
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p7133
Nsg70
Vn
sS'block_loop.thisTrialN'
p7134
I0
sg39
F0.58334373943398532
sg34
g753
(S'\x07\xdf\x07\r\x0b 4\n\x19\xf0'
tRp7135
sa(dp7136
S'trial_loop.thisTrialN'
p7137
I51
sg6371
g6738
sS'block_loop.thisIndex'
p7138
g6365
sg38
S'right'
p7139
sg59
g63
sS'trial_loop.thisN'
p7140
I51
sg33
g6749
sg64
g65
sS'trial_loop.thisIndex'
p7141
g60
(g99
S'3\x00\x00\x00'
tRp7142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7143
I0
sg6380
g6746
sS'block_loop.thisRepN'
p7144
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7145
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p7146
Nsg70
Vn
sS'block_loop.thisTrialN'
p7147
I0
sg39
F0.96658159323396831
sg34
g753
(S'\x07\xdf\x07\r\x0b :\x04=\xf0'
tRp7148
sa(dp7149
S'trial_loop.thisTrialN'
p7150
I52
sg6371
g6426
sS'block_loop.thisIndex'
p7151
g6365
sg38
S'right'
p7152
sg59
g63
sS'trial_loop.thisN'
p7153
I52
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7154
g60
(g99
S'4\x00\x00\x00'
tRp7155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7156
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7157
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7158
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7159
Nsg70
Vn
sS'block_loop.thisTrialN'
p7160
I0
sg39
F0.68333296270520805
sg34
g753
(S'\x07\xdf\x07\r\x0b!\x04\x04U`'
tRp7161
sa(dp7162
S'trial_loop.thisTrialN'
p7163
I53
sg6371
g6676
sS'block_loop.thisIndex'
p7164
g6365
sg38
S'left'
p7165
sg59
g63
sS'trial_loop.thisN'
p7166
I53
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7167
g60
(g99
S'5\x00\x00\x00'
tRp7168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7169
I0
sg6380
g6683
sS'block_loop.thisRepN'
p7170
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7171
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7172
Nsg70
Vn
sS'block_loop.thisTrialN'
p7173
I0
sg39
F0.56662412995046907
sg34
g753
(S'\x07\xdf\x07\r\x0b!\t\x0f&\xe8'
tRp7174
sa(dp7175
S'trial_loop.thisTrialN'
p7176
I54
sg6371
g6473
sS'block_loop.thisIndex'
p7177
g6365
sg38
S'left'
p7178
sg59
g63
sS'trial_loop.thisN'
p7179
I54
sg33
g6477
sg64
g65
sS'trial_loop.thisIndex'
p7180
g60
(g99
S'6\x00\x00\x00'
tRp7181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7182
I0
sg6380
g6481
sS'block_loop.thisRepN'
p7183
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7184
I2
sg6385
g6484
sg55
g11
sS'block_loop.thisTrial'
p7185
Nsg70
Vn
sS'block_loop.thisTrialN'
p7186
I0
sg39
F0.8164301203287323
sg34
g753
(S'\x07\xdf\x07\r\x0b!\x0f\t\x10P'
tRp7187
sa(dp7188
S'trial_loop.thisTrialN'
p7189
I55
sg6371
g6490
sS'block_loop.thisIndex'
p7190
g6365
sg38
S'left'
p7191
sg59
g63
sS'trial_loop.thisN'
p7192
I55
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7193
g60
(g99
S'7\x00\x00\x00'
tRp7194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7195
I0
sg6380
g6497
sS'block_loop.thisRepN'
p7196
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7197
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7198
Nsg70
Vn
sS'block_loop.thisTrialN'
p7199
I0
sg39
F0.56668799204453535
sg34
g753
(S'\x07\xdf\x07\r\x0b!\x15\x06\xc6`'
tRp7200
sa(dp7201
S'trial_loop.thisTrialN'
p7202
I56
sg6371
S'7-olives.png'
p7203
sS'block_loop.thisIndex'
p7204
g6365
sg38
S'right'
p7205
sg59
g63
sS'trial_loop.thisN'
p7206
I56
sg33
g6633
sg64
g65
sS'trial_loop.thisIndex'
p7207
g60
(g99
S'8\x00\x00\x00'
tRp7208
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7209
I0
sg6380
S'22-daim.png'
p7210
sS'block_loop.thisRepN'
p7211
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7212
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p7213
Nsg70
Vn
sS'block_loop.thisTrialN'
p7214
I0
sg39
F0.91666310293385322
sg34
g753
(S'\x07\xdf\x07\r\x0b!\x1b\x00\xab\xe0'
tRp7215
sa(dp7216
S'trial_loop.thisTrialN'
p7217
I57
sg6371
g6518
sS'block_loop.thisIndex'
p7218
g6365
sg38
S'left'
p7219
sg59
g63
sS'trial_loop.thisN'
p7220
I57
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p7221
g60
(g99
S'9\x00\x00\x00'
tRp7222
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7223
I0
sg6380
g6526
sS'block_loop.thisRepN'
p7224
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7225
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p7226
Nsg70
Vn
sS'block_loop.thisTrialN'
p7227
I0
sg39
F1.1836474265001016
sg34
g753
(S'\x07\xdf\x07\r\x0b! \x0f\x13`'
tRp7228
sa(dp7229
S'trial_loop.thisTrialN'
p7230
I58
sg6371
g6548
sS'block_loop.thisIndex'
p7231
g6365
sg38
S'right'
p7232
sg59
g63
sS'trial_loop.thisN'
p7233
I58
sg33
g6552
sg64
g65
sS'trial_loop.thisIndex'
p7234
g60
(g99
S':\x00\x00\x00'
tRp7235
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7236
I0
sg6380
g6556
sS'block_loop.thisRepN'
p7237
I2
sg6383
g6552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7238
I2
sg6385
g6559
sg55
g11
sS'block_loop.thisTrial'
p7239
Nsg70
Vn
sS'block_loop.thisTrialN'
p7240
I0
sg39
F0.74987213326221536
sg34
g753
(S"\x07\xdf\x07\r\x0b!'\x03< "
tRp7241
sa(dp7242
S'trial_loop.thisTrialN'
p7243
I59
sg6371
S'26-walkers_smoky_bacon.png'
p7244
sS'block_loop.thisIndex'
p7245
g6365
sg38
S'right'
p7246
sg59
g63
sS'trial_loop.thisN'
p7247
I59
sg33
g6890
sg64
g65
sS'trial_loop.thisIndex'
p7248
g60
(g99
S';\x00\x00\x00'
tRp7249
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7250
I0
sg6380
S'44-crunch.png'
p7251
sS'block_loop.thisRepN'
p7252
I2
sg6383
g6890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7253
I2
sg6385
g6897
sg55
g11
sS'block_loop.thisTrial'
p7254
Nsg70
Vn
sS'block_loop.thisTrialN'
p7255
I0
sg39
F0.93328720437330048
sg34
g753
(S'\x07\xdf\x07\r\x0b!-\x00\x00\x00'
tRp7256
sa(dp7257
S'trial_loop.thisTrialN'
p7258
I60
sg6371
g6841
sS'block_loop.thisIndex'
p7259
g6365
sg38
S'left'
p7260
sg59
g63
sS'trial_loop.thisN'
p7261
I60
sg33
g6845
sg64
g65
sS'trial_loop.thisIndex'
p7262
g60
(g99
S'<\x00\x00\x00'
tRp7263
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7264
I0
sg6380
g6849
sS'block_loop.thisRepN'
p7265
I2
sg6383
g6845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7266
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p7267
Nsg70
Vn
sS'block_loop.thisTrialN'
p7268
I0
sg39
F0.74991090667663229
sg34
g753
(S'\x07\xdf\x07\r\x0b!2\x0e\xa2\x18'
tRp7269
sa(dp7270
S'trial_loop.thisTrialN'
p7271
I61
sg6371
g6565
sS'block_loop.thisIndex'
p7272
g6365
sg38
S'left'
p7273
sg59
g63
sS'trial_loop.thisN'
p7274
I61
sg33
g6576
sg64
g65
sS'trial_loop.thisIndex'
p7275
g60
(g99
S'=\x00\x00\x00'
tRp7276
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7277
I0
sg6380
g6573
sS'block_loop.thisRepN'
p7278
I2
sg6383
g6569
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7279
I2
sg6385
g6576
sg55
g11
sS'block_loop.thisTrial'
p7280
Nsg70
Vn
sS'block_loop.thisTrialN'
p7281
I0
sg39
F0.63331440278307127
sg34
g753
(S'\x07\xdf\x07\r\x0b!8\x0be\xf8'
tRp7282
sa(dp7283
S'trial_loop.thisTrialN'
p7284
I62
sg6371
g6903
sS'block_loop.thisIndex'
p7285
g6365
sg38
S'right'
p7286
sg59
g63
sS'trial_loop.thisN'
p7287
I62
sg33
g6907
sg64
g65
sS'trial_loop.thisIndex'
p7288
g60
(g99
S'>\x00\x00\x00'
tRp7289
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7290
I0
sg6380
g6911
sS'block_loop.thisRepN'
p7291
I2
sg6383
g6907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7292
I2
sg6385
g6914
sg55
g11
sS'block_loop.thisTrial'
p7293
Nsg70
Vn
sS'block_loop.thisTrialN'
p7294
I0
sg39
F0.78296894876712031
sg34
g753
(S'\x07\xdf\x07\r\x0b"\x02\x06A\x90'
tRp7295
sa(dp7296
S'trial_loop.thisTrialN'
p7297
I63
sg6371
S'20-fruit_pastilles.png'
p7298
sS'block_loop.thisIndex'
p7299
g6365
sg38
S'right'
p7300
sg59
g63
sS'trial_loop.thisN'
p7301
I63
sg33
g6569
sg64
g65
sS'trial_loop.thisIndex'
p7302
g60
(g99
S'?\x00\x00\x00'
tRp7303
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7304
I0
sg6380
S'2-steamed_puddings.png'
p7305
sS'block_loop.thisRepN'
p7306
I2
sg6383
g6569
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7307
I2
sg6385
g6576
sg55
g11
sS'block_loop.thisTrial'
p7308
Nsg70
Vn
sS'block_loop.thisTrialN'
p7309
I0
sg39
F1.166665241174087
sg34
g753
(S'\x07\xdf\x07\r\x0b"\x08\x03z\xa0'
tRp7310
sa(dp7311
S'trial_loop.thisTrialN'
p7312
I64
sg6371
S'36-fig_rolls.png'
p7313
sS'block_loop.thisIndex'
p7314
g6365
sg38
S'left'
p7315
sg59
g63
sS'trial_loop.thisN'
p7316
I64
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p7317
sg64
g65
sS'trial_loop.thisIndex'
p7318
g60
(g99
S'@\x00\x00\x00'
tRp7319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7320
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p7321
sS'block_loop.thisRepN'
p7322
I2
sg6383
S'36-fig_rolls.png'
p7323
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7324
I2
sg6385
g7317
sg55
g11
sS'block_loop.thisTrial'
p7325
Nsg70
Vn
sS'block_loop.thisTrialN'
p7326
I0
sg39
F1.3666123268667434
sg34
g753
(S'\x07\xdf\x07\r\x0b"\x0e\x06pp'
tRp7327
sa(dp7328
S'trial_loop.thisTrialN'
p7329
I65
sg6371
g7203
sS'block_loop.thisIndex'
p7330
g6365
sg38
S'right'
p7331
sg59
g63
sS'trial_loop.thisN'
p7332
I65
sg33
g6633
sg64
g65
sS'trial_loop.thisIndex'
p7333
g60
(g99
S'A\x00\x00\x00'
tRp7334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7335
I0
sg6380
g7210
sS'block_loop.thisRepN'
p7336
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7337
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p7338
Nsg70
Vn
sS'block_loop.thisTrialN'
p7339
I0
sg39
F0.66670287419401575
sg34
g753
(S'\x07\xdf\x07\r\x0b"\x14\x0c\xb5\xe8'
tRp7340
sa(dp7341
S'trial_loop.thisTrialN'
p7342
I66
sg6371
g6614
sS'block_loop.thisIndex'
p7343
g6365
sg38
S'right'
p7344
sg59
g63
sS'trial_loop.thisN'
p7345
I66
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7346
g60
(g99
S'B\x00\x00\x00'
tRp7347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7348
I0
sg6380
g6621
sS'block_loop.thisRepN'
p7349
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7350
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7351
Nsg70
Vn
sS'block_loop.thisTrialN'
p7352
I0
sg39
F0.78322126105922507
sg34
g753
(S'\x07\xdf\x07\r\x0b"\x1a\x08\n\x98'
tRp7353
sa(dp7354
S'trial_loop.thisTrialN'
p7355
I67
sg6371
S'50-polo.png'
p7356
sS'block_loop.thisIndex'
p7357
g6365
sg38
S'right'
p7358
sg59
g63
sS'trial_loop.thisN'
p7359
I67
sg33
g6702
sg64
g65
sS'trial_loop.thisIndex'
p7360
g60
(g99
S'C\x00\x00\x00'
tRp7361
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7362
I0
sg6380
S'48-twix.png'
p7363
sS'block_loop.thisRepN'
p7364
I2
sg6383
g6695
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7365
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p7366
Nsg70
Vn
sS'block_loop.thisTrialN'
p7367
I0
sg39
F1.0333228987237817
sg34
g753
(S'\x07\xdf\x07\r\x0b" \x05G\x90'
tRp7368
sa(dp7369
S'trial_loop.thisTrialN'
p7370
I68
sg6371
g6721
sS'block_loop.thisIndex'
p7371
g6365
sg38
S'right'
p7372
sg59
g63
sS'trial_loop.thisN'
p7373
I68
sg33
g6725
sg64
g65
sS'trial_loop.thisIndex'
p7374
g60
(g99
S'D\x00\x00\x00'
tRp7375
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7376
I0
sg6380
g6729
sS'block_loop.thisRepN'
p7377
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7378
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p7379
Nsg70
Vn
sS'block_loop.thisTrialN'
p7380
I0
sg39
F0.66665013094552705
sg34
g753
(S'\x07\xdf\x07\r\x0b"&\x06Q0'
tRp7381
sa(dp7382
S'trial_loop.thisTrialN'
p7383
I69
sg6371
g6661
sS'block_loop.thisIndex'
p7384
g6365
sg38
S'right'
p7385
sg59
g63
sS'trial_loop.thisN'
p7386
I69
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p7387
g60
(g99
S'E\x00\x00\x00'
tRp7388
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7389
I0
sg6380
g6668
sS'block_loop.thisRepN'
p7390
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7391
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p7392
Nsg70
Vn
sS'block_loop.thisTrialN'
p7393
I0
sg39
F0.88335645483221015
sg34
g753
(S'\x07\xdf\x07\r\x0b",\x01\xa5\xe0'
tRp7394
sa(dp7395
S'trial_loop.thisTrialN'
p7396
I70
sg6371
g6691
sS'block_loop.thisIndex'
p7397
g6365
sg38
S'left'
p7398
sg59
g63
sS'trial_loop.thisN'
p7399
I70
sg33
g6695
sg64
g65
sS'trial_loop.thisIndex'
p7400
g60
(g99
S'F\x00\x00\x00'
tRp7401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7402
I0
sg6380
g6699
sS'block_loop.thisRepN'
p7403
I2
sg6383
g6695
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7404
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p7405
Nsg70
Vn
sS'block_loop.thisTrialN'
p7406
I0
sg39
F1.6999402433257274
sg34
g753
(S'\x07\xdf\x07\r\x0b"2\x00R\x08'
tRp7407
sa(dp7408
S'trial_loop.thisTrialN'
p7409
I71
sg6371
g6800
sS'block_loop.thisIndex'
p7410
g6365
sg38
S'left'
p7411
sg59
g63
sS'trial_loop.thisN'
p7412
I71
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p7413
g60
(g99
S'G\x00\x00\x00'
tRp7414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7415
I0
sg6380
g6807
sS'block_loop.thisRepN'
p7416
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7417
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p7418
Nsg70
Vn
sS'block_loop.thisTrialN'
p7419
I0
sg39
F1.0832416741213819
sg34
g753
(S'\x07\xdf\x07\r\x0b"8\x0b\x98\xc0'
tRp7420
sa(dp7421
S'trial_loop.thisTrialN'
p7422
I72
sg6371
S'42-mrkipling_lemon_slices.png'
p7423
sS'block_loop.thisIndex'
p7424
g6365
sg38
S'left'
p7425
sg59
g63
sS'trial_loop.thisN'
p7426
I72
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p7427
g60
(g99
S'H\x00\x00\x00'
tRp7428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7429
I0
sg6380
S'16-skips_prawn.png'
p7430
sS'block_loop.thisRepN'
p7431
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7432
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p7433
Nsg70
Vn
sS'block_loop.thisTrialN'
p7434
I0
sg39
F0.89980892689436587
sg34
g753
(S'\x07\xdf\x07\r\x0b#\x02\rY\xf8'
tRp7435
sa(dp7436
S'trial_loop.thisTrialN'
p7437
I73
sg6371
g6886
sS'block_loop.thisIndex'
p7438
g6365
sg38
S'left'
p7439
sg59
g63
sS'trial_loop.thisN'
p7440
I73
sg33
g6890
sg64
g65
sS'trial_loop.thisIndex'
p7441
g60
(g99
S'I\x00\x00\x00'
tRp7442
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7443
I0
sg6380
g6894
sS'block_loop.thisRepN'
p7444
I2
sg6383
g6890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7445
I2
sg6385
g6897
sg55
g11
sS'block_loop.thisTrial'
p7446
Nsg70
Vn
sS'block_loop.thisTrialN'
p7447
I0
sg39
F0.71640868091162702
sg34
g753
(S'\x07\xdf\x07\r\x0b#\x08\x0c@\xb8'
tRp7448
sa(dp7449
S'trial_loop.thisTrialN'
p7450
I74
sg6371
g6858
sS'block_loop.thisIndex'
p7451
g6365
sg38
S'left'
p7452
sg59
g63
sS'trial_loop.thisN'
p7453
I74
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p7454
g60
(g99
S'J\x00\x00\x00'
tRp7455
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7456
I0
sg6380
g6865
sS'block_loop.thisRepN'
p7457
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7458
I2
sg6385
g6766
sg55
g11
sS'block_loop.thisTrial'
p7459
Nsg70
Vn
sS'block_loop.thisTrialN'
p7460
I0
sg39
F0.58367844523127133
sg34
g753
(S'\x07\xdf\x07\r\x0b#\x0e\x08\x8b\x80'
tRp7461
sa(dp7462
S'trial_loop.thisTrialN'
p7463
I75
sg6371
g7123
sS'block_loop.thisIndex'
p7464
g6365
sg38
S'left'
p7465
sg59
g63
sS'trial_loop.thisN'
p7466
I75
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p7467
g60
(g99
S'K\x00\x00\x00'
tRp7468
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7469
I0
sg6380
g7130
sS'block_loop.thisRepN'
p7470
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7471
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p7472
Nsg70
Vn
sS'block_loop.thisTrialN'
p7473
I0
sg39
F0.56657794397051475
sg34
g753
(S'\x07\xdf\x07\r\x0b#\x14\x02\xaf\x80'
tRp7474
sa(dp7475
S'trial_loop.thisTrialN'
p7476
I76
sg6371
g7069
sS'block_loop.thisIndex'
p7477
g6365
sg38
S'right'
p7478
sg59
g63
sS'trial_loop.thisN'
p7479
I76
sg33
g6845
sg64
g65
sS'trial_loop.thisIndex'
p7480
g60
(g99
S'L\x00\x00\x00'
tRp7481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7482
I0
sg6380
g7076
sS'block_loop.thisRepN'
p7483
I2
sg6383
g6845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7484
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p7485
Nsg70
Vn
sS'block_loop.thisTrialN'
p7486
I0
sg39
F0.7500126868899315
sg34
g753
(S'\x07\xdf\x07\r\x0b#\x19\x0b\xd7@'
tRp7487
sa(dp7488
S'trial_loop.thisTrialN'
p7489
I77
sg6371
g6582
sS'block_loop.thisIndex'
p7490
g6365
sg38
S'right'
p7491
sg59
g63
sS'trial_loop.thisN'
p7492
I77
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p7493
g60
(g99
S'M\x00\x00\x00'
tRp7494
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7495
I0
sg6380
g6589
sS'block_loop.thisRepN'
p7496
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7497
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p7498
Nsg70
Vn
sS'block_loop.thisTrialN'
p7499
I0
sg39
F0.89993636598501325
sg34
g753
(S'\x07\xdf\x07\r\x0b#\x1f\x08\x9b '
tRp7500
sa(dp7501
S'trial_loop.thisTrialN'
p7502
I78
sg6371
g7298
sS'block_loop.thisIndex'
p7503
g6365
sg38
S'right'
p7504
sg59
g63
sS'trial_loop.thisN'
p7505
I78
sg33
g6569
sg64
g65
sS'trial_loop.thisIndex'
p7506
g60
(g99
S'N\x00\x00\x00'
tRp7507
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7508
I0
sg6380
g7305
sS'block_loop.thisRepN'
p7509
I2
sg6383
g6569
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7510
I2
sg6385
g6576
sg55
g11
sS'block_loop.thisTrial'
p7511
Nsg70
Vn
sS'block_loop.thisTrialN'
p7512
I0
sg39
F0.91656759489069373
sg34
g753
(S'\x07\xdf\x07\r\x0b#%\x07\x81\xe0'
tRp7513
sa(dp7514
S'trial_loop.thisTrialN'
p7515
I79
sg6371
g6959
sS'block_loop.thisIndex'
p7516
g6365
sg38
S'left'
p7517
sg59
g63
sS'trial_loop.thisN'
p7518
I79
sg33
g6907
sg64
g65
sS'trial_loop.thisIndex'
p7519
g60
(g99
S'O\x00\x00\x00'
tRp7520
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7521
I0
sg6380
g6966
sS'block_loop.thisRepN'
p7522
I2
sg6383
g6907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7523
I2
sg6385
g6914
sg55
g11
sS'block_loop.thisTrial'
p7524
Nsg70
Vn
sS'block_loop.thisTrialN'
p7525
I0
sg39
F0.7330262250825399
sg34
g753
(S'\x07\xdf\x07\r\x0b#+\x06\xe1\xb8'
tRp7526
sa(dp7527
S'trial_loop.thisTrialN'
p7528
I80
sg6371
g7244
sS'block_loop.thisIndex'
p7529
g6365
sg38
S'right'
p7530
sg59
g63
sS'trial_loop.thisN'
p7531
I80
sg33
g6890
sg64
g65
sS'trial_loop.thisIndex'
p7532
g60
(g99
S'P\x00\x00\x00'
tRp7533
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7534
I0
sg6380
g7251
sS'block_loop.thisRepN'
p7535
I2
sg6383
g6890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7536
I2
sg6385
g6897
sg55
g11
sS'block_loop.thisTrial'
p7537
Nsg70
Vn
sS'block_loop.thisTrialN'
p7538
I0
sg39
F0.6336816098264535
sg34
g753
(S'\x07\xdf\x07\r\x0b#1\x03(\x98'
tRp7539
sa(dp7540
S'trial_loop.thisTrialN'
p7541
I81
sg6371
g6443
sS'block_loop.thisIndex'
p7542
g6365
sg38
S'right'
p7543
sg59
g63
sS'trial_loop.thisN'
p7544
I81
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7545
g60
(g99
S'Q\x00\x00\x00'
tRp7546
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7547
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7548
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7549
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7550
Nsg70
Vn
sS'block_loop.thisTrialN'
p7551
I0
sg39
F0.58331237858328677
sg34
g753
(S'\x07\xdf\x07\r\x0b#6\rFp'
tRp7552
sa(dp7553
S'trial_loop.thisTrialN'
p7554
I82
sg6371
g6629
sS'block_loop.thisIndex'
p7555
g6365
sg38
S'left'
p7556
sg59
g63
sS'trial_loop.thisN'
p7557
I82
sg33
g6633
sg64
g65
sS'trial_loop.thisIndex'
p7558
g60
(g99
S'R\x00\x00\x00'
tRp7559
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7560
I0
sg6380
g6637
sS'block_loop.thisRepN'
p7561
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7562
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p7563
Nsg70
Vn
sS'block_loop.thisTrialN'
p7564
I0
sg39
F0.71656719575275929
sg34
g753
(S'\x07\xdf\x07\r\x0b$\x00\x07jp'
tRp7565
sa(dp7566
S'trial_loop.thisTrialN'
p7567
I83
sg6371
g6473
sS'block_loop.thisIndex'
p7568
g6365
sg38
S'left'
p7569
sg59
g63
sS'trial_loop.thisN'
p7570
I83
sg33
g6477
sg64
g65
sS'trial_loop.thisIndex'
p7571
g60
(g99
S'S\x00\x00\x00'
tRp7572
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7573
I0
sg6380
g6481
sS'block_loop.thisRepN'
p7574
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7575
I2
sg6385
g6484
sg55
g11
sS'block_loop.thisTrial'
p7576
Nsg70
Vn
sS'block_loop.thisTrialN'
p7577
I0
sg39
F0.81661400894790859
sg34
g753
(S'\x07\xdf\x07\r\x0b$\x06\x03\xb58'
tRp7578
sa(dp7579
S'trial_loop.thisTrialN'
p7580
I84
sg6371
g6392
sS'block_loop.thisIndex'
p7581
g6365
sg38
S'left'
p7582
sg59
g63
sS'trial_loop.thisN'
p7583
I84
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p7584
g60
(g99
S'T\x00\x00\x00'
tRp7585
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7586
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7587
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7588
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7589
Nsg70
Vn
sS'block_loop.thisTrialN'
p7590
I0
sg39
F0.59994816906873893
sg34
g753
(S'\x07\xdf\x07\r\x0b$\x0c\x01kH'
tRp7591
sa(dp7592
S'trial_loop.thisTrialN'
p7593
I85
sg6371
g6409
sS'block_loop.thisIndex'
p7594
g6365
sg38
S'right'
p7595
sg59
g63
sS'trial_loop.thisN'
p7596
I85
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p7597
g60
(g99
S'U\x00\x00\x00'
tRp7598
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7599
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7600
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7601
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p7602
Nsg70
Vn
sS'block_loop.thisTrialN'
p7603
I0
sg39
F0.6499886815845457
sg34
g753
(S'\x07\xdf\x07\r\x0b$\x11\x0b\x0c '
tRp7604
sa(dp7605
S'trial_loop.thisTrialN'
p7606
I86
sg6371
g6443
sS'block_loop.thisIndex'
p7607
g6365
sg38
S'right'
p7608
sg59
g63
sS'trial_loop.thisN'
p7609
I86
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p7610
g60
(g99
S'V\x00\x00\x00'
tRp7611
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7612
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7613
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7614
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7615
Nsg70
Vn
sS'block_loop.thisTrialN'
p7616
I0
sg39
F0.73365486757393228
sg34
g753
(S'\x07\xdf\x07\r\x0b$\x17\x06`\xd0'
tRp7617
sa(dp7618
S'trial_loop.thisTrialN'
p7619
I87
sg6371
g6721
sS'block_loop.thisIndex'
p7620
g6365
sg38
S'right'
p7621
sg59
g63
sS'trial_loop.thisN'
p7622
I87
sg33
g6725
sg64
g65
sS'trial_loop.thisIndex'
p7623
g60
(g99
S'W\x00\x00\x00'
tRp7624
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7625
I0
sg6380
g6729
sS'block_loop.thisRepN'
p7626
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7627
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p7628
Nsg70
Vn
sS'block_loop.thisTrialN'
p7629
I0
sg39
F0.64997157566631358
sg34
g753
(S'\x07\xdf\x07\r\x0b$\x1d\x02\xab\x98'
tRp7630
sa(dp7631
S'trial_loop.thisTrialN'
p7632
I88
sg6371
g6676
sS'block_loop.thisIndex'
p7633
g6365
sg38
S'left'
p7634
sg59
g63
sS'trial_loop.thisN'
p7635
I88
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7636
g60
(g99
S'X\x00\x00\x00'
tRp7637
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7638
I0
sg6380
g6683
sS'block_loop.thisRepN'
p7639
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7640
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7641
Nsg70
Vn
sS'block_loop.thisTrialN'
p7642
I0
sg39
F0.64995931642442883
sg34
g753
(S'\x07\xdf\x07\r\x0b$"\r\x04\x08'
tRp7643
sa(dp7644
S'trial_loop.thisTrialN'
p7645
I89
sg6371
g7423
sS'block_loop.thisIndex'
p7646
g6365
sg38
S'left'
p7647
sg59
g63
sS'trial_loop.thisN'
p7648
I89
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p7649
g60
(g99
S'Y\x00\x00\x00'
tRp7650
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7651
I0
sg6380
g7430
sS'block_loop.thisRepN'
p7652
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7653
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p7654
Nsg70
Vn
sS'block_loop.thisTrialN'
p7655
I0
sg39
F0.79981229105851526
sg34
g753
(S'\x07\xdf\x07\r\x0b$(\x08X\xb8'
tRp7656
sa(dp7657
S'trial_loop.thisTrialN'
p7658
I90
sg6371
g7356
sS'block_loop.thisIndex'
p7659
g6365
sg38
S'right'
p7660
sg59
g63
sS'trial_loop.thisN'
p7661
I90
sg33
g6695
sg64
g65
sS'trial_loop.thisIndex'
p7662
g60
(g99
S'Z\x00\x00\x00'
tRp7663
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7664
I0
sg6380
g7363
sS'block_loop.thisRepN'
p7665
I2
sg6383
g6695
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7666
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p7667
Nsg70
Vn
sS'block_loop.thisTrialN'
p7668
I0
sg39
F1.3832549597182151
sg34
g753
(S'\x07\xdf\x07\r\x0b$.\x05\xd0H'
tRp7669
sa(dp7670
S'trial_loop.thisTrialN'
p7671
I91
sg6371
g6518
sS'block_loop.thisIndex'
p7672
g6365
sg38
S'left'
p7673
sg59
g63
sS'trial_loop.thisN'
p7674
I91
sg33
g6522
sg64
g65
sS'trial_loop.thisIndex'
p7675
g60
(g99
S'[\x00\x00\x00'
tRp7676
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7677
I0
sg6380
g6526
sS'block_loop.thisRepN'
p7678
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7679
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p7680
Nsg70
Vn
sS'block_loop.thisTrialN'
p7681
I0
sg39
F0.79998506083120446
sg34
g753
(S'\x07\xdf\x07\r\x0b$4\x0c\x19\xa8'
tRp7682
sa(dp7683
S'trial_loop.thisTrialN'
p7684
I92
sg6371
g7356
sS'block_loop.thisIndex'
p7685
g6365
sg38
S'right'
p7686
sg59
g63
sS'trial_loop.thisN'
p7687
I92
sg33
g6695
sg64
g65
sS'trial_loop.thisIndex'
p7688
g60
(g99
S'\\\x00\x00\x00'
tRp7689
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7690
I0
sg6380
g7363
sS'block_loop.thisRepN'
p7691
I2
sg6383
g6695
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7692
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p7693
Nsg70
Vn
sS'block_loop.thisTrialN'
p7694
I0
sg39
F0.84974731707916362
sg34
g753
(S'\x07\xdf\x07\r\x0b$:\t\x918'
tRp7695
sa(dp7696
S'trial_loop.thisTrialN'
p7697
I93
sg6371
g6755
sS'block_loop.thisIndex'
p7698
g6365
sg38
S'right'
p7699
sg59
g63
sS'trial_loop.thisN'
p7700
I93
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p7701
g60
(g99
S']\x00\x00\x00'
tRp7702
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7703
I0
sg6380
g6763
sS'block_loop.thisRepN'
p7704
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7705
I2
sg6385
g6766
sg55
g11
sS'block_loop.thisTrial'
p7706
Nsg70
Vn
sS'block_loop.thisTrialN'
p7707
I0
sg39
F0.64998526040017168
sg34
g753
(S'\x07\xdf\x07\r\x0b%\x04\x07\xc4H'
tRp7708
sa(dp7709
S'trial_loop.thisTrialN'
p7710
I94
sg6371
g7203
sS'block_loop.thisIndex'
p7711
g6365
sg38
S'right'
p7712
sg59
g63
sS'trial_loop.thisN'
p7713
I94
sg33
g6633
sg64
g65
sS'trial_loop.thisIndex'
p7714
g60
(g99
S'^\x00\x00\x00'
tRp7715
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7716
I0
sg6380
g7210
sS'block_loop.thisRepN'
p7717
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7718
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p7719
Nsg70
Vn
sS'block_loop.thisTrialN'
p7720
I0
sg39
F0.71656634045666578
sg34
g753
(S'\x07\xdf\x07\r\x0b%\n\x02\xdax'
tRp7721
sa(dp7722
S'trial_loop.thisTrialN'
p7723
I95
sg6371
g6738
sS'block_loop.thisIndex'
p7724
g6365
sg38
S'right'
p7725
sg59
g63
sS'trial_loop.thisN'
p7726
I95
sg33
g6749
sg64
g65
sS'trial_loop.thisIndex'
p7727
g60
(g99
S'_\x00\x00\x00'
tRp7728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7729
I0
sg6380
g6746
sS'block_loop.thisRepN'
p7730
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7731
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p7732
Nsg70
Vn
sS'block_loop.thisTrialN'
p7733
I0
sg39
F1.2000377470594685
sg34
g753
(S'\x07\xdf\x07\r\x0b%\x0f\x0ec\x98'
tRp7734
sa(dp7735
S'trial_loop.thisTrialN'
p7736
I96
sg6371
S'45-chewy_nougat_redo.png'
p7737
sS'block_loop.thisIndex'
p7738
g6365
sg38
S'right'
p7739
sg59
g63
sS'trial_loop.thisN'
p7740
I96
sg33
g6477
sg64
g65
sS'trial_loop.thisIndex'
p7741
g60
(g99
S'`\x00\x00\x00'
tRp7742
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7743
I0
sg6380
S'41-peanuts_redo.png'
p7744
sS'block_loop.thisRepN'
p7745
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7746
I2
sg6385
g6484
sg55
g11
sS'block_loop.thisTrial'
p7747
Nsg70
Vn
sS'block_loop.thisTrialN'
p7748
I0
sg39
F0.83331423172512586
sg34
g753
(S'\x07\xdf\x07\r\x0b%\x16\x02\xca\xd8'
tRp7749
sa(dp7750
S'trial_loop.thisTrialN'
p7751
I97
sg6371
g6629
sS'block_loop.thisIndex'
p7752
g6365
sg38
S'left'
p7753
sg59
g63
sS'trial_loop.thisN'
p7754
I97
sg33
g6633
sg64
g65
sS'trial_loop.thisIndex'
p7755
g60
(g99
S'a\x00\x00\x00'
tRp7756
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7757
I0
sg6380
g6637
sS'block_loop.thisRepN'
p7758
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7759
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p7760
Nsg70
Vn
sS'block_loop.thisTrialN'
p7761
I0
sg39
F0.63335887817083858
sg34
g753
(S'\x07\xdf\x07\r\x0b%\x1c\x00\xbfh'
tRp7762
sa(dp7763
S'trial_loop.thisTrialN'
p7764
I98
sg6371
g7123
sS'block_loop.thisIndex'
p7765
g6365
sg38
S'left'
p7766
sg59
g63
sS'trial_loop.thisN'
p7767
I98
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p7768
g60
(g99
S'b\x00\x00\x00'
tRp7769
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7770
I0
sg6380
g7130
sS'block_loop.thisRepN'
p7771
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7772
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p7773
Nsg70
Vn
sS'block_loop.thisTrialN'
p7774
I0
sg39
F0.65036928826248186
sg34
g753
(S'\x07\xdf\x07\r\x0b%!\n\xdd@'
tRp7775
sa(dp7776
S'trial_loop.thisTrialN'
p7777
I99
sg6371
g7356
sS'block_loop.thisIndex'
p7778
g6365
sg38
S'right'
p7779
sg59
g63
sS'trial_loop.thisN'
p7780
I99
sg33
g6702
sg64
g65
sS'trial_loop.thisIndex'
p7781
g60
(g99
S'c\x00\x00\x00'
tRp7782
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7783
I0
sg6380
g7363
sS'block_loop.thisRepN'
p7784
I2
sg6383
g6695
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7785
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p7786
Nsg70
Vn
sS'block_loop.thisTrialN'
p7787
I0
sg39
F1.0666646139561635
sg34
g753
(S"\x07\xdf\x07\r\x0b%'\x05\xf3p"
tRp7788
sa(dp7789
S'trial_loop.thisTrialN'
p7790
I100
sg6371
g6392
sS'block_loop.thisIndex'
p7791
g6365
sg38
S'left'
p7792
sg59
g63
sS'trial_loop.thisN'
p7793
I100
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7794
g60
(g99
S'd\x00\x00\x00'
tRp7795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7796
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7797
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7798
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7799
Nsg70
Vn
sS'block_loop.thisTrialN'
p7800
I0
sg39
F0.71666013790763827
sg34
g753
(S'\x07\xdf\x07\r\x0b%-\x07z\x10'
tRp7801
sa(dp7802
S'trial_loop.thisTrialN'
p7803
I101
sg6371
g6426
sS'block_loop.thisIndex'
p7804
g6365
sg38
S'right'
p7805
sg59
g63
sS'trial_loop.thisN'
p7806
I101
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p7807
g60
(g99
S'e\x00\x00\x00'
tRp7808
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7809
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7810
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7811
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7812
Nsg70
Vn
sS'block_loop.thisTrialN'
p7813
I0
sg39
F0.71666669517708215
sg34
g753
(S'\x07\xdf\x07\r\x0b%3\x03\xc0\xf0'
tRp7814
sa(dp7815
S'trial_loop.thisTrialN'
p7816
I102
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p7817
sS'block_loop.thisIndex'
p7818
g6365
sg38
S'right'
p7819
sg59
g63
sS'trial_loop.thisN'
p7820
I102
sg33
g7323
sg64
g65
sS'trial_loop.thisIndex'
p7821
g60
(g99
S'f\x00\x00\x00'
tRp7822
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7823
I0
sg6380
S'36-fig_rolls.png'
p7824
sS'block_loop.thisRepN'
p7825
I2
sg6383
g7323
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7826
I2
sg6385
g7317
sg55
g11
sS'block_loop.thisTrial'
p7827
Nsg70
Vn
sS'block_loop.thisTrialN'
p7828
I0
sg39
F1.366555877337305
sg34
g753
(S'\x07\xdf\x07\r\x0b%8\x0f\x0fx'
tRp7829
sa(dp7830
S'trial_loop.thisTrialN'
p7831
I103
sg6371
g6518
sS'block_loop.thisIndex'
p7832
g6365
sg38
S'left'
p7833
sg59
g63
sS'trial_loop.thisN'
p7834
I103
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p7835
g60
(g99
S'g\x00\x00\x00'
tRp7836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7837
I0
sg6380
g6526
sS'block_loop.thisRepN'
p7838
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7839
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p7840
Nsg70
Vn
sS'block_loop.thisTrialN'
p7841
I0
sg39
F0.79988869749286096
sg34
g753
(S'\x07\xdf\x07\r\x0b&\x03\x06\x16\x98'
tRp7842
sa(dp7843
S'trial_loop.thisTrialN'
p7844
I104
sg6371
g7069
sS'block_loop.thisIndex'
p7845
g6365
sg38
S'right'
p7846
sg59
g63
sS'trial_loop.thisN'
p7847
I104
sg33
g6845
sg64
g65
sS'trial_loop.thisIndex'
p7848
g60
(g99
S'h\x00\x00\x00'
tRp7849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7850
I0
sg6380
g7076
sS'block_loop.thisRepN'
p7851
I2
sg6383
g6845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7852
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p7853
Nsg70
Vn
sS'block_loop.thisTrialN'
p7854
I0
sg39
F0.89997742018749705
sg34
g753
(S'\x07\xdf\x07\r\x0b&\t\x03\x8e('
tRp7855
sa(dp7856
S'trial_loop.thisTrialN'
p7857
I105
sg6371
g7737
sS'block_loop.thisIndex'
p7858
g6365
sg38
S'right'
p7859
sg59
g63
sS'trial_loop.thisN'
p7860
I105
sg33
g6484
sg64
g65
sS'trial_loop.thisIndex'
p7861
g60
(g99
S'i\x00\x00\x00'
tRp7862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7863
I0
sg6380
g7744
sS'block_loop.thisRepN'
p7864
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7865
I2
sg6385
g6484
sg55
g11
sS'block_loop.thisTrial'
p7866
Nsg70
Vn
sS'block_loop.thisTrialN'
p7867
I0
sg39
F0.99998859605511825
sg34
g753
(S'\x07\xdf\x07\r\x0b&\x0f\x02t\xe8'
tRp7868
sa(dp7869
S'trial_loop.thisTrialN'
p7870
I106
sg6371
g7817
sS'block_loop.thisIndex'
p7871
g6365
sg38
S'right'
p7872
sg59
g63
sS'trial_loop.thisN'
p7873
I106
sg33
g7323
sg64
g65
sS'trial_loop.thisIndex'
p7874
g60
(g99
S'j\x00\x00\x00'
tRp7875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7876
I0
sg6380
g7824
sS'block_loop.thisRepN'
p7877
I2
sg6383
g7323
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7878
I2
sg6385
g7317
sg55
g11
sS'block_loop.thisTrial'
p7879
Nsg70
Vn
sS'block_loop.thisTrialN'
p7880
I0
sg39
F0.91670187634827016
sg34
g753
(S'\x07\xdf\x07\r\x0b&\x15\x03\x05p'
tRp7881
sa(dp7882
S'trial_loop.thisTrialN'
p7883
I107
sg6371
g7356
sS'block_loop.thisIndex'
p7884
g6365
sg38
S'right'
p7885
sg59
g63
sS'trial_loop.thisN'
p7886
I107
sg33
g6695
sg64
g65
sS'trial_loop.thisIndex'
p7887
g60
(g99
S'k\x00\x00\x00'
tRp7888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7889
I0
sg6380
g7363
sS'block_loop.thisRepN'
p7890
I2
sg6383
g6695
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7891
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p7892
Nsg70
Vn
sS'block_loop.thisTrialN'
p7893
I0
sg39
F1.1666093618405284
sg34
g753
(S'\x07\xdf\x07\r\x0b&\x1b\x02*\xb0'
tRp7894
sa(dp7895
S'trial_loop.thisTrialN'
p7896
I108
sg6371
g6646
sS'block_loop.thisIndex'
p7897
g6365
sg38
S'left'
p7898
sg59
g63
sS'trial_loop.thisN'
p7899
I108
sg33
g6552
sg64
g65
sS'trial_loop.thisIndex'
p7900
g60
(g99
S'l\x00\x00\x00'
tRp7901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7902
I0
sg6380
g6653
sS'block_loop.thisRepN'
p7903
I2
sg6383
g6552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7904
I2
sg6385
g6559
sg55
g11
sS'block_loop.thisTrial'
p7905
Nsg70
Vn
sS'block_loop.thisTrialN'
p7906
I0
sg39
F0.76662680987737986
sg34
g753
(S'\x07\xdf\x07\r\x0b&!\x05[\x18'
tRp7907
sa(dp7908
S'trial_loop.thisTrialN'
p7909
I109
sg6371
g6738
sS'block_loop.thisIndex'
p7910
g6365
sg38
S'right'
p7911
sg59
g63
sS'trial_loop.thisN'
p7912
I109
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p7913
g60
(g99
S'm\x00\x00\x00'
tRp7914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7915
I0
sg6380
g6746
sS'block_loop.thisRepN'
p7916
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7917
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p7918
Nsg70
Vn
sS'block_loop.thisTrialN'
p7919
I0
sg39
F2.2333957129148985
sg34
g753
(S"\x07\xdf\x07\r\x0b&'\x02\x1b\x10"
tRp7920
sa(dp7921
S'trial_loop.thisTrialN'
p7922
I110
sg6371
g7313
sS'block_loop.thisIndex'
p7923
g6365
sg38
S'left'
p7924
sg59
g63
sS'trial_loop.thisN'
p7925
I110
sg33
g7323
sg64
g65
sS'trial_loop.thisIndex'
p7926
g60
(g99
S'n\x00\x00\x00'
tRp7927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7928
I0
sg6380
g7321
sS'block_loop.thisRepN'
p7929
I2
sg6383
g7323
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7930
I2
sg6385
g7317
sg55
g11
sS'block_loop.thisTrial'
p7931
Nsg70
Vn
sS'block_loop.thisTrialN'
p7932
I0
sg39
F0.68322662091395614
sg34
g753
(S'\x07\xdf\x07\r\x0b&.\x069\xc0'
tRp7933
sa(dp7934
S'trial_loop.thisTrialN'
p7935
I111
sg6371
g7423
sS'block_loop.thisIndex'
p7936
g6365
sg38
S'left'
p7937
sg59
g63
sS'trial_loop.thisN'
p7938
I111
sg33
g7024
sg64
g65
sS'trial_loop.thisIndex'
p7939
g60
(g99
S'o\x00\x00\x00'
tRp7940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7941
I0
sg6380
g7430
sS'block_loop.thisRepN'
p7942
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7943
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p7944
Nsg70
Vn
sS'block_loop.thisTrialN'
p7945
I0
sg39
F0.68324173114160658
sg34
g753
(S'\x07\xdf\x07\r\x0b&4\x02\x07\x88'
tRp7946
sa(dp7947
S'trial_loop.thisTrialN'
p7948
I112
sg6371
g7817
sS'block_loop.thisIndex'
p7949
g6365
sg38
S'right'
p7950
sg59
g63
sS'trial_loop.thisN'
p7951
I112
sg33
g7317
sg64
g65
sS'trial_loop.thisIndex'
p7952
g60
(g99
S'p\x00\x00\x00'
tRp7953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7954
I0
sg6380
g7824
sS'block_loop.thisRepN'
p7955
I2
sg6383
g7323
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7956
I2
sg6385
g7317
sg55
g11
sS'block_loop.thisTrial'
p7957
Nsg70
Vn
sS'block_loop.thisTrialN'
p7958
I0
sg39
F1.1666167744051563
sg34
g753
(S'\x07\xdf\x07\r\x0b&9\x0c\xdc\xf8'
tRp7959
sa(dp7960
S'trial_loop.thisTrialN'
p7961
I113
sg6371
g6473
sS'block_loop.thisIndex'
p7962
g6365
sg38
S'left'
p7963
sg59
g63
sS'trial_loop.thisN'
p7964
I113
sg33
g6477
sg64
g65
sS'trial_loop.thisIndex'
p7965
g60
(g99
S'q\x00\x00\x00'
tRp7966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7967
I0
sg6380
g6481
sS'block_loop.thisRepN'
p7968
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7969
I2
sg6385
g6484
sg55
g11
sS'block_loop.thisTrial'
p7970
Nsg70
Vn
sS'block_loop.thisTrialN'
p7971
I0
sg39
F0.74991945963574835
sg34
g753
(S"\x07\xdf\x07\r\x0b'\x04\x00\x8c\xa0"
tRp7972
sa(dp7973
S'trial_loop.thisTrialN'
p7974
I114
sg6371
g6800
sS'block_loop.thisIndex'
p7975
g6365
sg38
S'left'
p7976
sg59
g63
sS'trial_loop.thisN'
p7977
I114
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p7978
g60
(g99
S'r\x00\x00\x00'
tRp7979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7980
I0
sg6380
g6807
sS'block_loop.thisRepN'
p7981
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7982
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p7983
Nsg70
Vn
sS'block_loop.thisTrialN'
p7984
I0
sg39
F2.3667431871408553
sg34
g753
(S"\x07\xdf\x07\r\x0b'\t\x0c\x92\xc0"
tRp7985
sa(dp7986
S'trial_loop.thisTrialN'
p7987
I115
sg6371
g6518
sS'block_loop.thisIndex'
p7988
g6365
sg38
S'left'
p7989
sg59
g63
sS'trial_loop.thisN'
p7990
I115
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p7991
g60
(g99
S's\x00\x00\x00'
tRp7992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7993
I0
sg6380
g6526
sS'block_loop.thisRepN'
p7994
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7995
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p7996
Nsg70
Vn
sS'block_loop.thisTrialN'
p7997
I0
sg39
F0.73330647704187868
sg34
g753
(S"\x07\xdf\x07\r\x0b'\x11\x03S\x90"
tRp7998
sa(dp7999
S'trial_loop.thisTrialN'
p8000
I116
sg6371
g7817
sS'block_loop.thisIndex'
p8001
g6365
sg38
S'right'
p8002
sg59
g63
sS'trial_loop.thisN'
p8003
I116
sg33
g7317
sg64
g65
sS'trial_loop.thisIndex'
p8004
g60
(g99
S't\x00\x00\x00'
tRp8005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8006
I0
sg6380
g7824
sS'block_loop.thisRepN'
p8007
I2
sg6383
g7323
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8008
I2
sg6385
g7317
sg55
g11
sS'block_loop.thisTrial'
p8009
Nsg70
Vn
sS'block_loop.thisTrialN'
p8010
I0
sg39
F0.88328289938453963
sg34
g753
(S"\x07\xdf\x07\r\x0b'\x16\x0f\x1b0"
tRp8011
sa(dp8012
S'trial_loop.thisTrialN'
p8013
I117
sg6371
g6721
sS'block_loop.thisIndex'
p8014
g6365
sg38
S'right'
p8015
sg59
g63
sS'trial_loop.thisN'
p8016
I117
sg33
g6725
sg64
g65
sS'trial_loop.thisIndex'
p8017
g60
(g99
S'u\x00\x00\x00'
tRp8018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8019
I0
sg6380
g6729
sS'block_loop.thisRepN'
p8020
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8021
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p8022
Nsg70
Vn
sS'block_loop.thisTrialN'
p8023
I0
sg39
F1.0165890343087085
sg34
g753
(S"\x07\xdf\x07\r\x0b'\x1c\r\xc7X"
tRp8024
sa(dp8025
S'trial_loop.thisTrialN'
p8026
I118
sg6371
g7069
sS'block_loop.thisIndex'
p8027
g6365
sg38
S'right'
p8028
sg59
g63
sS'trial_loop.thisN'
p8029
I118
sg33
g6852
sg64
g65
sS'trial_loop.thisIndex'
p8030
g60
(g99
S'v\x00\x00\x00'
tRp8031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8032
I0
sg6380
g7076
sS'block_loop.thisRepN'
p8033
I2
sg6383
g6845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8034
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p8035
Nsg70
Vn
sS'block_loop.thisTrialN'
p8036
I0
sg39
F0.79996909530837002
sg34
g753
(S'\x07\xdf\x07\r\x0b\'"\x0e\x92x'
tRp8037
sa(dp8038
S'trial_loop.thisTrialN'
p8039
I119
sg6371
g7298
sS'block_loop.thisIndex'
p8040
g6365
sg38
S'right'
p8041
sg59
g63
sS'trial_loop.thisN'
p8042
I119
sg33
g6569
sg64
g65
sS'trial_loop.thisIndex'
p8043
g60
(g99
S'w\x00\x00\x00'
tRp8044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8045
I0
sg6380
g7305
sS'block_loop.thisRepN'
p8046
I2
sg6383
g6569
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8047
I2
sg6385
g6576
sg55
g11
sS'block_loop.thisTrial'
p8048
Nsg70
Vn
sS'block_loop.thisTrialN'
p8049
I0
sg39
F0.88323699850388948
sg34
g753
(S"\x07\xdf\x07\r\x0b'(\x0c\r\xf0"
tRp8050
sa(dp8051
S'trial_loop.thisTrialN'
p8052
I120
sg6371
g6490
sS'block_loop.thisIndex'
p8053
g6365
sg38
S'left'
p8054
sg59
g63
sS'trial_loop.thisN'
p8055
I120
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8056
g60
(g99
S'x\x00\x00\x00'
tRp8057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8058
I0
sg6380
g6497
sS'block_loop.thisRepN'
p8059
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8060
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8061
Nsg70
Vn
sS'block_loop.thisTrialN'
p8062
I0
sg39
F0.93365013493712468
sg34
g753
(S"\x07\xdf\x07\r\x0b'.\n\xb60"
tRp8063
sa(dp8064
S'trial_loop.thisTrialN'
p8065
I121
sg6371
g6841
sS'block_loop.thisIndex'
p8066
g6365
sg38
S'left'
p8067
sg59
g63
sS'trial_loop.thisN'
p8068
I121
sg33
g6852
sg64
g65
sS'trial_loop.thisIndex'
p8069
g60
(g99
S'y\x00\x00\x00'
tRp8070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8071
I0
sg6380
g6849
sS'block_loop.thisRepN'
p8072
I2
sg6383
g6845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8073
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p8074
Nsg70
Vn
sS'block_loop.thisTrialN'
p8075
I0
sg39
F0.73326285695111437
sg34
g753
(S"\x07\xdf\x07\r\x0b'4\nT\x88"
tRp8076
sa(dp8077
S'trial_loop.thisTrialN'
p8078
I122
sg6371
g6800
sS'block_loop.thisIndex'
p8079
g6365
sg38
S'left'
p8080
sg59
g63
sS'trial_loop.thisN'
p8081
I122
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p8082
g60
(g99
S'z\x00\x00\x00'
tRp8083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8084
I0
sg6380
g6807
sS'block_loop.thisRepN'
p8085
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8086
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p8087
Nsg70
Vn
sS'block_loop.thisTrialN'
p8088
I0
sg39
F1.3833068476706103
sg34
g753
(S"\x07\xdf\x07\r\x0b':\x06\xd9\xe8"
tRp8089
sa(dp8090
S'trial_loop.thisTrialN'
p8091
I123
sg6371
g6409
sS'block_loop.thisIndex'
p8092
g6365
sg38
S'right'
p8093
sg59
g63
sS'trial_loop.thisN'
p8094
I123
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p8095
g60
(g99
S'{\x00\x00\x00'
tRp8096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8097
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8098
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8099
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p8100
Nsg70
Vn
sS'block_loop.thisTrialN'
p8101
I0
sg39
F0.76666757898237847
sg34
g753
(S'\x07\xdf\x07\r\x0b(\x04\r#H'
tRp8102
sa(dp8103
S'trial_loop.thisTrialN'
p8104
I124
sg6371
g7737
sS'block_loop.thisIndex'
p8105
g6365
sg38
S'right'
p8106
sg59
g63
sS'trial_loop.thisN'
p8107
I124
sg33
g6477
sg64
g65
sS'trial_loop.thisIndex'
p8108
g60
(g99
S'|\x00\x00\x00'
tRp8109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8110
I0
sg6380
g7744
sS'block_loop.thisRepN'
p8111
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8112
I2
sg6385
g6484
sg55
g11
sS'block_loop.thisTrial'
p8113
Nsg70
Vn
sS'block_loop.thisTrialN'
p8114
I0
sg39
F0.91660522791062249
sg34
g753
(S'\x07\xdf\x07\r\x0b(\n\n!\xc0'
tRp8115
sa(dp8116
S'trial_loop.thisTrialN'
p8117
I125
sg6371
g6565
sS'block_loop.thisIndex'
p8118
g6365
sg38
S'left'
p8119
sg59
g63
sS'trial_loop.thisN'
p8120
I125
sg33
g6569
sg64
g65
sS'trial_loop.thisIndex'
p8121
g60
(g99
S'}\x00\x00\x00'
tRp8122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8123
I0
sg6380
g6573
sS'block_loop.thisRepN'
p8124
I2
sg6383
g6569
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8125
I2
sg6385
g6576
sg55
g11
sS'block_loop.thisTrial'
p8126
Nsg70
Vn
sS'block_loop.thisTrialN'
p8127
I0
sg39
F0.81662683838749217
sg34
g753
(S'\x07\xdf\x07\r\x0b(\x10\tC\x18'
tRp8128
sa(dp8129
S'trial_loop.thisTrialN'
p8130
I126
sg6371
g7313
sS'block_loop.thisIndex'
p8131
g6365
sg38
S'left'
p8132
sg59
g63
sS'trial_loop.thisN'
p8133
I126
sg33
g7323
sg64
g65
sS'trial_loop.thisIndex'
p8134
g60
(g99
S'~\x00\x00\x00'
tRp8135
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8136
I0
sg6380
g7321
sS'block_loop.thisRepN'
p8137
I2
sg6383
g7323
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8138
I2
sg6385
g7317
sg55
g11
sS'block_loop.thisTrial'
p8139
Nsg70
Vn
sS'block_loop.thisTrialN'
p8140
I0
sg39
F0.86666564031111193
sg34
g753
(S'\x07\xdf\x07\r\x0b(\x16\x06\xf9('
tRp8141
sa(dp8142
S'trial_loop.thisTrialN'
p8143
I127
sg6371
g7423
sS'block_loop.thisIndex'
p8144
g6365
sg38
S'left'
p8145
sg59
g63
sS'trial_loop.thisN'
p8146
I127
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p8147
g60
(g99
S'\x7f\x00\x00\x00'
tRp8148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8149
I0
sg6380
g7430
sS'block_loop.thisRepN'
p8150
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8151
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p8152
Nsg70
Vn
sS'block_loop.thisTrialN'
p8153
I0
sg39
F0.9997616575410575
sg34
g753
(S'\x07\xdf\x07\r\x0b(\x1c\x05f\xd0'
tRp8154
sa(dp8155
S'trial_loop.thisTrialN'
p8156
I128
sg6371
g6755
sS'block_loop.thisIndex'
p8157
g6365
sg38
S'right'
p8158
sg59
g63
sS'trial_loop.thisN'
p8159
I128
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p8160
g60
(g99
S'\x80\x00\x00\x00'
tRp8161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8162
I0
sg6380
g6763
sS'block_loop.thisRepN'
p8163
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8164
I2
sg6385
g6766
sg55
g11
sS'block_loop.thisTrial'
p8165
Nsg70
Vn
sS'block_loop.thisTrialN'
p8166
I0
sg39
F0.74999016409765318
sg34
g753
(S'\x07\xdf\x07\r\x0b("\x05\xf7X'
tRp8167
sa(dp8168
S'trial_loop.thisTrialN'
p8169
I129
sg6371
g7013
sS'block_loop.thisIndex'
p8170
g6365
sg38
S'right'
p8171
sg59
g63
sS'trial_loop.thisN'
p8172
I129
sg33
g7024
sg64
g65
sS'trial_loop.thisIndex'
p8173
g60
(g99
S'\x81\x00\x00\x00'
tRp8174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8175
I0
sg6380
g7021
sS'block_loop.thisRepN'
p8176
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8177
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p8178
Nsg70
Vn
sS'block_loop.thisTrialN'
p8179
I0
sg39
F1.3497843799013935
sg34
g753
(S'\x07\xdf\x07\r\x0b((\x02\xbb8'
tRp8180
sa(dp8181
S'trial_loop.thisTrialN'
p8182
I130
sg6371
g6409
sS'block_loop.thisIndex'
p8183
g6365
sg38
S'right'
p8184
sg59
g63
sS'trial_loop.thisN'
p8185
I130
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p8186
g60
(g99
S'\x82\x00\x00\x00'
tRp8187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8188
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8189
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8190
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p8191
Nsg70
Vn
sS'block_loop.thisTrialN'
p8192
I0
sg39
F0.69979740890903486
sg34
g753
(S'\x07\xdf\x07\r\x0b(.\x08\x87\x98'
tRp8193
sa(dp8194
S'trial_loop.thisTrialN'
p8195
I131
sg6371
g6565
sS'block_loop.thisIndex'
p8196
g6365
sg38
S'left'
p8197
sg59
g63
sS'trial_loop.thisN'
p8198
I131
sg33
g6569
sg64
g65
sS'trial_loop.thisIndex'
p8199
g60
(g99
S'\x83\x00\x00\x00'
tRp8200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8201
I0
sg6380
g6573
sS'block_loop.thisRepN'
p8202
I2
sg6383
g6569
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8203
I2
sg6385
g6576
sg55
g11
sS'block_loop.thisTrial'
p8204
Nsg70
Vn
sS'block_loop.thisTrialN'
p8205
I0
sg39
F0.8332520802214276
sg34
g753
(S'\x07\xdf\x07\r\x0b(4\x04YH'
tRp8206
sa(dp8207
S'trial_loop.thisTrialN'
p8208
I132
sg6371
S'31-hobnobs.png'
p8209
sS'block_loop.thisIndex'
p8210
g6365
sg38
S'right'
p8211
sg59
g63
sS'trial_loop.thisN'
p8212
I132
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8213
g60
(g99
S'\x84\x00\x00\x00'
tRp8214
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8215
I0
sg6380
S'25-kitkat.png'
p8216
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8218
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vn
sS'block_loop.thisTrialN'
p8220
I0
sg39
F0.81665306746162969
sg34
g753
(S'\x07\xdf\x07\r\x0b(:\x02I\xf0'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g6691
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'left'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6695
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g6699
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6695
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8231
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vn
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.93331143775776582
sg34
g753
(S'\x07\xdf\x07\r\x0b)\x04\x00\x00\x00'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g6473
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'left'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6477
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g6481
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8244
I2
sg6385
g6484
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vn
sS'block_loop.thisTrialN'
p8246
I0
sg39
F1.0166617344602855
sg34
g753
(S'\x07\xdf\x07\r\x0b)\t\x0e\xe0\x98'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g6886
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'left'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6897
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g6894
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6385
g6897
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vn
sS'block_loop.thisTrialN'
p8259
I0
sg39
F0.81655755941937969
sg34
g753
(S'\x07\xdf\x07\r\x0b)\x10\x00m`'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g7069
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'right'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6845
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g7076
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vn
sS'block_loop.thisTrialN'
p8272
I0
sg39
F0.76655154383752233
sg34
g753
(S'\x07\xdf\x07\r\x0b)\x15\re\xb0'
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g7737
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'right'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6477
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g7744
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6385
g6484
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vn
sS'block_loop.thisTrialN'
p8285
I0
sg39
F0.83322071937254805
sg34
g753
(S'\x07\xdf\x07\r\x0b)\x1b\nd('
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g6646
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'left'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6552
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g6653
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6385
g6559
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vn
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.88332110260216723
sg34
g753
(S'\x07\xdf\x07\r\x0b)!\x08X\xb8'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g8209
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'right'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g8216
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vn
sS'block_loop.thisTrialN'
p8311
I0
sg39
F0.64989174804759386
sg34
g753
(S"\x07\xdf\x07\r\x0b)'\x07\x00\xf8"
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g7737
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'right'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6484
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g7744
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6385
g6484
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vn
sS'block_loop.thisTrialN'
p8324
I0
sg39
F0.78310151963341923
sg34
g753
(S'\x07\xdf\x07\r\x0b)-\x02\x1b\x10'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g7817
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'right'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g7323
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g7824
sS'block_loop.thisRepN'
p8334
I2
sg6383
g7323
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6385
g7317
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vn
sS'block_loop.thisTrialN'
p8337
I0
sg39
F0.83319563069198921
sg34
g753
(S'\x07\xdf\x07\r\x0b)2\x0e\x96`'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g6392
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'left'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vn
sS'block_loop.thisTrialN'
p8350
I0
sg39
F0.7832645960525042
sg34
g753
(S'\x07\xdf\x07\r\x0b)8\x0c\x8a\xf0'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g6372
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'left'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vn
sS'block_loop.thisTrialN'
p8363
I0
sg39
F0.7832828423652245
sg34
g753
(S'\x07\xdf\x07\r\x0b*\x02\t\xc7\xe8'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g6959
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'left'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6907
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g6966
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6385
g6914
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vn
sS'block_loop.thisTrialN'
p8376
I0
sg39
F0.71636392042546504
sg34
g753
(S'\x07\xdf\x07\r\x0b*\x08\x07\x04\xe0'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g6629
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'left'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6633
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g6637
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vn
sS'block_loop.thisTrialN'
p8389
I0
sg39
F0.78334071738845523
sg34
g753
(S'\x07\xdf\x07\r\x0b*\x0e\x03\r@'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g6858
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'left'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g6865
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6385
g6766
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vn
sS'block_loop.thisTrialN'
p8402
I0
sg39
F0.59999692093424528
sg34
g753
(S'\x07\xdf\x07\r\x0b*\x14\x00J8'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g6548
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'right'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6552
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g6556
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6385
g6559
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vn
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.73334610575238912
sg34
g753
(S'\x07\xdf\x07\r\x0b*\x19\t\xee\xf8'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g6841
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'left'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6845
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g6849
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vn
sS'block_loop.thisTrialN'
p8428
I0
sg39
F0.88325838090167963
sg34
g753
(S'\x07\xdf\x07\r\x0b*\x1f\x06tX'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g6661
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'right'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g6668
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vn
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.66661392341939063
sg34
g753
(S'\x07\xdf\x07\r\x0b*%\x05\x1c\x98'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6785
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'left'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6725
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6792
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vn
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.66638841039821273
sg34
g753
(S'\x07\xdf\x07\r\x0b*+\x00\xaf\xc8'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g7123
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'left'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g7130
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vn
sS'block_loop.thisTrialN'
p8467
I0
sg39
F0.61665694480325328
sg34
g753
(S'\x07\xdf\x07\r\x0b*0\x0bF\xb8'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g6372
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'left'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vn
sS'block_loop.thisTrialN'
p8480
I0
sg39
F0.68330274224990717
sg34
g753
(S'\x07\xdf\x07\r\x0b*6\x05\xe3\xd0'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g6629
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'left'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6633
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g6637
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vn
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.69993368605719297
sg34
g753
(S'\x07\xdf\x07\r\x0b+\x00\x01\xb1\x98'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g6800
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'left'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g6807
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vn
sS'block_loop.thisTrialN'
p8506
I0
sg39
F0.79991863284976716
sg34
g753
(S'\x07\xdf\x07\r\x0b+\x05\x0c\xc5\x88'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g6646
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'left'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6552
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g6653
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6385
g6559
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vn
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.78326773213757406
sg34
g753
(S'\x07\xdf\x07\r\x0b+\x0b\n=\x18'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g6903
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'right'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6914
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g6911
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6385
g6914
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vn
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.81677680026950839
sg34
g753
(S'\x07\xdf\x07\r\x0b+\x11\x07z\x10'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g6721
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'right'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6732
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g6729
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6725
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vn
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.9166642433283414
sg34
g753
(S'\x07\xdf\x07\r\x0b+\x17\x050 '
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g6490
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'left'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g6497
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vn
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.66657942648453172
sg34
g753
(S'\x07\xdf\x07\r\x0b+\x1d\x04Qx'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g8209
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'right'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g8216
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vn
sS'block_loop.thisTrialN'
p8571
I0
sg39
F0.94995464080693637
sg34
g753
(S'\x07\xdf\x07\r\x0b+"\x0f&\xe8'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g6614
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'right'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g6621
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vn
sS'block_loop.thisTrialN'
p8584
I0
sg39
F0.68302904756001226
sg34
g753
(S'\x07\xdf\x07\r\x0b+(\x0e\xc5@'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g6959
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'left'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6914
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g6966
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6385
g6914
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vn
sS'block_loop.thisTrialN'
p8597
I0
sg39
F1.3662958673812682
sg34
g753
(S'\x07\xdf\x07\r\x0b+.\n\x93\x08'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g6372
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'left'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vn
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.75002694182148844
sg34
g753
(S'\x07\xdf\x07\r\x0b+5\x01[\xa8'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g7423
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'left'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g7430
sS'block_loop.thisRepN'
p8620
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vn
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.79984165621772263
sg34
g753
(S'\x07\xdf\x07\r\x0b+:\ra\xc8'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g6565
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'left'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6569
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g6573
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6569
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6385
g6576
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vn
sS'block_loop.thisTrialN'
p8636
I0
sg39
F0.73324945731474145
sg34
g753
(S'\x07\xdf\x07\r\x0b,\x04\n\xd9X'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g7013
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'right'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g7021
sS'block_loop.thisRepN'
p8646
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vn
sS'block_loop.thisTrialN'
p8649
I0
sg39
F0.83291081715560722
sg34
g753
(S'\x07\xdf\x07\r\x0b,\n\x07 8'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6886
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'left'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6890
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g6894
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6385
g6897
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vn
sS'block_loop.thisTrialN'
p8662
I0
sg39
F0.80006032687106199
sg34
g753
(S'\x07\xdf\x07\r\x0b,\x10\x05\x14\xc8'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g6959
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'left'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6907
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g6966
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6385
g6914
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vn
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.83294303330058028
sg34
g753
(S'\x07\xdf\x07\r\x0b,\x16\x02\x8cX'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g7298
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'right'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6569
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g7305
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6569
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6385
g6576
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vn
sS'block_loop.thisTrialN'
p8688
I0
sg39
F0.94999883109539951
sg34
g753
(S'\x07\xdf\x07\r\x0b,\x1c\x00\x80\xe8'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g6661
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'right'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g6668
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vn
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.81657979711326334
sg34
g753
(S'\x07\xdf\x07\r\x0b,"\x00Y\xd8'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g6858
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'left'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g6865
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6385
g6766
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vn
sS'block_loop.thisTrialN'
p8714
I0
sg39
F0.8166356764450029
sg34
g753
(S"\x07\xdf\x07\r\x0b,'\rR("
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6691
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'left'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6695
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6699
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6695
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vn
sS'block_loop.thisTrialN'
p8727
I0
sg39
F1.0832388231356163
sg34
g753
(S'\x07\xdf\x07\r\x0b,-\x0b\x088'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g7244
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'right'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6890
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g7251
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6385
g6897
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vn
sS'block_loop.thisTrialN'
p8740
I0
sg39
F0.64998668589396402
sg34
g753
(S'\x07\xdf\x07\r\x0b,3\x0c\xcdX'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g6676
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'left'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g6683
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vn
sS'block_loop.thisTrialN'
p8753
I0
sg39
F0.66639724845572346
sg34
g753
(S'\x07\xdf\x07\r\x0b,9\x07\xe3\x88'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g7203
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'right'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6633
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g7210
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vn
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.65051326307366253
sg34
g753
(S'\x07\xdf\x07\r\x0b-\x03\x03v\xb8'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g6597
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'left'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g6605
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vn
sS'block_loop.thisTrialN'
p8779
I0
sg39
F0.73329364760320459
sg34
g753
(S'\x07\xdf\x07\r\x0b-\x08\r\xcf('
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6614
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'right'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6621
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vn
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.84996883871917817
sg34
g753
(S'\x07\xdf\x07\r\x0b-\x0e\nT\x88'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g6755
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'right'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g6763
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6385
g6766
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vn
sS'block_loop.thisTrialN'
p8805
I0
sg39
F0.83334616277170426
sg34
g753
(S'\x07\xdf\x07\r\x0b-\x14\x08\x83\xb0'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6841
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'left'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6845
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6849
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6845
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6385
g6852
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vn
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.83326234377273067
sg34
g753
(S'\x07\xdf\x07\r\x0b-\x1a\x06x@'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g6738
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'right'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6742
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g6746
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6742
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6385
g6749
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vn
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.83363097630899574
sg34
g753
(S'\x07\xdf\x07\r\x0b- \x04l\xd0'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6548
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'right'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6559
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g6556
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6552
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6385
g6559
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vn
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.65032766386229923
sg34
g753
(S'\x07\xdf\x07\r\x0b-&\x02]x'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g7203
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'right'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6633
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g7210
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6633
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6385
g6640
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vn
sS'block_loop.thisTrialN'
p8857
I0
sg39
F0.71667239714952302
sg34
g753
(S'\x07\xdf\x07\r\x0b-+\x0c\xb9\xd0'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g7298
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'right'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6569
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g7305
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6569
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6385
g6576
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vn
sS'block_loop.thisTrialN'
p8870
I0
sg39
F0.74998132603923295
sg34
g753
(S'\x07\xdf\x07\r\x0b-1\t\x00\xb0'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g7313
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'left'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g7323
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g7321
sS'block_loop.thisRepN'
p8880
I2
sg6383
g7323
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6385
g7317
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vn
sS'block_loop.thisTrialN'
p8883
I0
sg39
F1.0832040411023627
sg34
g753
(S'\x07\xdf\x07\r\x0b-7\x05\xc4\x90'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g7244
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'right'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6890
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g7251
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6385
g6897
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vn
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.64994591678896541
sg34
g753
(S'\x07\xdf\x07\r\x0b.\x01\x07\x85\xc8'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6582
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'right'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6589
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vn
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.81665164196874684
sg34
g753
(S'\x07\xdf\x07\r\x0b.\x07\x02\x9b\xf8'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g6614
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'right'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g6621
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vn
sS'block_loop.thisTrialN'
p8922
I0
sg39
F0.9999945831259538
sg34
g753
(S'\x07\xdf\x07\r\x0b.\r\x00R\x08'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g6755
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'right'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g6763
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6759
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6385
g6766
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vn
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.66657429470888019
sg34
g753
(S'\x07\xdf\x07\r\x0b.\x13\x00\xe2\x90'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g7123
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'left'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6419
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g7130
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6419
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6385
g6413
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vn
sS'block_loop.thisTrialN'
p8948
I0
sg39
F0.74992573180588806
sg34
g753
(S'\x07\xdf\x07\r\x0b.\x18\x0by\x80'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g7013
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'right'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g7021
sS'block_loop.thisRepN'
p8958
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vn
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.8831158315842913
sg34
g753
(S'\x07\xdf\x07\r\x0b.\x1e\x08=`'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g7244
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'right'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6890
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g7251
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6385
g6897
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vn
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.60000832488003653
sg34
g753
(S'\x07\xdf\x07\r\x0b.$\x06\xe5\xa0'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g6903
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'right'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6907
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g6911
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6385
g6914
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vn
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.59958609380100825
sg34
g753
(S'\x07\xdf\x07\r\x0b.*\x01H '
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6582
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'right'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6528
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6589
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6528
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6385
g6522
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vn
sS'block_loop.thisTrialN'
p9000
I0
sg39
F0.80037507576525968
sg34
g753
(S'\x07\xdf\x07\r\x0b./\n\xec\xe0'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g7313
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'left'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g7323
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g7321
sS'block_loop.thisRepN'
p9010
I2
sg6383
g7323
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6385
g7317
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vn
sS'block_loop.thisTrialN'
p9013
I0
sg39
F0.91658013923097315
sg34
g753
(S'\x07\xdf\x07\r\x0b.5\x08dp'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g8209
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'right'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g8216
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vn
sS'block_loop.thisTrialN'
p9026
I0
sg39
F0.68322063384312059
sg34
g753
(S'\x07\xdf\x07\r\x0b.;\x07\xc4H'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g7013
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'right'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g7021
sS'block_loop.thisRepN'
p9036
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vn
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.88321447571252065
sg34
g753
(S'\x07\xdf\x07\r\x0b/\x05\x03Wx'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g6691
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'left'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6695
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g6699
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6695
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vn
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.8166211364141418
sg34
g753
(S'\x07\xdf\x07\r\x0b/\x0b\x01\xff\xb8'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g8209
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'right'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g8216
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vn
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.71663020255164156
sg34
g753
(S'\x07\xdf\x07\r\x0b/\x10\x0e\xf8\x08'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g6903
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'right'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6907
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g6911
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6907
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6385
g6914
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vn
sS'block_loop.thisTrialN'
p9078
I0
sg39
F0.58315186805248231
sg34
g753
(S'\x07\xdf\x07\r\x0b/\x16\x0bB\xd0'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6597
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'left'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6605
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vn
sS'block_loop.thisTrialN'
p9091
I0
sg39
F0.84982001723165013
sg34
g753
(S'\x07\xdf\x07\r\x0b/\x1c\x05f\xd0'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vn
sa(dp9099
g64
g65
sg43
I53
sg56
g57
sg58
Vn
sg42
I547
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp9100
g64
g65
sg43
I53
sg55
g11
sg56
g57
sg45
F0.97999999999999998
sg42
I547
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I00
sg48
I25
sg47
g427
sg51
F30.469999999999999
sg46
F0
sg66
g67
sg68
g69
sg50
I0
sg70
Vn
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I82305360
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'333?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00=\n\xd7>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9a\x99\x99>\x00\x00\x00\x00\x00\x00\x00\x00\\\x8f\xc2>\x8f\xc2u>\xb8\x1e\x85>\x00\x00\x00\x00\\\x8f\xc2>\xb8\x1e\x05?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00)\\\x8f>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\x00\x00\x00\x00\x00\x00\x00\x00)\\\x0f?\x00\x00\x00\x00\x9a\x99\x99>\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x85\xeb>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S"\x19\x04\x18A\x96C\x13@b\x10\x00@!\xb0\n@\x0e-R@\xfe\xd4\xb4@\xee|'@b\x10\x10@\xe9&A@\xee|\x07@\xa8\xc6;@B`\xf5?\xb6\xf3\xfd?B`5@T\xe3\x9d@\x96Cc@\x0e-2@/\xddL@w\xbe\xd3@u\x93\xc8@d;\x93@B`\x15@T\xe3\r@w\xbesA\xe9&\x11@\xa8\xc6\x0b@!\xb0\x1a@u\x93(@\xcb\xa1\xa1@\x96C\x13@u\x93\xe8?D\x8b\xb0@\xdb\xf9\x1e@\x87\x161@\xbaIt@\x96C#@\xcb\xa1\xd1@\x87\x16\x01@\xbaI\x04@+\x87\xe6?"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xb8A\x00\x00\xa0@\x00\x00PA\x00\x00\x10A\x00\x00\xc0@\x00\x00\x98A\x00\x00\x88A\x00\x00\xc8A\x00\x00\x0cB\x00\x00\x10B\x00\x00pA\x00\x000A\x00\x00\x18B\x00\x00\xf0A\x00\x00\x00@\x00\x00\x90A\x00\x00\xe0@\x00\x00`A\x00\x00 A\x00\x00\x00B\x00\x00\xe0A\x00\x00\x1cB\x00\x00\x80A\x00\x00\x00\x00\x00\x00\xf8A\x00\x00\xd0A\x00\x00\x14B\x00\x00\xb0A\x00\x00\x80@\x00\x00@A\x00\x00\x08B\x00\x00\xc0A\x00\x00\x00A\x00\x00\xd8A\x00\x00\x80?\x00\x00\x04B\x00\x00@@\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xe8A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'\xcd\xcc\xcc?\x9a\x99\x99?\x00\x00\x80?\x00\x00\xc0?\xcd\xcc\xcc?33\xb3?\x9a\x99\xd9?\xcd\xcc\xcc?\x00\x00\x00@\x9a\x99\x99?\xcd\xcc\x8c?\xcd\xcc\x8c?\x9a\x99\x99?\x9a\x99\xd9?ff\xa6?ff\xe6?33\xf3?33\xb3?ff\xe6?\x9a\x99\xd9?\x9a\x99\xd9?\x9a\x99\xd9?33\xb3?\xcd\xcc\x8c?\x9a\x99\xd9?ff\xa6?\xcd\xcc\x8c?33\xf3?\x9a\x99\x99?\x00\x00\xc0?\x9a\x99\x99?\x9a\x99\xd9?\xcd\xcc\xcc?\x00\x00\xc0?ff\xa6?33\xf3?\xcd\xcc\x8c?ff\xa6?\x9a\x99\x99?\xcd\xcc\x8c?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'\x17\x00\x00\x00"\x00\x00\x00\x0e\x00\x00\x00$\x00\x00\x00\x1c\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x10\x00\x00\x00 \x00\x00\x00\x03\x00\x00\x00\x12\x00\x00\x00\x0b\x00\x00\x00\x1d\x00\x00\x00\x02\x00\x00\x00\x11\x00\x00\x00\n\x00\x00\x00\x16\x00\x00\x00\x06\x00\x00\x00\x0f\x00\x00\x00\x05\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x07\x00\x00\x00\x19\x00\x00\x00!\x00\x00\x00\x14\x00\x00\x00\'\x00\x00\x00\r\x00\x00\x00\x18\x00\x00\x00\x13\x00\x00\x00#\x00\x00\x00\x1e\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\x1a\x00\x00\x00\x0c\x00\x00\x00\x15\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g264
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g138
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g194
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g166
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g145
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g236
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g222
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g278
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g348
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g355
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g208
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g180
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g369
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g313
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g117
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g229
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g152
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g201
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g173
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g327
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g299
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g376
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g215
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g103
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g320
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g285
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g362
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g257
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g131
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g187
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g341
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g271
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g159
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g292
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g110
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g334
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g124
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g243
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g250
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g306
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I82305360
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xc0@ff\x96@\x00\x00\x90@fff@\x00\x00\xc0@ff\xa6?\x9a\x99\x19@33\xa3@\x00\x00\xc0@33\xb3@ffF@\x00\x00\xc0@ff\xa6@ff\xa6@33S@\x00\x00\xc0@\x00\x00\xa0@\x9a\x99\xa9@\x00\x00\xc0@\x9a\x99y@\x9a\x99\xa9@ff\x96@\xcd\xccl@\x9a\x99\xa9@333@\x00\x00\xc0@\x00\x00\xc0@33\xa3@\xcd\xcc\xac@\x9a\x99\xa9@\x00\x00\x80@ff\x96@\x00\x00\x90@333@\x9a\x999@33s@\x9a\x99\x89@ff&@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'\xf7\xf0\xee?\xb1\xb0\xaa?\xeb\x05\xa0?\x14\xcf\xac?5\xf0\xae?X\xef\x0e@\xf8\xcc\x0c@sU\x01A\xbf\xff\xf7@\x92\x8c\xa8?\xf4\xf4n?-\xe9\xce?\xea\xf0^@\xc3\xd3L?\x00\x8a\x88?\x89\xce\xac?\xd03\x03@\xf0\xaej?\xfe\xd2\xec?5\xc1\xdb?\xf1\xab\x8a?\x10g\x86?\xbe\x8aY?b#\xc2?\xdd\x8bH@\xd9F\x84?KU5@x"\x82?J9s?\x10\xac\x8a?`J\xa4?\xc6\xee\x8e?3\xce\xec?\xcb\x89\xc8?CB\x04@\x82\x12\xb1?\xdb\xce\x8c?ME\xe4?K\x84\xa8?\x93\xaa\n@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'\x9a\x999@\x9a\x99y@\x00\x00@@\xcd\xccL@\x00\x00@@333@\x9a\x999@\xcd\xcc,@33\x83@33s@\x00\x00\x80@\x9a\x99y@\xcd\xcc,@33S@fff@\x00\x00@@333@ff\x86@\x9a\x999@\x00\x00@@\x00\x00`@\x9a\x999@\x00\x00@@33\x83@ff\x86@33\x83@\xcd\xccl@\x9a\x99Y@\x9a\x99Y@\x9a\x99\x89@ff\x86@333@\xcd\xccL@\x9a\x99y@\xcd\xccl@ffF@\x9a\x999@\x9a\x999@fff@33\x83@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\x80\x00\xba\x0c\xe0;\xbc\x0c\x00=\xbc\x0c s\x8e\x0c\xc0\x01\xba\x0c`q\x8e\x0c\x80q\x8e\x0c p\x8e\x0c@4\xbc\x0c\x806\xbc\x0c\x00\x04\xba\x0c\xc0p\x8e\x0c\xe0\xfd\x8d\x0c\xa0\x03\xba\x0c\x00<\xbc\x0c@<\xbc\x0c`=\xbc\x0c \x8f\x13\r\xe05\xbc\x0c\xa05\xbc\x0c\xc06\xbc\x0c`6\xbc\x0c\xe07\xbc\x0c\x807\xbc\x0c\x00k\xba\x0c\xc0\xfb\x90\x0c\xa0j\xba\x0c\xe0e\xba\x0c\xa0i\xba\x0c`k\xba\x0c\xe0\x88\x13\r\x00\xfb\x12\r\xa0\xf9\x12\r`\xfb\x12\r \xf9\x12\r@\xf9\x12\r\x80\xfb\x12\r\xc0\xf9\x12\r\xa0\xfa\x12\r\xa0\xfb\x12\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'w\xbeGA\x96CS@\x96C\x03@d;\x83@\x87\x16\x01@\x0e-\xa2?B`\x15@\xdb\xf9\xee?\x0e-2@\x0e-\xe2?+\x87\xa6?^\xba\xf9?T\xe3=@u\x93\x88?\x83\xc0\x8a?P\x8d\xd7?\xfc\xa9i@\xe9&\x91?B`\xb5?\xee|\x87@\xf8S\xb3?\xaa\xf1\x1aA\xf8S\xb3?\x91\xed\xac?!\xb0*@m\xe7{?\xbaID@u\x93\x88?\xd3M\x82?\xd3Mb?u\x93x@\x1dZ\xe4?+\x87\xa6?V\x0eM?\xa8\xc6\xbb?u\x93\x08@\x83\xc0j?\xc5 \x80?b\x10\x10@B`e@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I82305360
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S"0\x9eC\rX\x9eC\r0\x9eC\rp\x9fC\r\x80&)\r\x80\x9eC\r\xb0&)\r\xa8\x9eC\r@')\r\x80&)\r\xb0&)\r@')\r\x10')\rX\x9eC\r"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S' \x03\xd8\x04\xa0\r\xd8\x04\xe0\x03\xd8\x04H\x02\xd8\x04H\x05\xd8\x04\x90\x05\xd8\x048\x06\xd8\x04`e\xec\x04(a\xec\x04\xe0f\xec\x04\x00b\xec\x04\xf8i\xec\x04\xd0a\xec\x04\xc8l\xec\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g744
sg83
g767
sg84
g749
sg85
g771
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g776
sg83
g777
sg84
g781
sg85
g782
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g787
sg83
g788
sg84
g792
sg85
g793
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g776
sg83
g798
sg84
g781
sg85
g802
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g807
sg83
g808
sg84
g812
sg85
g813
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g818
sg83
g819
sg84
g823
sg85
g824
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g829
sg83
g830
sg84
g834
sg85
g835
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g787
sg83
g840
sg84
g792
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g807
sg83
g849
sg84
g812
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g829
sg83
g858
sg84
g834
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g818
sg83
g867
sg84
g823
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g756
sg83
g876
sg84
g761
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I82305360
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I82305360
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S' \x00F\r\xc0\xd3\x11\r \xd6\x11\r\x10\xd7E\r\xb8\xcdE\r\x90\xcdE\r \xcfE\r8oE\rP\xd6E\r\xe0\xcdE\r\xa0\xd7E\r@\xd4\x11\r\x80\xd6E\rpoE\r\x80\xd6E\r8oE\r\x08\xceE\rpoE\r0\xceE\rpoE\r\xe0\xd5\x11\r`\xd0\x11\rX\xceE\r@\xd4\x11\r0\xceE\r \x00F\r\xa8oE\r\x80\xceE\rh\xcdE\rX\xceE\r`\xd0\x11\r \x00F\r\xb0\xd6E\r\xe0\xd5\x11\r\xe0\xcdE\r \xcfE\rpoE\rp\xcfE\rX\x00F\rh\xcdE\r\x80\xd6E\rH\xcfE\rP\xd6E\rH\xcfE\r\x08\xceE\r\xb0\xd6E\r\xa8\xceE\r`\xd0\x11\r\xa8oE\r@\xd4\x11\r\xb0\xd6E\r\xe0\xcdE\r0\xceE\r\x80\xd6E\r\xb8\xcdE\r\xe0\xd5\x11\r\x80\xd6E\r\xb8\xcdE\r\x08\xceE\r\x90\xcdE\r\xe0\xd5\x11\r\xe0\xd6E\r\x80\xceE\r\xb0\xd6E\r8oE\r\xe0\xd5\x11\r\xe0\xcdE\r\xc8\x00F\rh\xcdE\rpoE\r\x80\xd6E\r\xa8oE\r\xe0\xcdE\r\x80\xd6E\rX\xceE\r@\xd4\x11\r\xc0\xd3\x11\r \x00F\r\xa0\xd3\x11\r\xe0\xd6E\r\xb8\xcdE\r\x80\xd6E\rpoE\rX\xceE\r\xc0\xcfE\r\xb0\xd6E\r8oE\r\x10\xd7E\r \xd6\x11\r\xe0\xd5\x11\r\xe0\xd6E\r\x80\xceE\r8oE\r\xe0\xd5\x11\r\xa0\xd3\x11\r0\xd8E\rpoE\r\x80\xceE\r\x90\xcdE\rh\xcdE\r\xb8\xcdE\rP\xd6E\r\xa8\xceE\r\x08\xceE\r \xd6\x11\r\xe0\xd5\x11\r0\xd8E\r\xe0\xcdE\r\x08\xceE\r\xa8oE\rh\xcdE\r\xc0\xd3\x11\rp\xd7E\r\xa8\xceE\r\x80\xceE\r0\xceE\r\x08\xceE\r \xd6\x11\rP\xd6E\r\x00\xd8E\r\xe0\xd5\x11\r\x08\xceE\r\xa8oE\r\x90\xcdE\r\xa8oE\r\xe0\xd6E\r\x80\xceE\r8oE\rX\xceE\rh\xcdE\r@\xd4\x11\r\xa8\xceE\r8oE\rp\xd7E\r\x80\xceE\r\x90\xcdE\r@\xd4\x11\r\xa8\xceE\r \xd6\x11\r\x10\xd7E\rP\xd6E\r\xe0\xd6E\r\xa8oE\r\xe0\xd6E\r\x98\xcfE\r\xf8\xceE\r\x08\xceE\r\xa8\xceE\r \xcfE\r8oE\r \xd6\x11\r\x08\xceE\r\xa8\xceE\r\xa8oE\r0\xceE\r \xd6\x11\r\xb8\xcdE\rX\xceE\r\x00\xd8E\r\xe0\xd6E\rpoE\rX\xceE\r\x80\xceE\r\xe0\xd6E\r8oE\rp\xd7E\r\xe0\xcdE\r\xa8\xceE\rpoE\r\xa8\xceE\rP\xd6E\r\x80\xd6E\r0\xd8E\r\xc0\xd3\x11\r\xf8\xceE\r`\xd0\x11\r@\xd4\x11\r\xe0\xd6E\r\xb0\xd6E\rH\xcfE\r\x00\xd8E\r8oE\r`\xd0\x11\rP\xd6E\rp\xcfE\r\xe0\xd6E\rpoE\r\xb8\xcdE\r\x80\xd6E\r\x90\xcdE\r`\xd0\x11\rX\xceE\r\x00\xd8E\r \xd6\x11\r0\xceE\r\xb8\xcdE\r\xa8oE\r\xb0\xd6E\r\x90\xcdE\rX\x00F\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S' \xd8)\r\x80\xda)\r\xa0\xd8)\r\xc0\xd9)\r\x00\xdb)\r \xd9)\r\xa0\xbf\xbc\x0c\x80\xbf\xbc\x0c`\xdb)\r\xe0\xda)\r`j\xba\x0c\xa0\xd9)\r@\xdb)\r@\xd8)\r\xa0\xdb)\r@\xdc)\r\xe0\xdb)\r`\xdc)\r\x80\xdb)\r\xc0\xdb)\r \xdc)\r\xe0\xdc)\r\xa0\xdc)\r\xe0\xd9)\r \xda)\r`\xd9)\r\xc0\xdc)\r\xa0\xdd)\r\xc0\xdd)\r\x00\xdd)\r\xa0\xda)\r@\x8c\x13\r \x87\x13\r\x00\x8a\x13\r@\x8e\x13\r\x80\x8b\x13\r@\x8d\x13\r\x80\x8c\x13\r\x00\x8f\x13\r\xa0\x86\x13\r\xc0\x85\x13\r\x00\x8d\x13\r\xc0\x8e\x13\r\x00\x88\x13\r`\x87\x13\r\x00\x8e\x13\r\xc0\x87\x13\r\xc0\x8b\x13\r`\x85\x13\r\xe0\x86\x13\r\xc0\x8a\x13\r@\x86\x13\r\x00\x86\x13\r\xc0\x89\x13\r\xc0\x88\x13\r@\x80\x13\r\x80\x86\x13\r@\x8f\x13\r\x00\x8b\x13\r \x80\x13\r\x80\x8d\x13\r\x80\x8a\x13\r@\x8b\x13\r@\x88\x13\r\x00\x81\x13\r\x00\x8c\x13\r@\x89\x13\r\xe0\x80\x13\r\x80\x80\x13\r@\x8a\x13\r\xa0\x80\x13\r\xc0\x8c\x13\r\xc0\x8d\x13\r\x00\x89\x13\r`\x80\x13\r\x80\x8e\x13\r\xc0\xfe\x12\r \xf3\x12\r\xe0\xf1\x12\r`\xfe\x12\r@\xff\x12\r \xff\x12\r\xa0\xfe\x12\r\x80\xff\x12\r`\xff\x12\r@\xfe\x12\r\xa0\xff\x12\r`\xf0\x12\r@\xf1\x12\r\xe0\xfe\x12\r \xfe\x12\r`\xf1\x12\r\x00\xf1\x12\r\xa0\xf2\x12\r\x80\xf1\x12\r\xa0\xf1\x12\r\xc0\xf1\x12\r`\xf2\x12\r\xe0\xf2\x12\r\xc0\xf2\x12\r \xf1\x12\r\x00\xf3\x12\r\xa0\xf3\x12\r \xf4\x12\r\x80\xf2\x12\r \xf2\x12\r\x00\xff\x12\r\x80\xfc\x12\r\x00\xf2\x12\r@\xf3\x12\r\x00\xf4\x12\r\xc0\xff\x12\r\x80\xfe\x12\r\xe0\xf3\x12\r\x80\x88\x13\r@\xf2\x12\r\xc0p\x8f\x0c\xa0\xe1\x13\r\xc0\xf3\x12\r\x80r\x8e\x0c\x80\xf3\x12\r\x80\x89\x13\r\xa0\xb1\xbc\x0c@\xb0\xbc\x0c\x80\xd5\x11\r\xe0\xff\x12\r`\xf3\x12\r \xb8\xbc\x0c \xb0\xbc\x0c\x80%\x12\r\xc0/\x12\r\xa0/\x12\r\x00|\x8f\x0c\xc0\xf3\x90\x0c`-\x12\r\x00.\x12\r@\xdd)\r\xe0\xd8)\r\xe0\xdd)\r`\xda)\r\x80\xdd)\r@\xde)\r`\xde)\r@\xda)\r \xde)\r\x80\xde)\r\xc0\xde)\r\xe0\xde)\r \xdf)\r\xa0\xdf)\r`\xd8)\r\xc0\xda)\r\x80\xdc)\r\x00\xda)\r\x80\xdf)\r\xa0\xde)\r\x00\xde)\r\xc0\xdf)\r`\xdd)\r\xe0\xdf)\r\x00\xdf)\r \xdb)\r\xe0.\x12\r \xdd)\r@\xdf)\r\x00\xdc)\r@B\x80\r B\x80\r\xc0@\x80\r@A\x80\r\x00B\x80\r\xe0@\x80\r`@\x80\r\x00A\x80\r\xa0B\x80\r\xc0B\x80\r\xe0A\x80\r\xe0B\x80\r\x00C\x80\r\xa0@\x80\r\x80A\x80\r C\x80\r@C\x80\r`C\x80\r\x80C\x80\r\xa0C\x80\r\x00D\x80\r D\x80\r @\x80\r\x00\xfc\x12\r@D\x80\r\xa0A\x80\r\x80D\x80\r\xc0A\x80\r\xc0D\x80\r\x80E\x80\r@@\x80\r`\xd6)\r\xa0\xd1)\r\x00\xd1)\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\xfa@$@\xc7\x98\xb9?\xc8\x95\xd9?\x0bC$@ U\x05@\xb8e\xc6?y\x86\x18@\t\x88\x08@\x81\x96\x99?\x02\xaa\n@5f\x97?4D\xc4?5\x86\x88?\xafS5@\x12n\xc6?a\xee\x96@*\xc4\x0c@E\x0e\x11@\xc9N\xa4?hw\x97?o\xd8\xbd?\xd5\xa9\x8a?\x81c\xc6?\xe1v\xb7?BTe@Nf\xa6?\xf8\x81\xe8?\xbc\xa7\xaa?\xc6%\x82?\xc1 \x12@\xe6d\x86?; b?\xd6\x84\xa8?\xeb\xd6\x8c?\x81\xb7\x9b?h\xdd\x9d?\x8c\xe5\xae?Y\xb8\xbb?\x85\x9b\t@\x7f\xc9\x8c?\\\xdc]?P\x1b\x82?\xe8\xa6\x8a?r\x1fb?\xafI\xd5?9\x96\x99?\x8c\x0c\xb1?\xa9\x0f1@p\xf1\xce?{\xe9\xae??nw?\xff\xc8\xec?0\xa9\x8a?j\x04/?\x88D\x84?\xa3b\xc6?\x16\xfe??\xd5 \x82?\x96\xf7\x9f?\x07D\xc4?\xfd\xd5]? \xc7,@\xfa\xdb\x9d?\xef\x11Q?U\xfd\x9f?\xceMU?:\xdd\xbd?\xc8\nb?\xf4 \xc2?\xdc\xee\x8e?\x1a\xa9\x8a?\x8c\xe5\xae?\xc0\xcc\xac?\x11\x8b7?\x0fP\xb5?\x9c\x97\xf9?\x03\xba\xbb?w\x91Y?\x89Ds?\xf0vw?\'\x83H?\xabd&?\xca\xaaj?\xfcsw?T!\xc2?\xc6VU?\xc1\xceL?\xaf\xed\xee?\xde\xec>@\xee\xf6\x8e?8\xa7j?\xa2\xd5]?\xa0\x1ab?\x1e\xaf;?u\xcaL?\x0fg&?\xc3af?\x96\xe7.?]\xb9\x1b@\xd2S\xd5?1\xbb\x9b?\x86w\xf7?\x16c\x86?S\xf4\xbf?^\xca\x1c@9\xe2L?\xf8`&?\x8bv\xb7?cH\x95?\x08\x18\x82?=lU?\x81u\x97?\xfb\x0e\x11@\xcfB\xa4?\xe3\x94Y?\xea#\x82?\xe1\x7f\x88?\xf1\xa5\xaa?\x13\x0e\x91?\x9f\xa6j?\xfa\xf2\x1d?\xa3V&?\x86\xcf]?\xc413@\xcf\x8a*?\xc6\xcc\x8c?\xb9!b?\xf8,3?}\xda\xbd?z\xba;?\x88\x10\x91?:S\xb5?z\xb9{?\xbc \xa2?\xbe\xc8\xac?y\xb5\x8a?R\x83H?x0\xb3?\xa7\xa3j?\xca\xa6\xaa?\xf6\xf1]?\xc4CD?+\xb2\x9b?\xab\x02Q?\r\x88Y?\x95e\xa6?\xeacw?Ku\xb7?s[f?\xde\x1ab?\xaf\x04o?\xc7\xca]?u\xbb\xbb?\xcb\xdcn?\xe5\x0f\x91?\x08\xc2j?<B\x84?&SU?_0\x93?\xba\xa3j?\xee_f?Iq7?W\xb9;?C\xbb;?\xa563?\xc3d\xa6?\x89\xc4L?@\xb9\x9b?\x1aRU?I\xed\xae?\x8f\xfd\xdf?\xd0\xcaL?\x1a\x10Q?\x13d\x86?\x9bd\x86?\xcb\nQ?\x97@D?4UU?\xee\xe8.?9\x0bQ?\xe7 b?5s7?\xeecf?\xa0\xf1]?\x97a\x86?\xa0LU?\xe4\xefn?\nhf?\xe0\xa5j?HK\x95?8!b?\x7f\xa8{?q"\x12@N?\xa4?\xff\xffn?\x8e\xfb\x7f?K\xa2\x8a?\xad\xf9??T\xb7{?\xfc\xb9{?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'\x10j\xec\x04\xc8o\xec\x0480\xdb\x04\xb09\xdb\x04 <\xdb\x04@7\xdb\x04\xd88\xdb\x04\xd04\xdb\x04(1\xdb\x04\x989\xdb\x04\xf02\xdb\x04\xf89\xdb\x04@4\xdb\x04\x986\xdb\x04\xc0;\xdb\x04\xa01\xdb\x0483\xdb\x04\x10:\xdb\x04\xa82\xdb\x040;\xdb\x040>\xdb\x04X7\xdb\x04\xc8<\xdb\x04\xc08\xdb\x048<\xdb\x04h3\xdb\x0402\xdb\x04\x908\xdb\x04\xf0;\xdb\x04\xf08\xdb\x04\xd0=\xdb\x04\xf8\xe3\xc0\x0c\xd0\xe7\xc0\x0c\xb8\xe7\xc0\x0c(\xe4\xc0\x0c\x80\xe6\xc0\x0c\x98\xe9\xc0\x0c\x08\xec\xc0\x0c\x88\xed\xc0\x0c\x90\xe5\xc0\x0c\xa8\xee\xc0\x0c\x10\xe7\xc0\x0c\x98\xef\xc0\x0c \xef\xc0\x0cx\xeb\xc0\x0c\xd8\xe8\xc0\x0cP\xef\xc0\x0c \xe3\xc0\x0c \xe6\xc0\x0ch\xef\xc0\x0c\xc0\xee\xc0\x0c\xf0\xe8\xc0\x0c\xd8\xe2\xc0\x0c\xb8\xe4\xc0\x0c\x98\xe6\xc0\x0cp\xe4\xc0\x0c8\xe9\xc0\x0cP\xe3\xc0\x0cP\xe6\xc0\x0c\xb0\xe9\xc0\x0c`\xee\xc0\x0cH\xee\xc0\x0c\xc8\xe0\xc0\x0c`\xeb\xc0\x0c\xa0\xe7\xc0\x0c\x00\xe2\xc0\x0c@\xe4\xc0\x0c\xe0\xe9\xc0\x0c\xe8\xed\xc0\x0c\x90\xe2\xc0\x0cX\xe7\xc0\x0cp\xea\xc0\x0c8\xe0\xc0\x0c\xc8\xe3\xc0\x0c\x18\xe2\xc0\x0c\x88\xea\xc0\x0c\x00\xe8\xc0\x0c\xb0\xef\xc0\x0cH\xe5\xc0\x0c\x08\xe9\xc0\x0c\x18\xe8\xc0\x0c\xf8\xec\xc0\x0c\xa8\xe2\xc0\x0c\xa8\xe8\xc0\x0c\xf0\xe5\xc0\x0c\xc0\xe8\xc0\x0ch\xe9\xc0\x0c`\xe8\xc0\x0c\xa0\xed\xc0\x0cx\xe2\xc0\x0c\x10\xe1\xc0\x0c(\xe7\xc0\x0c\x80\xe0\xc0\x0c\x10\xed\xc0\x0c`\xe2\xc0\x0cH\xeb\xc0\x0c\xb0\xe6\xc0\x0c\xf8\xe0\xc0\x0c\xa0\xe4\xc0\x0c\xb8\xea\xc0\x0c\x88\xe1\xc0\x0c0\xe5\xc0\x0c\x98\xe3\xc0\x0c\xb8\xe1\xc0\x0cX\xe1\xc0\x0cH\xe2\xc0\x0ch\xec\xc0\x0c8\xec\xc0\x0cX\xed\xc0\x0ch\xe3\xc0\x0c@\xe1\xc0\x0cp\xe1\xc0\x0c\x08\xe6\xc0\x0c\xd8\xe5\xc0\x0c`\xe5\xc0\x0c\x10\xe4\xc0\x0c\xe0\xe0\xc0\x0c\xb0\xe3\xc0\x0c\xf0\xe2\xc0\x0c\xa8\xe5\xc0\x0cx\xe8\xc0\x0c\x18\xee\xc0\x0c(\xe1\xc0\x0c\xe0\xe6\xc0\x0c\xd0\xe1\xc0\x0c\xc8\xe9\xc0\x0c\x90\xeb\xc0\x0cX\xea\xc0\x0c\x98\xe0\xc0\x0cP\xe0\xc0\x0cp\xe7\xc0\x0ch\xe6\xc0\x0c0\xee\xc0\x0c\x80\xe3\xc0\x0c\xf0\xee\xc0\x0c\x88\xe7\xc0\x0c\x00\xeb\xc0\x0cp\xed\xc0\x0c\xb0\xec\xc0\x0c\x90\xee\xc0\x0c@\xed\xc0\x0c \xec\xc0\x0c\xe8\xe7\xc0\x0c0\xe2\xc0\x0c\xa8\xeb\xc0\x0c\xf8\xe6\xc0\x0c\x80\xe9\xc0\x0c \xe9\xc0\x0c@\xea\xc0\x0c\xd0\xe4\xc0\x0c\xb8\xed\xc0\x0c\x08\xe3\xc0\x0cP\xe9\xc0\x0c0\xeb\xc0\x0c\x80\xec\xc0\x0c\x98\xec\xc0\x0c\xe8\xe1\xc0\x0c\xc8\xec\xc0\x0c\x18\xeb\xc0\x0c\x18\xe5\xc0\x0c\x80\xef\xc0\x0cx\xee\xc0\x0cH\xe8\xc0\x0c \xe0\xc0\x0c\xe0\xe3\xc0\x0c\xe0\xef\xc0\x0c\xd8\xeb\xc0\x0c\x08\xef\xc0\x0c\xe0\xec\xc0\x0cx\xe5\xc0\x0c\xc8\xe6\xc0\x0c(\xed\xc0\x0c\x90\xe8\xc0\x0c\xc0\xeb\xc0\x0c\xc8\xef\xc0\x0c8\xe6\xc0\x0c\xd0\xea\xc0\x0c@\xe7\xc0\x0ch\xe0\xc0\x0c\xd0\xed\xc0\x0c\xc0\xe2\xc0\x0c\xd8\xee\xc0\x0c\xa0\xea\xc0\x0c\xf0\xeb\xc0\x0c\x88\xe4\xc0\x0c\x10\xea\xc0\x0c\x00\xee\xc0\x0cX\xe4\xc0\x0c\xb0\xe0\xc0\x0c\xe8\xe4\xc0\x0c0\xe8\xc0\x0c\xf8\xe9\xc0\x0c\x00\xe5\xc0\x0c\xe0`N\x028\xe3\xc0\x0c\xe8\xea\xc0\x0cP\xec\xc0\x0c\xc0\xe5\xc0\x0c\xa8\x0b\xdc\x04\x88\n\xdc\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g926
sg895
g916
sg910
g920
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g960
sg895
g950
sg910
g954
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g960
sg895
g950
sg910
g954
sg904
g958
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1007
sg895
g997
sg910
g1001
sg904
g1005
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g1018
sg895
g1014
sg910
g1025
sg904
g1022
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1035
sg895
g1031
sg910
g1042
sg904
g1039
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1052
sg895
g1048
sg910
g1059
sg904
g1056
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1075
sg895
g1065
sg910
g1069
sg904
g1073
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1007
sg895
g1082
sg910
g1001
sg904
g1089
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g1101
sg895
g1097
sg910
g1108
sg904
g1105
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1118
sg895
g1114
sg910
g1125
sg904
g1122
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g1101
sg895
g1131
sg910
g1108
sg904
g1138
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1018
sg895
g1014
sg910
g1025
sg904
g1022
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g1075
sg895
g1159
sg910
g1069
sg904
g1166
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1118
sg895
g1114
sg910
g1125
sg904
g1122
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1191
sg895
g1187
sg910
g1198
sg904
g1195
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1118
sg895
g1114
sg910
g1125
sg904
g1122
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1221
sg895
g1217
sg910
g1228
sg904
g1225
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g926
sg895
g1234
sg910
g920
sg904
g1241
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g1253
sg895
g1249
sg910
g1260
sg904
g1257
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1007
sg895
g1082
sg910
g1001
sg904
g1089
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1191
sg895
g1187
sg910
g1198
sg904
g1195
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1309
sg895
g1305
sg910
g1316
sg904
g1313
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1326
sg895
g1322
sg910
g1333
sg904
g1330
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g1253
sg895
g1352
sg910
g1260
sg904
g1359
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g926
sg895
g916
sg910
g920
sg904
g924
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g908
sg895
g1380
sg910
g900
sg904
g1387
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1399
sg895
g1395
sg910
g1406
sg904
g1403
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1221
sg895
g1412
sg910
g1228
sg904
g1419
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g1052
sg895
g1427
sg910
g1059
sg904
g1434
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1007
sg895
g1082
sg910
g1001
sg904
g1089
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1118
sg895
g1114
sg910
g1125
sg904
g1122
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1253
sg895
g1249
sg910
g1260
sg904
g1257
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g937
sg895
g1481
sg910
g944
sg904
g1488
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g908
sg895
g1380
sg910
g900
sg904
g1387
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g1101
sg895
g1097
sg910
g1108
sg904
g1105
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g1052
sg895
g1048
sg910
g1059
sg904
g1056
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1035
sg895
g1535
sg910
g1042
sg904
g1542
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g1052
sg895
g1427
sg910
g1059
sg904
g1434
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1075
sg895
g1065
sg910
g1069
sg904
g1073
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1399
sg895
g1576
sg910
g1406
sg904
g1583
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g1595
sg895
g1591
sg910
g1602
sg904
g1599
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g926
sg895
g1234
sg910
g920
sg904
g1241
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1309
sg895
g1621
sg910
g1316
sg904
g1628
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1007
sg895
g997
sg910
g1001
sg904
g1005
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g1399
sg895
g1395
sg910
g1406
sg904
g1403
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1052
sg895
g1427
sg910
g1059
sg904
g1434
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g1191
sg895
g1187
sg910
g1198
sg904
g1195
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g1101
sg895
g1097
sg910
g1108
sg904
g1105
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g971
sg895
g1701
sg910
g978
sg904
g1708
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1221
sg895
g1412
sg910
g1228
sg904
g1419
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g1101
sg895
g1097
sg910
g1108
sg904
g1105
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1075
sg895
g1065
sg910
g1069
sg904
g1073
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g960
sg895
g1768
sg910
g954
sg904
g1775
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1221
sg895
g1217
sg910
g1228
sg904
g1225
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1800
sg895
g1796
sg910
g1807
sg904
g1804
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g1326
sg895
g1322
sg910
g1333
sg904
g1330
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g1399
sg895
g1576
sg910
g1406
sg904
g1583
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1018
sg895
g1839
sg910
g1025
sg904
g1846
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g1221
sg895
g1217
sg910
g1228
sg904
g1225
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g1052
sg895
g1048
sg910
g1059
sg904
g1056
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1221
sg895
g1412
sg910
g1228
sg904
g1419
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g908
sg895
g1380
sg910
g900
sg904
g1387
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1118
sg895
g1906
sg910
g1125
sg904
g1913
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1101
sg895
g1131
sg910
g1108
sg904
g1138
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1309
sg895
g1621
sg910
g1316
sg904
g1628
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1052
sg895
g1048
sg910
g1059
sg904
g1056
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1101
sg895
g1097
sg910
g1108
sg904
g1105
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1253
sg895
g1249
sg910
g1260
sg904
g1257
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1007
sg895
g997
sg910
g1001
sg904
g1005
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g926
sg895
g916
sg910
g920
sg904
g924
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g1326
sg895
g2025
sg910
g1333
sg904
g2032
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1800
sg895
g1796
sg910
g1807
sg904
g1804
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g971
sg895
g1701
sg910
g978
sg904
g1708
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g1101
sg895
g1131
sg910
g1108
sg904
g1138
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g1118
sg895
g1906
sg910
g1125
sg904
g1913
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1253
sg895
g1352
sg910
g1260
sg904
g1359
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g1595
sg895
g1591
sg910
g1602
sg904
g1599
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1399
sg895
g1395
sg910
g1406
sg904
g1403
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1018
sg895
g1014
sg910
g1025
sg904
g1022
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g960
sg895
g1768
sg910
g954
sg904
g1775
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g1221
sg895
g1217
sg910
g1228
sg904
g1225
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1800
sg895
g1796
sg910
g1807
sg904
g1804
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1326
sg895
g2025
sg910
g1333
sg904
g2032
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g1018
sg895
g1839
sg910
g1025
sg904
g1846
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g1221
sg895
g1217
sg910
g1228
sg904
g1225
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g1326
sg895
g2025
sg910
g1333
sg904
g2032
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1399
sg895
g1576
sg910
g1406
sg904
g1583
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1118
sg895
g1906
sg910
g1125
sg904
g1913
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1326
sg895
g2025
sg910
g1333
sg904
g2032
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g960
sg895
g950
sg910
g954
sg904
g958
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g908
sg895
g1380
sg910
g900
sg904
g1387
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g971
sg895
g1701
sg910
g978
sg904
g1708
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g1035
sg895
g1535
sg910
g1042
sg904
g1542
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1595
sg895
g1591
sg910
g1602
sg904
g1599
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1075
sg895
g1065
sg910
g1069
sg904
g1073
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g937
sg895
g1481
sg910
g944
sg904
g1488
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g1221
sg895
g1412
sg910
g1228
sg904
g1419
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1399
sg895
g1576
sg910
g1406
sg904
g1583
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1052
sg895
g1427
sg910
g1059
sg904
g1434
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1075
sg895
g1159
sg910
g1069
sg904
g1166
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1309
sg895
g1305
sg910
g1316
sg904
g1313
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g926
sg895
g916
sg910
g920
sg904
g924
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1035
sg895
g1535
sg910
g1042
sg904
g1542
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1595
sg895
g2482
sg910
g1602
sg904
g2489
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g1326
sg895
g1322
sg910
g1333
sg904
g1330
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g1191
sg895
g2510
sg910
g1198
sg904
g2517
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1075
sg895
g1159
sg910
g1069
sg904
g1166
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1035
sg895
g1031
sg910
g1042
sg904
g1039
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1191
sg895
g2510
sg910
g1198
sg904
g2517
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g1221
sg895
g1412
sg910
g1228
sg904
g1419
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1075
sg895
g1065
sg910
g1069
sg904
g1073
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1309
sg895
g1305
sg910
g1316
sg904
g1313
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g960
sg895
g950
sg910
g954
sg904
g958
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1309
sg895
g1305
sg910
g1316
sg904
g1313
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g1800
sg895
g2642
sg910
g1807
sg904
g2649
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g1326
sg895
g1322
sg910
g1333
sg904
g1330
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1018
sg895
g1014
sg910
g1025
sg904
g1022
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g1253
sg895
g1352
sg910
g1260
sg904
g1359
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g908
sg895
g1380
sg910
g900
sg904
g1387
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1007
sg895
g1082
sg910
g1001
sg904
g1089
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1595
sg895
g2482
sg910
g1602
sg904
g2489
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1018
sg895
g1839
sg910
g1025
sg904
g1846
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1035
sg895
g1535
sg910
g1042
sg904
g1542
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1326
sg895
g2025
sg910
g1333
sg904
g2032
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g960
sg895
g1768
sg910
g954
sg904
g1775
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g1007
sg895
g1082
sg910
g1001
sg904
g1089
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g1595
sg895
g1591
sg910
g1602
sg904
g1599
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g960
sg895
g1768
sg910
g954
sg904
g1775
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g1035
sg895
g1031
sg910
g1042
sg904
g1039
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1800
sg895
g1796
sg910
g1807
sg904
g1804
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1309
sg895
g1621
sg910
g1316
sg904
g1628
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1800
sg895
g2642
sg910
g1807
sg904
g2649
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g1309
sg895
g1305
sg910
g1316
sg904
g1313
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g971
sg895
g1701
sg910
g978
sg904
g1708
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1075
sg895
g1159
sg910
g1069
sg904
g1166
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g1595
sg895
g2482
sg910
g1602
sg904
g2489
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1007
sg895
g997
sg910
g1001
sg904
g1005
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g1018
sg895
g1839
sg910
g1025
sg904
g1846
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g937
sg895
g1481
sg910
g944
sg904
g1488
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1075
sg895
g1159
sg910
g1069
sg904
g1166
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g1595
sg895
g2482
sg910
g1602
sg904
g2489
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g1309
sg895
g1621
sg910
g1316
sg904
g1628
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1191
sg895
g1187
sg910
g1198
sg904
g1195
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g937
sg895
g1481
sg910
g944
sg904
g1488
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g1253
sg895
g1249
sg910
g1260
sg904
g1257
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1191
sg895
g1187
sg910
g1198
sg904
g1195
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g1800
sg895
g2642
sg910
g1807
sg904
g2649
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1118
sg895
g1906
sg910
g1125
sg904
g1913
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1253
sg895
g1249
sg910
g1260
sg904
g1257
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1326
sg895
g1322
sg910
g1333
sg904
g1330
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g1800
sg895
g2642
sg910
g1807
sg904
g2649
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1018
sg895
g1014
sg910
g1025
sg904
g1022
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g1035
sg895
g1535
sg910
g1042
sg904
g1542
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1052
sg895
g1048
sg910
g1059
sg904
g1056
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g1595
sg895
g1591
sg910
g1602
sg904
g1599
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1118
sg895
g1906
sg910
g1125
sg904
g1913
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1595
sg895
g2482
sg910
g1602
sg904
g2489
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1035
sg895
g1031
sg910
g1042
sg904
g1039
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1101
sg895
g1131
sg910
g1108
sg904
g1138
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g1399
sg895
g1395
sg910
g1406
sg904
g1403
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g926
sg895
g916
sg910
g920
sg904
g924
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g971
sg895
g1701
sg910
g978
sg904
g1708
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g926
sg895
g1234
sg910
g920
sg904
g1241
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g1007
sg895
g997
sg910
g1001
sg904
g1005
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1800
sg895
g1796
sg910
g1807
sg904
g1804
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1399
sg895
g1576
sg910
g1406
sg904
g1583
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1052
sg895
g1427
sg910
g1059
sg904
g1434
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1191
sg895
g2510
sg910
g1198
sg904
g2517
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1018
sg895
g1839
sg910
g1025
sg904
g1846
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g926
sg895
g1234
sg910
g920
sg904
g1241
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1035
sg895
g1031
sg910
g1042
sg904
g1039
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g1253
sg895
g1352
sg910
g1260
sg904
g1359
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1800
sg895
g2642
sg910
g1807
sg904
g2649
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g1118
sg895
g1114
sg910
g1125
sg904
g1122
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1101
sg895
g1131
sg910
g1108
sg904
g1138
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g960
sg895
g950
sg910
g954
sg904
g958
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g926
sg895
g1234
sg910
g920
sg904
g1241
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1253
sg895
g1352
sg910
g1260
sg904
g1359
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1191
sg895
g2510
sg910
g1198
sg904
g2517
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g937
sg895
g1481
sg910
g944
sg904
g1488
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g1191
sg895
g2510
sg910
g1198
sg904
g2517
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1309
sg895
g1621
sg910
g1316
sg904
g1628
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1399
sg895
g1395
sg910
g1406
sg904
g1403
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g960
sg895
g1768
sg910
g954
sg904
g1775
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I82305360
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S' \xd7)\r\x88\xe9\xbb\x0c@\xc4\xbb\x0cp\x10\xbb\x0c\x88\x11\xbb\x0c\xc0\xe9\xbb\x0c\x88\xe9\xbb\x0c8\x11\xbb\x0c@\xc4\xbb\x0c \x15\xbb\x0c@\xc4\xbb\x0c\x80\xe6\xb2\x04p\x10\xbb\x0c \xd7)\r\x88\xe9\xbb\x0c@\xed\xb2\x04`\xed\xb2\x04\xc0\x1f\xbb\x0c\x98\x1f\xbb\x0cp\x1f\xbb\x0cH\x1f\xbb\x0c0\xea\xbb\x0c\xc0\x1f\xbb\x0c\xd0\x1e\xbb\x0cp\xc4\xbb\x0c@\xed\xb2\x04@\xc4\xbb\x0c\xc0\xe9\xbb\x0c\xe8\x10\xbb\x0cp\x1f\xbb\x0c\xa8\x14\xbb\x0c\xa0\xc4\xbb\x0c\xa8\x1e\xbb\x0c \xd7)\r\xd0\xc4\xbb\x0c \xd7)\r \xed\xb2\x04\xa0\xc4\xbb\x0c@\xc4\xbb\x0c\xc0\xc5\xbb\x0c\xa0\xc4\xbb\x0c \x15\xbb\x0c \x1f\xbb\x0c\xf8\xe9\xbb\x0c\xd0\xc4\xbb\x0c\xa0\xea\xbb\x0c8\x11\xbb\x0c \x1f\xbb\x0c\x80\xe6\xb2\x04 \xed\xb2\x040\xc5\xbb\x0ch\xea\xbb\x0c\xa0\xc4\xbb\x0cp\x1f\xbb\x0c`\xed\xb2\x04\xf0\xc5\xbb\x0c\xa0\xc4\xbb\x0c@\xed\xb2\x04`\xed\xb2\x04p\x10\xbb\x0c\xc0\xe9\xbb\x0c`\xed\xb2\x04p\x10\xbb\x0c\xc0\xe9\xbb\x0c\x98\x1f\xbb\x0cp\x10\xbb\x0c \xed\xb2\x04@\xed\xb2\x04p\x1f\xbb\x0c\x00\xc5\xbb\x0c\xd8\xea\xbb\x0c\x98\x1f\xbb\x0c8\x11\xbb\x0c\xb8\x1d\xbb\x0c@\xc4\xbb\x0ch\xea\xbb\x0c\xf8\xe9\xbb\x0c\xe0\xec\xb2\x04\xd8\xea\xbb\x0c \x1f\xbb\x0c\xf0\xc5\xbb\x0c\x98\x1f\xbb\x0c`\xc5\xbb\x0c\xd8\xea\xbb\x0c\x88\x11\xbb\x0c\xc0\xe9\xbb\x0cp\x10\xbb\x0c\xf8\xe9\xbb\x0cp\xc4\xbb\x0c \xed\xb2\x04\xe0\xec\xb2\x04 \x15\xbb\x0c\x88\x11\xbb\x0c \x15\xbb\x0c \xed\xb2\x04P\xc6\xbb\x0cp\xc4\xbb\x0cH\x1f\xbb\x0c\xc0\x1f\xbb\x0c\x88\xe9\xbb\x0cp\x1f\xbb\x0c@\xed\xb2\x04\xa8\x14\xbb\x0c\xc0\xe9\xbb\x0c\x88\x11\xbb\x0c\x88\xe9\xbb\x0c`\xed\xb2\x04\xd0\xc4\xbb\x0c\xf8\xe9\xbb\x0c@\xed\xb2\x04\xc0\x1f\xbb\x0c \xd7)\r\x88\x11\xbb\x0c\xd0\xc4\xbb\x0c\xf8\xe9\xbb\x0c\xb8\x1d\xbb\x0c\x98\x1f\xbb\x0c\xd0\xc4\xbb\x0c \xed\xb2\x04 \x15\xbb\x0c8\x11\xbb\x0c\xc0\xc5\xbb\x0c \xed\xb2\x04H\x1f\xbb\x0c\x98\x1f\xbb\x0c\x88\xe9\xbb\x0c\x88\x11\xbb\x0c\xe0\xec\xb2\x04\xf8\xe9\xbb\x0c\xa0\xc4\xbb\x0cH\x1f\xbb\x0c\xd0\xc4\xbb\x0c\x88\x11\xbb\x0cp\x1f\xbb\x0cp\x10\xbb\x0c\x98\x1f\xbb\x0c@\xc4\xbb\x0c \x1f\xbb\x0c8\x11\xbb\x0c\xc0\xe9\xbb\x0c\x98\x1f\xbb\x0c\x00\xc5\xbb\x0c\xa8\x14\xbb\x0c \xed\xb2\x04H\x1f\xbb\x0c\xc0\x1f\xbb\x0c\x80\x1e\xbb\x0c@\xc4\xbb\x0c\xa0\xc4\xbb\x0c\xc0\x1f\xbb\x0c \x15\xbb\x0c\xd0\xc4\xbb\x0c \x15\xbb\x0c@\xed\xb2\x04p\xc4\xbb\x0c \x1f\xbb\x0c\xc0\x1f\xbb\x0c`\xed\xb2\x04 \x15\xbb\x0c \x1f\xbb\x0cH\x1f\xbb\x0c \xd7)\rh\xea\xbb\x0cH\x1f\xbb\x0c\xc0\xe9\xbb\x0c\xa0\xc4\xbb\x0c\x88\xe9\xbb\x0cp\x10\xbb\x0cp\xc4\xbb\x0c \xd7)\r \x1f\xbb\x0c \xd7)\rp\x10\xbb\x0c\x90\xc5\xbb\x0c\x00\xc5\xbb\x0c\xc0\x1f\xbb\x0c@\xed\xb2\x04\xa0\xc4\xbb\x0c\xf0\xc5\xbb\x0c \x15\xbb\x0c`\xed\xb2\x04 \xc6\xbb\x0c\xe0\xec\xb2\x04 \xd7)\r\xc0\xe9\xbb\x0c\x88\x11\xbb\x0c\xf8\xe9\xbb\x0c\xd0\xc4\xbb\x0cH\x1f\xbb\x0c`\xed\xb2\x04H\x1f\xbb\x0c\x88\x11\xbb\x0c\xc0\x1f\xbb\x0cp\x1f\xbb\x0c\xf0\xc5\xbb\x0c\xe0\xec\xb2\x04@\xc4\xbb\x0c\xd0\xc4\xbb\x0c \xed\xb2\x04p\xc4\xbb\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S'`\xd1)\r\xc0F\x80\r H\x80\r\x00H\x80\r\xe0F\x80\r@F\x80\r\x80G\x80\r`F\x80\r\x00G\x80\r F\x80\r\x80H\x80\r\xc0H\x80\r\x80F\x80\r\x00I\x80\r\x80\xd7)\r\xe0\xd1)\r\xa0G\x80\r G\x80\r@H\x80\r@I\x80\r`H\x80\r@G\x80\r\xe0I\x80\r`I\x80\r\xe0H\x80\r\x00J\x80\r\xa0I\x80\r\xa0F\x80\r`J\x80\r\xc0J\x80\r\xa0J\x80\r\xe0G\x80\r\xe0J\x80\r\x00K\x80\r K\x80\r\x80K\x80\r`K\x80\r J\x80\r\xa0K\x80\r\xc0K\x80\r L\x80\r\x00L\x80\r I\x80\r\x80L\x80\r\xa0L\x80\r@J\x80\r`G\x80\r\xc0L\x80\r M\x80\r\x00M\x80\r`M\x80\r\x80M\x80\r\xa0M\x80\r\xc0M\x80\r\xa0H\x80\r\x80J\x80\r\xe0M\x80\r\x00N\x80\r`N\x80\r@N\x80\r@M\x80\r\x80N\x80\r\xe0N\x80\r\xc0N\x80\r@L\x80\r\xa0O\x80\r`L\x80\r`O\x80\r\xa0N\x80\r\x00O\x80\r\x80O\x80\r\xe0L\x80\r\xe0K\x80\r\xc0O\x80\r\xe0O\x80\r@O\x80\r N\x80\r\x80I\x80\r\xa0\xd0)\r\xc0\xd1)\r@K\x80\r\x80\xd6)\r 2\xe5\x1e\xa00\xe5\x1e`1\xe5\x1e\x001\xe5\x1e@0\xe5\x1e\xc01\xe5\x1e@2\xe5\x1e\xa02\xe5\x1e`2\xe5\x1e\x800\xe5\x1e\xc02\xe5\x1e\x802\xe5\x1e\xe00\xe5\x1e 3\xe5\x1e\x003\xe5\x1e\x002\xe5\x1e\x803\xe5\x1e`3\xe5\x1e\xc03\xe5\x1e\xe03\xe5\x1e\xa01\xe5\x1e\xe01\xe5\x1e\x004\xe5\x1e`4\xe5\x1e@4\xe5\x1e@3\xe5\x1e\x804\xe5\x1e\xa04\xe5\x1e\x005\xe5\x1e\xe04\xe5\x1e`0\xe5\x1e`5\xe5\x1e\x805\xe5\x1e 0\xe5\x1e\xc05\xe5\x1e\xa05\xe5\x1e\x006\xe5\x1e 6\xe5\x1e\xe02\xe5\x1e 4\xe5\x1e\xa06\xe5\x1e@6\xe5\x1e\xe06\xe5\x1e@1\xe5\x1e\x007\xe5\x1e\x806\xe5\x1e\xa03\xe5\x1e 7\xe5\x1e@7\xe5\x1e\xa07\xe5\x1e\xc07\xe5\x1e@5\xe5\x1e\x008\xe5\x1e\xe07\xe5\x1e 1\xe5\x1e`8\xe5\x1e\x808\xe5\x1e\xc06\xe5\x1e\xc08\xe5\x1e\xa08\xe5\x1e\xc00\xe5\x1e 9\xe5\x1e@9\xe5\x1e`9\xe5\x1e`6\xe5\x1e\xa09\xe5\x1e\xc09\xe5\x1e\xe09\xe5\x1e\x807\xe5\x1e`7\xe5\x1e\x00:\xe5\x1e`:\xe5\x1e\x80:\xe5\x1e\xa0:\xe5\x1e\xe08\xe5\x1e\xe0:\xe5\x1e\xc0:\xe5\x1e\x809\xe5\x1e\x00;\xe5\x1e ;\xe5\x1e\x80;\xe5\x1e`;\xe5\x1e 8\xe5\x1e\xa0;\xe5\x1e\xc0;\xe5\x1e\xe0;\xe5\x1e@<\xe5\x1e \xd5)\r@:\xe5\x1e\x801\xe5\x1e@8\xe5\x1e\x00<\xe5\x1e\xe05\xe5\x1e\xa0<\xe5\x1e`=\xe5\x1e =\xe5\x1e\xa0=\xe5\x1e\xc04\xe5\x1e <\xe5\x1e\x80<\xe5\x1e\x00=\xe5\x1e >\xe5\x1e\xc0=\xe5\x1e\xe0>\xe5\x1e :\xe5\x1e\xa0>\xe5\x1e ?\xe5\x1e\x80=\xe5\x1e\x80>\xe5\x1e\xc0?\xe5\x1e\xa0?\xe5\x1e@?\xe5\x1e\xe0?\xe5\x1e`<\xe5\x1e@>\xe5\x1e\x00?\xe5\x1e@=\xe5\x1e\x80?\xe5\x1e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'\xe0;\xa4?^\xaa*?f\'3?\xebrw?\xe8\x90Y?Z\xe5n?\xb4v7?\x8a,3?\xbc-3?,rw?\xd2\x19b?|\x9c\x19@x\xbb;?XQ\x15?V \xc2?\xaa\xfa??\xc4\x91Y?\x96\x867??\xd9n?wSU?J1\x93?\xc8cf?\x18\xc9L?\x8c\xf3]?\xae\x1ab?\xccsw?#\xeb.?\xb8\x1ab?E\xeb\x8e?\x902s?\xb9-s?\x93\xb0;?+\x93Y?z\x82H?2\xd9\x1d?\nJ3?Z\x1fb?e\xc5L?k\x1ab?\xe0\xc8]?S\x1d"?\x8anU?K\xb5{?\xf4.D?\xf3\xe6.?abf?\x8faf?\x1c\xbcj?\xcb/\x93?\xc1\x95\xd9?\x02\x0cQ?0\xcb\xcc?\x02\'Q?\xf9MU?\xeb \x82?\xa6\x85\xa8?8\xa7j?\xac2\x13@\x85\xa3j?J\xfe??|\x91Y?\x04\x86\x18@0vw?w]f?W9\x84?\xb8z7?\x1c\xc0{?\x88\x86H?\x9a\xc7\xbb?\x9d\xdd]?\x06bf?"\x9f\x8a?f_&?\xa6\xa6*?\x1fyw?\x8d\xa7\x8a?\\\xb5;?\xf0/3?x\x81H?\xed\xfc??M\xe1\x9d?\x1a/D?\xbau\x97?\xbf\xf5\x9f?\\\xb4{?\xa8\xcc;?\xeer7?\xdb=\xa4?9\xdb]?\x9e\xc7L?\xd9a&?$\x00@?\xde\xeb\x8e?\xcd\xa5j?Ju\x97?-\xe5.?+\x88\x88?\xa9\xc3\xac?\x86vw?\x0c@D?\xe1?\xc4?\x9d\xe6L?e\x83H?\xa6\x02Q?\xa5RU?\xb5d&?\xc1\xba\x83@g\xd4]?\x8d\x01\x80?\x90\xef.?\xb0 "?Y\xb9{?\xa0\x10Q?\xc3\xa4*?\x18>\x84?v,3?\xe7CU?\x8ab&?\x96kU?Zaf?\x0e\x94\x19?,\rb?\xb7\xa9*?\xb2\xdc\x9d?\x99\x99j?\xfb\xba;?c#b?I_&?\x8c\xa6j?\xc5g&?\x10\xda]?e33?\xe3Vf?Cf\x86?%\xee.?*\x00Q?^3s?\x8f\xcdL?\xa1@D?U\xef\x7f?g\xdan?ODD?~6"?\\tw?mqw?\r\xec.?rcf?\xac\x83H?\xda43?,\xfb??033?\xffe&?\xa6d&?\x06\xa5*?\x9c\xd4{?J\x0cQ?\xe0d&?\xb9\x0c\xf1?\x12\xa6*?g\x93\x19?w4b?\xdcKU?Y\xff\x7f?\xfa\xda]?N\xe8n?\xe6/3?E\x9fH?-\x0cQ?i\x0bQ?\xb3uH?\xc2e\x86?Le\x86?h:b?3\xfa??\xcf`f?4\xe8.?\x8ed&?\x0c\x0eQ?\x9c\x8ew?\xed\x82H?\xfb"s?C\x1a"?\xd8q7?/\x1c"? Ds?E\x87\x88?\x1fD\x84?\xa0M\x15?\xc4\xba{?\xa6\xebn?\xfb\x86H?\x88\xa0j?\xb2=D?\x84d\x06@\xf3_f?\xa2\xbd*?\x95\xbfL? .3?<\xbc;?\x06\xcb\xac?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'\x00\x0b\xdc\x04(\x07\xdc\x04\xc8i\xec\x04\xb0i\xec\x04\x88j\xec\x04Pl\xec\x04\xe0`\xec\x04Hh\xec\x04\x80o\xec\x04\xa0m\xec\x04\xf0k\xec\x04\xa0d\xec\x04 l\xec\x04\x80i\xec\x04(m\xec\x04\x98i\xec\x04Pi\xec\x04Hn\xec\x04\x10a\xec\x04 o\xec\x04\xb0o\xec\x04\x18n\xec\x04pj\xec\x04\xc8c\xec\x04\x00n\xec\x04Xd\xec\x04\xa0g\xec\x04\x18b\xec\x04@g\xec\x04\xb8j\xec\x04\xb8a\xec\x04\xd0g\xec\x04\xc8f\xec\x04\xe0o\xec\x04\xf0b\xec\x04`n\xec\x04\xf8`\xec\x04\xc0k\xec\x04\x18k\xec\x04\xd8k\xec\x04\xa8h\xec\x04xb\xec\x04\xe8g\xec\x04\xe8m\xec\x04\xb8d\xec\x04\xa8n\xec\x048c\xec\x04\x08l\xec\x04\x90e\xec\x040n\xec\x04@m\xec\x04hl\xec\x04\x10d\xec\x04\x88d\xec\x04pm\xec\x04@j\xec\x04`b\xec\x048l\xec\x04\xa8e\xec\x04\x80f\xec\x04\xc0h\xec\x04\x88m\xec\x04\xe0i\xec\x040e\xec\x04\xf8c\xec\x04\x00h\xec\x04\x08c\xec\x04h`\xec\x04\x08f\xec\x04\x80c\xec\x04`h\xec\x04\x00e\xec\x04\x98f\xec\x04Xg\xec\x04\xd8h\xec\x04\xb0f\xec\x04\xa0j\xec\x048`\xec\x04\x98l\xec\x04(d\xec\x04\x98c\xec\x048i\xec\x04\xc8`\xec\x04\x90k\xec\x04\x10g\xec\x04H\xfe$\x02\xe0\xf0$\x02\x88\x01\xd8\x04\xa0\x04\xd8\x04(\x01\xd8\x04\xc8\x06\xd8\x04\x98\x0c\xd8\x04\xd0\x04\xd8\x04`\x0e\xd8\x04\xb8\r\xd8\x048\t\xd8\x04\x98\x03\xd8\x04@\x07\xd8\x04\xe0\x06\xd8\x0408\xdb\x04\x803\xdb\x04 3\xdb\x04\xa88\xdb\x04P<\xdb\x04\xc80\xdb\x04\xe84\xdb\x04\xb00\xdb\x04P3\xdb\x04\x980\xdb\x04`;\xdb\x04 ?\xdb\x04\x98?\xdb\x04\x104\xdb\x04\xb8=\xdb\x04p=\xdb\x04(:\xdb\x0405\xdb\x04\x107\xdb\x04\xe06\xdb\x04\xd07\xdb\x04\xc0>\xdb\x04P?\xdb\x04\xd8;\xdb\x04\x902\xdb\x04H;\xdb\x04\x089\xdb\x04\x182\xdb\x04\xb06\xdb\x04\xa0:\xdb\x04`8\xdb\x04\x08<\xdb\x04\x98<\xdb\x04p7\xdb\x04\x00;\xdb\x04H>\xdb\x04\x884\xdb\x04\xd0:\xdb\x04\x88=\xdb\x04P0\xdb\x04@=\xdb\x04\xd82\xdb\x04\x086\xdb\x04 9\xdb\x04\xc89\xdb\x04x;\xdb\x04\x90;\xdb\x04\xe8=\xdb\x04(=\xdb\x04\x18>\xdb\x04\xd85\xdb\x04\x188\xdb\x04P6\xdb\x0486\xdb\x04H8\xdb\x04p4\xdb\x04X1\xdb\x04\xf0>\xdb\x04\x00>\xdb\x04\x08?\xdb\x04\x10=\xdb\x0489\xdb\x04\xe0?\xdb\x04@:\xdb\x04\x18;\xdb\x04Xa\xec\x04\xc0n\xec\x04ho\xec\x04Pc\xec\x040k\xec\x04(g\xec\x048f\xec\x04 i\xec\x04`k\xec\x04\xd0d\xec\x04hi\xec\x04\x08o\xec\x04\xd8e\xec\x04hf\xec\x048o\xec\x04\xa8k\xec\x04pg\xec\x04\xe8j\xec\x04hc\xec\x04Po\xec\x04xn\xec\x04\xe8a\xec\x04\xb0l\xec\x04Hb\xec\x04xk\xec\x04\xb0c\xec\x04\xa0a\xec\x04\xb8g\xec\x04Hk\xec\x04\x18h\xec\x04\xe0l\xec\x04\xd0j\xec\x04(j\xec\x04\xe0c\xec\x04\xd8n\xec\x04\x98o\xec\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3756
sg3633
g3752
sg3647
g3763
sg3642
g3760
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3786
sg3633
g3782
sg3647
g3793
sg3642
g3790
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3675
sg3633
g3799
sg3647
g3682
sg3642
g3806
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3824
sg3633
g3814
sg3647
g3818
sg3642
g3822
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3692
sg3633
g3831
sg3647
g3699
sg3642
g3838
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3876
sg3633
g3872
sg3647
g3883
sg3642
g3880
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3824
sg3633
g3889
sg3647
g3818
sg3642
g3896
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3908
sg3633
g3904
sg3647
g3915
sg3642
g3912
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3925
sg3633
g3921
sg3647
g3932
sg3642
g3929
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3942
sg3633
g3938
sg3647
g3949
sg3642
g3946
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3959
sg3633
g3955
sg3647
g3966
sg3642
g3963
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3638
sg3633
g3972
sg3647
g3648
sg3642
g3979
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3908
sg3633
g3987
sg3647
g3915
sg3642
g3994
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g4019
sg3633
g4015
sg3647
g4026
sg3642
g4023
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g3876
sg3633
g4032
sg3647
g3883
sg3642
g4039
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g3726
sg3633
g4060
sg3647
g3733
sg3642
g4067
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g3959
sg3633
g4075
sg3647
g3966
sg3642
g4082
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3942
sg3633
g3938
sg3647
g3949
sg3642
g3946
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g4113
sg3633
g4103
sg3647
g4107
sg3642
g4111
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g4124
sg3633
g4120
sg3647
g4131
sg3642
g4128
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g3908
sg3633
g3987
sg3647
g3915
sg3642
g3994
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g4167
sg3633
g4163
sg3647
g4174
sg3642
g4171
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g4197
sg3633
g4193
sg3647
g4204
sg3642
g4201
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g4124
sg3633
g4210
sg3647
g4131
sg3642
g4217
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g3675
sg3633
g3799
sg3647
g3682
sg3642
g3806
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g3925
sg3633
g4238
sg3647
g3932
sg3642
g4245
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g4124
sg3633
g4120
sg3647
g4131
sg3642
g4128
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3786
sg3633
g3782
sg3647
g3793
sg3642
g3790
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g4113
sg3633
g4279
sg3647
g4107
sg3642
g4286
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g4298
sg3633
g4294
sg3647
g4305
sg3642
g4302
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g4167
sg3633
g4163
sg3647
g4174
sg3642
g4171
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g4197
sg3633
g4324
sg3647
g4204
sg3642
g4331
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g3756
sg3633
g3752
sg3647
g3763
sg3642
g3760
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g4113
sg3633
g4279
sg3647
g4107
sg3642
g4286
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g3824
sg3633
g3814
sg3647
g3818
sg3642
g3822
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g4197
sg3633
g4193
sg3647
g4204
sg3642
g4201
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3942
sg3633
g4404
sg3647
g3949
sg3642
g4411
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g4124
sg3633
g4210
sg3647
g4131
sg3642
g4217
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3942
sg3633
g4404
sg3647
g3949
sg3642
g4411
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g3824
sg3633
g3889
sg3647
g3818
sg3642
g3896
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g4019
sg3633
g4458
sg3647
g4026
sg3642
g4465
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g4124
sg3633
g4210
sg3647
g4131
sg3642
g4217
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3876
sg3633
g3872
sg3647
g3883
sg3642
g3880
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3824
sg3633
g3889
sg3647
g3818
sg3642
g3896
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g3692
sg3633
g3831
sg3647
g3699
sg3642
g3838
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g3824
sg3633
g3889
sg3647
g3818
sg3642
g3896
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g3726
sg3633
g4060
sg3647
g3733
sg3642
g4067
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3925
sg3633
g3921
sg3647
g3932
sg3642
g3929
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g4197
sg3633
g4324
sg3647
g4204
sg3642
g4331
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3876
sg3633
g4032
sg3647
g3883
sg3642
g4039
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3942
sg3633
g4404
sg3647
g3949
sg3642
g4411
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3658
sg3633
g4642
sg3647
g3665
sg3642
g4649
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g4298
sg3633
g4657
sg3647
g4305
sg3642
g4664
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g3925
sg3633
g4238
sg3647
g3932
sg3642
g4245
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g3756
sg3633
g3752
sg3647
g3763
sg3642
g3760
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g3876
sg3633
g4032
sg3647
g3883
sg3642
g4039
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g3675
sg3633
g3799
sg3647
g3682
sg3642
g3806
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g3942
sg3633
g3938
sg3647
g3949
sg3642
g3946
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g4298
sg3633
g4294
sg3647
g4305
sg3642
g4302
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3756
sg3633
g4750
sg3647
g3763
sg3642
g4757
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g4298
sg3633
g4294
sg3647
g4305
sg3642
g4302
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g4113
sg3633
g4103
sg3647
g4107
sg3642
g4111
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g4019
sg3633
g4458
sg3647
g4026
sg3642
g4465
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g3925
sg3633
g4238
sg3647
g3932
sg3642
g4245
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3709
sg3633
g4817
sg3647
g3716
sg3642
g4824
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g4298
sg3633
g4657
sg3647
g4305
sg3642
g4664
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3709
sg3633
g4817
sg3647
g3716
sg3642
g4824
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g3726
sg3633
g4060
sg3647
g3733
sg3642
g4067
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g3692
sg3633
g3831
sg3647
g3699
sg3642
g3838
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g4298
sg3633
g4294
sg3647
g4305
sg3642
g4302
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g4019
sg3633
g4015
sg3647
g4026
sg3642
g4023
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g4197
sg3633
g4324
sg3647
g4204
sg3642
g4331
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3756
sg3633
g4750
sg3647
g3763
sg3642
g4757
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3786
sg3633
g4936
sg3647
g3793
sg3642
g4943
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g3709
sg3633
g4817
sg3647
g3716
sg3642
g4824
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3786
sg3633
g3782
sg3647
g3793
sg3642
g3790
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g4197
sg3633
g4324
sg3647
g4204
sg3642
g4331
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g4167
sg3633
g4990
sg3647
g4174
sg3642
g4997
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g4019
sg3633
g4458
sg3647
g4026
sg3642
g4465
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3959
sg3633
g3955
sg3647
g3966
sg3642
g3963
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g3908
sg3633
g3987
sg3647
g3915
sg3642
g3994
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g3658
sg3633
g4642
sg3647
g3665
sg3642
g4649
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g3942
sg3633
g4404
sg3647
g3949
sg3642
g4411
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g3876
sg3633
g3872
sg3647
g3883
sg3642
g3880
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g4113
sg3633
g4103
sg3647
g4107
sg3642
g4111
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3726
sg3633
g4060
sg3647
g3733
sg3642
g4067
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g3824
sg3633
g3814
sg3647
g3818
sg3642
g3822
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g4167
sg3633
g4163
sg3647
g4174
sg3642
g4171
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g4298
sg3633
g4657
sg3647
g4305
sg3642
g4664
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g3876
sg3633
g4032
sg3647
g3883
sg3642
g4039
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g3908
sg3633
g3904
sg3647
g3915
sg3642
g3912
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g3638
sg3633
g3972
sg3647
g3648
sg3642
g3979
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g4167
sg3633
g4163
sg3647
g4174
sg3642
g4171
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g4298
sg3633
g4294
sg3647
g4305
sg3642
g4302
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3876
sg3633
g4032
sg3647
g3883
sg3642
g4039
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3925
sg3633
g3921
sg3647
g3932
sg3642
g3929
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g4167
sg3633
g4990
sg3647
g4174
sg3642
g4997
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g4197
sg3633
g4193
sg3647
g4204
sg3642
g4201
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3786
sg3633
g3782
sg3647
g3793
sg3642
g3790
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g3756
sg3633
g3752
sg3647
g3763
sg3642
g3760
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g3925
sg3633
g3921
sg3647
g3932
sg3642
g3929
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g4197
sg3633
g4193
sg3647
g4204
sg3642
g4201
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3959
sg3633
g4075
sg3647
g3966
sg3642
g4082
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3925
sg3633
g3921
sg3647
g3932
sg3642
g3929
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3658
sg3633
g4642
sg3647
g3665
sg3642
g4649
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3756
sg3633
g4750
sg3647
g3763
sg3642
g4757
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g4298
sg3633
g4657
sg3647
g4305
sg3642
g4664
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g4124
sg3633
g4120
sg3647
g4131
sg3642
g4128
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3959
sg3633
g4075
sg3647
g3966
sg3642
g4082
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g4167
sg3633
g4163
sg3647
g4174
sg3642
g4171
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3709
sg3633
g4817
sg3647
g3716
sg3642
g4824
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g3942
sg3633
g4404
sg3647
g3949
sg3642
g4411
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3692
sg3633
g3831
sg3647
g3699
sg3642
g3838
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3925
sg3633
g4238
sg3647
g3932
sg3642
g4245
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g4113
sg3633
g4279
sg3647
g4107
sg3642
g4286
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3756
sg3633
g3752
sg3647
g3763
sg3642
g3760
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3925
sg3633
g4238
sg3647
g3932
sg3642
g4245
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3658
sg3633
g4642
sg3647
g3665
sg3642
g4649
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g4113
sg3633
g4279
sg3647
g4107
sg3642
g4286
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g4197
sg3633
g4324
sg3647
g4204
sg3642
g4331
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3959
sg3633
g3955
sg3647
g3966
sg3642
g3963
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3908
sg3633
g3987
sg3647
g3915
sg3642
g3994
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g3675
sg3633
g3799
sg3647
g3682
sg3642
g3806
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g4124
sg3633
g4210
sg3647
g4131
sg3642
g4217
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g3908
sg3633
g3904
sg3647
g3915
sg3642
g3912
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g3786
sg3633
g4936
sg3647
g3793
sg3642
g4943
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g4167
sg3633
g4990
sg3647
g4174
sg3642
g4997
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3786
sg3633
g4936
sg3647
g3793
sg3642
g4943
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g3876
sg3633
g3872
sg3647
g3883
sg3642
g3880
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g4019
sg3633
g4015
sg3647
g4026
sg3642
g4023
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g4113
sg3633
g4103
sg3647
g4107
sg3642
g4111
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g3908
sg3633
g3904
sg3647
g3915
sg3642
g3912
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g3824
sg3633
g3814
sg3647
g3818
sg3642
g3822
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g3786
sg3633
g4936
sg3647
g3793
sg3642
g4943
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g4113
sg3633
g4103
sg3647
g4107
sg3642
g4111
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3959
sg3633
g4075
sg3647
g3966
sg3642
g4082
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g3638
sg3633
g3972
sg3647
g3648
sg3642
g3979
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3942
sg3633
g3938
sg3647
g3949
sg3642
g3946
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3959
sg3633
g4075
sg3647
g3966
sg3642
g4082
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3726
sg3633
g4060
sg3647
g3733
sg3642
g4067
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g4124
sg3633
g4120
sg3647
g4131
sg3642
g4128
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g4019
sg3633
g4015
sg3647
g4026
sg3642
g4023
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3638
sg3633
g3972
sg3647
g3648
sg3642
g3979
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g4113
sg3633
g4279
sg3647
g4107
sg3642
g4286
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3638
sg3633
g3972
sg3647
g3648
sg3642
g3979
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3692
sg3633
g3831
sg3647
g3699
sg3642
g3838
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3786
sg3633
g3782
sg3647
g3793
sg3642
g3790
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g3658
sg3633
g4642
sg3647
g3665
sg3642
g4649
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3908
sg3633
g3987
sg3647
g3915
sg3642
g3994
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g3876
sg3633
g3872
sg3647
g3883
sg3642
g3880
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g4124
sg3633
g4210
sg3647
g4131
sg3642
g4217
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g4019
sg3633
g4458
sg3647
g4026
sg3642
g4465
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3786
sg3633
g4936
sg3647
g3793
sg3642
g4943
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g3824
sg3633
g3814
sg3647
g3818
sg3642
g3822
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g4124
sg3633
g4120
sg3647
g4131
sg3642
g4128
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g3756
sg3633
g4750
sg3647
g3763
sg3642
g4757
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g4298
sg3633
g4657
sg3647
g4305
sg3642
g4664
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g4167
sg3633
g4990
sg3647
g4174
sg3642
g4997
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g3959
sg3633
g3955
sg3647
g3966
sg3642
g3963
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g3824
sg3633
g3889
sg3647
g3818
sg3642
g3896
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3959
sg3633
g3955
sg3647
g3966
sg3642
g3963
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3709
sg3633
g4817
sg3647
g3716
sg3642
g4824
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g3908
sg3633
g3904
sg3647
g3915
sg3642
g3912
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g3942
sg3633
g3938
sg3647
g3949
sg3642
g3946
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g4019
sg3633
g4458
sg3647
g4026
sg3642
g4465
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g3756
sg3633
g4750
sg3647
g3763
sg3642
g4757
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g3675
sg3633
g3799
sg3647
g3682
sg3642
g3806
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g4167
sg3633
g4990
sg3647
g4174
sg3642
g4997
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g4197
sg3633
g4193
sg3647
g4204
sg3642
g4201
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g4019
sg3633
g4015
sg3647
g4026
sg3642
g4023
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I82305360
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'\x08\x0e\x0b\x1f0\x0e\x0b\x1fPL\n\x1f`A\x0b\x1f\x90K\n\x1f`A\x0b\x1fX\x0e\x0b\x1f`A\x0b\x1f\x00Q\x0b\x1f\xe0Q\x0b\x1f\x08\x0e\x0b\x1f\xc0K\n\x1f\xf0K\n\x1f8Q\x0b\x1f\x18R\x0b\x1f\x08\x0e\x0b\x1f\xa0A\x0b\x1f\xc0K\n\x1f\x80A\x0b\x1f\x90K\n\x1f\xc0A\x0b\x1f\xc0K\n\x1f\x80\x0e\x0b\x1f\xa8\x0e\x0b\x1f\xd0\x0e\x0b\x1f8Q\x0b\x1f\x80\x0e\x0b\x1fH`\x0b\x1f\x80\x0e\x0b\x1f\x18R\x0b\x1f L\n\x1f\xd0\x0e\x0b\x1f\x80A\x0b\x1f\xf8\x0e\x0b\x1f \x0f\x0b\x1f\x80A\x0b\x1f\xc0\x0f\x0b\x1f\xf8\x0e\x0b\x1f \x0f\x0b\x1f\x90K\n\x1f`A\x0b\x1f\x90K\n\x1fpQ\x0b\x1f\x80\x0e\x0b\x1f\xc0K\n\x1f\xd0\x0e\x0b\x1f L\n\x1f`A\x0b\x1f\x80\x0e\x0b\x1f\x90K\n\x1f\x00Q\x0b\x1fH`\x0b\x1f`A\x0b\x1f\x90K\n\x1fX\x0e\x0b\x1f`A\x0b\x1f\xa0A\x0b\x1f8Q\x0b\x1f\xc0K\n\x1f\xf8\x0e\x0b\x1f L\n\x1f\x10M\n\x1f \x0f\x0b\x1f\xf0K\n\x1fPR\x0b\x1f\xa0A\x0b\x1f\x08\x0e\x0b\x1f\xe0A\x0b\x1f\x80\x0e\x0b\x1f\x80A\x0b\x1f\xc0A\x0b\x1f\xa8\x0e\x0b\x1fpQ\x0b\x1f\xf8\x0e\x0b\x1f\xd0\x0e\x0b\x1f\x00Q\x0b\x1f L\n\x1f8Q\x0b\x1f\xf0K\n\x1f \x0f\x0b\x1f\xf8\x0e\x0b\x1f\x90K\n\x1f\xa0A\x0b\x1fX\x0e\x0b\x1f\xc0\x0f\x0b\x1f\x00Q\x0b\x1f\x80L\n\x1f\x80\x0e\x0b\x1f\x90K\n\x1fpQ\x0b\x1f\xc0A\x0b\x1f\xe0Q\x0b\x1f\xc0A\x0b\x1f\xd0\x0e\x0b\x1f\xa0A\x0b\x1fH`\x0b\x1fX\x0e\x0b\x1f\xa0A\x0b\x1f\x00Q\x0b\x1f\xe0A\x0b\x1f0\x0e\x0b\x1f\xa8Q\x0b\x1fH\x0f\x0b\x1f8Q\x0b\x1f L\n\x1f\xb0L\n\x1fH\x0f\x0b\x1f\xc0A\x0b\x1f\xc0K\n\x1f\xa8\x0e\x0b\x1fH\x0f\x0b\x1f\x98`\x0b\x1fPR\x0b\x1fX\x0e\x0b\x1f\xa8\x0e\x0b\x1f8Q\x0b\x1fPR\x0b\x1f\x80\x0e\x0b\x1f@M\n\x1f\xf0K\n\x1f`A\x0b\x1f@M\n\x1f\xa8\x0e\x0b\x1f\x00Q\x0b\x1fX\x0e\x0b\x1f\xf0K\n\x1fH\x0f\x0b\x1fpQ\x0b\x1f\xd0\x0e\x0b\x1f\x98`\x0b\x1f\x00Q\x0b\x1f\xf0K\n\x1f0\x0e\x0b\x1f\xc0A\x0b\x1fX\x0e\x0b\x1fpM\n\x1f L\n\x1fX\x0e\x0b\x1f\xc0K\n\x1f0\x0e\x0b\x1f\xb0L\n\x1fH\x0f\x0b\x1f0\x0e\x0b\x1f\x08\x0e\x0b\x1f \x0f\x0b\x1f\xa0A\x0b\x1f\xd0\x0e\x0b\x1f\xc0K\n\x1f L\n\x1f\x80A\x0b\x1f\x80\x0e\x0b\x1f\x00Q\x0b\x1f\x08\x0e\x0b\x1f\xa0A\x0b\x1f\xa8\x0e\x0b\x1f\xc0K\n\x1f\xa0M\n\x1f\x00B\x0b\x1f`A\x0b\x1f0\x0e\x0b\x1f\x98\x0f\x0b\x1f\xa0M\n\x1f\x08\x0e\x0b\x1fpQ\x0b\x1f\xf0K\n\x1fpQ\x0b\x1f\xf8\x0e\x0b\x1f \x0f\x0b\x1f\xf0K\n\x1f\x80A\x0b\x1f\xd0\x0e\x0b\x1f\xc0A\x0b\x1f\xf8\x0e\x0b\x1f\x90K\n\x1f\xa0A\x0b\x1f\x80A\x0b\x1f\x08\x0e\x0b\x1f\xd0\x0e\x0b\x1f L\n\x1f\xa8\x0e\x0b\x1f\xe0L\n\x1f\xa0A\x0b\x1f\xf0K\n\x1fH\x0f\x0b\x1f\xf8\x0e\x0b\x1f8Q\x0b\x1f\x08\x0e\x0b\x1f\xd0\x0e\x0b\x1f\x00Q\x0b\x1fpQ\x0b\x1f\xf8\x0e\x0b\x1f \x0f\x0b\x1f8Q\x0b\x1fH\x0f\x0b\x1f0\x0e\x0b\x1fpQ\x0b\x1f\xc0A\x0b\x1f0\x0e\x0b\x1f \x0f\x0b\x1f\x80A\x0b\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S' O\x80\r\xa0B\x0b\x1f@C\x0b\x1f`C\x0b\x1f\xe0C\x0b\x1f B\x0b\x1f D\x0b\x1f\x80D\x0b\x1f@D\x0b\x1f\x00D\x0b\x1f\xa0D\x0b\x1f`D\x0b\x1f\xe0D\x0b\x1f\xc0D\x0b\x1f E\x0b\x1f\x00E\x0b\x1f\xe0B\x0b\x1f\x80E\x0b\x1f`E\x0b\x1f\xc0E\x0b\x1f\xe0E\x0b\x1f\x00F\x0b\x1f@B\x0b\x1f\x80C\x0b\x1f F\x0b\x1f\x80F\x0b\x1f`F\x0b\x1f\xc0F\x0b\x1f\xe0F\x0b\x1f C\x0b\x1f\x80B\x0b\x1f@G\x0b\x1f G\x0b\x1f@E\x0b\x1f`G\x0b\x1f\xc0G\x0b\x1f\xa0G\x0b\x1f\x00H\x0b\x1f\xe0G\x0b\x1f\x00C\x0b\x1f H\x0b\x1f\x80H\x0b\x1f\xa0H\x0b\x1f\x00G\x0b\x1f\xa0C\x0b\x1f\x00I\x0b\x1f\xe0H\x0b\x1f@I\x0b\x1f`I\x0b\x1f\xa0F\x0b\x1f@H\x0b\x1f\xc0I\x0b\x1f\xe0I\x0b\x1f\x80G\x0b\x1f\xc0J\x0b\x1f@J\x0b\x1f\xa0E\x0b\x1f I\x0b\x1f`J\x0b\x1f\x00J\x0b\x1f\xe0J\x0b\x1f@F\x0b\x1f`H\x0b\x1f\x00K\x0b\x1f`K\x0b\x1f@K\x0b\x1f\xc0C\x0b\x1f\x80K\x0b\x1f\xa0K\x0b\x1f\xc0K\x0b\x1f L\x0b\x1f\x00L\x0b\x1f`L\x0b\x1f\xe0\xd7)\r\xc0B\x0b\x1f@L\x0b\x1f\x80I\x0b\x1f\xa0J\x0b\x1f@M\x0b\x1f\xa0M\x0b\x1f`M\x0b\x1f J\x0b\x1f\xc0H\x0b\x1f\x80L\x0b\x1f\x80J\x0b\x1f\x00M\x0b\x1f`B\x0b\x1f N\x0b\x1f@N\x0b\x1f\xc0M\x0b\x1f\x80M\x0b\x1f\xe0K\x0b\x1f\xa0N\x0b\x1f\xc0L\x0b\x1f`N\x0b\x1f\xa0O\x0b\x1f\xa0I\x0b\x1f\xe0O\x0b\x1f\xc0N\x0b\x1f\x80O\x0b\x1f`O\x0b\x1f M\x0b\x1f K\x0b\x1f\xa0L\x0b\x1f\xe0N\x0b\x1f\x00O\x0b\x1f\xe0L\x0b\x1f\x00N\x0b\x1f@O\x0b\x1f\x80\xe7\xb2\x04\xe0M\x0b\x1f\xc0G\x80\r@\xf2/\x1f \xf2/\x1f\xc0\xf0/\x1f@\xf1/\x1f\x00\xf2/\x1f\xe0\xf0/\x1f`\xf0/\x1f\xc0\xf2/\x1f@\xf0/\x1f\xc0\xf1/\x1f\xa0\xf2/\x1f\xe0\xf2/\x1f\x00\xf3/\x1f\xa0\xf1/\x1f`\xf1/\x1f \xf3/\x1f@\xf3/\x1f\xa0\xf3/\x1f\xc0\xf3/\x1f\x00\xf1/\x1f\x00\xf4/\x1f\xe0\xf3/\x1f \xf0/\x1f`\xf4/\x1f\x80\xf4/\x1f\xe0\xf1/\x1f\xa0\xf0/\x1f\xa0\xf4/\x1f 5\xe5\x1e\x80\xf3/\x1f \xf5/\x1f@\xf5/\x1f`\xf2/\x1f\x80\xf1/\x1f\xe0\xf4/\x1f`\xf6/\x1f\x80\xf0/\x1f\x00\xf6/\x1f\x80N\x0b\x1f\xa0\xf5/\x1f\x80\xf2/\x1f\xc0\xf5/\x1f \xf1/\x1f \xf4/\x1f\xa0\xf7/\x1f \xf7/\x1f@\xf6/\x1f@\xf7/\x1f\xe0\xf6/\x1f`\xf5/\x1f`\xf7/\x1f@\xf8/\x1f\x00\xf7/\x1f\xc0\xf4/\x1f\xe0\xf7/\x1f\xe0\xf5/\x1f`\xf3/\x1f \xf9/\x1f\x80\xf7/\x1f`\xf8/\x1f\x00\xf5/\x1f\x00\xf9/\x1f\xa0\xf6/\x1f\xc0\xf6/\x1f\x80\xf6/\x1f@\xfa/\x1f\x80\xf9/\x1f\x80\xfa/\x1f\xa0\xf8/\x1f\x80\xf5/\x1f \xfa/\x1f@\xf9/\x1f\xe0\xfa/\x1f \xf8/\x1f\xc0\xf7/\x1f\x80\xfb/\x1f`\xfa/\x1f\xc0\xfb/\x1f\xc0\xf8/\x1f\x80\xf8/\x1f`\xf9/\x1f\x00\xfa/\x1f`\xfc/\x1f\xa0\xfa/\x1f\xe0\xfb/\x1f\xa0\xfb/\x1f\xa0\xf9/\x1f@\xfc/\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'\x0e\xae;?X\x1e\xa2?\xdd\xe7.?\xda\xc4L?#\xd1\x0c?\x8c<"?\xf8\xa2*?j\xfd??\xaa\xfe??G\xd7]?o13?3:b?[\xff??\xdaT\xf5?\x98r7?\xa9\x0eQ?\xe3\x9dH?\x1c`&?\xd2\xdb\x9d?\x8f\x1c"?W\xaa\xaa?\x9703?\x95xw?\x7fuw?s\xb7;?\xdd\x87\xa8?W13?i`\xb5?\xcf%"?G\xd8\x1d?\x0e\xcdL?\x17`&?9\x03\xc0?f\x12Q?X\xa8{?\xea\x1db?\x08r7?\x19\x1f"?\x95D\x15?"g&?6\xa7*?l\x0b\x11?\x7f\xa6\x8a?n\xd4\x1d?bM\x15?\x02\x11\x11?\x07DD?*V\x15?t\xdd\x1d?\x9f#"?\x04V\x15?\xe4qw?\xe9\xee.?G\x0e\x11?\x90\x01Q?w\x12\x11?o\xaaj?\xc2\x81\x97?\x9f\xf7??\xe9\xebn?)\xfa??\xe5 "?\xa7pH?IU\x95?\'\xed\xae?\n\xad*?0\x81H?\xedC\x84?\x95\xa9*?\xa6#b?\xa4\x97\xd9?\xaa\xa7\x8a?\xe1Yf?\x8ff7?\xf3k\x15?A\x0b\x11?\xd5\x00@?;bf?-\xa4j?\x9b\xa7;?\xf58"?\xf6S\x15?\xf3p7?\x9e\rQ?4\x96\x19?\xa9e&?\xce\xd0;?\x8ad&?\xbcc&?\x80\xc0L?\x80\x0e\xb1?\xd2\xcbL?\n\x89Y?oe&?\xe4p7?\xd6\x9a\x99?\x15TU?\xcf#"?\x9a~&?w\x88\x88?\nw7?xw7?N\xeb\xae?\x81\xc5L?\xecdf?A\xff\x7f?\xf9\xacj?uS\x95?\xa8AD?\xf5\xef\x0e@\xf1\xe7.?\xee\xe8.?\xb3S\x95?\xb9\xfa??\xb8x\x17@\xf9\xb9;?\xd4\x1eb?\x97\x1f\x82?\xc6\xcaL?\xd2\x1bb?\xb2\x03o?\x1d\xb7;?3\x10\xb1?TDD?\xa4\xa6j?u\x0eQ?\xcd\xdd]?a\xf0\x7f?[\xff??\xbc\xc5\xac?\xec%3?\x02PU?-\x10Q?\x80\xedn?\xf9!\x82?\xeb\tQ?\xb9<D?\xf4MU?U!b?N_&?WyH?OLU?\x07\x84H?9\x85H?\xa0c7?\x04\x89H?f\x99\x19?\x92\xbc;?9\x1db?6\xa7*?n\x98*?;\xdd\x1d?\xee\xec.?\xdb.3?x\xc7L?<\x84H?I\x18Q?\x82\xaaj?\xf3\xa4*?:0s?\xfe\xda.?\xc8\xe2\xae?\xc4\x01@?l\xc2L?=\xb6;?\xa59U?\xc1\xd0L?\xc1;U? 3s?`\x0bQ?\t\x0fQ?\x92\xa7\x8a?\x87e&?\x03\x99*?\n\x88&?"\xb9;?\x8f\x97Y?-VU?\xaePU?\xd7hU?\xe0{&?\xd8w7?\xc7\xfe??n\xa6\x8a?\xdbb&?\x15\x10Q?\xa5\xff\x7f?\x9d\xa4*?"\xfb??\xe1\x13b?%\x9a\x19?y~\x19?b\xe5L?\xff\xa4j?\x8c\xe7.?X\x1ab?\x15\x0eQ?\x14u7?qI\x15?\xce\x8dY?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'p:\xdb\x04X4\xdb\x04\x08i\xe4\x04\x10d\xe4\x04Hb\xe4\x04\xd0a\xe4\x04\x88m\xe4\x04\x00k\xe4\x04\xe0o\xe4\x04\xe8g\xe4\x04\xd8n\xe4\x04Pi\xe4\x04\xb8j\xe4\x04\x10m\xe4\x04\x98i\xe4\x04\xc8l\xe4\x04`h\xe4\x04\x88a\xe4\x04\x00n\xe4\x04Po\xe4\x04ho\xe4\x04\x90k\xe4\x04 f\xe4\x04\xd8h\xe4\x04(a\xe4\x04pj\xe4\x04 o\xe4\x04\xe8a\xe4\x04\xc8i\xe4\x04\xd0m\xe4\x04(j\xe4\x04Pf\xe4\x04\xa8n\xe4\x04hl\xe4\x04\xe8m\xe4\x04\x18k\xe4\x04 l\xe4\x04\x98o\xe4\x04\x08c\xe4\x04\x08o\xe4\x04\xe0f\xe4\x04pd\xe4\x04\xb8a\xe4\x04\xf8\x00\xdc\x04h\x0f\xdc\x04H\x0e\xdc\x04\x80\x06\xdc\x04\xc8\t\xdc\x04\x90\x08\xdc\x04\x00\x02\xdc\x04\x18\x0b\xdc\x04\x90\x0b\xdc\x04\x10\x07\xdc\x040\x08\xdc\x04\x10\r\xdc\x04\x80\x03\xdc\x04\x00\x0e\xdc\x04 \x0f\xdc\x04H\x0b\xdc\x04\xa0\x07\xdc\x04\xa8\x02\xdc\x04\xb0\x0f\xdc\x04x\x05\xdc\x04h\x00\xdc\x04\x98\x0f\xdc\x04(\r\xdc\x04\xe0\x06\xdc\x04\xf0\x0e\xdc\x048\x06\xdc\x04\x80\x0c\xdc\x04\x10\x04\xdc\x04\xa0\x04\xdc\x04\xc0\x02\xdc\x04\x10\n\xdc\x04\xe8\x04\xdc\x04\xb0\t\xdc\x048\x03\xdc\x04\xd8\x05\xdc\x04`\x02\xdc\x04\xc0\x08\xdc\x04\xd8b\xe4\x04\xd8k\xe4\x04\xf0n\xe4\x04\xb0c\xe4\x04xk\xe4\x04xe\xe4\x04\x10g\xe4\x04\xd0d\xe4\x04\xa0m\xe4\x04\xc8`\xe4\x04\xf8i\xe4\x04@m\xe4\x04\xa8k\xe4\x04hc\xe4\x040n\xe4\x04Xj\xe4\x04\xc0e\xe4\x04`k\xe4\x04\xf0k\xe4\x04Xm\xe4\x04h`\xe4\x04(m\xe4\x04\x98l\xe4\x048i\xe4\x04hi\xe4\x04\xc0n\xe4\x04@g\xe4\x04\xb0o\xe4\x04\xe8j\xe4\x04Pl\xe4\x04\x00h\xe4\x048o\xe4\x04\x08f\xe4\x048f\xe4\x048`\xe4\x04\x98`\xe4\x04 i\xe4\x04\x80l\xe4\x04Hh\xe4\x04\x18n\xe4\x04`n\xe4\x04Hk\xe4\x04\xc0k\xe4\x04\x80o\xe4\x04\xd8e\xe4\x04\xe0c\xe4\x04Xd\xe4\x04\xa0a\xe4\x04\x98c\xe4\x04xb\xe4\x04\xe0`\xe4\x040k\xe4\x04\xd0j\xe4\x04`e\xe4\x04\xc8f\xe4\x04\xb0f\xe4\x040h\xe4\x04\xa8b\xe4\x04\xa0g\xe4\x04Pc\xe4\x04\x80i\xe4\x04(d\xe4\x04\x88j\xe4\x04\x80c\xe4\x04\x18h\xe4\x040e\xe4\x04\x98f\xe4\x04\xe8d\xe4\x04\xe0l\xe4\x04\x88g\xe4\x04\x08l\xe4\x04\x88d\xe4\x048l\xe4\x04hf\xe4\x04 `\xe4\x04\xb0`\xe4\x04Xg\xe4\x04\x90b\xe4\x04\xe0i\xe4\x04\x00b\xe4\x04\xa0d\xe4\x04\xf0h\xe4\x04\xb0i\xe4\x04\x18e\xe4\x04\xf8c\xe4\x04\xd0g\xe4\x04\xf8`\xe4\x04\x80f\xe4\x04@j\xe4\x04\xc8c\xe4\x04\xf0b\xe4\x040b\xe4\x04Hn\xe4\x04\xa8e\xe4\x04P`\xe4\x04\xf8l\xe4\x04\x90h\xe4\x04\xc0b\xe4\x04\x10j\xe4\x04 c\xe4\x04\x10a\xe4\x04`b\xe4\x04\x18b\xe4\x04\xa0j\xe4\x04\x00e\xe4\x04\xb8m\xe4\x04@a\xe4\x04pm\xe4\x04\xf8f\xe4\x04\xb8d\xe4\x04Xa\xe4\x04@d\xe4\x04\xa8h\xe4\x04\x80`\xe4\x04\xc0h\xe4\x04He\xe4\x04\xc8o\xe4\x04\xb0l\xe4\x04\x90e\xe4\x04\x90n\xe4\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6419
sg6371
g6409
sg6385
g6413
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6477
sg6371
g6473
sg6385
g6484
sg6380
g6481
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6430
sg6371
g6490
sg6385
g6437
sg6380
g6497
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6419
sg6371
g6409
sg6385
g6413
sg6380
g6417
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6528
sg6371
g6518
sg6385
g6522
sg6380
g6526
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6552
sg6371
g6548
sg6385
g6559
sg6380
g6556
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6569
sg6371
g6565
sg6385
g6576
sg6380
g6573
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6528
sg6371
g6582
sg6385
g6522
sg6380
g6589
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6607
sg6371
g6597
sg6385
g6601
sg6380
g6605
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6376
sg6371
g6614
sg6385
g6386
sg6380
g6621
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6633
sg6371
g6629
sg6385
g6640
sg6380
g6637
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6552
sg6371
g6646
sg6385
g6559
sg6380
g6653
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6607
sg6371
g6661
sg6385
g6601
sg6380
g6668
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6447
sg6371
g6676
sg6385
g6454
sg6380
g6683
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6695
sg6371
g6691
sg6385
g6702
sg6380
g6699
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6552
sg6371
g6548
sg6385
g6559
sg6380
g6556
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6725
sg6371
g6721
sg6385
g6732
sg6380
g6729
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6742
sg6371
g6738
sg6385
g6749
sg6380
g6746
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6759
sg6371
g6755
sg6385
g6766
sg6380
g6763
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6528
sg6371
g6582
sg6385
g6522
sg6380
g6589
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6725
sg6371
g6785
sg6385
g6732
sg6380
g6792
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6742
sg6371
g6800
sg6385
g6749
sg6380
g6807
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6725
sg6371
g6785
sg6385
g6732
sg6380
g6792
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6607
sg6371
g6597
sg6385
g6601
sg6380
g6605
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6845
sg6371
g6841
sg6385
g6852
sg6380
g6849
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6759
sg6371
g6858
sg6385
g6766
sg6380
g6865
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6607
sg6371
g6661
sg6385
g6601
sg6380
g6668
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6890
sg6371
g6886
sg6385
g6897
sg6380
g6894
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6907
sg6371
g6903
sg6385
g6914
sg6380
g6911
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6607
sg6371
g6597
sg6385
g6601
sg6380
g6605
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6890
sg6371
g6886
sg6385
g6897
sg6380
g6894
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6907
sg6371
g6959
sg6385
g6914
sg6380
g6966
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6447
sg6371
g6676
sg6385
g6454
sg6380
g6683
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g7017
sg6371
g7013
sg6385
g7024
sg6380
g7021
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6725
sg6371
g6785
sg6385
g6732
sg6380
g6792
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6552
sg6371
g6646
sg6385
g6559
sg6380
g6653
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6759
sg6371
g6858
sg6385
g6766
sg6380
g6865
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6845
sg6371
g7069
sg6385
g6852
sg6380
g7076
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6430
sg6371
g6490
sg6385
g6437
sg6380
g6497
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6725
sg6371
g6785
sg6385
g6732
sg6380
g6792
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6419
sg6371
g7123
sg6385
g6413
sg6380
g7130
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6742
sg6371
g6738
sg6385
g6749
sg6380
g6746
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6447
sg6371
g6676
sg6385
g6454
sg6380
g6683
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6477
sg6371
g6473
sg6385
g6484
sg6380
g6481
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6430
sg6371
g6490
sg6385
g6437
sg6380
g6497
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6633
sg6371
g7203
sg6385
g6640
sg6380
g7210
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6528
sg6371
g6518
sg6385
g6522
sg6380
g6526
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6552
sg6371
g6548
sg6385
g6559
sg6380
g6556
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6890
sg6371
g7244
sg6385
g6897
sg6380
g7251
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6845
sg6371
g6841
sg6385
g6852
sg6380
g6849
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6569
sg6371
g6565
sg6385
g6576
sg6380
g6573
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6907
sg6371
g6903
sg6385
g6914
sg6380
g6911
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6569
sg6371
g7298
sg6385
g6576
sg6380
g7305
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g7323
sg6371
g7313
sg6385
g7317
sg6380
g7321
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6633
sg6371
g7203
sg6385
g6640
sg6380
g7210
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6376
sg6371
g6614
sg6385
g6386
sg6380
g6621
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6695
sg6371
g7356
sg6385
g6702
sg6380
g7363
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6725
sg6371
g6721
sg6385
g6732
sg6380
g6729
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6607
sg6371
g6661
sg6385
g6601
sg6380
g6668
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6695
sg6371
g6691
sg6385
g6702
sg6380
g6699
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6742
sg6371
g6800
sg6385
g6749
sg6380
g6807
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g7017
sg6371
g7423
sg6385
g7024
sg6380
g7430
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6890
sg6371
g6886
sg6385
g6897
sg6380
g6894
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6759
sg6371
g6858
sg6385
g6766
sg6380
g6865
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6419
sg6371
g7123
sg6385
g6413
sg6380
g7130
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6845
sg6371
g7069
sg6385
g6852
sg6380
g7076
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6528
sg6371
g6582
sg6385
g6522
sg6380
g6589
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6569
sg6371
g7298
sg6385
g6576
sg6380
g7305
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6907
sg6371
g6959
sg6385
g6914
sg6380
g6966
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6890
sg6371
g7244
sg6385
g6897
sg6380
g7251
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6633
sg6371
g6629
sg6385
g6640
sg6380
g6637
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6477
sg6371
g6473
sg6385
g6484
sg6380
g6481
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6419
sg6371
g6409
sg6385
g6413
sg6380
g6417
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6725
sg6371
g6721
sg6385
g6732
sg6380
g6729
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6447
sg6371
g6676
sg6385
g6454
sg6380
g6683
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g7017
sg6371
g7423
sg6385
g7024
sg6380
g7430
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6695
sg6371
g7356
sg6385
g6702
sg6380
g7363
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6528
sg6371
g6518
sg6385
g6522
sg6380
g6526
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6695
sg6371
g7356
sg6385
g6702
sg6380
g7363
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6759
sg6371
g6755
sg6385
g6766
sg6380
g6763
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6633
sg6371
g7203
sg6385
g6640
sg6380
g7210
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6742
sg6371
g6738
sg6385
g6749
sg6380
g6746
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6477
sg6371
g7737
sg6385
g6484
sg6380
g7744
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6633
sg6371
g6629
sg6385
g6640
sg6380
g6637
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6419
sg6371
g7123
sg6385
g6413
sg6380
g7130
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6695
sg6371
g7356
sg6385
g6702
sg6380
g7363
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g7323
sg6371
g7817
sg6385
g7317
sg6380
g7824
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6528
sg6371
g6518
sg6385
g6522
sg6380
g6526
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6845
sg6371
g7069
sg6385
g6852
sg6380
g7076
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6477
sg6371
g7737
sg6385
g6484
sg6380
g7744
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g7323
sg6371
g7817
sg6385
g7317
sg6380
g7824
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6695
sg6371
g7356
sg6385
g6702
sg6380
g7363
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6552
sg6371
g6646
sg6385
g6559
sg6380
g6653
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6742
sg6371
g6738
sg6385
g6749
sg6380
g6746
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g7323
sg6371
g7313
sg6385
g7317
sg6380
g7321
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g7017
sg6371
g7423
sg6385
g7024
sg6380
g7430
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g7323
sg6371
g7817
sg6385
g7317
sg6380
g7824
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6477
sg6371
g6473
sg6385
g6484
sg6380
g6481
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6742
sg6371
g6800
sg6385
g6749
sg6380
g6807
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6528
sg6371
g6518
sg6385
g6522
sg6380
g6526
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g7323
sg6371
g7817
sg6385
g7317
sg6380
g7824
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6725
sg6371
g6721
sg6385
g6732
sg6380
g6729
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6845
sg6371
g7069
sg6385
g6852
sg6380
g7076
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6569
sg6371
g7298
sg6385
g6576
sg6380
g7305
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6430
sg6371
g6490
sg6385
g6437
sg6380
g6497
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6845
sg6371
g6841
sg6385
g6852
sg6380
g6849
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6742
sg6371
g6800
sg6385
g6749
sg6380
g6807
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6419
sg6371
g6409
sg6385
g6413
sg6380
g6417
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6477
sg6371
g7737
sg6385
g6484
sg6380
g7744
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6569
sg6371
g6565
sg6385
g6576
sg6380
g6573
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g7323
sg6371
g7313
sg6385
g7317
sg6380
g7321
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g7017
sg6371
g7423
sg6385
g7024
sg6380
g7430
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6759
sg6371
g6755
sg6385
g6766
sg6380
g6763
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g7017
sg6371
g7013
sg6385
g7024
sg6380
g7021
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6419
sg6371
g6409
sg6385
g6413
sg6380
g6417
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6569
sg6371
g6565
sg6385
g6576
sg6380
g6573
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6396
sg6371
g8209
sg6385
g6403
sg6380
g8216
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6695
sg6371
g6691
sg6385
g6702
sg6380
g6699
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6477
sg6371
g6473
sg6385
g6484
sg6380
g6481
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6890
sg6371
g6886
sg6385
g6897
sg6380
g6894
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6845
sg6371
g7069
sg6385
g6852
sg6380
g7076
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6477
sg6371
g7737
sg6385
g6484
sg6380
g7744
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6552
sg6371
g6646
sg6385
g6559
sg6380
g6653
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6396
sg6371
g8209
sg6385
g6403
sg6380
g8216
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6477
sg6371
g7737
sg6385
g6484
sg6380
g7744
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g7323
sg6371
g7817
sg6385
g7317
sg6380
g7824
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6907
sg6371
g6959
sg6385
g6914
sg6380
g6966
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6633
sg6371
g6629
sg6385
g6640
sg6380
g6637
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6759
sg6371
g6858
sg6385
g6766
sg6380
g6865
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6552
sg6371
g6548
sg6385
g6559
sg6380
g6556
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6845
sg6371
g6841
sg6385
g6852
sg6380
g6849
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6607
sg6371
g6661
sg6385
g6601
sg6380
g6668
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6725
sg6371
g6785
sg6385
g6732
sg6380
g6792
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6419
sg6371
g7123
sg6385
g6413
sg6380
g7130
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6633
sg6371
g6629
sg6385
g6640
sg6380
g6637
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6742
sg6371
g6800
sg6385
g6749
sg6380
g6807
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6552
sg6371
g6646
sg6385
g6559
sg6380
g6653
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6907
sg6371
g6903
sg6385
g6914
sg6380
g6911
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6725
sg6371
g6721
sg6385
g6732
sg6380
g6729
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6430
sg6371
g6490
sg6385
g6437
sg6380
g6497
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6396
sg6371
g8209
sg6385
g6403
sg6380
g8216
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6376
sg6371
g6614
sg6385
g6386
sg6380
g6621
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6907
sg6371
g6959
sg6385
g6914
sg6380
g6966
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g7017
sg6371
g7423
sg6385
g7024
sg6380
g7430
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6569
sg6371
g6565
sg6385
g6576
sg6380
g6573
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g7017
sg6371
g7013
sg6385
g7024
sg6380
g7021
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6890
sg6371
g6886
sg6385
g6897
sg6380
g6894
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6907
sg6371
g6959
sg6385
g6914
sg6380
g6966
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6569
sg6371
g7298
sg6385
g6576
sg6380
g7305
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6607
sg6371
g6661
sg6385
g6601
sg6380
g6668
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6759
sg6371
g6858
sg6385
g6766
sg6380
g6865
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6695
sg6371
g6691
sg6385
g6702
sg6380
g6699
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6890
sg6371
g7244
sg6385
g6897
sg6380
g7251
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6447
sg6371
g6676
sg6385
g6454
sg6380
g6683
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6633
sg6371
g7203
sg6385
g6640
sg6380
g7210
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6607
sg6371
g6597
sg6385
g6601
sg6380
g6605
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6376
sg6371
g6614
sg6385
g6386
sg6380
g6621
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6759
sg6371
g6755
sg6385
g6766
sg6380
g6763
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6845
sg6371
g6841
sg6385
g6852
sg6380
g6849
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6742
sg6371
g6738
sg6385
g6749
sg6380
g6746
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6552
sg6371
g6548
sg6385
g6559
sg6380
g6556
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6633
sg6371
g7203
sg6385
g6640
sg6380
g7210
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6569
sg6371
g7298
sg6385
g6576
sg6380
g7305
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g7323
sg6371
g7313
sg6385
g7317
sg6380
g7321
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6890
sg6371
g7244
sg6385
g6897
sg6380
g7251
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6528
sg6371
g6582
sg6385
g6522
sg6380
g6589
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6376
sg6371
g6614
sg6385
g6386
sg6380
g6621
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6759
sg6371
g6755
sg6385
g6766
sg6380
g6763
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6419
sg6371
g7123
sg6385
g6413
sg6380
g7130
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g7017
sg6371
g7013
sg6385
g7024
sg6380
g7021
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6890
sg6371
g7244
sg6385
g6897
sg6380
g7251
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6907
sg6371
g6903
sg6385
g6914
sg6380
g6911
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6528
sg6371
g6582
sg6385
g6522
sg6380
g6589
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g7323
sg6371
g7313
sg6385
g7317
sg6380
g7321
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6396
sg6371
g8209
sg6385
g6403
sg6380
g8216
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g7017
sg6371
g7013
sg6385
g7024
sg6380
g7021
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6695
sg6371
g6691
sg6385
g6702
sg6380
g6699
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6396
sg6371
g8209
sg6385
g6403
sg6380
g8216
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6907
sg6371
g6903
sg6385
g6914
sg6380
g6911
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6607
sg6371
g6597
sg6385
g6601
sg6380
g6605
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.